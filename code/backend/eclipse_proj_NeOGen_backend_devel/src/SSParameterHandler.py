#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< RELEASE INFO
from version import version
__project__ = version.__project__
__author__ = version.__author__
__version__ = version.__version__
__date__ = version.__date__
__copyright__ = version.__copyright__
__license__ = version.__license__
#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< PACKAGE IMPORTS
# DEBUG Imports
from logging import getLogger as logging__getLogger
from handler_Debug import Timer2
from handler_Debug import Debug_Location as dcb_Debug_Location
#
from decimal import *
import sys
#from pprint import pprint
#Required to produce a float result from integer division
from collections import OrderedDict
#from copy import deepcopy
from logging import getLogger as logging__getLogger
from collections import Counter as collections__Counter
from psutil import Process as psutil__Process
from multiprocessing import cpu_count as multiprocessing__cpu_count
from os import getpid as os__getpid
from os import path as os__path
#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< Import simuPOP modules
# PROD simuPOP
#from simuPOP import moduleInfo
#from simuPOP
import simuPOP as sim
#------------------< Import DCB_General modules
#from EnumeratorHandler import EnumeratorHandler
from FileHandler import FileHandler
from OutputHandler import OutputHandler
from handler_Debug import Timer2
from AnalysisHandler import AnalysisHandler
#------------------< Import SharkSim modules
from globals_SharkSim import globalsSS
from SSInputHandler import SSInputHandler
from SSAnalysisHandler import SSAnalysisHandler
from AutoVivificationHandler import AutoVivificationHandler
#from object_SSAgeNe_LifeTable import object_SSAgeNe_LifeTable
#from object_SSAgeNe_DemographicTable import object_SSAgeNe_DemographicTable
#from object_SSAgeNe import object_SSAgeNe
from SSOutputHandler import SSOutputHandler
from SSErrorHandler import SSErrorOperation
#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< CLASS DEFINITION
class SSParameterHandler(object) :
    """Handle FileOperation objects"""
    def __enter__(self):

        def __init__(self):
            
            pass

        class SSParameters(object):

            def __init__(self):


                self.method_Class_Variable_Specification()

             
                ''' Get all the loggers required for monitoring this object '''
                self.method_Initialise_Monitor_Loggers()

                return None         

            def method_Initialise_Monitor_Loggers(self):
                
                ''' 
                ~~~~~~~~~~~~~~~~~~~~~~~~~~
                Get all the loggers required for monitoring this object
                ~~~~~~~~~~~~~~~~~~~~~~~~~~
                '''
                ''' Get Run Display Logger '''
                self.obj_Log_Run_Display = logging__getLogger(globalsSS.Logger_Run_Display.static_Logger_Name__Run_Display)
                           
                ''' Get Default Logger '''
                self.obj_Log_Default_Display = logging__getLogger(globalsSS.Logger_Default_Display.static_Logger_Name__Default_Display)
        
                ''' Get Debug Logger '''
                self.obj_Log_Debug_Display = logging__getLogger(globalsSS.Logger_Debug_Display.static_Logger_Name__Debug_Display)
        
                ''' Get Debug Timer '''
                self.obj_Log_Debug_Timing = None
                if globalsSS.Logger_Debug_Timing.bool_Debug_Timing:
                    self.obj_Log_Debug_Timing = logging__getLogger(globalsSS.Logger_Debug_Timing.static_Logger_Name__Debug_Timing)
                pass

                ''' Get Debug AgeNe Logger '''
                self.obj_Log_Debug_AgeNe = None
                if globalsSS.Logger_Debug_AgeNe.bool_Debug_AgeNe:
                    self.obj_Log_Debug_AgeNe = logging__getLogger(globalsSS.Logger_Debug_AgeNe.static_Logger_Name__Debug_AgeNe)
                pass
                                        
                return True

            def method_Class_Variable_Specification(self):
                
                self.bool_App_Started_From_Command_Line = True
                self.str_App_Run_Path = ''
                self.str_App_Run_File = ''
                self.str_App_Arg_Output_Base_Path = ''
                self.str_App_Arg_Config_Path_And_File__Original = ''
                self.list_int_App_Arg_Run_Processing_Steps = []
                
                self.str_App_Arg_Config_Path_And_File__Local = ''

                self.int_Sampling_Strategy_Sample_Proportions_Source = 0
                
                self.str_Batch_Scenario_UID_Folder__Previous_Run = ''
                self.str_Batch_Scenario_UID_Path__Previous_Run = ''               
                self.str_Config_Batch_Scenario_Path_And_File__Local = ''
                self.str_Config_Batch_Settings_Path_And_File__Local = ''
                self.str_Config_Sampling_Strategy_Path_And_File__Local = ''
                
                self.str_INI_UID_DateTime_Stamp = ''
                
                self.obj_Config_Batch_Scenario =  None  
                self.obj_Config_Batch_Settings = None   
                self.obj_Config_Sampling_Strategy = None   
                            
                self.str_PROJECTS_Config_File_Path_And_Name = ''
                self.str_PROJECT_Config_File_Path_And_Name = ''
                self.str_SCENARIOS_Config_File_Path_And_Name = ''
                self.str_BATCH_SETTINGS_Config_File_Path_And_Name = ''
                self.str_BATCH_SCENARIO_Config_File_Path_And_Name = ''
                self.str_SAMPLING_STRATEGY_Config_File_Path_And_Name = ''
                
                self.str_Project_Name = ''
                self.str_Project_Code_Long = ''
                self.str_Project_Code_Short = ''
               
                self.str_Scenario_Name = ''
                self.str_Scenario_Code_Long = ''
                self.str_Scenario_Code_Short = ''
                
                self.str_Species_Name = ''
                self.str_Species_Code_Long = ''
                self.str_Species_Code_Short = ''
                

                self.bool_Genepop_Export_PF_Embryo_VSP = False
                self.float_SubSample_Percent_Of_PF_Embryo_VSP = 0
                self.bool_Genepop_Export_PF_Mature_VSP = False
                self.float_SubSample_Percent_Of_PF_Mature_VSP = 0
                self.bool_Genepop_Export_PF_Full_SP = False
                self.float_SubSample_Percent_Of_PF_Full_SP = 0
                                 
                self.str_Species_Code = ''
                self.str_Scenario_Code = ''
                self.str_Scenario_Code_A = ''
                self.str_Scenario_Code_B = '' 
                self.str_Scenario_Code_C = ''
                self.str_Scenario_Code_D = ''
           
                self.list_Scenario_Code_B = []
                self.list_Pop_Sizes = []
                self.list_Scenario_Code_CD = []

                self.Arg_Pop_Size = 0

                self.Arg_list_Offspring_Production_Parms = []
                self.Arg_Num_Offspring_Per_Mate = 0
                self.Arg_Num_Offspring_Dist_Probability = 0
                self.Arg_Num_Offspring_Min_Per_Mate = 0
                self.Arg_Num_Offspring_Max_Per_Mate = 0
                self.Arg_Num_Offspring_Mean_Per_Mate = 0
                self.Arg_Num_Offspring_Dist_Samples = 0
                self.Arg_int_Offspring_Sex_Scheme = 0
                self.Arg_int_Post_Sim_Pop_Sampling_Starts_When_Mating_Count_Is = 0

                #self.Arg_int_Alleles_Per_Locus = 0
                self.Arg_bool_Obtain_Allele_Freqs_From_File = False

                
                self.int_Allele_Number_Per_Locus_Distribution = 0
                self.tup_Allele_Number_Per_Locus_Distribution = 0
                
                self.int_Sampling_Strategy_1_0__Sample_Replicates = 0
                self.int_Sampling_Strategy_1_0__Sample_Max = 0
                self.int_Sampling_Strategy_1_0__Sample_Increment = 0
                self.int_Sampling_Strategy_1_0__Loci_Max = 0
                self.int_Sampling_Strategy_1_0__Loci_Increment = 0
                #self.list_Sampling_Strategy_1_0__Stats_Categories = []
                self.dict_Sampling_Strategy_1_0__Stats_Category_Codes_By_Key_Category = OrderedDict()
                self.dict_Sampling_Strategy_1_0__Stats_Category_By_Key_Category_Code = OrderedDict()
                self.dict_Ne2_Sampling_Experiment_Category_By_Key_Category_Code = OrderedDict()
                self.dict_Sampling_Strategy_1_0__SubSample_Replicates_By_Category = OrderedDict()
                self.str_Sampling_Strategy_1_0__LDNe_PCrits_To_Get = ''
                #self.list_Sampling_Strategy_1_0__Loci_To_Remove = []
                self.dict_Sampling_Strategy_1_0__Age_Cohort_Sample_Proportions_Of_Total_Sample = OrderedDict()  
                self.dict_Sampling_Strategy_1_0__Age_Cohort_Sample_Numbers = OrderedDict()  
                self.dict_Sampling_Strategy_1_0__Loci_To_Sample_By_Category = OrderedDict()  

                self.str_Sampling_EXP_2_2__LDNe_PCrits_To_Get = ''
                self.float_Sampling_EXP_2_2__LDNe_FULL_Estimates__Percentage_Of_Loci_To_Keep = 0.0
                
#                 self.dict_Ne2_Sampling_Experiment_Label_By_Key_Category = OrderedDict()
                self.dict_Ne2_Sampling_Experiment_Category_By_Key_Category_Code = OrderedDict()
                                                        
                self.boolSingleRun = False
                self.boolAnalysis = True

                self.boolInitGenotypeByVSP = False
                self.boolInitGenotypeByLoci = False
                        
                self.int_Sim_Total_MatingsToSimulate = 0
                self.int_Total_MatingsToSimulatePerReplicate = 0
                
                self.intSubPop = 0
    
                self.intBatches = 0
                self.intCurrentBatch = 0
                self.intReplicates = 0
                self.intCurrentReplicate = 0
    
                self.intTotalYearsToSimulate = 0
                self.intTotalMonthsToSimulate = 0
                self.intGrandTotalMonthsToSimulate = 0
                self.intOffspringPotentialFertilisationsToSimulate = 0
                
                self.strFileNameProgramPrefix = ''
    
                # Set all SharkSim object properties
                self.popnSize = 0
                self.intOffspringSexScheme = 0
                self.floatSexRatioOfMales = 0
                self.intMatingSchemeType = 0
                self.listMatingParentSelectionScheme = []
                self.maxAge = 0
                self.minMatingAge = 0
                self.maxMatingAge = 0
                self.meanvarnumOffspring = 0
                #gen = 0
                self.intReplicateBurnInLengthInYears = 0
                self.intReplicateBurnInLengthInMonths = 0
                #intCurrentBurnInFertilisation = 0
                
                self.listOffspringNumberParameters = []
                self.nLoci = 0.000000000
                self.intAlleleFrequencyScheme = 0
                self.odictAlleleFreqsAtSimInitialization = OrderedDict()
                self.odictAlleleFreqsAtPopInitialization = OrderedDict()
                self.listAlleleFreqs = []
                self.nAllelesPerLoci = 0
                self.intPopulationInitialAges = 0
    
                self.intPredictedBreedingPopulationSize = 0
    
                self.strFilenameEmbeddedFields = ''
                self.outfilePath = ''
                self.infilePath = ''
                    
                self.outputFileNameTimingSummaryLogAllBatches = ''                    
                self.outputFileNameSummaryLogAllBatches = ''
                self.outputFileNameSummaryLogAllReps = ''
                self.outputFileNameSummaryLogPerReplicate = ''
                self.outputFileNameIndividualLogAllBatches = ''
                self.outputFileNameIndividualLogAllReps = ''
                self.outputFileNameIndividualLogPerReplicate = ''
                self.outputFileNameIndividualLogByGen = ''
                self.outputFileNameIndividualPedigreeLogInitialGen = ''
                self.outputFileNameIndividualPedigreeLogPostZeroGens = ''
                self.outputFileNameIndividualMatingPedigreeLogPostZeroGens = ''
                self.outputFileNameIndividualPedigreeOutputInitialGen = ''
                self.outputFileNameIndividualPedigreeOutputAllGens = ''
                self.outputFileNameIndividualLogNEStatisticsRepBatches = ''
                self.outputFileNamePopOutputAllGens = ''
                
                self.outputFileName_Sim_Level_SLF = ''
                self.outputFileName_Batch_Level_BLF = ''
                self.outputFileName_Replicate_Level_RLF_End_Of_Replicate = ''
                self.outputFileName_Replicate_Level_RLF_Post_Fertilization = ''
                
                self.writer_Output_Excel_Level_ELF = None
                
                self.inputFileNameInitialPopulation = ''
                
                #Ne Reporting
                self.boolReportDemographicNe = False
                self.boolReportLDNe = False
                self.boolReportSimAgeNe = False
                self.listLociToReportNE = []                
                self.boolReportTemporalFS_P1_Ne = False
                self.boolReportTemporalFS_P2_Ne = False
                
                
                self.listLociNames = []
                self.listOutputDestinations = []
                
                #Specify mating scheme to be used in simulation
                self.objMatingScheme = None
                self.simupopPolygamousSex = None
                self.intPolygamousMateNumber = 1
    
                #Specifiy Logging output
                self.listOutputDestinations_SimSummaryInfo=[]
                self.listOutputDestinations_PopulationLifeStageTotals=[]
                self.listOutputDestinations_PopulationAgeClassTotals=[]
                self.listOutputDestinations_PopulationOffspringTotalsByParent= []
                self.listOutputDestinations_PopulationAlleleStatistics = []
                self.listOutputDestinations_PopulationDump=[]
                self.listOutputDestinations_PopulationNEStatistics = []
                
                
                self.listOutputDestinations_Sim_Level_SLF = []
                self.listOutputDestinations_Batch_Level_BLF = []
                self.listOutputDestinations_Replicate_Level_RLF = []
                
                
                #All gens will be accumulated to this Individual Log Full file
                self.listOutputDestinations_ILF_PopulationIndividualsDump=[] 
                self.listOutputVSPs_ILF_PopulationIndividualsDump=[] #Specify VSPs to output
                self.listOutputGenerations_ILF_PopulationIndividualsDump=[] #Specify gens to output
                self.listOutputReplicates_ILF_PopulationIndividualsDump=[] #Specify replicates to output
                self.listOutputDestinations_ILF_PopulationNEStatistics=[]
                self.listOutputDestinations_Custom_1_Reporting_Experiment_Dump=[]
                self.listOutputDestinations_Custom_2_Reporting_Experiment_Dump=[]
                self.listOutputDestinations_Custom_3_Reporting_Experiment_Dump=[]
                self.listOutputDestinations_Custom_4_Reporting_Experiment_Dump=[]
                self.listOutputDestinations_Custom_5_Reporting_Experiment_Dump=[]
                self.listOutputVSPs_Custom_1_Reporting_Experiment_Dump = []
                self.listOutputVSPs_Custom_2_Reporting_Experiment_Dump = []
                self.listOutputVSPs_Custom_3_Reporting_Experiment_Dump = []
                self.listOutputVSPs_Custom_4_Reporting_Experiment_Dump = []
                self.listOutputVSPs_Custom_5_Reporting_Experiment_Dump = []
                
                self.listOutputSPs_SP_Level_RLF_End_of_Replicate = []
                self.listOutputSPs_SP_Level_RLF_Post_Fertilization = []
                self.listOutputVSPs_VSP_Level_Age_Class_VLF_EOR = []
                self.listOutputVSPs_VSP_Level_Age_Class_VLF_PF = []
                self.listOutputVSPs_VSP_Level_Life_Stage_VLF_EOR = []
                self.listOutputVSPs_VSP_Level_Life_Stage_VLF_PF = []
                
                #Pegigree output files
                self.listOutputDestinations_PopulationIndividualsInitialPedigree = []
                self.listOutputDestinations_PopulationIndividualsPedigree = []
    
                #List of parameters to specify output to separate Individual Log files (named by generation)
                self.listOutputGenerations_PopulationIndividualsDump=[]
                    
                #List of parameters to specify output to separate GENEPOP_FSTATS files (named by generation)
                self.listOutputReplicates_PopulationGENEPOP_FSTAT_Pop_Dump=[] #Specify replicates to output
                self.listOutputGenerations_PopulationGENEPOP_FSTAT_Pop_Dump=[] #Specify gens to output
                self.listOutputVSPs_PopulationGENEPOP_FSTAT_Pop_Dump=[] #Specify VSPs to output
                self.listOutputParams_PopulationGENEPOP_FSTAT_Pop_Dump=[]
    
                self.listOutputReplicates_PopulationGENEPOP_FSTAT_Pop_Dump_Per_Replicate=[]
                self.listOutputGenerations_PopulationGENEPOP_FSTAT_Pop_Dump_Per_Replicate=[]
                self.listOutputParams_PopulationGENEPOP_FSTAT_Pop_Dump_Per_Replicate=[]
                    
                self.dateTestRunFinishTime = None
                self.dateTestRunStartTime = None
                self.dateSimRunFinishTime = None
                self.dateSimRunStartTime = None
                self.dateBatchRunFinishTime = None
                self.dateBatchRunStartTime = None   
                self.dateReplicateRunStartTime = None
                self.dateBatchRunFinishTime = None
                
                self.strSimDateTimeStamp = ''
                self.strUniqueRunID = ''
                
                self.listBatchRunParameters = []
                self.listCurrentRunParameters = []
    
                #self.ssinfoFields=['age', 'ind_id', 'father_id', 'mother_id', 'fertilisation', 'birth_generation', 'life_stage', 'age_class', 'age_in_months', 'is_gestating', 'gestation_month_count','is_resting_reproductively', 'resting_reproductively_month_count']
                #self.ssinfoFields=['age', 'ind_id', 'father_id', 'mother_id', 'birth_generation', 'life_stage', 'age_class', 'age_in_months', 'is_gestating', 'gestation_month_count','is_resting_reproductively', 'resting_reproductively_month_count']
                #self.ssinfoFields=['age', 'ind_id', 'father_id', 'mother_id', 'life_stage', 'age_class', 'age_in_months', 'is_gestating', 'gestation_month_count','is_resting_reproductively', 'resting_reproductively_month_count']
                self.ssinfoFields=['age', 'ind_id', 'father_id', 'mother_id', 'life_stage', 'age_class', 'age_in_months', 'gestation_resting_countdown']
    
                self.intCurrentEvolveFertilisation = 0
                self.intCurrentTemporalFertilisation = 0
                self.intYearCurrentMonth = 0
                self.intSimulationCurrentMonth = 0
                self.intMatingCalenderMonth = 0
                self.intParturitionCalenderMonth = 0
                self.intGestationLengthInMonths = 0
                self.intReproductiveRestLengthInMonths = 0
                self.intCurrentMating = 0
                self.intYearReproductiveCycleCurrentMonth = 0
                self.intParturationSeasonIntervalInMonths = 0
                self.boolGestating = False
                #self.intGestationCurrentMonth = 0
                self.bool_Allow_Mutation = False
                
                self.stringEventMessage = ''
                
                self.boolInitialEvolve = False
                self.boolBurnIn = False
                self.boolSuppressBurnInOutput = False
                
                self.listPutativeFemaleParents = []
                self.listPutativeMaleParents = []
                self.listParturientFemaleParents = []
                self.listParturientMaleParents = []
                self.olistPutativeParentsPairs = OrderedDict([])
                
                self.boolObtainAlleleFrequenciesFromFile = False
                
                self.boolAllowNATURALMortality = False
                self.boolAllowUnNATURALMortality = False
                self.odictRates_Of_Survival_NATURAL_BySex_ByAge = OrderedDict()
                self.odictRates_Of_Survival_NATURAL_BySex_ByAge_REPORTING_ONLY = OrderedDict()
                self.odictRates_Of_Survival_UnNATURAL_BySex_ByAge = OrderedDict()
                self.odictRates_Of_Survival_UnNATURAL_BySex_ByAge_REPORTING_ONLY = OrderedDict()
                self.odictProbabilityDistribution_P_SurvivalUnNATURALBySexByAge = OrderedDict()
                self.odictProbabilityDistribution_P_SurvivalUnNATURALBySexByAge_FAKE = OrderedDict()
                
                #self.odictRates_Of_Survival_NATURAL_BySex_ByAge_AGENE_SIM = OrderedDict()
                #self.dict_Mortality_Application_Specs_By_Sex__NATURAL = {}
                #self.dict_Mortality_Application_Specs_By_Sex__UnNATURAL = {}

                self.odictPreMortalityNumIndividualsPerAgeClass = OrderedDict()
                
                self.odictKilled_NATURAL_Per_Age_Class_By_Sex = OrderedDict()
                self.odictKilled_NATURAL_Per_Life_Stage_By_Sex = OrderedDict()
                self.odictSurvived_NATURAL_Per_Age_Class_By_Sex = OrderedDict()
                self.odictSurvived_NATURAL_Per_Life_Stage_By_Sex = OrderedDict()
                
                self.odictKilled_UnNATURAL_Per_Age_Class_By_Sex = OrderedDict()
                self.odictKilled_UnNATURAL_Per_Life_Stage_By_Sex = OrderedDict()
                self.odictSurvived_UnNATURAL_Per_Age_Class_By_Sex = OrderedDict()
                self.odictSurvived_UnNATURAL_Per_Life_Stage_By_Sex = OrderedDict()

                self.odictKilled_COMBINED_Per_Age_Class_By_Sex = OrderedDict()
                self.odictKilled_COMBINED_Per_Life_Stage_By_Sex = OrderedDict()
                self.odictSurvived_COMBINED_Per_Age_Class_By_Sex = OrderedDict()
                self.odictSurvived_COMBINED_Per_Life_Stage_By_Sex = OrderedDict()
                
                
                self.boolReport_Custom_1 = False
                self.dictCustom_1_OutputReportingDetail = AutoVivificationHandler()
                self.dictCustom_1_PropertiesNotSuppressed = {}
                self.dictCustom_1_OfObjectPropertiesToReport = {}
    
                self.boolReport_Custom_2 = False
                self.dictCustom_2_OutputReportingDetail = AutoVivificationHandler()
                self.dictCustom_2_PropertiesNotSuppressed = {}
                self.dictCustom_2_OfObjectPropertiesToReport = {}
                
                self.dictCustom_3_OutputReportingDetail = AutoVivificationHandler()
                self.dictCustom_3_PropertiesNotSuppressed = {}
                self.dictCustom_3_OfObjectPropertiesToReport = {}
                
                self.boolReport_Custom_4 = False
                self.dictCustom_4_OutputReportingDetail = AutoVivificationHandler()
                self.dictCustom_4_PropertiesNotSuppressed = {}
                self.dictCustom_4_OfObjectPropertiesToReport = {}
                
                self.boolReport_Custom_5 = False
                self.dictCustom_5_OutputReportingDetail = AutoVivificationHandler()
                self.dictCustom_5_PropertiesNotSuppressed = {}
                self.dictCustom_5_OfObjectPropertiesToReport = {}
                
                self.boolReport_Custom_LDNE_1 = False
                self.dictCustom_LDNE_1_OutputReportingDetail = AutoVivificationHandler()
                self.dictCustom_LDNE_1_PropertiesNotSuppressed = {}
                self.dictCustom_LDNE_1_OfObjectPropertiesToReport = {}
                
                self.listSexes = [globalsSS.SexConstants.static_stringSexMale, globalsSS.SexConstants.static_stringSexFemale]
                
                self.boolUseAgeNeSimParameters = False
                self.intAgeNe_Sim_N1_Newborns = 0
                self.intAgeNe_Sim_N1_Newborns_Per_Age = 0
                self.listOfAgeNeSimObjects = []
                self.odictAgeNe_Sim_Age_Values_Survival_Rates = OrderedDict()
                self.odictAgeNe_Sim_Age_Values_Birth_Rates  = OrderedDict()
                self.odictAgeNe_Sim_Alpha_Value_Scaling_Poisson_Variance_In_Reproductive_Success = OrderedDict()
                self.floatAgeNe_Sim_Initial_Male_Sex_Ratio = 0.0
                self.odictAgeNe_Sim_b_x_Odict_Scaled_Birth_Rate_Per_Age_x = OrderedDict()
                self.odictAgeNe_Sim_AgeClass_Sizes_Per_Sex = OrderedDict()
                self.odictAgeNe_Sim_Nx_Newborns_After_Mortality_Per_Sex_Per_Year = OrderedDict()
                self.intAgeNe_Sim_N1_Newborns_By_Sex = 0
                self.odictAgeNe_Sim_N1_Newborns_Per_Sex_Per_Year = OrderedDict()
                
                self.intAgeNe_Manual_N1_Newborns = 0
                self.listOfAgeNeManualObjects = []
                self.odictAgeNe_Manual_Age_Values_Survival_Rates = OrderedDict()
                self.odictAgeNe_Manual_Age_Values_Birth_Rates  = OrderedDict()
                self.odictAgeNe_Manual_Alpha_Value_Scaling_Poisson_Variance_In_Reproductive_Success = OrderedDict()
                self.floatAgeNe_Manual_Initial_Male_Sex_Ratio = 0.0
                self.odictAgeNe_Manual_N1_Newborns_Per_Sex_Per_Year = OrderedDict()
                
                self.odictVSP_Sizes_Per_Sex = OrderedDict()
                self.boolAgeNeParmMatchManualToSim = False
                self.boolAgeNeParmMatchManual_bx_genertated_in_Sim = False
                self.intAgeNe_Sim_N1_Newborns_PREDICTED = 0

                self.odictPostCOMBINEDMortalityNumIndividualsKilledPerAgeClass = OrderedDict()
                self.odictPostCOMBINEDMortalityNumIndividualsSurvivingPerAgeClass = OrderedDict()
                
                self.odictPostNATURALMortalityNumIndividualsKilledPerAgeClass = OrderedDict()
                self.odictPostNATURALMortalityNumIndividualsSurvivingPerAgeClass = OrderedDict()
                self.odictPostUNNATURALMortalityNumIndividualsKilledPerAgeClass = OrderedDict()
                self.odictPostUNNATURALMortalityNumIndividualsSurvivingPerAgeClass = OrderedDict()
                
                self.objCustom_1_PrimedTopLevelOutputObject = None
                self.objCustom_2_PrimedTopLevelOutputObject = None
                
                self.objCustom_4_PrimedTopLevelOutputObject = None
                self.objCustom_5_PrimedTopLevelOutputObject = None
            
                self.intLDNe_Experiments_Custom_1_Sample_Size = 0
                self.intLDNe_Experiments_Custom_1_Replicates = 0
                self.listLDNe_Experiments_Custom_1_Loci_To_Report = []
                
                self.intLDNe_Experiments_Custom_2_Sample_Size = 0
                self.intLDNe_Experiments_Custom_2_Replicates = 0
                self.listLDNe_Experiments_Custom_2_Loci_To_Report = []
                
                self.intLDNe_Experiments_Custom_4_Sample_Size = 0
                self.intLDNe_Experiments_Custom_4_Replicates = 0
                self.listLDNe_Experiments_Custom_4_Loci_To_Report = []
                self.listReport_Custom_4_Sim_Year_Sample_Required = []
                
                self.intLDNe_Experiments_Custom_5_Sample_Size = 0
                self.intLDNe_Experiments_Custom_5_Replicates = 0
                self.listLDNe_Experiments_Custom_5_Loci_To_Report = []
                self.listReport_Custom_5_Sim_Year_Sample_Required = []
                
                self.bool_Overlapping_Gens_Simulation = False
                
                self.float_Crow_And_Denniston_1988_DemoNe_From_Last_Mating = 0
                self.float_Crow_And_Denniston_1988_DemoNe_Sum_From_Matings_Over_BurnIn = 0
                self.float_Crow_And_Denniston_1988_DemoNe_Sum_From_Matings_Over_PostBurnIn = 0
                self.float_Crow_And_Denniston_1988_DemoNe_Sum_From_Matings_Over_Replicate = 0

                self.float_Crow_And_Denniston_1988_DemoNe_Mean_From_Matings_Over_BurnIn = 0
                self.float_Crow_And_Denniston_1988_DemoNe_Mean_From_Matings_Over_PostBurnIn = 0
                self.float_Crow_And_Denniston_1988_DemoNe_Mean_From_Matings_Over_Replicate = 0
                
                self.int_MatingCount_Replicate_Total = 0
                self.int_MatingCount_Replicate_BurnIn = 0
                self.int_MatingCount_Replicate_PostBurnIn = 0
                self.int_MatingCount_LifeSpan = 0
                
                self.int_MatingCount_Batch_Total = 0
                self.int_MatingCount_Batch_BurnIn = 0
                self.int_MatingCount_Batch_PostBurnIn = 0
                
                self.int_MatingCount_Sim_Total = 0
                self.int_MatingCount_Sim_BurnIn = 0
                self.int_MatingCount_Sim_PostBurnIn = 0

                self.strSexMale = globalsSS.SexConstants.static_stringSexMale
                self.strSexFemale = globalsSS.SexConstants.static_stringSexFemale
                
                self.listPotentialFemaleParents = []
                self.listPotentialMaleParents = []

            '''
            Pre-run processing
            '''
            
            def method_Run_Pre_Processing__Application_Specs(self):

                ''' Application Version '''
                #self.strProjectAppVersion = '3_04'
                self.strProjectAppVersion = '_'.join(__version__.split('.'))
                self.str_App_Version = self.strProjectAppVersion  #Retire the older variable at some point

                #self.strFileNameProgramPrefix = 'SS_' + self.str_App_Version + '_'
                self.strFileNameProgramPrefix = version.str_Project__Prefix + '_' + self.str_App_Version + '_'
                
                if self.bool_App_Started_From_Command_Line:
                    pass
                else:
#                     ''' Unique Run ID '''
#                     self.str_INI_UID_DateTime_Stamp = str(self.dateSimRunStartTime.strftime("%Y%m%d%H%M%S"))
#                         
#                     ''' APPLICATION Standard Output Path Specification '''   
#                     #self.str_App_Drive = 'E:'
#                     self.str_App_Drive = 'C:'
#                     
#                     ''' APPLICATION Base path '''
#                     
#                     self.str_App_Base_Path = self.str_App_Drive + '\\' + 'DCB\\MUI\\MUI_Sync_Controlled\\MUI_SC_SharkSim\\SharkSim_App'
#                     
#                     ''' APPLICATION Path '''
#                     self.str_Application_Path = self.str_App_Base_Path + '\\' + 'v' + self.str_App_Version
#                     
#                     ''' APPLICATION Projects Path '''
#                     self.str_Application_Projects_BASE_Path = 'Projects'
#                     self.str_Application_Projects_Path = self.str_Application_Path + '\\' + self.str_Application_Projects_BASE_Path
#                     
#                     ''' APPLICATION Specific Secenario Config Files Path '''
#                     self.str_Application_Scenarios_BASE_Path = 'Scenarios'
#                     self.str_Application_Scenario_Config_Files_Path = self.str_Application_Projects_Path + '\\' + self.str_Application_Scenarios_BASE_Path
# 
#                     ''' APPLICATION Specific Scenario Config Files Path '''
#                     self.str_Application_Specifc_Scenario_Config_Files_Path = self.str_Application_Scenario_Config_Files_Path + '\\' + self.str_INI_UID_DateTime_Stamp
#                     
#                     '''Create APPLICATION Scenarios Folder '''
#                     with FileHandler() as obj_FileHandler:
#                         obj_FileHandler.method_Create_Path(self.str_Application_Scenario_Config_Files_Path)
#                     pass                
#                     
#                     ''' Run path '''
#                     self.str_Run_Path = self.str_App_Drive + '\\' + 'DCB\\MUI\\MUI_Sync_Controlled\\MUI_SC_SharkSim'
                    pass
                pass
            
                return True
                
            def method_Run_Pre_Processing__Environment_Specs(self):

                ''' Unique Run ID '''
                strSimDateTimeStamp = str(self.dateSimRunStartTime.strftime("%Y_%m_%d_%H_%M_%S"))
                self.strUniqueRunID = self.strFileNameProgramPrefix + 'Run_' + strSimDateTimeStamp

                ''' User-defined General Run Base Path Specification '''
                self.str_Current_Run_Drive, _ = os__path.splitdrive(self.str_App_Arg_Output_Base_Path)

                ''' Current Run Base path '''
                '''IMPORTANT - The app starting parameter file folder defines the base run path ''' 
                self.str_Current_Run_Base_Path = self.str_App_Arg_Output_Base_Path
                
                self.str_Current_Run_Base_Scenario_Path, _ = os__path.split(self.str_App_Arg_Output_Base_Path)
                

                self.boolAnalysisProd = True

                self.strRunSpecificUserDefinedFolder = 'UDF'

                ''' Specific Run Path Specification '''
                bool_Work_With_Previous_Run = False
                if bool_Work_With_Previous_Run:
                    ''' Re-Run path '''
                    #self.str_Re_Run_Path = 'R:\\WORK\\NOG\\v1_3_0_6_a1\\devel\\usr\\var\\backend\\work\\BS_20160510101636\\SS_20160510104009\\NG_1_3_0_6_a1_Run_2017_06_19_09_21_47'
                    #self.str_Re_Run_Path = 'R:\\WORK\\NOG\\v1_3_0_6_a1\\devel\\usr\\var\\backend\\work\\BS_20160510101636\\SS_20160510104009\\NG_1_3_0_6_a1_Run_2017_06_19_19_17_58'
                    #self.str_Re_Run_Path = 'R:\\WORK\\NOG\\v1_3_0_6_a1\\devel\\usr\\var\\backend\\work\\BS_20160510101636\\SS_20160510104009\\NG_1_3_0_6_a1_Run_2017_06_19_19_13_15'
                    #self.str_Re_Run_Path = 'R:\\WORK\\NOG\\v1_3_0_6_a1\\devel\\usr\\var\\backend\\work\\BS_20180103094943\\SS_20180108110957\\NG_1_3_0_6_a1_Run_2018_02_05_14_54_49'
                    #self.str_Re_Run_Path = 'R:\\WORK\\NOG\\v1_3_0_6_a1\\devel\\usr\\var\\backend\\work\\BS_20180103094943\\SS_20180206092636\\NG_1_3_0_6_a1_Run_2018_02_06_09_27_15'
                    #self.str_Re_Run_Path = 'R:\\WORK\\NOG\\v1_3_0_6_a1\\devel\\usr\\var\\backend\\work\\BS_20180103094943\\SS_20180206092636\\NG_1_3_0_6_a1_Run_2018_02_06_09_27_15'
                    #self.str_Re_Run_Path = 'R:\\WORK\\NOG\\v1_3_0_6_a1\\devel\\usr\\var\\backend\\work\\BS_20180103094943\\SS_20180206102230\\NG_1_3_0_6_a1_Run_2018_02_06_10_25_56'
                    self.str_Re_Run_Path = r'R:\WORK\NOG\v1_3_0_6_a1\devel\usr\var\backend\work\BS_20180320114652\SS_20180725160947\NG_1_3_0_6_a1_Run_2018_07_31_12_42_35'
                                
                    ''' Current Run Base path '''  
                    self.str_Current_Run_Base_Path = os__path.split(self.str_Re_Run_Path)[0]
                    
                    ''' Cumulative Run Path '''
                    self.strOutputLocation_CumulativeRun_Path = self.str_Re_Run_Path

                    ''' Current Run Path Batch Scenario'''
                    self.str_Current_Run_Path__Batch_Scenario__Data = os__path.split(self.str_Current_Run_Base_Path)[0]
                
                    if globalsSS.Run_Processing_Step.static_int_Run_Processing_Step__SAMP_STRAT in self.list_int_App_Arg_Run_Processing_Steps:
                        
                        self.str_Current_Run_Path__Batch_Scenario__UID = os__path.join(self.str_Current_Run_Base_Path, self.strUniqueRunID)
                        self.str_Batch_Scenario_UID_Path__Previous_Run = self.str_Current_Run_Path__Batch_Scenario__UID
                        
                        self.str_Current_Run_Path__Sampling_Strategy__UID = os__path.join(self.str_Current_Run_Path__Batch_Scenario__UID)
                        
                        self.str_Current_Run_Path__Sampling_Strategy__Data = os__path.join(self.str_Current_Run_Path__Sampling_Strategy__UID, globalsSS.Processing_Path.static_str_Processing_Path__LDNe_Sampling_Strategy)
                        self.str_Current_Run_Path__Sampling_Strategy__Logs = os__path.join(self.str_Current_Run_Path__Sampling_Strategy__UID, globalsSS.Processing_Path.static_str_Processing_Path__General_Logs)

                        ''' Current Run Path '''
                        self.str_Current_Run_Path = self.str_Current_Run_Path__Sampling_Strategy__Data
                                       
                        ''' Logs Path '''
                        self.str_Current_Run_Path__Logs = self.str_Current_Run_Path__Sampling_Strategy__Logs
                    pass 

                    ''' Copy the re-run UID data to the new UID folders'''
                    with FileHandler() as obj_FileOp:
                        self.str_Re_Run_Path__Source_Data = self.str_Re_Run_Path 
                        strFolderPath_Copy_Source = self.str_Re_Run_Path__Source_Data
                        strFolderPath_Copy_Destination = os__path.dirname(self.str_Current_Run_Path)
        
                        bool_Success = obj_FileOp.method_Path_Exists(strFolderPath_Copy_Source)
                        if bool_Success:
                            bool_Success = False
                    
                            #bool_Success = obj_FileOp.func_Copy_Folder_Or_All_Files(strFolderPath_Copy_Source, strFolderPath_Copy_Destination)
                            self.obj_Log_Default_Display.info(globalsSS.Output_Display_Constants.static_str_Message_Separator)
                            self.obj_Log_Default_Display.info('>>>> RE-RUN: Copy original data to re-run folder <<<<')
                            self.obj_Log_Default_Display.info('Original data path: ' + strFolderPath_Copy_Source)
                            self.obj_Log_Default_Display.info('Re-run data path: ' + strFolderPath_Copy_Destination)
                            self.obj_Log_Default_Display.info('>>>> RE-RUN: Copying...')
                            bool_Success = obj_FileOp.method_Copy_Folder_Or_All_Files(strFolderPath_Copy_Source, strFolderPath_Copy_Destination)
                            
                            if not bool_Success:
                                with SSErrorOperation() as obj_APP_ErrorOp:
                                    self.obj_Log_Default_Display.info('>>>> RE-RUN: Copy FAILED! <<<<')
                                    str_Message_Text = 'Unable to copy folder tree from source path: ' + strFolderPath_Copy_Source + ' to destination path '+ strFolderPath_Copy_Destination
                                    int_Stack_Trace_Level = 2
                                    obj_APP_ErrorOp.func_Error_Handler__Caught_Exceptions(int_Stack_Trace_Level, str_Message_Text, tup_Args = (strFolderPath_Copy_Source, self.strUniqueRunID))  
                                pass
                            else:
                                self.obj_Log_Default_Display.info('>>>> RE-RUN: Copy finished successfully <<<<')
                            pass   
        
                            self.obj_Log_Default_Display.info(globalsSS.Output_Display_Constants.static_str_Message_Separator)
                            
                        else:
                            with SSErrorOperation() as obj_APP_ErrorOp:
                                str_Message_Text = 'Job Data Source Path does not exist: ' + strFolderPath_Copy_Source
                                int_Stack_Trace_Level = 2
                                obj_APP_ErrorOp.func_Error_Handler__Caught_Exceptions(int_Stack_Trace_Level, str_Message_Text, tup_Args = (self.str_App_Arg_Output_Base_Path, self.strUniqueRunID))  
                            pass
                        pass   
        
                    pass
                        
                else:

                    if globalsSS.Run_Processing_Step.static_int_Run_Processing_Step__POP_SIM in self.list_int_App_Arg_Run_Processing_Steps:
                        
                        self.str_Current_Run_Path__Batch_Scenario__UID = os__path.join(self.str_Current_Run_Base_Path, self.strUniqueRunID)
                        self.str_Current_Run_Path__Batch_Scenario__Data = os__path.join(self.str_Current_Run_Path__Batch_Scenario__UID, globalsSS.Processing_Path.static_str_Processing_Path__Pop_Sim)
                        self.str_Current_Run_Path__Batch_Scenario__Logs = os__path.join(self.str_Current_Run_Path__Batch_Scenario__UID, globalsSS.Processing_Path.static_str_Processing_Path__General_Logs)
                        
                        ''' Current Run Path '''
                        self.str_Current_Run_Path = self.str_Current_Run_Path__Batch_Scenario__Data
                                              
                        ''' Logs Path '''
                        self.str_Current_Run_Path__Logs = self.str_Current_Run_Path__Batch_Scenario__Logs

                        ''' Cumulative Run Path '''
                        self.strOutputLocation_CumulativeRun_Path = self.str_Current_Run_Path__Batch_Scenario__UID
                        
                        '''Create Run Folders '''
                        with FileHandler() as obj_FileHandler:
                            obj_FileHandler.method_Create_Path(self.str_Current_Run_Path__Batch_Scenario__Data)
                            obj_FileHandler.method_Create_Path(self.str_Current_Run_Path__Batch_Scenario__Logs)
                        pass                  
                    pass
                
                    if globalsSS.Run_Processing_Step.static_int_Run_Processing_Step__SAMP_STRAT in self.list_int_App_Arg_Run_Processing_Steps:
                        
                        if globalsSS.Run_Processing_Step.static_int_Run_Processing_Step__POP_SIM in self.list_int_App_Arg_Run_Processing_Steps:
                            
                            self.str_Batch_Scenario_UID_Path__Previous_Run = self.str_Current_Run_Path__Batch_Scenario__UID
                            self.str_Current_Run_Path__Sampling_Strategy__UID = os__path.join(self.str_Current_Run_Path__Batch_Scenario__UID)
                        else:    
                            
                            ''' Path containing the files from the Batch Scenario run required for this Sampling Strategy run '''
                            self.str_Batch_Scenario_UID_Path__Previous_Run = os__path.join(self.str_Current_Run_Base_Path, self.str_Batch_Scenario_UID_Folder__Previous_Run)
                            self.str_Current_Run_Path__Batch_Scenario__Data = os__path.join(self.str_Batch_Scenario_UID_Path__Previous_Run, globalsSS.Processing_Path.static_str_Processing_Path__Pop_Sim)
                            
                            ''' Define path for this Sampling Strategy run - Create sub-folder from the Sampling Startegy INI config file name '''
                            _, str_Config_File__Sampling_Strategy = os__path.split(self.str_App_Arg_Config_Path_And_File__Original)
                            str_Folder_Sampling_Strategy, _ = os__path.splitext(str_Config_File__Sampling_Strategy)
                            str_Folder_Sampling_Strategy = str_Folder_Sampling_Strategy.replace('Sampling_Strategy', 'SS')
                            self.str_Current_Run_Path__Sampling_Strategy__UID = os__path.join(self.str_Current_Run_Base_Path, str_Folder_Sampling_Strategy, self.strUniqueRunID)
                        pass
                     
                        self.str_Current_Run_Path__Sampling_Strategy__Data = os__path.join(self.str_Current_Run_Path__Sampling_Strategy__UID, globalsSS.Processing_Path.static_str_Processing_Path__LDNe_Sampling_Strategy)
                        self.str_Current_Run_Path__Sampling_Strategy__Logs = os__path.join(self.str_Current_Run_Path__Sampling_Strategy__UID, globalsSS.Processing_Path.static_str_Processing_Path__General_Logs)
                        
                        
                        if globalsSS.Run_Processing_Step.static_int_Run_Processing_Step__POP_SIM in self.list_int_App_Arg_Run_Processing_Steps:
                            pass
                        else:
                            ''' Current Run Path '''
                            self.str_Current_Run_Path = self.str_Current_Run_Path__Sampling_Strategy__Data
                                           
                            ''' Logs Path '''
                            self.str_Current_Run_Path__Logs = self.str_Current_Run_Path__Sampling_Strategy__Logs 
                            
                            ''' Cumulative Run Path '''
                            self.strOutputLocation_CumulativeRun_Path = self.str_Current_Run_Path__Sampling_Strategy__UID
                        pass
                    
                        '''Create Folder '''
                        with FileHandler() as obj_FileHandler:
                            obj_FileHandler.method_Create_Path(self.str_Current_Run_Path__Sampling_Strategy__Data)
                            obj_FileHandler.method_Create_Path(self.str_Current_Run_Path__Sampling_Strategy__Logs)
                        pass
                    pass
                pass

                ''' Initialize Folder & Files '''
                self.method_Simulation_Run_Folder_File_Initialization()
                
                ''' Set the CPU affinity for the process'''
                if self.bool_App_Started_From_Command_Line:
                    bool_Use_Affinity = False
                    if bool_Use_Affinity:
                        pidLastSpawnedProcess = os__getpid()
                        int_CPUs = multiprocessing__cpu_count()
                        int_CPUs_To_Keep_Free = 2
                        if int_CPUs > int_CPUs_To_Keep_Free: 
                            int_CPUs_To_Use = int_CPUs - int_CPUs_To_Keep_Free
                            list_CPUs = [x for x in range(0,int_CPUs_To_Use)]                    
                            
                            psutil_Process = psutil__Process(pidLastSpawnedProcess)    
                            psutil_Process.cpu_affinity(list_CPUs)
                        pass
                    pass
                pass
                            
                return True 


            def method_Simulation_PROD_AUTO_Run_Specific_User_Defined_Folder_RETIRE(self):

                strRunSpecificUserDefinedFolder = 'PROD_DEFAULT'
                                                
                if self.str_Species_Code == 'CAOB_V1':
                    self.str_Species_Code_Short = 'CO'
                    ''' Set the standard model agruments '''
                    self.method_Simulation_Standard_Model_Arguments_CAOB_V1()
                    ''' Set the arguments according to the scenario '''
                    strRunSpecificUserDefinedFolder = self.method_Simulation_PROD_AUTO_Run_Specific_User_Defined_Folder__CAOB_V1()
                elif self.str_Species_Code == 'CAPL_V1':
                    self.str_Species_Code_Short = 'CP'
                    ''' Set the standard model agruments '''
                    self.method_Simulation_Standard_Model_Arguments_CAPL_V1()
                    ''' Set the arguments according to the scenario '''
                    strRunSpecificUserDefinedFolder = self.method_Simulation_PROD_AUTO_Run_Specific_User_Defined_Folder__CAPL_V1()                
                elif self.str_Species_Code == 'STFA_V1':
                    self.str_Species_Code_Short = 'SF'
                    ''' Set the arguments according to the scenario '''
                    strRunSpecificUserDefinedFolder = self.method_Simulation_PROD_AUTO_Run_Specific_User_Defined_Folder__STFA_V1()                
                elif self.str_Species_Code == 'SSOG_V1':
                    self.str_Species_Code_Short = 'SO'
                    ''' Set the arguments according to the scenario '''
                    strRunSpecificUserDefinedFolder = self.method_Simulation_PROD_AUTO_Run_Specific_User_Defined_Folder__SSOG_V1()    
                elif self.str_Species_Code == 'SMOG_V1':
                    self.str_Species_Code_Short = 'SM'
                    ''' Set the arguments according to the scenario '''
                    strRunSpecificUserDefinedFolder = self.method_Simulation_PROD_AUTO_Run_Specific_User_Defined_Folder__SMOG_V1()    
                elif self.str_Species_Code == 'TUTR_V1':
                    self.str_Species_Code_Short = 'TT'
                    ''' Set the arguments according to the scenario '''
                    strRunSpecificUserDefinedFolder = self.method_Simulation_PROD_AUTO_Run_Specific_User_Defined_Folder__TUTR_V1()    
                elif self.str_Species_Code == 'TUTR_V2':
                    self.str_Species_Code_Short = 'TT'
                    ''' Set the arguments according to the scenario '''
                    strRunSpecificUserDefinedFolder = self.method_Simulation_PROD_AUTO_Run_Specific_User_Defined_Folder__TUTR_V2()    
                elif self.str_Species_Code == 'GAMO_V1':
                    self.str_Species_Code_Short = 'GM'
                    ''' Set the arguments according to the scenario '''
                    strRunSpecificUserDefinedFolder = self.method_Simulation_PROD_AUTO_Run_Specific_User_Defined_Folder__GAMO_V1()    
                elif self.str_Species_Code == 'SDG_V1':
                    self.str_Species_Code_Short = 'SD'
                    strRunSpecificUserDefinedFolder = self.method_Simulation_PROD_Run_Specific_User_Defined_Folder__SDG_V1()   
                pass
            
                return strRunSpecificUserDefinedFolder
            
            '''
            Simulation, Batch & Replicate - Main parameters
            '''
            def method_Simulation_Run_Level_Parameters_Initialization_WRONG(self):

                self.boolSingleRun = False
                self.boolAnalysis = True

                if self.boolSingleRun  == False:
                    if self.boolAnalysisProd:
                        '''
                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                        SCENARIO SPECIFICATION
                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                        '''
                            
                        str_Scenario_Code_A = 'L'
                        list_Scenario_Code_B = ['0','1','2','3','4','5','6','7','8','9','10','11','12']
                        list_Pop_Sizes = [9000,10000,11000]
                        self.Arg_Pop_Replicates = 1
                        
                        for str_Scenario_Code_B in list_Scenario_Code_B:
                            self.str_Scenario_Code = self.str_Scenario_Code = str_Scenario_Code_A + str_Scenario_Code_B
                            
                            for self.Arg_Pop_Size in list_Pop_Sizes: 
                                '''
                                -------------------
                                Specify group of Batch Run parameters
                                -------------------
                                '''
                                self.listReplicateRunParameters = []
                                
                                if self.str_Species_Code == 'SDG_V1':
                                    self.listBatchRunParameters.append(self.method_Batch_Run_Parameters__DISCRETE_GENS_WF_Diploid_Dioecious_Sexual_Random_Mating())
                                elif self.str_Species_Code == 'SOG_V1':
                                    self.listBatchRunParameters.append(self.method_Batch_Run_Parameters__Overlapping_GENS_WF_Diploid_Dioecious_Sexual_Random_Mating_SOG_V1())
                                elif self.str_Species_Code == 'SOG_V2':
                                    self.listBatchRunParameters.append(self.method_Batch_Run_Parameters__Overlapping_GENS_WF_Diploid_Dioecious_Sexual_Random_Mating_SOG_V2())
                                elif self.str_Species_Code == 'CAPL_V1':
                                    if self.boolAnalysisProd:
                                        self.listBatchRunParameters.append(self.method_Batch_Run_Parameters__PROD_C_Plumbeus_V1())
                                    else:
                                        self.listBatchRunParameters.append(self.method_Batch_Run_Parameters__TEST_C_Plumbeus_V1())
                                    pass
                                elif self.str_Species_Code == 'CAOB_V1':
                                    if self.boolAnalysisProd:
                                        self.listBatchRunParameters.append(self.method_Batch_Run_Parameters__PROD_C_Obscurus_V1())
                                    else:
                                        self.listBatchRunParameters.append(self.method_Batch_Run_Parameters__TEST_C_Obscurus_V1())
                                    pass
                                else:
                                    self.obj_Log_Default_Display.error('Species to run not specifed correctly in the Parameter Sim Run section: ' + str(self.str_Species_Code))
                                pass
                            pass
                        pass
                    else:
                        self.listReplicateRunParameters = []
                        
                        if self.str_Species_Code == 'SDG_V1':
                            self.listBatchRunParameters.append(self.method_Batch_Run_Parameters__DISCRETE_GENS_WF_Diploid_Dioecious_Sexual_Random_Mating())
                        elif self.str_Species_Code == 'SOG_V1':
                            self.listBatchRunParameters.append(self.method_Batch_Run_Parameters__Overlapping_GENS_WF_Diploid_Dioecious_Sexual_Random_Mating_SOG_V1())
                        elif self.str_Species_Code == 'SOG_V2':
                            self.listBatchRunParameters.append(self.method_Batch_Run_Parameters__Overlapping_GENS_WF_Diploid_Dioecious_Sexual_Random_Mating_SOG_V2())
                        elif self.str_Species_Code == 'CAPL_V1':
                            self.listBatchRunParameters.append(self.method_Batch_Run_Parameters__TEST_C_Plumbeus_V1())
                        elif self.str_Species_Code == 'CAOB_V1':
                            self.listBatchRunParameters.append(self.method_Batch_Run_Parameters__TEST_C_Obscurus_V1())
                        else:
                            self.obj_Log_Default_Display.error('Species to run not specifed correctly in the Parameter Sim Run section: ' + str(self.str_Species_Code))
                        pass
                    
                else:
                    
                    self.method_Single_Run_Simulation_Parameters()
                pass
            
                self.intBatches = len(self.listBatchRunParameters)
                
                return True

            def method_Simulation_Run_Level_Parameters_Initialization(self):

                    
                '''
                -------------------
                Specify Batch Run parameters
                -------------------
                '''
                self.listReplicateRunParameters = []
                    
                self.intBatches = 1
                
                return True
            
            def method_Simulation_Run_Level_Parameters_Initialization_RETIRE(self):

                self.boolSingleRun = False
                self.boolAnalysis = True

                if self.boolSingleRun  == False:
                    #------------------ Shark Sim BATCH RUN parameters --------------------------------
                     
                    self.boolInitGenotypeByVSP = False
                    self.boolInitGenotypeByLoci = False
                    
                    '''
                    -------------------
                    Specify group of Batch Run parameters
                    -------------------
                    '''
                    self.listReplicateRunParameters = []
                    
                    if self.str_Species_Code == 'SDG_V1':
                        self.listBatchRunParameters.append(self.method_Batch_Run_Parameters__DISCRETE_GENS_WF_Diploid_Dioecious_Sexual_Random_Mating())
                    elif self.str_Species_Code == 'SOG_V1':
                        self.listBatchRunParameters.append(self.method_Batch_Run_Parameters__Overlapping_GENS_WF_Diploid_Dioecious_Sexual_Random_Mating_SOG_V1())
                    elif self.str_Species_Code == 'SOG_V2':
                        self.listBatchRunParameters.append(self.method_Batch_Run_Parameters__Overlapping_GENS_WF_Diploid_Dioecious_Sexual_Random_Mating_SOG_V2())
                    elif self.str_Species_Code == 'CAPL_V1':
                        if self.boolAnalysisProd:
                            self.listBatchRunParameters.append(self.method_Batch_Run_Parameters__PROD_C_Plumbeus_V1())
                        else:
                            self.listBatchRunParameters.append(self.method_Batch_Run_Parameters__TEST_C_Plumbeus_V1())
                        pass
                    elif self.str_Species_Code == 'CAOB_V1':
                        if self.boolAnalysisProd:
                            self.listBatchRunParameters.append(self.method_Batch_Run_Parameters__PROD_C_Obscurus_V1())
                        else:
                            self.listBatchRunParameters.append(self.method_Batch_Run_Parameters__TEST_C_Obscurus_V1())
                        pass
                    elif self.str_Species_Code == 'STFA_V1':
                        if self.boolAnalysisProd:
                            self.listBatchRunParameters.append(self.method_Batch_Run_Parameters__PROD_Stegostoma_fasciatum_V1())
                            pass
                        else:
                            self.listBatchRunParameters.append(self.method_Batch_Run_Parameters__PROD_Stegostoma_fasciatum_V1())
                            pass
                        pass
                    elif self.str_Species_Code == 'SSOG_V1':
                        if self.boolAnalysisProd:
                            self.listBatchRunParameters.append(self.method_Batch_Run_Parameters__PROD_SSOG_V1())
                            pass
                        else:
                            self.listBatchRunParameters.append(self.method_Batch_Run_Parameters__PROD_SSOG_V1())
                            pass
                        pass
                    elif self.str_Species_Code == 'SMOG_V1':
                        if self.boolAnalysisProd:
                            self.listBatchRunParameters.append(self.method_Batch_Run_Parameters__PROD_SMOG_V1())
                            pass
                        else:
                            self.listBatchRunParameters.append(self.method_Batch_Run_Parameters__PROD_SMOG_V1())
                            pass
                        pass
                    elif self.str_Species_Code == 'TUTR_V1':
                        if self.boolAnalysisProd:
                            self.listBatchRunParameters.append(self.method_Batch_Run_Parameters__PROD_TUTR_V1())
                            pass
                        else:
                            self.listBatchRunParameters.append(self.method_Batch_Run_Parameters__PROD_TUTR_V1())
                            pass
                        pass
                    elif self.str_Species_Code == 'TUTR_V2':
                        if self.boolAnalysisProd:
                            self.listBatchRunParameters.append(self.method_Batch_Run_Parameters__PROD_TUTR_V2())
                            pass
                        else:
                            self.listBatchRunParameters.append(self.method_Batch_Run_Parameters__PROD_TUTR_V2())
                            pass
                        pass
                    elif self.str_Species_Code == 'GAMO_V1':
                        if self.boolAnalysisProd:
                            self.listBatchRunParameters.append(self.method_Batch_Run_Parameters__PROD_GAMO_V1())
                            pass
                        else:
                            self.listBatchRunParameters.append(self.method_Batch_Run_Parameters__PROD_GAMO_V1())
                            pass
                        pass                    
                    else:
                        self.obj_Log_Default_Display.error('Species to run not specifed correctly in the Parameter Sim Run section: ' + str(self.str_Species_Code))
                    pass
                    
                else:
                    
                    self.method_Single_Run_Simulation_Parameters()
                pass
            
                self.intBatches = len(self.listBatchRunParameters)
                
                return True
            
            '''
            -----------------------------------------------------------------
            Main processing
            -----------------------------------------------------------------
            '''
            
            '''
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            Simulation Run Processing
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            '''
            
            '''
            SCENARIOS
            '''                                   
            def method_Simulation_PROD_AUTO_Run_Specific_User_Defined_Folder__CAPL_V1(self):
                                
                strRunSpecificUserDefinedFolder = 'PROD_DEFAULT'

                '''
                LIFE HIST DATA - Geraghty 2014 - Using FEMALE Ages only - CONSERVATIVE
                Sandbar shark - Carcharhinus plumbeus
                    >> Life History Params
                    Maximum age              : 28 (f) <-- This is Geraghty MaxAge + 1  
                    Maximal mating age       : 27 (f) 32(m) <-- This is Geraghty MaxAge
                    Minimal mating age (m)   : 7 (7.0) <-- Age at which 50% are mature
                    Minimal mating age (fm)  : 10 (9.5) <-- Age at which 50% are mature
                        OR
                    Minimal mating age (m)   : 7 (7.1) <-- Age at which 95% are mature
                    Minimal mating age (fm)  : 15 (14.9) <-- Age at which 95% are mature
                    Litter sex ratio (fm:m)  : 1:1
                    Litter size(fm)          : 8 (7.8 Mean, S.E: 0.5, Range: 3- 12) PG - Fecundity did not increase with age
                    Gestation          (G)   : 12 <-- PG: ~24, WA: =< 12, NT: =<12, NWA: >12
                    Reproductive Cycle (R)   : 2  <-- PG: -, WA: 2, NT: 2, NWA: ~2
                    >> Survival Params
                    Natural survival         : 0.88 Age independent (mean of 5 estimates in McAuley, Simpfendorfer & Hall (2007) from (Pauly (1980), Hoenig (1983) method (i), Hoenig (1983) method (ii), Hoenig (1983) method (iii), Jensen (1996))
                    NOTE: For Nat Survival Prob Dist #Max Age must be 1.0 (100% Survival) for UnNatural mortality to work.  These animals will all die at mating anyway. 
                    Fishing survival         : As per 2008 Observer Catch by Sex
                    >> AgeNe Params
                    bx(fm)                   : 2.6   (7.8 offspring every 3 years = 7.8/3 = 2.6)
                    sx(fm)                   : 0.88 Age independent
                    >> Genetic Params
                    Genetic data source      : Empirical - NSW - FRDC 
                    #Loci                    :19 (Average of 10 alleles per locus) <-- From empirical CAPL Genetic data
                    Allele Freqs             : Random Drichlet
                    Polyandry                : 2 <-- 2.3 Male mates per litter (range 2-5 min. male mates, n = 20 litters) Portnoy 2007
                    '''
                bool_Allow_UnNat_Mortality = False
                str_Scenario_Desc_Code = ''
                str_Scenario_Code_A = self.str_Scenario_Code[:1]
                str_Scenario_Code_B = self.str_Scenario_Code[1:3]
                int_Scenario_Code_B = int(str_Scenario_Code_B)
                if len(self.str_Scenario_Code) > 3:
                    str_Scenario_Code_C = self.str_Scenario_Code[3:4]
                    if str_Scenario_Code_C == 'F':
                        bool_Allow_UnNat_Mortality = True
                        str_UnNat_Mortality_Folder_Code = 'UMY'                                                        
                        str_Scenario_Code_D = self.str_Scenario_Code[-1:]
                        int_Scenario_Code_D = int(str_Scenario_Code_D)
                    else:
                        str_UnNat_Mortality_Folder_Code = 'UMN'
                    pass
                else:
                    str_UnNat_Mortality_Folder_Code = 'UMN'                                                       
                pass

                if int_Scenario_Code_B == 0:
                    ''' Scenario 0:  Same as Scenario 1 but with +++> ...
                    Senescence Allowed YES (SY)
                    '''               
                    str_Scenario_Desc_Code = 'M114_EAF_08P_M21_G6_R1_' + str_UnNat_Mortality_Folder_Code + '_A50_SY'
                              
                    self.Arg_Allow_Senescence = True
                    
                    pass
                elif int_Scenario_Code_B == 1:
                    ''' Scenario 1:
                    MinMaturityAge A50 (A50)
                    Matings 114 (M114), EMPIRICAL Allele Freqs (EAF)
                    Offspring Poisson 8 per litter (8P),Mating Scheme 21 (M21),
                    Mating in Aug (8), Gestation 6 months (Feb,2), Resting 1 months (Mar, 3) <--- *** Gest (G6) Rest (G1)***
                    Non-natural Mortality No (' + str_UnNat_Mortality_Folder_Code + '), Senescence Allowed No
                    '''                         
                    str_Scenario_Desc_Code = 'M114_EAF_08P_M21_G6_R1_' + str_UnNat_Mortality_Folder_Code + '_A50'
                    
                    #self.Arg_Allow_Senescence = False
                    
                    pass
                elif int_Scenario_Code_B == 2: 
                    ''' Scenario 2:  Same as Scenario 1 but with +++> ...
                    MinMaturityAge A95 (A95)
                    '''
                    str_Scenario_Desc_Code = 'M114_EAF_08P_M21_G6_R1_' + str_UnNat_Mortality_Folder_Code + '_A95'
                    
                    self.Arg_Min_Mating_Age = 15
                    
                    pass
                elif int_Scenario_Code_B == 3: 
                    ''' Scenario 3:  Same as Scenario 1 but with +++> ...
                    Mating in Aug (8), Parturition in Sept (9), Gestation 13 months (G13), Resting 10 months (july, R10) <-- G13_R10
                    '''
                    str_Scenario_Desc_Code = 'M114_EAF_08P_M21_G13_R10_' + str_UnNat_Mortality_Folder_Code + '_A50'
                    
                    self.Arg_Parturition_Month = 9
                    self.Arg_Gestation_Length_In_Months = 13
                    self.Arg_Reproductive_Rest_Length_In_Months = 10
                    
                    pass
                elif int_Scenario_Code_B == 4: 
                    ''' Scenario 4:  Same as Scenario 3 but with +++> ...
                    MinMaturityAge A95 (A95)
                    '''
                    str_Scenario_Desc_Code = 'M114_EAF_08P_M21_G13_R10_' + str_UnNat_Mortality_Folder_Code + '_A95'
                    
                    self.Arg_Min_Mating_Age = 15
                    
                    self.Arg_Parturition_Month = 9
                    self.Arg_Gestation_Length_In_Months = 13
                    self.Arg_Reproductive_Rest_Length_In_Months = 10
                    
                    pass
                elif int_Scenario_Code_B == 5: 
                    ''' Scenario 5:  Same as Scenario 1 but with +++> ...
                    Mating Scheme 24 (M24) Random Mating Without Parent Replacement & Hermaphrodites NOT allowed
                    '''
                    str_Scenario_Desc_Code = 'M114_EAF_08P_M24_G6_R1_' + str_UnNat_Mortality_Folder_Code + '_A50'
                    
                    self.Arg_Mating_Scheme = 24
                    
                    pass
                elif int_Scenario_Code_B == 6: 
                    ''' Scenario 6:  Same as Scenario 5 but with +++> ...
                    MinMaturityAge A95 (A95)
                    '''
                    str_Scenario_Desc_Code = 'M114_EAF_08P_M24_G6_R1_' + str_UnNat_Mortality_Folder_Code + '_A95'
                    
                    self.Arg_Min_Mating_Age = 15
                    
                    self.Arg_Mating_Scheme = 24
                    
                    pass
                elif int_Scenario_Code_B == 7: 
                    ''' Scenario 5:  Same as Scenario 1 but with +++> ...
                    Mating in Aug (8), Parturition in Sept (9), Gestation 13 months (G13), Resting 10 months (july, R10) <-- G13_R10
                    Mating Scheme 24 (M24) Random Mating Without Parent Replacement & Hermaphrodites NOT allowed
                    '''
                    str_Scenario_Desc_Code = 'M114_EAF_08P_M24_G13_R10_' + str_UnNat_Mortality_Folder_Code + '_A50'
                    
                    self.Arg_Parturition_Month = 9
                    self.Arg_Gestation_Length_In_Months = 13
                    self.Arg_Reproductive_Rest_Length_In_Months = 10
                    
                    self.Arg_Mating_Scheme = 24
                    
                    pass
                elif int_Scenario_Code_B == 8: 
                    ''' Scenario 8:  Same as Scenario 7 but with +++> ...
                    MinMaturityAge A95 (A95)
                    '''
                    str_Scenario_Desc_Code = 'M114_EAF_08P_M24_G13_R10_' + str_UnNat_Mortality_Folder_Code + '_A95'
                    
                    self.Arg_Min_Mating_Age = 15
                    
                    self.Arg_Parturition_Month = 9
                    self.Arg_Gestation_Length_In_Months = 13
                    self.Arg_Reproductive_Rest_Length_In_Months = 10
                    
                    self.Arg_Mating_Scheme = 24
                    
                    pass
                elif int_Scenario_Code_B == 9: 
                    ''' Scenario 9:  Same as Scenario 1 but with +++> ...
                    Mating Scheme 25 with 2 mates (M25M2) Polyandrous Mating With 2 Mates With Parent Replacement & Hermaphrodites allowed
                    '''
                    str_Scenario_Desc_Code = 'M114_EAF_08P_M25M2_G6_R1_' + str_UnNat_Mortality_Folder_Code + '_A50'
                    
                    self.Arg_Mating_Scheme = 25
                                            
                    self.Arg_Mating_Scheme_Polygamy_Num_Mates = 2
                    #self.Arg_Num_Offspring_Per_Mate = 8/self.Arg_Mating_Scheme_Polygamy_Num_Mates
                    self.Arg_Min_Num_Offspring_Per_Mate = 4 / self.Arg_Mating_Scheme_Polygamy_Num_Mates
                    self.Arg_Max_Num_Offspring_Per_Mate = 12 / self.Arg_Mating_Scheme_Polygamy_Num_Mates                    
                    pass
                elif int_Scenario_Code_B == 10: 
                    ''' Scenario 10:  Same as Scenario 9 but with +++> ...
                    MinMaturityAge A95 (A95)
                    '''
                    str_Scenario_Desc_Code = 'M114_EAF_08P_M25M2_G6_R1_' + str_UnNat_Mortality_Folder_Code + '_A95'
                    
                    self.Arg_Min_Mating_Age = 15
                    
                    self.Arg_Mating_Scheme = 25
                                            
                    self.Arg_Mating_Scheme_Polygamy_Num_Mates = 2
                    #self.Arg_Num_Offspring_Per_Mate = 8/self.Arg_Mating_Scheme_Polygamy_Num_Mates
                    self.Arg_Min_Num_Offspring_Per_Mate = 4 / self.Arg_Mating_Scheme_Polygamy_Num_Mates
                    self.Arg_Max_Num_Offspring_Per_Mate = 12 / self.Arg_Mating_Scheme_Polygamy_Num_Mates  
                    pass
                elif int_Scenario_Code_B == 11: 
                    ''' Scenario 11:  Same as Scenario 1 but with +++> ...
                    Mating in Aug (8), Parturition in Sept (9), Gestation 13 months (G13), Resting 10 months (july, R10) <-- G13_R10
                    Mating Scheme 25 with 2 mates (M25M2) Polyandrous Mating With 2 Mates With Parent Replacement & Hermaphrodites allowed
                    '''
                    str_Scenario_Desc_Code = 'M114_EAF_08P_M25M2_G13_R10_' + str_UnNat_Mortality_Folder_Code + '_A50'
                    
                    self.Arg_Parturition_Month = 9
                    self.Arg_Gestation_Length_In_Months = 13
                    self.Arg_Reproductive_Rest_Length_In_Months = 10
                                            
                    self.Arg_Mating_Scheme = 25
                                            
                    self.Arg_Mating_Scheme_Polygamy_Num_Mates = 2
                    #self.Arg_Num_Offspring_Per_Mate = 8/self.Arg_Mating_Scheme_Polygamy_Num_Mates
                    self.Arg_Min_Num_Offspring_Per_Mate = 4 / self.Arg_Mating_Scheme_Polygamy_Num_Mates
                    self.Arg_Max_Num_Offspring_Per_Mate = 12 / self.Arg_Mating_Scheme_Polygamy_Num_Mates  
                    pass                    
                elif int_Scenario_Code_B == 12: 
                    ''' Scenario 12:  Same as Scenario 11 but with +++> ...
                    MinMaturityAge A95 (A95)
                    '''
                    str_Scenario_Desc_Code = 'M114_EAF_08P_M25M2_G13_R10_' + str_UnNat_Mortality_Folder_Code + '_A95'
                    
                    self.Arg_Min_Mating_Age = 15
                    
                    self.Arg_Parturition_Month = 9
                    self.Arg_Gestation_Length_In_Months = 13
                    self.Arg_Reproductive_Rest_Length_In_Months = 10
                                            
                    self.Arg_Mating_Scheme = 25
                                            
                    self.Arg_Mating_Scheme_Polygamy_Num_Mates = 2
                    #self.Arg_Num_Offspring_Per_Mate = 8/self.Arg_Mating_Scheme_Polygamy_Num_Mates
                    self.Arg_Min_Num_Offspring_Per_Mate = 4 / self.Arg_Mating_Scheme_Polygamy_Num_Mates
                    self.Arg_Max_Num_Offspring_Per_Mate = 12 / self.Arg_Mating_Scheme_Polygamy_Num_Mates  
                    pass                    
                pass

                ''' Include UnNatural mortality scenarios '''
                if bool_Allow_UnNat_Mortality and len(str_Scenario_Code_C) > 0:
                    if int_Scenario_Code_D == 1:
                        ''' Fishing scenario 1: Business as usual  - Fullfill Quota
                        Quota Multiplier = 1
                        '''
                        int_BAU_Mortality_Multiplier = 1
                        int_Replicate_Mating_Count_UnNat_Mortality_Starts = 58
                        self.Arg_Allow_UnNatural_Mortality = True                
                        self.Arg_Mortality_Application_Specs__UnNat = {globalsSS.MortalityApplication.static_str_Mating_Mortlity_Starts__UnNat:{self.strSexMale: int_Replicate_Mating_Count_UnNat_Mortality_Starts, self.strSexFemale: int_Replicate_Mating_Count_UnNat_Mortality_Starts}, globalsSS.MortalityApplication.static_str_Mortality_Application_Model__UnNat:{self.strSexMale: 3, self.strSexFemale: 3}, globalsSS.MortalityApplication.static_str_Mortality_Scaling_Total__UnNat:{self.strSexMale: 262*int_BAU_Mortality_Multiplier, self.strSexFemale: 166*int_BAU_Mortality_Multiplier}} #dict_Mortality_Application_Specs_By_Sex__UnNATURAL     
                        self.Arg_Survival_UnNatural = {self.strSexMale:{12:0.981,24:0.966,36:0.973,48:0.973,60:0.989,72:0.996,84:0.996,96:1.000,108:0.973,120:0.954,132:0.947,144:0.905,156:0.924,168:0.851,180:0.882,192:0.870,204:0.931,216:0.962,228:0.977,240:0.989,252:0.977,264:0.992,276:0.992,288:1.000,300:1.000,312:1.000,324:1.000,336:1.000}
                                                      ,self.strSexFemale:{12:0.994,24:0.958,36:0.958,48:0.958,60:0.982,72:0.988,84:0.994,96:1.000,108:0.994,120:1.000,132:0.982,144:0.988,156:0.994,168:0.952,180:0.934,192:0.855,204:0.880,216:0.892,228:0.904,240:0.934,252:0.928,264:0.976,276:0.982,288:1.000,300:1.000,312:0.988,324:0.994,336:0.994}}
                        
                        self.arg_int_Sample_Pop_When_Mating_Count_Divisible_By = 1
                        pass
                    elif int_Scenario_Code_D == 2: 
                        ''' Fishing scenario 2: Business as usual  - Fullfill Quota
                        Quota Multiplier = 2
                        '''
                        int_BAU_Mortality_Multiplier = 2
                        int_Replicate_Mating_Count_UnNat_Mortality_Starts = 58
                        self.Arg_Allow_UnNatural_Mortality = True                
                        self.Arg_Mortality_Application_Specs__UnNat = {globalsSS.MortalityApplication.static_str_Mating_Mortlity_Starts__UnNat:{self.strSexMale: int_Replicate_Mating_Count_UnNat_Mortality_Starts, self.strSexFemale: int_Replicate_Mating_Count_UnNat_Mortality_Starts}, globalsSS.MortalityApplication.static_str_Mortality_Application_Model__UnNat:{self.strSexMale: 3, self.strSexFemale: 3}, globalsSS.MortalityApplication.static_str_Mortality_Scaling_Total__UnNat:{self.strSexMale: 166*int_BAU_Mortality_Multiplier, self.strSexFemale: 262*int_BAU_Mortality_Multiplier}} #dict_Mortality_Application_Specs_By_Sex__UnNATURAL     
                        self.Arg_Survival_UnNatural = {self.strSexMale:{12:0.981,24:0.966,36:0.973,48:0.973,60:0.989,72:0.996,84:0.996,96:1.000,108:0.973,120:0.954,132:0.947,144:0.905,156:0.924,168:0.851,180:0.882,192:0.870,204:0.931,216:0.962,228:0.977,240:0.989,252:0.977,264:0.992,276:0.992,288:1.000,300:1.000,312:1.000,324:1.000,336:1.000}
                                                      ,self.strSexFemale:{12:0.994,24:0.958,36:0.958,48:0.958,60:0.982,72:0.988,84:0.994,96:1.000,108:0.994,120:1.000,132:0.982,144:0.988,156:0.994,168:0.952,180:0.934,192:0.855,204:0.880,216:0.892,228:0.904,240:0.934,252:0.928,264:0.976,276:0.982,288:1.000,300:1.000,312:0.988,324:0.994,336:0.994}}
                        
                        self.arg_int_Sample_Pop_When_Mating_Count_Divisible_By = 1
                        pass
                    elif int_Scenario_Code_D == 3: 
                        ''' Fishing scenario 3: Business as usual  - Fullfill Quota
                        Quota Multiplier = 3
                        '''
                        int_BAU_Mortality_Multiplier = 3
                        int_Replicate_Mating_Count_UnNat_Mortality_Starts = 58
                        self.Arg_Allow_UnNatural_Mortality = True                
                        self.Arg_Mortality_Application_Specs__UnNat = {globalsSS.MortalityApplication.static_str_Mating_Mortlity_Starts__UnNat:{self.strSexMale: int_Replicate_Mating_Count_UnNat_Mortality_Starts, self.strSexFemale: int_Replicate_Mating_Count_UnNat_Mortality_Starts}, globalsSS.MortalityApplication.static_str_Mortality_Application_Model__UnNat:{self.strSexMale: 3, self.strSexFemale: 3}, globalsSS.MortalityApplication.static_str_Mortality_Scaling_Total__UnNat:{self.strSexMale: 166*int_BAU_Mortality_Multiplier, self.strSexFemale: 262*int_BAU_Mortality_Multiplier}} #dict_Mortality_Application_Specs_By_Sex__UnNATURAL     
                        self.Arg_Survival_UnNatural = {self.strSexMale:{12:0.981,24:0.966,36:0.973,48:0.973,60:0.989,72:0.996,84:0.996,96:1.000,108:0.973,120:0.954,132:0.947,144:0.905,156:0.924,168:0.851,180:0.882,192:0.870,204:0.931,216:0.962,228:0.977,240:0.989,252:0.977,264:0.992,276:0.992,288:1.000,300:1.000,312:1.000,324:1.000,336:1.000}
                                                      ,self.strSexFemale:{12:0.994,24:0.958,36:0.958,48:0.958,60:0.982,72:0.988,84:0.994,96:1.000,108:0.994,120:1.000,132:0.982,144:0.988,156:0.994,168:0.952,180:0.934,192:0.855,204:0.880,216:0.892,228:0.904,240:0.934,252:0.928,264:0.976,276:0.982,288:1.000,300:1.000,312:0.988,324:0.994,336:0.994}}
                        
                        self.arg_int_Sample_Pop_When_Mating_Count_Divisible_By = 1
                        pass
                    elif int_Scenario_Code_D == 4: 
                        ''' Fishing scenario 4: Extra Fishing scenario F4  holding pop size & Quota size constant for both species
                        '''
                        int_BAU_Mortality_Multiplier = 1
                        int_Replicate_Mating_Count_UnNat_Mortality_Starts = 58
                        self.Arg_Allow_UnNatural_Mortality = True                
                        self.Arg_Mortality_Application_Specs__UnNat = {globalsSS.MortalityApplication.static_str_Mating_Mortlity_Starts__UnNat:{self.strSexMale: int_Replicate_Mating_Count_UnNat_Mortality_Starts, self.strSexFemale: int_Replicate_Mating_Count_UnNat_Mortality_Starts}, globalsSS.MortalityApplication.static_str_Mortality_Application_Model__UnNat:{self.strSexMale: 3, self.strSexFemale: 3}, globalsSS.MortalityApplication.static_str_Mortality_Scaling_Total__UnNat:{self.strSexMale: 250*int_BAU_Mortality_Multiplier, self.strSexFemale: 250*int_BAU_Mortality_Multiplier}} #dict_Mortality_Application_Specs_By_Sex__UnNATURAL     
                        self.Arg_Survival_UnNatural = {self.strSexMale:{12:0.981,24:0.966,36:0.973,48:0.973,60:0.989,72:0.996,84:0.996,96:1.000,108:0.973,120:0.954,132:0.947,144:0.905,156:0.924,168:0.851,180:0.882,192:0.870,204:0.931,216:0.962,228:0.977,240:0.989,252:0.977,264:0.992,276:0.992,288:1.000,300:1.000,312:1.000,324:1.000,336:1.000}
                                                      ,self.strSexFemale:{12:0.994,24:0.958,36:0.958,48:0.958,60:0.982,72:0.988,84:0.994,96:1.000,108:0.994,120:1.000,132:0.982,144:0.988,156:0.994,168:0.952,180:0.934,192:0.855,204:0.880,216:0.892,228:0.904,240:0.934,252:0.928,264:0.976,276:0.982,288:1.000,300:1.000,312:0.988,324:0.994,336:0.994}}
                        
                        self.arg_int_Sample_Pop_When_Mating_Count_Divisible_By = 1
                        pass
                    pass
                    
                pass
            
                str_Arg_Pop_Size = str(self.Arg_Pop_Size)
                int_Len_Arg_Pop_Size = len(str_Arg_Pop_Size)
                str_UDF_Pop_Size = str_Arg_Pop_Size
                if int_Len_Arg_Pop_Size >= 4:
                    if str_Arg_Pop_Size[-3:] == '000':
                        str_UDF_Pop_Size = str_Arg_Pop_Size[:int_Len_Arg_Pop_Size-3] + 'K'
                    pass
                pass                        
                str_Scenario_Specific_Folder = 'N' + str_UDF_Pop_Size + '_' + str_Scenario_Desc_Code
                
                str_Pop_Replicates = 'PR' + str(self.Arg_Pop_Replicates)
                strRunSpecificUserDefinedFolder = self.str_Species_Code_Short + '\\' + self.str_Scenario_Code + '\\' + str_Pop_Replicates + '\\' + self.str_Species_Code + '_' + str_Scenario_Specific_Folder
            
                return strRunSpecificUserDefinedFolder

            def method_Simulation_PROD_Run_Specific_User_Defined_Folder__CAPL_V1(self):
                                
                strRunSpecificUserDefinedFolder = 'PROD_DEFAULT'

                '''
                LIFE HIST DATA - Geraghty 2014 - Using FEMALE Ages only - CONSERVATIVE
                Sandbar shark - Carcharhinus plumbeus
                    >> Life History Params
                    Maximum age              : 28 (f) <-- This is Geraghty MaxAge + 1  
                    Maximal mating age       : 27 (f) 32(m) <-- This is Geraghty MaxAge
                    Minimal mating age (m)   : 7 (7.0) <-- Age at which 50% are mature
                    Minimal mating age (fm)  : 10 (9.5) <-- Age at which 50% are mature
                        OR
                    Minimal mating age (m)   : 7 (7.1) <-- Age at which 95% are mature
                    Minimal mating age (fm)  : 15 (14.9) <-- Age at which 95% are mature
                    Litter sex ratio (fm:m)  : 1:1
                    Litter size(fm)          : 8 (7.8 Mean, S.E: 0.5, Range: 3- 12) PG - Fecundity did not increase with age
                    Gestation          (G)   : 12 <-- PG: ~24, WA: =< 12, NT: =<12, NWA: >12
                    Reproductive Cycle (R)   : 2  <-- PG: -, WA: 2, NT: 2, NWA: ~2
                    >> Survival Params
                    Natural survival         : 0.88 Age independent (mean of 5 estimates in McAuley, Simpfendorfer & Hall (2007) from (Pauly (1980), Hoenig (1983) method (i), Hoenig (1983) method (ii), Hoenig (1983) method (iii), Jensen (1996))
                    NOTE: For Nat Survival Prob Dist #Max Age must be 1.0 (100% Survival) for UnNatural mortality to work.  These animals will all die at mating anyway. 
                    Fishing survival         : As per 2008 Observer Catch by Sex
                    >> AgeNe Params
                    bx(fm)                   : 2.6   (7.8 offspring every 3 years = 7.8/3 = 2.6)
                    sx(fm)                   : 0.88 Age independent
                    >> Genetic Params
                    Genetic data source      : Empirical - NSW - FRDC 
                    #Loci                    :19 (Average of 10 alleles per locus) <-- From empirical CAPL Genetic data
                    Allele Freqs             : Random Drichlet
                    Polyandry                : 2 <-- 2.3 Male mates per litter (range 2-5 min. male mates, n = 20 litters) Portnoy 2007
                    '''
                            
                ''' Set the standard model agruments '''
                self.method_Simulation_Standard_Model_Arguments_CAPL_V1()

                '''
                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                SCENARIO SPECIFICATION
                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                '''
                #self.str_Scenario_Code = 'L0'
                self.str_Scenario_Code = 'L1'
                #self.str_Scenario_Code = 'L2'
                #self.str_Scenario_Code = 'L3'
                #self.str_Scenario_Code = 'L4'
                #self.str_Scenario_Code = 'L5'
                #self.str_Scenario_Code = 'L6'
                #self.str_Scenario_Code = 'L7'
                #self.str_Scenario_Code = 'L8'
                #self.str_Scenario_Code = 'L9'
                #self.str_Scenario_Code = 'L10'
                #self.str_Scenario_Code = 'L11'
                #self.str_Scenario_Code = 'L12'
                
                str_Scenario_Code_A = self.str_Scenario_Code[:1]
                str_Scenario_Code_B = self.str_Scenario_Code[1:]
                str_Scenario_Desc_Code = ''
                                                       
                '''
                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                POP REPLICATES
                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                '''                       
                self.Arg_Pop_Replicates = 1                    
                '''
                -----------------------
                Set POPULATION SIZE
                -----------------------
                '''
                if str_Scenario_Code_A == 'L':
                    self.Arg_Pop_Size = 130000
                    pass
                elif str_Scenario_Code_A == 'H': 
                    self.Arg_Pop_Size = 1000
                    pass
                pass
               
                if str_Scenario_Code_B == '0':
                    ''' Scenario 0:  Same as Scenario 1 but with +++> ...
                    Senescence Allowed YES (SY)
                    '''               
                    str_Scenario_Desc_Code = 'M114_EAF_08P_M21_G6_R1_UMN_A50_SY'
                              
                    self.Arg_Allow_Senescence = True
                    
                    pass
                elif str_Scenario_Code_B == '1':
                    ''' Scenario 1:
                    MinMaturityAge A50 (A50)
                    Matings 114 (M114), EMPIRICAL Allele Freqs (EAF)
                    Offspring Poisson 8 per litter (8P),Mating Scheme 21 (M21),
                    Mating in Aug (8), Gestation 6 months (Feb,2), Resting 1 months (Mar, 3) <--- *** Gest (G6) Rest (G1)***
                    Non-natural Mortality No (UMN), Senescence Allowed No
                    '''                         
                    str_Scenario_Desc_Code = 'M114_EAF_08P_M21_G6_R1_UMN_A50'
                    
                    #self.Arg_Allow_Senescence = False
                    
                    pass
                elif str_Scenario_Code_B == '2': 
                    ''' Scenario 2:  Same as Scenario 1 but with +++> ...
                    MinMaturityAge A95 (A95)
                    '''
                    str_Scenario_Desc_Code = 'M114_EAF_08P_M21_G6_R1_UMN_A95'
                    
                    self.Arg_Min_Mating_Age = 15
                    
                    pass
                elif str_Scenario_Code_B == '3': 
                    ''' Scenario 3:  Same as Scenario 1 but with +++> ...
                    Mating in Aug (8), Parturition in Sept (9), Gestation 13 months (G13), Resting 10 months (july, R10) <-- G13_R10
                    '''
                    str_Scenario_Desc_Code = 'M114_EAF_08P_M21_G13_R10_UMN_A50'
                    
                    self.Arg_Parturition_Month = 9
                    self.Arg_Gestation_Length_In_Months = 13
                    self.Arg_Reproductive_Rest_Length_In_Months = 10
                    
                    pass
                elif str_Scenario_Code_B == '4': 
                    ''' Scenario 4:  Same as Scenario 3 but with +++> ...
                    MinMaturityAge A95 (A95)
                    '''
                    str_Scenario_Desc_Code = 'M114_EAF_08P_M21_G13_R10_UMN_A95'
                    
                    self.Arg_Min_Mating_Age = 15
                    
                    self.Arg_Parturition_Month = 9
                    self.Arg_Gestation_Length_In_Months = 13
                    self.Arg_Reproductive_Rest_Length_In_Months = 10
                    
                    pass
                elif str_Scenario_Code_B == '5': 
                    ''' Scenario 5:  Same as Scenario 1 but with +++> ...
                    Mating Scheme 24 (M24) Random Mating Without Parent Replacement & Hermaphrodites NOT allowed
                    '''
                    str_Scenario_Desc_Code = 'M114_EAF_08P_M24_G6_R1_UMN_A50'
                    
                    self.Arg_Mating_Scheme = 24
                    
                    pass
                elif str_Scenario_Code_B == '6': 
                    ''' Scenario 6:  Same as Scenario 5 but with +++> ...
                    MinMaturityAge A95 (A95)
                    '''
                    str_Scenario_Desc_Code = 'M114_EAF_08P_M24_G6_R1_UMN_A95'
                    
                    self.Arg_Min_Mating_Age = 15
                    
                    self.Arg_Mating_Scheme = 24
                    
                    pass
                elif str_Scenario_Code_B == '7': 
                    ''' Scenario 5:  Same as Scenario 1 but with +++> ...
                    Mating in Aug (8), Parturition in Sept (9), Gestation 13 months (G13), Resting 10 months (july, R10) <-- G13_R10
                    Mating Scheme 24 (M24) Random Mating Without Parent Replacement & Hermaphrodites NOT allowed
                    '''
                    str_Scenario_Desc_Code = 'M114_EAF_08P_M24_G13_R10_UMN_A50'
                    
                    self.Arg_Parturition_Month = 9
                    self.Arg_Gestation_Length_In_Months = 13
                    self.Arg_Reproductive_Rest_Length_In_Months = 10
                    
                    self.Arg_Mating_Scheme = 24
                    
                    pass
                elif str_Scenario_Code_B == '8': 
                    ''' Scenario 8:  Same as Scenario 7 but with +++> ...
                    MinMaturityAge A95 (A95)
                    '''
                    str_Scenario_Desc_Code = 'M114_EAF_08P_M24_G13_R10_UMN_A95'
                    
                    self.Arg_Min_Mating_Age = 15
                    
                    self.Arg_Parturition_Month = 9
                    self.Arg_Gestation_Length_In_Months = 13
                    self.Arg_Reproductive_Rest_Length_In_Months = 10
                    
                    self.Arg_Mating_Scheme = 24
                    
                    pass
                elif str_Scenario_Code_B == '9': 
                    ''' Scenario 9:  Same as Scenario 1 but with +++> ...
                    Mating Scheme 25 with 2 mates (M25M2) Polyandrous Mating With 2 Mates With Parent Replacement & Hermaphrodites allowed
                    '''
                    str_Scenario_Desc_Code = 'M114_EAF_08P_M25M2_G6_R1_UMN_A50'
                    
                    self.Arg_Mating_Scheme = 25
                                            
                    self.Arg_Mating_Scheme_Polygamy_Num_Mates = 2
                    self.Arg_Num_Offspring_Per_Mate = 8/self.Arg_Mating_Scheme_Polygamy_Num_Mates
                    
                    pass
                elif str_Scenario_Code_B == '10': 
                    ''' Scenario 10:  Same as Scenario 9 but with +++> ...
                    MinMaturityAge A95 (A95)
                    '''
                    str_Scenario_Desc_Code = 'M114_EAF_08P_M25M2_G6_R1_UMN_A95'
                    
                    self.Arg_Min_Mating_Age = 15
                    
                    self.Arg_Mating_Scheme = 25
                                            
                    self.Arg_Mating_Scheme_Polygamy_Num_Mates = 2
                    self.Arg_Num_Offspring_Per_Mate = 8/self.Arg_Mating_Scheme_Polygamy_Num_Mates
                    
                    pass
                elif str_Scenario_Code_B == '11': 
                    ''' Scenario 11:  Same as Scenario 1 but with +++> ...
                    Mating in Aug (8), Parturition in Sept (9), Gestation 13 months (G13), Resting 10 months (july, R10) <-- G13_R10
                    Mating Scheme 25 with 2 mates (M25M2) Polyandrous Mating With 2 Mates With Parent Replacement & Hermaphrodites allowed
                    '''
                    str_Scenario_Desc_Code = 'M114_EAF_08P_M25M2_G13_R10_UMN_A50'
                    
                    self.Arg_Parturition_Month = 9
                    self.Arg_Gestation_Length_In_Months = 13
                    self.Arg_Reproductive_Rest_Length_In_Months = 10
                                            
                    self.Arg_Mating_Scheme = 25
                                            
                    self.Arg_Mating_Scheme_Polygamy_Num_Mates = 2
                    self.Arg_Num_Offspring_Per_Mate = 8/self.Arg_Mating_Scheme_Polygamy_Num_Mates
                    
                    pass                    
                elif str_Scenario_Code_B == '12': 
                    ''' Scenario 12:  Same as Scenario 11 but with +++> ...
                    MinMaturityAge A95 (A95)
                    '''
                    str_Scenario_Desc_Code = 'M114_EAF_08P_M25M2_G13_R10_UMN_A95'
                    
                    self.Arg_Min_Mating_Age = 15
                    
                    self.Arg_Parturition_Month = 9
                    self.Arg_Gestation_Length_In_Months = 13
                    self.Arg_Reproductive_Rest_Length_In_Months = 10
                                            
                    self.Arg_Mating_Scheme = 25
                                            
                    self.Arg_Mating_Scheme_Polygamy_Num_Mates = 2
                    self.Arg_Num_Offspring_Per_Mate = 8/self.Arg_Mating_Scheme_Polygamy_Num_Mates
                    
                    pass                    
                pass
            
                str_Arg_Pop_Size = str(self.Arg_Pop_Size)
                int_Len_Arg_Pop_Size = len(str_Arg_Pop_Size)
                str_UDF_Pop_Size = str_Arg_Pop_Size
                if int_Len_Arg_Pop_Size >= 4:
                    if str_Arg_Pop_Size[-3:] == '000':
                        str_UDF_Pop_Size = str_Arg_Pop_Size[:int_Len_Arg_Pop_Size-3] + 'K'
                    pass
                pass                        
                str_Scenario_Specific_Folder = 'N' + str_UDF_Pop_Size + '_' + str_Scenario_Desc_Code
                
                str_Pop_Replicates = 'PR' + str(self.Arg_Pop_Replicates)
                strRunSpecificUserDefinedFolder = self.str_Species_Code_Short + '\\' + self.str_Scenario_Code + '\\' + str_Pop_Replicates + '\\' + self.str_Species_Code + '_' + str_Scenario_Specific_Folder
            
                return strRunSpecificUserDefinedFolder


            def method_Simulation_PROD_AUTO_Run_Specific_User_Defined_Folder__CAOB_V1(self):
                                
                strRunSpecificUserDefinedFolder = 'PROD_DEFAULT'

                '''
                LIFE HIST DATA - Geraghty 2014 - Using FEMALE Ages only - CONSERVATIVE
                Dusky shark - Carcharhinus obscurus
                    >> Life History Params
                    Maximum age              : 34 (f) <-- This is Geraghty MaxAge + 1  
                    Maximal mating age       : 33 (f) 32(m) <-- This is Geraghty MaxAge
                    Minimal mating age (m)   : 15 (14.6) <-- Age at which 50% are mature
                    Minimal mating age (fm)  : 16 (15.5) <-- Age at which 50% are mature
                        OR
                    Minimal mating age (m)   : 20 (20.2) <-- Age at which 95% are mature
                    Minimal mating age (fm)  : 25 (24.7) <-- Age at which 95% are mature
                    Litter sex ratio (fm:m)  : 1:1
                    Litter size(fm)          : 10 (9.6 Mean, S.E: 0.8, Range: 5- 12) PG - Fecundity did not increase with age
                    Gestation          (G)   : PG: ~22, WA: =< 24, SA: =<24, NWA: >20
                    Reproductive Cycle (R)   : PG: -, WA: 2-3, SA: 3, NWA: 3
                    >> Survival Params
                    Natural survival         : 0.913 Age independent (mean of 5 estimates in McAuley, Simpfendorfer & Hall (2007) from (Pauly (1980), Hoenig (1983) method (i), Hoenig (1983) method (ii), Hoenig (1983) method (iii), Jensen (1996))
                    NOTE: For Nat Survival Prob Dist #Max Age must be 1.0 (100% Survival) for UnNatural mortality to work.  These animals will all die at mating anyway. 
                    Fishing survival         : As per 2008 Observer Catch by Sex
                    >> AgeNe Params
                    bx(fm)                   : 3.3   (9.6 offspring every 3 years = 10/3 = 3.3)
                    sx(fm)                   : 0.913 Age independent
                    >> Genetic Params
                    Genetic data source      : Empirical - NSW - FRDC 
                    #Loci                    : 21 (Average of 10 alleles per locus) <-- From empirical CAOB Genetic data
                    Allele Freqs             : Random Drichlet
                '''
                bool_Allow_UnNat_Mortality = False
                str_Scenario_Desc_Code = ''
                str_Scenario_Code_A = self.str_Scenario_Code[:1]
                str_Scenario_Code_B = self.str_Scenario_Code[1:3]
                int_Scenario_Code_B = int(str_Scenario_Code_B)
                if len(self.str_Scenario_Code) > 3:
                    str_Scenario_Code_C = self.str_Scenario_Code[3:4]
                    if str_Scenario_Code_C == 'F':
                        bool_Allow_UnNat_Mortality = True
                        str_UnNat_Mortality_Folder_Code = 'UMY'                                                        
                        str_Scenario_Code_D = self.str_Scenario_Code[-1:]
                        int_Scenario_Code_D = int(str_Scenario_Code_D)
                    else:
                        str_UnNat_Mortality_Folder_Code = 'UMN'
                    pass
                else:
                    str_UnNat_Mortality_Folder_Code = 'UMN'                                                       
                pass
            
                if int_Scenario_Code_B == 0:
                    ''' Scenario 0:  Same as Scenario 1 but with +++> ...
                    Senescence Allowed YES (SY)
                    '''               
                    str_Scenario_Desc_Code = 'M138_EAF_10P_M21_G6_R1_' + str_UnNat_Mortality_Folder_Code + '_A50_SY'
                              
                    self.Arg_Allow_Senescence = True
                    
                    pass
                #elif str_Scenario_Code_B == '1':
                elif int_Scenario_Code_B == 1:
                    ''' Scenario 1:
                    MinMaturityAge A50 (A50)
                    Matings 138 (M138), EMPIRICAL Allele Freqs (EAF)
                    Offspring Poisson 10 per litter (10P),Mating Scheme 21 (M21),
                    Mating in Aug (8), Gestation 6 months (Feb,2), Resting 1 months (Mar, 3) <--- *** Gest (G6) Rest (G1)***
                    Non-natural Mortality No (UMN), Senescence Allowed No
                    '''                         
                    str_Scenario_Desc_Code = 'M138_EAF_10P_M21_G6_R1_' + str_UnNat_Mortality_Folder_Code + '_A50'
                    
                    #self.Arg_Allow_Senescence = False
                    
                    pass
                elif int_Scenario_Code_B == 2: 
                    ''' Scenario 2:  Same as Scenario 1 but with +++> ...
                    MinMaturityAge A95 (A95)
                    '''
                    str_Scenario_Desc_Code = 'M138_EAF_10P_M21_G6_R1_UMN_A95'
                    
                    self.Arg_Min_Mating_Age = 25
                    
                    pass
                elif int_Scenario_Code_B == 3: 
                    ''' Scenario 3:  Same as Scenario 1 but with +++> ...
                    Mating in Aug (8), Parturition in Jun (6), Gestation 22 months (G22), Resting 12 months (july, R12) <-- G22_R12
                    '''
                    str_Scenario_Desc_Code = 'M138_EAF_10P_M21_G22_R12_UMN_A50'
                    
                    self.Arg_Parturition_Month = 6
                    self.Arg_Gestation_Length_In_Months = 22
                    self.Arg_Reproductive_Rest_Length_In_Months = 13
                    
                    pass
                elif int_Scenario_Code_B == 4: 
                    ''' Scenario 4:  Same as Scenario 3 but with +++> ...
                    MinMaturityAge A95 (A95)
                    '''
                    str_Scenario_Desc_Code = 'M138_EAF_10P_M21_G22_R12_UMN_A95'
                    
                    self.Arg_Min_Mating_Age = 25
                    
                    self.Arg_Parturition_Month = 6
                    self.Arg_Gestation_Length_In_Months = 22
                    self.Arg_Reproductive_Rest_Length_In_Months = 12
                    
                    pass
                elif int_Scenario_Code_B == 5: 
                    ''' Scenario 5:  Same as Scenario 1 but with +++> ...
                    Mating Scheme 24 (M24) Random Mating Without Parent Replacement & Hermaphrodites NOT allowed
                    '''
                    str_Scenario_Desc_Code = 'M138_EAF_10P_M24_G6_R1_UMN_A50'
                    
                    self.Arg_Mating_Scheme = 24
                    
                    pass
                elif int_Scenario_Code_B == 6: 
                    ''' Scenario 6:  Same as Scenario 5 but with +++> ...
                    MinMaturityAge A95 (A95)
                    '''
                    str_Scenario_Desc_Code = 'M138_EAF_10P_M24_G6_R1_UMN_A95'
                    
                    self.Arg_Min_Mating_Age = 25
                    
                    self.Arg_Mating_Scheme = 24
                    
                    pass
                elif int_Scenario_Code_B == 7: 
                    ''' Scenario 5:  Same as Scenario 1 but with +++> ...
                    Mating in Aug (8), Parturition in Jun (6), Gestation 22 months (G22), Resting 12 months (july, R12) <-- G22_R12
                    Mating Scheme 24 (M24) Random Mating Without Parent Replacement & Hermaphrodites NOT allowed
                    '''
                    str_Scenario_Desc_Code = 'M138_EAF_10P_M24_G22_R12_UMN_A50'
                    
                    self.Arg_Parturition_Month = 6
                    self.Arg_Gestation_Length_In_Months = 22
                    self.Arg_Reproductive_Rest_Length_In_Months = 12
                    
                    self.Arg_Mating_Scheme = 24
                    
                    pass
                elif int_Scenario_Code_B == 8: 
                    ''' Scenario 8:  Same as Scenario 7 but with +++> ...
                    MinMaturityAge A95 (A95)
                    '''
                    str_Scenario_Desc_Code = 'M138_EAF_10P_M24_G22_R12_UMN_A95'
                    
                    self.Arg_Min_Mating_Age = 25
                    
                    self.Arg_Parturition_Month = 6
                    self.Arg_Gestation_Length_In_Months = 22
                    self.Arg_Reproductive_Rest_Length_In_Months = 12
                    
                    self.Arg_Mating_Scheme = 24
                    
                    pass
                elif int_Scenario_Code_B == 9: 
                    ''' Scenario 9:  Same as Scenario 1 but with +++> ...
                    Mating Scheme 25 with 2 mates (M25M2) Polyandrous Mating With 2 Mates With Parent Replacement & Hermaphrodites allowed
                    '''
                    str_Scenario_Desc_Code = 'M138_EAF_10P_M25M2_G6_R1_UMN_A50'
                    
                    self.Arg_Mating_Scheme = 25
                                            
                    self.Arg_Mating_Scheme_Polygamy_Num_Mates = 2
                    #self.Arg_Num_Offspring_Per_Mate = 10/ self.Arg_Mating_Scheme_Polygamy_Num_Mates
                    self.Arg_Min_Num_Offspring_Per_Mate = 6 / self.Arg_Mating_Scheme_Polygamy_Num_Mates
                    self.Arg_Max_Num_Offspring_Per_Mate = 12 / self.Arg_Mating_Scheme_Polygamy_Num_Mates
                    pass
                elif int_Scenario_Code_B == 10: 
                    ''' Scenario 10:  Same as Scenario 9 but with +++> ...
                    MinMaturityAge A95 (A95)
                    '''
                    str_Scenario_Desc_Code = 'M138_EAF_10P_M25M2_G6_R1_UMN_A95'
                    
                    self.Arg_Min_Mating_Age = 25
                    
                    self.Arg_Mating_Scheme = 25
                                            
                    self.Arg_Mating_Scheme_Polygamy_Num_Mates = 2
                    #self.Arg_Num_Offspring_Per_Mate = 10/ self.Arg_Mating_Scheme_Polygamy_Num_Mates
                    self.Arg_Min_Num_Offspring_Per_Mate = 6 / self.Arg_Mating_Scheme_Polygamy_Num_Mates
                    self.Arg_Max_Num_Offspring_Per_Mate = 12 / self.Arg_Mating_Scheme_Polygamy_Num_Mates
                    pass
                elif int_Scenario_Code_B == 11: 
                    ''' Scenario 11:  Same as Scenario 1 but with +++> ...
                    Mating in Aug (8), Parturition in Jun (6), Gestation 22 months (G22), Resting 12 months (july, R12) <-- G22_R12
                    Mating Scheme 25 with 2 mates (M25M2) Polyandrous Mating With 2 Mates With Parent Replacement & Hermaphrodites allowed
                    '''
                    str_Scenario_Desc_Code = 'M138_EAF_10P_M25M2_G22_R12_UMN_A50'
                    
                    self.Arg_Parturition_Month = 6
                    self.Arg_Gestation_Length_In_Months = 22
                    self.Arg_Reproductive_Rest_Length_In_Months = 12
                                            
                    self.Arg_Mating_Scheme = 25
                                            
                    self.Arg_Mating_Scheme_Polygamy_Num_Mates = 2
                    #self.Arg_Num_Offspring_Per_Mate = 10/ self.Arg_Mating_Scheme_Polygamy_Num_Mates
                    self.Arg_Min_Num_Offspring_Per_Mate = 6 / self.Arg_Mating_Scheme_Polygamy_Num_Mates
                    self.Arg_Max_Num_Offspring_Per_Mate = 12 / self.Arg_Mating_Scheme_Polygamy_Num_Mates
                    pass                    
                elif int_Scenario_Code_B == 12: 
                    ''' Scenario 12:  Same as Scenario 11 but with +++> ...
                    MinMaturityAge A95 (A95)
                    '''
                    str_Scenario_Desc_Code = 'M138_EAF_10P_M25M2_G22_R12_UMN_A95'
                    
                    self.Arg_Min_Mating_Age = 25
                    
                    self.Arg_Parturition_Month = 6
                    self.Arg_Gestation_Length_In_Months = 22
                    self.Arg_Reproductive_Rest_Length_In_Months = 12
                                            
                    self.Arg_Mating_Scheme = 25
                                            
                    self.Arg_Mating_Scheme_Polygamy_Num_Mates = 2
                    #self.Arg_Num_Offspring_Per_Mate = 10/ self.Arg_Mating_Scheme_Polygamy_Num_Mates
                    self.Arg_Min_Num_Offspring_Per_Mate = 6 / self.Arg_Mating_Scheme_Polygamy_Num_Mates
                    self.Arg_Max_Num_Offspring_Per_Mate = 12 / self.Arg_Mating_Scheme_Polygamy_Num_Mates
                    pass                    
                pass
            
                ''' Include UnNatural mortality scenarios '''
                if bool_Allow_UnNat_Mortality and len(str_Scenario_Code_C) > 0:
                    if int_Scenario_Code_D == 1:
                        ''' Fishing scenario 1: Business as usual  - Fullfill Quota
                        Quota Multiplier = 1
                        '''
                        int_BAU_Mortality_Multiplier = 1
                        int_Replicate_Mating_Count_UnNat_Mortality_Starts = 70
                        self.Arg_Allow_UnNatural_Mortality = True                
                        self.Arg_Mortality_Application_Specs__UnNat = {globalsSS.MortalityApplication.static_str_Mating_Mortlity_Starts__UnNat:{self.strSexMale: int_Replicate_Mating_Count_UnNat_Mortality_Starts, self.strSexFemale: int_Replicate_Mating_Count_UnNat_Mortality_Starts}, globalsSS.MortalityApplication.static_str_Mortality_Application_Model__UnNat:{self.strSexMale: 3, self.strSexFemale: 3}, globalsSS.MortalityApplication.static_str_Mortality_Scaling_Total__UnNat:{self.strSexMale: 140*int_BAU_Mortality_Multiplier, self.strSexFemale: 135*int_BAU_Mortality_Multiplier}} #dict_Mortality_Application_Specs_By_Sex__UnNATURAL     
                        self.Arg_Survival_UnNatural = {self.strSexMale:{12:0.950,24:0.971,36:0.971,48:0.986,60:1.000,72:0.979,84:0.986,96:0.986,108:1.000,120:1.000,132:0.993,144:0.993,156:1.000,168:1.000,180:1.000,192:1.000,204:1.000,216:0.964,228:0.957,240:0.957,252:0.957,264:0.921,276:0.921,288:0.907,300:0.871,312:0.907,324:0.921,336:0.971,348:0.964,360:0.986,372:1.000,384:1.000,396:0.979,408:1.000}
                                                      ,self.strSexFemale:{12:0.963,24:0.985,36:0.956,48:0.978,60:0.948,72:0.978,84:0.970,96:0.963,108:0.963,120:0.993,132:0.993,144:0.985,156:0.993,168:0.978,180:1.000,192:0.993,204:0.993,216:0.985,228:0.978,240:0.970,252:0.993,264:0.985,276:0.956,288:0.963,300:0.926,312:0.956,324:0.867,336:0.933,348:0.963,360:0.970,372:0.978,384:0.978,396:0.985,408:0.985}}
                        
                        self.arg_int_Sample_Pop_When_Mating_Count_Divisible_By = 1
                        pass
                    elif int_Scenario_Code_D == 2: 
                        ''' Fishing scenario 2: Business as usual  - Fullfill Quota
                        Quota Multiplier = 2
                        '''
                        int_BAU_Mortality_Multiplier = 2
                        int_Replicate_Mating_Count_UnNat_Mortality_Starts = 70
                        self.Arg_Allow_UnNatural_Mortality = True                
                        self.Arg_Mortality_Application_Specs__UnNat = {globalsSS.MortalityApplication.static_str_Mating_Mortlity_Starts__UnNat:{self.strSexMale: int_Replicate_Mating_Count_UnNat_Mortality_Starts, self.strSexFemale: int_Replicate_Mating_Count_UnNat_Mortality_Starts}, globalsSS.MortalityApplication.static_str_Mortality_Application_Model__UnNat:{self.strSexMale: 3, self.strSexFemale: 3}, globalsSS.MortalityApplication.static_str_Mortality_Scaling_Total__UnNat:{self.strSexMale: 140*int_BAU_Mortality_Multiplier, self.strSexFemale: 135*int_BAU_Mortality_Multiplier}} #dict_Mortality_Application_Specs_By_Sex__UnNATURAL     
                        self.Arg_Survival_UnNatural = {self.strSexMale:{12:0.950,24:0.971,36:0.971,48:0.986,60:1.000,72:0.979,84:0.986,96:0.986,108:1.000,120:1.000,132:0.993,144:0.993,156:1.000,168:1.000,180:1.000,192:1.000,204:1.000,216:0.964,228:0.957,240:0.957,252:0.957,264:0.921,276:0.921,288:0.907,300:0.871,312:0.907,324:0.921,336:0.971,348:0.964,360:0.986,372:1.000,384:1.000,396:0.979,408:1.000}
                                                      ,self.strSexFemale:{12:0.963,24:0.985,36:0.956,48:0.978,60:0.948,72:0.978,84:0.970,96:0.963,108:0.963,120:0.993,132:0.993,144:0.985,156:0.993,168:0.978,180:1.000,192:0.993,204:0.993,216:0.985,228:0.978,240:0.970,252:0.993,264:0.985,276:0.956,288:0.963,300:0.926,312:0.956,324:0.867,336:0.933,348:0.963,360:0.970,372:0.978,384:0.978,396:0.985,408:0.985}}
                        
                        self.arg_int_Sample_Pop_When_Mating_Count_Divisible_By = 1
                        pass
                    elif int_Scenario_Code_D == 3: 
                        ''' Fishing scenario 3: Business as usual  - Fullfill Quota
                        Quota Multiplier = 3
                        '''
                        int_BAU_Mortality_Multiplier = 3
                        int_Replicate_Mating_Count_UnNat_Mortality_Starts = 70
                        self.Arg_Allow_UnNatural_Mortality = True                
                        self.Arg_Mortality_Application_Specs__UnNat = {globalsSS.MortalityApplication.static_str_Mating_Mortlity_Starts__UnNat:{self.strSexMale: int_Replicate_Mating_Count_UnNat_Mortality_Starts, self.strSexFemale: int_Replicate_Mating_Count_UnNat_Mortality_Starts}, globalsSS.MortalityApplication.static_str_Mortality_Application_Model__UnNat:{self.strSexMale: 3, self.strSexFemale: 3}, globalsSS.MortalityApplication.static_str_Mortality_Scaling_Total__UnNat:{self.strSexMale: 140*int_BAU_Mortality_Multiplier, self.strSexFemale: 135*int_BAU_Mortality_Multiplier}} #dict_Mortality_Application_Specs_By_Sex__UnNATURAL     
                        self.Arg_Survival_UnNatural = {self.strSexMale:{12:0.950,24:0.971,36:0.971,48:0.986,60:1.000,72:0.979,84:0.986,96:0.986,108:1.000,120:1.000,132:0.993,144:0.993,156:1.000,168:1.000,180:1.000,192:1.000,204:1.000,216:0.964,228:0.957,240:0.957,252:0.957,264:0.921,276:0.921,288:0.907,300:0.871,312:0.907,324:0.921,336:0.971,348:0.964,360:0.986,372:1.000,384:1.000,396:0.979,408:1.000}
                                                      ,self.strSexFemale:{12:0.963,24:0.985,36:0.956,48:0.978,60:0.948,72:0.978,84:0.970,96:0.963,108:0.963,120:0.993,132:0.993,144:0.985,156:0.993,168:0.978,180:1.000,192:0.993,204:0.993,216:0.985,228:0.978,240:0.970,252:0.993,264:0.985,276:0.956,288:0.963,300:0.926,312:0.956,324:0.867,336:0.933,348:0.963,360:0.970,372:0.978,384:0.978,396:0.985,408:0.985}}
                        
                        self.arg_int_Sample_Pop_When_Mating_Count_Divisible_By = 1
                        pass
                    elif int_Scenario_Code_D == 4: 
                        ''' Fishing scenario 4: Extra Fishing scenario F4  holding pop size & Quota size constant for both species
                        '''
                        int_BAU_Mortality_Multiplier = 1
                        int_Replicate_Mating_Count_UnNat_Mortality_Starts = 70
                        self.Arg_Allow_UnNatural_Mortality = True                
                        self.Arg_Mortality_Application_Specs__UnNat = {globalsSS.MortalityApplication.static_str_Mating_Mortlity_Starts__UnNat:{self.strSexMale: int_Replicate_Mating_Count_UnNat_Mortality_Starts, self.strSexFemale: int_Replicate_Mating_Count_UnNat_Mortality_Starts}, globalsSS.MortalityApplication.static_str_Mortality_Application_Model__UnNat:{self.strSexMale: 3, self.strSexFemale: 3}, globalsSS.MortalityApplication.static_str_Mortality_Scaling_Total__UnNat:{self.strSexMale: 250*int_BAU_Mortality_Multiplier, self.strSexFemale: 250*int_BAU_Mortality_Multiplier}} #dict_Mortality_Application_Specs_By_Sex__UnNATURAL     
                        self.Arg_Survival_UnNatural = {self.strSexMale:{12:0.950,24:0.971,36:0.971,48:0.986,60:1.000,72:0.979,84:0.986,96:0.986,108:1.000,120:1.000,132:0.993,144:0.993,156:1.000,168:1.000,180:1.000,192:1.000,204:1.000,216:0.964,228:0.957,240:0.957,252:0.957,264:0.921,276:0.921,288:0.907,300:0.871,312:0.907,324:0.921,336:0.971,348:0.964,360:0.986,372:1.000,384:1.000,396:0.979,408:1.000}
                                                      ,self.strSexFemale:{12:0.963,24:0.985,36:0.956,48:0.978,60:0.948,72:0.978,84:0.970,96:0.963,108:0.963,120:0.993,132:0.993,144:0.985,156:0.993,168:0.978,180:1.000,192:0.993,204:0.993,216:0.985,228:0.978,240:0.970,252:0.993,264:0.985,276:0.956,288:0.963,300:0.926,312:0.956,324:0.867,336:0.933,348:0.963,360:0.970,372:0.978,384:0.978,396:0.985,408:0.985}}
                        
                        self.arg_int_Sample_Pop_When_Mating_Count_Divisible_By = 1

                    pass
                    
                pass
              
                str_Arg_Pop_Size = str(self.Arg_Pop_Size)
                int_Len_Arg_Pop_Size = len(str_Arg_Pop_Size)
                str_UDF_Pop_Size = str_Arg_Pop_Size
                if int_Len_Arg_Pop_Size >= 4:
                    if str_Arg_Pop_Size[-3:] == '000':
                        str_UDF_Pop_Size = str_Arg_Pop_Size[:int_Len_Arg_Pop_Size-3] + 'K'
                    pass
                pass                        
                str_Scenario_Specific_Folder = 'N' + str_UDF_Pop_Size + '_' + str_Scenario_Desc_Code
                
                str_Pop_Replicates = 'PR' + str(self.Arg_Pop_Replicates)
                strRunSpecificUserDefinedFolder = self.str_Species_Code_Short + '\\' + self.str_Scenario_Code + '\\' + str_Pop_Replicates + '\\' + self.str_Species_Code + '_' + str_Scenario_Specific_Folder
            
                return strRunSpecificUserDefinedFolder
                
            def method_Simulation_PROD_MANUAL_Run_Specific_User_Defined_Folder__CAOB_V1(self):
                                
                strRunSpecificUserDefinedFolder = 'PROD_DEFAULT'

                '''
                LIFE HIST DATA - Geraghty 2014 - Using FEMALE Ages only - CONSERVATIVE
                Dusky shark - Carcharhinus obscurus
                    >> Life History Params
                    Maximum age              : 34 (f) <-- This is Geraghty MaxAge + 1  
                    Maximal mating age       : 33 (f) 32(m) <-- This is Geraghty MaxAge
                    Minimal mating age (m)   : 15 (14.6) <-- Age at which 50% are mature
                    Minimal mating age (fm)  : 16 (15.5) <-- Age at which 50% are mature
                        OR
                    Minimal mating age (m)   : 20 (20.2) <-- Age at which 95% are mature
                    Minimal mating age (fm)  : 25 (24.7) <-- Age at which 95% are mature
                    Litter sex ratio (fm:m)  : 1:1
                    Litter size(fm)          : 10 (9.6 Mean, S.E: 0.8, Range: 5- 12) PG - Fecundity did not increase with age
                    Gestation          (G)   : PG: ~22, WA: =< 24, SA: =<24, NWA: >20
                    Reproductive Cycle (R)   : PG: -, WA: 2-3, SA: 3, NWA: 3
                    >> Survival Params
                    Natural survival         : 0.913 Age independent (mean of 5 estimates in McAuley, Simpfendorfer & Hall (2007) from (Pauly (1980), Hoenig (1983) method (i), Hoenig (1983) method (ii), Hoenig (1983) method (iii), Jensen (1996))
                    NOTE: For Nat Survival Prob Dist #Max Age must be 1.0 (100% Survival) for UnNatural mortality to work.  These animals will all die at mating anyway. 
                    Fishing survival         : As per 2008 Observer Catch by Sex
                    >> AgeNe Params
                    bx(fm)                   : 3.3   (9.6 offspring every 3 years = 10/3 = 3.3)
                    sx(fm)                   : 0.913 Age independent
                    >> Genetic Params
                    Genetic data source      : Empirical - NSW - FRDC 
                    #Loci                    : 21 (Average of 10 alleles per locus) <-- From empirical CAOB Genetic data
                    Allele Freqs             : Random Drichlet
                '''
                            
                ''' Set the standard model agruments '''
                self.method_Simulation_Standard_Model_Arguments_CAOB_V1()

                '''
                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                SCENARIO SPECIFICATION
                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                '''
                #self.str_Scenario_Code = 'L0'
                self.str_Scenario_Code = 'L1'
                #self.str_Scenario_Code = 'L2'
                #self.str_Scenario_Code = 'L3'
                #self.str_Scenario_Code = 'L4'
                #self.str_Scenario_Code = 'L5'
                #self.str_Scenario_Code = 'L6'
                #self.str_Scenario_Code = 'L7'
                #self.str_Scenario_Code = 'L8'
                #self.str_Scenario_Code = 'L9'
                #self.str_Scenario_Code = 'L10'
                #self.str_Scenario_Code = 'L11'
                #self.str_Scenario_Code = 'L12'
                
                
                str_Scenario_Code_A = 'L'
                str_Scenario_Code_B = self.str_Scenario_Code[1:]                
                #str_Scenario_Code_B = '0'
                str_Scenario_Code_B = '1'
                #str_Scenario_Code_B = '2'
                #str_Scenario_Code_B = '3'
                #str_Scenario_Code_B = '4'
                #str_Scenario_Code_B = '5'
                #str_Scenario_Code_B = '6'
                #str_Scenario_Code_B = '7'
                #str_Scenario_Code_B = '8'
                #str_Scenario_Code_B = '9'
                #str_Scenario_Code_B = '10'
                #str_Scenario_Code_B = '11'
                #str_Scenario_Code_B = '12'
                
                self.str_Scenario_Code = str_Scenario_Code_A + str_Scenario_Code_B
#                 str_Scenario_Code_A = self.str_Scenario_Code[:1]
#                 str_Scenario_Code_B = self.str_Scenario_Code[1:]
                str_Scenario_Desc_Code = ''
                                                       
                '''
                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                POP REPLICATES
                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                '''                       
                self.Arg_Pop_Replicates = 1                    
                '''
                -----------------------
                Set POPULATION SIZE
                -----------------------
                '''
                
                self.Arg_Pop_Size = 1000
                                
#                 if str_Scenario_Code_A == 'L':
#                     self.Arg_Pop_Size = 10000
#                     pass
#                 elif str_Scenario_Code_A == 'H': 
#                     self.Arg_Pop_Size = 1000
#                     pass
#                 pass
               
                if str_Scenario_Code_B == '0':
                    ''' Scenario 0:  Same as Scenario 1 but with +++> ...
                    Senescence Allowed YES (SY)
                    '''               
                    str_Scenario_Desc_Code = 'M138_EAF_10P_M21_G6_R1_UMN_A50_SY'
                              
                    self.Arg_Allow_Senescence = True
                    
                    pass
                elif str_Scenario_Code_B == '1':
                    ''' Scenario 1:
                    MinMaturityAge A50 (A50)
                    Matings 138 (M138), EMPIRICAL Allele Freqs (EAF)
                    Offspring Poisson 10 per litter (10P),Mating Scheme 21 (M21),
                    Mating in Aug (8), Gestation 6 months (Feb,2), Resting 1 months (Mar, 3) <--- *** Gest (G6) Rest (G1)***
                    Non-natural Mortality No (UMN), Senescence Allowed No
                    '''                         
                    str_Scenario_Desc_Code = 'M138_EAF_10P_M21_G6_R1_UMN_A50'
                    
                    #self.Arg_Allow_Senescence = False
                    
                    pass
                elif str_Scenario_Code_B == '2': 
                    ''' Scenario 2:  Same as Scenario 1 but with +++> ...
                    MinMaturityAge A95 (A95)
                    '''
                    str_Scenario_Desc_Code = 'M138_EAF_10P_M21_G6_R1_UMN_A95'
                    
                    self.Arg_Min_Mating_Age = 25
                    
                    pass
                elif str_Scenario_Code_B == '3': 
                    ''' Scenario 3:  Same as Scenario 1 but with +++> ...
                    Mating in Aug (8), Parturition in Jun (6), Gestation 22 months (G22), Resting 12 months (july, R12) <-- G22_R12
                    '''
                    str_Scenario_Desc_Code = 'M138_EAF_10P_M21_G22_R12_UMN_A50'
                    
                    self.Arg_Parturition_Month = 6
                    self.Arg_Gestation_Length_In_Months = 22
                    self.Arg_Reproductive_Rest_Length_In_Months = 13
                    
                    pass
                elif str_Scenario_Code_B == '4': 
                    ''' Scenario 4:  Same as Scenario 3 but with +++> ...
                    MinMaturityAge A95 (A95)
                    '''
                    str_Scenario_Desc_Code = 'M138_EAF_10P_M21_G22_R12_UMN_A95'
                    
                    self.Arg_Min_Mating_Age = 25
                    
                    self.Arg_Parturition_Month = 6
                    self.Arg_Gestation_Length_In_Months = 22
                    self.Arg_Reproductive_Rest_Length_In_Months = 12
                    
                    pass
                elif str_Scenario_Code_B == '5': 
                    ''' Scenario 5:  Same as Scenario 1 but with +++> ...
                    Mating Scheme 24 (M24) Random Mating Without Parent Replacement & Hermaphrodites NOT allowed
                    '''
                    str_Scenario_Desc_Code = 'M138_EAF_10P_M24_G6_R1_UMN_A50'
                    
                    self.Arg_Mating_Scheme = 24
                    
                    pass
                elif str_Scenario_Code_B == '6': 
                    ''' Scenario 6:  Same as Scenario 5 but with +++> ...
                    MinMaturityAge A95 (A95)
                    '''
                    str_Scenario_Desc_Code = 'M138_EAF_10P_M24_G6_R1_UMN_A95'
                    
                    self.Arg_Min_Mating_Age = 25
                    
                    self.Arg_Mating_Scheme = 24
                    
                    pass
                elif str_Scenario_Code_B == '7': 
                    ''' Scenario 5:  Same as Scenario 1 but with +++> ...
                    Mating in Aug (8), Parturition in Jun (6), Gestation 22 months (G22), Resting 12 months (july, R12) <-- G22_R12
                    Mating Scheme 24 (M24) Random Mating Without Parent Replacement & Hermaphrodites NOT allowed
                    '''
                    str_Scenario_Desc_Code = 'M138_EAF_10P_M24_G22_R12_UMN_A50'
                    
                    self.Arg_Parturition_Month = 6
                    self.Arg_Gestation_Length_In_Months = 22
                    self.Arg_Reproductive_Rest_Length_In_Months = 12
                    
                    self.Arg_Mating_Scheme = 24
                    
                    pass
                elif str_Scenario_Code_B == '8': 
                    ''' Scenario 8:  Same as Scenario 7 but with +++> ...
                    MinMaturityAge A95 (A95)
                    '''
                    str_Scenario_Desc_Code = 'M138_EAF_10P_M24_G22_R12_UMN_A95'
                    
                    self.Arg_Min_Mating_Age = 25
                    
                    self.Arg_Parturition_Month = 6
                    self.Arg_Gestation_Length_In_Months = 22
                    self.Arg_Reproductive_Rest_Length_In_Months = 12
                    
                    self.Arg_Mating_Scheme = 24
                    
                    pass
                elif str_Scenario_Code_B == '9': 
                    ''' Scenario 9:  Same as Scenario 1 but with +++> ...
                    Mating Scheme 25 with 2 mates (M25M2) Polyandrous Mating With 2 Mates With Parent Replacement & Hermaphrodites allowed
                    '''
                    str_Scenario_Desc_Code = 'M138_EAF_10P_M25M2_G6_R1_UMN_A50'
                    
                    self.Arg_Mating_Scheme = 25
                                            
                    self.Arg_Mating_Scheme_Polygamy_Num_Mates = 2
                    self.Arg_Num_Offspring_Per_Mate = 10/self.Arg_Mating_Scheme_Polygamy_Num_Mates
                    
                    pass
                elif str_Scenario_Code_B == '10': 
                    ''' Scenario 10:  Same as Scenario 9 but with +++> ...
                    MinMaturityAge A95 (A95)
                    '''
                    str_Scenario_Desc_Code = 'M138_EAF_10P_M25M2_G6_R1_UMN_A95'
                    
                    self.Arg_Min_Mating_Age = 25
                    
                    self.Arg_Mating_Scheme = 25
                                            
                    self.Arg_Mating_Scheme_Polygamy_Num_Mates = 2
                    self.Arg_Num_Offspring_Per_Mate = 10/self.Arg_Mating_Scheme_Polygamy_Num_Mates
                    
                    pass
                elif str_Scenario_Code_B == '11': 
                    ''' Scenario 11:  Same as Scenario 1 but with +++> ...
                    Mating in Aug (8), Parturition in Jun (6), Gestation 22 months (G22), Resting 12 months (july, R12) <-- G22_R12
                    Mating Scheme 25 with 2 mates (M25M2) Polyandrous Mating With 2 Mates With Parent Replacement & Hermaphrodites allowed
                    '''
                    str_Scenario_Desc_Code = 'M138_EAF_10P_M25M2_G22_R12_UMN_A50'
                    
                    self.Arg_Parturition_Month = 6
                    self.Arg_Gestation_Length_In_Months = 22
                    self.Arg_Reproductive_Rest_Length_In_Months = 12
                                            
                    self.Arg_Mating_Scheme = 25
                                            
                    self.Arg_Mating_Scheme_Polygamy_Num_Mates = 2
                    self.Arg_Num_Offspring_Per_Mate = 10/self.Arg_Mating_Scheme_Polygamy_Num_Mates
                    
                    pass                    
                elif str_Scenario_Code_B == '12': 
                    ''' Scenario 12:  Same as Scenario 11 but with +++> ...
                    MinMaturityAge A95 (A95)
                    '''
                    str_Scenario_Desc_Code = 'M138_EAF_10P_M25M2_G22_R12_UMN_A95'
                    
                    self.Arg_Min_Mating_Age = 25
                    
                    self.Arg_Parturition_Month = 6
                    self.Arg_Gestation_Length_In_Months = 22
                    self.Arg_Reproductive_Rest_Length_In_Months = 12
                                            
                    self.Arg_Mating_Scheme = 25
                                            
                    self.Arg_Mating_Scheme_Polygamy_Num_Mates = 2
                    self.Arg_Num_Offspring_Per_Mate = 10/self.Arg_Mating_Scheme_Polygamy_Num_Mates
                    
                    pass                    
                pass
            
                str_Arg_Pop_Size = str(self.Arg_Pop_Size)
                int_Len_Arg_Pop_Size = len(str_Arg_Pop_Size)
                str_UDF_Pop_Size = str_Arg_Pop_Size
                if int_Len_Arg_Pop_Size >= 4:
                    if str_Arg_Pop_Size[-3:] == '000':
                        str_UDF_Pop_Size = str_Arg_Pop_Size[:int_Len_Arg_Pop_Size-3] + 'K'
                    pass
                pass                        
                str_Scenario_Specific_Folder = 'N' + str_UDF_Pop_Size + '_' + str_Scenario_Desc_Code
                
                str_Pop_Replicates = 'PR' + str(self.Arg_Pop_Replicates)
                strRunSpecificUserDefinedFolder = self.str_Species_Code_Short + '\\' + self.str_Scenario_Code + '\\' + str_Pop_Replicates + '\\' + self.str_Species_Code + '_' + str_Scenario_Specific_Folder
            
                return strRunSpecificUserDefinedFolder

            def method_Simulation_PROD_AUTO_Run_Specific_User_Defined_Folder__SSOG_V1(self):
                                
                strRunSpecificUserDefinedFolder = 'PROD_DEFAULT'

                str_Allow_Mutation = ''
                if self.Arg_bool_Allow_Mutation:
                    str_Allow_Mutation = 'MY'
                else:
                    str_Allow_Mutation = 'MN'
                pass
                
                str_Num_Loci = "L" + str(self.Arg_Num_Loci)
                str_Alleles_Per_Locus = "A" + str(self.Arg_int_Alleles_Per_Locus)
                                         
                self.int_Total_MatingsToSimulatePerReplicate = self.method_Replicate_Get_Replicate_Total_Matings(self.Arg_BurnIn_Matings, self.Arg_Evolution_Years, self.Arg_Evolution_Months, self.Arg_int_Mating_Calender_Month)
                str_Matings = str(self.int_Total_MatingsToSimulatePerReplicate)

                if len(self.Arg_list_Offspring_Production_Parms) > 1: 
                    int_Offspring_Dist = self.Arg_list_Offspring_Production_Parms[0]
                    if int_Offspring_Dist == sim.POISSON_DISTRIBUTION:
                        str_Offspring_Dist = 'p'
                        str_Offspring_Rate = str(self.Arg_Num_Offspring_Mean_Per_Mate)
                        str_Offspring_Parms = str_Offspring_Rate + str_Offspring_Dist
                    elif int_Offspring_Dist == sim.UNIFORM_DISTRIBUTION:
                        str_Offspring_Dist = 'u'
                        str_Offspring_Min = str(self.Arg_Num_Offspring_Min_Per_Mate)
                        str_Offspring_Max = str(self.Arg_Num_Offspring_Max_Per_Mate)
                        str_Offspring_Parms = str_Offspring_Min + '_' + str_Offspring_Max +  str_Offspring_Dist                        
                    elif int_Offspring_Dist == sim.BINOMIAL_DISTRIBUTION:
                        str_Offspring_Dist = 'b'
                        str_Offspring_Mean = str(int(self.Arg_Num_Offspring_Dist_Samples * self.Arg_Num_Offspring_Dist_Probability))
                        str_Offspring_Parms = str_Offspring_Mean + str_Offspring_Dist                            
                    elif int_Offspring_Dist == sim.GEOMETRIC_DISTRIBUTION:
                        str_Offspring_Dist = 'g'
                        str_Offspring_Mean = str(self.Arg_Num_Offspring_Mean_Per_Mate)
                        str_Offspring_Parms = str_Offspring_Mean + str_Offspring_Dist                          
                    else:
                        str_Offspring_Dist = 'x'
                        str_Offspring_Num = str(self.Arg_Num_Offspring_Per_Mate)
                        str_Offspring_Parms = str_Offspring_Num + str_Offspring_Dist                          
                    pass
                else:
                    str_Offspring_Dist = 'a' #Absolute number of offspring
                    str_Offspring_Num = str(self.Arg_Num_Offspring_Per_Mate)
                    str_Offspring_Parms = str_Offspring_Num + str_Offspring_Dist                       
                pass
               
                bool_Allow_UnNat_Mortality = False
                str_Scenario_Desc_Code = ''
#                 str_Scenario_Code_A = self.str_Scenario_Code[:1]
                self.str_Scenario_Code_B = self.str_Scenario_Code[1:3]
                int_Scenario_Code_B = int(self.str_Scenario_Code_B)
                if len(self.str_Scenario_Code) > 3:
                    self.str_Scenario_Code_C = self.str_Scenario_Code[3:4]
                    if self.str_Scenario_Code_C == 'F':
                        bool_Allow_UnNat_Mortality = True
                        str_UnNat_Mortality_Folder_Code = 'UMY'                                                        
                        self.str_Scenario_Code_D = self.str_Scenario_Code[-1:]
                        int_Scenario_Code_D = int(self.str_Scenario_Code_D)
                    else:
                        str_UnNat_Mortality_Folder_Code = 'UMN'
                    pass
                else:
                    str_UnNat_Mortality_Folder_Code = 'UMN'                                                       
                pass

                '''
                ---------------------------
                Secenarios: 1 - 2: Test Senescence on simplest scenario: MAF, Sex ratio forced to 0.5
                ---------------------------
                '''
                if int_Scenario_Code_B == 0:
                    ''' Scenario 0:  BASELINE SCENARIO
                    Senescence Allowed No (SN)
                    MAXIMAL DIVERSITY Allele Freqs (MAF)
                    Mating Scheme 21 (M21), Mating in Aug (8), Gestation 6 months (Feb,2), Resting 1 months (Mar, 3) <--- *** Gest (G6) Rest (G1)***
                    Natural Mortality No, Non-natural Mortality No (UMN)
                    '''                         
                    self.Arg_int_Allele_Freq_Scheme = 0 #0 - Evenly generated allele frequencies - MAXIUMUM DIVERSITY ALLELE FEQUENCIES (MAF)
                    self.Arg_int_Offspring_Sex_Scheme = 1 #0 - probability-driven male sex proportion, 1 - Forced exactly even sex ratio
                    self.Arg_Allow_Senescence = False
                    self.Arg_Survival_Natural_No_Senescence = {self.strSexMale:{  12:1.00, 24:1.00, 36:0.00, 48:0.00}
                                                              ,self.strSexFemale:{12:1.00, 24:1.00, 36:0.00, 48:0.00}}
                                        
                    str_Scenario_Desc_Code = 'M' + str_Matings + '_MAF' + '_' + str_Offspring_Parms + '_M21_G6_R1_' + str_UnNat_Mortality_Folder_Code + '_SN' + '_' + str_Allow_Mutation + '_' + str_Num_Loci + '_' + str_Alleles_Per_Locus
                    
                    pass
                elif int_Scenario_Code_B == 1:
                    ''' Scenario 1:  Same as Scenario 0 but with +++> ...
                    Senescence Allowed YES (SY)
                    '''               

                    self.Arg_int_Allele_Freq_Scheme = 0 #0 - Evenly generated allele frequencies - MAXIUMUM DIVERSITY ALLELE FEQUENCIES (MAF)
                    self.Arg_int_Offspring_Sex_Scheme = 1 #0 - probability-driven male sex proportion, 1 - Forced exactly even sex ratio
                    self.Arg_Allow_Senescence = True
                    self.Arg_Survival_Natural_Senescence = {self.strSexMale:{  12:1.00, 24:1.00, 36:1.00, 48:0.00}
                                                           ,self.strSexFemale:{12:1.00, 24:1.00, 36:1.00, 48:0.00}}    
                    
                    str_Scenario_Desc_Code = 'M' + str_Matings + '_MAF' + '_' + str_Offspring_Parms + '_M21_G6_R1_' + str_UnNat_Mortality_Folder_Code + '_SY' + '_' + str_Allow_Mutation + '_' + str_Num_Loci + '_' + str_Alleles_Per_Locus
                    
                    pass
                elif int_Scenario_Code_B == 2: 
                    ''' Scenario 2:  Same as Scenario 0 but with +++> ...
                    DRICHLET RANDOM DIVERISTY Allele Freqs (DAF)
                    '''

                    self.Arg_int_Allele_Freq_Scheme = 1 #1 - Randomly generated allele frequencies - RANDOM DRICHLET DIVERSITY (DAF)
                    self.Arg_int_Offspring_Sex_Scheme = 1 #0 - probability-driven male sex proportion, 1 - Forced exactly even sex ratio
                    self.Arg_Allow_Senescence = False
                    self.Arg_Survival_Natural_No_Senescence = {self.strSexMale:{  12:1.00, 24:1.00, 36:0.00, 48:0.00}
                                                              ,self.strSexFemale:{12:1.00, 24:1.00, 36:0.00, 48:0.00}}
                                        
                    str_Scenario_Desc_Code = 'M' + str_Matings + '_DAF' + '_' + str_Offspring_Parms + '_M21_G6_R1_' + str_UnNat_Mortality_Folder_Code + '_SN' + '_' + str_Allow_Mutation + '_' + str_Num_Loci + '_' + str_Alleles_Per_Locus
                    
                    pass
                elif int_Scenario_Code_B == 3:
                    ''' Scenario 3:  Same as Scenario 1 but with +++> ...
                    DRICHLET RANDOM DIVERISTY Allele Freqs (DAF)
                    '''
                    self.Arg_int_Allele_Freq_Scheme = 1 #1 - Randomly generated allele frequencies - RANDOM DRICHLET DIVERSITY (DAF)
                    self.Arg_int_Offspring_Sex_Scheme = 0 #0 - probability-driven male sex proportion, 1 - Forced exactly even sex ratio
                    self.Arg_Allow_Senescence = True
                    self.Arg_Survival_Natural_Senescence = {self.strSexMale:{  12:1.00, 24:1.00, 36:1.00, 48:0.00}
                                                           ,self.strSexFemale:{12:1.00, 24:1.00, 36:1.00, 48:0.00}}    
                                        
                    str_Scenario_Desc_Code = 'M' + str_Matings + '_DAF' + '_' + str_Offspring_Parms + '_M21_G6_R1_' + str_UnNat_Mortality_Folder_Code + '_SY' + '_' + str_Allow_Mutation + '_' + str_Num_Loci + '_' + str_Alleles_Per_Locus

                    pass
                elif int_Scenario_Code_B == 4:
                    ''' Scenario 4:  Same as Scenario 3 but with +++> ...
                   Senescence Allowed YES (SY)
                    '''
                    self.Arg_int_Allele_Freq_Scheme = 1 #1 - Randomly generated allele frequencies - RANDOM DRICHLET DIVERSITY (DAF)
                    self.Arg_int_Offspring_Sex_Scheme = 1 #0 - probability-driven male sex proportion, 1 - Forced exactly even sex ratio
                    self.Arg_Allow_Senescence = True
                    self.Arg_Survival_Natural_Senescence = {self.strSexMale:{  12:1.00, 24:1.00, 36:1.00, 48:0.00}
                                                           ,self.strSexFemale:{12:1.00, 24:1.00, 36:1.00, 48:0.00}}    
                                    
                    str_Scenario_Desc_Code = 'M' + str_Matings + '_DAF' + '_' + str_Offspring_Parms + '_M21_G6_R1_' + str_UnNat_Mortality_Folder_Code + '_SY' + '_' + str_Allow_Mutation + '_' + str_Num_Loci + '_' + str_Alleles_Per_Locus

                    pass
                elif int_Scenario_Code_B == 5:
                    ''' Scenario 5:  Same as Scenario 2 but with +++> ...
                    MAXIMAL DIVERSITY Allele Freqs (MAF)
                    Offspring male sex proportions probability-driven
                    '''
                    self.Arg_int_Allele_Freq_Scheme = 0 #1 - Randomly generated allele frequencies - RANDOM DRICHLET DIVERSITY (DAF)
                    self.Arg_int_Offspring_Sex_Scheme = 0 #0 - probability-driven male sex proportion, 1 - Forced exactly even sex ratio
                    self.Arg_Allow_Senescence = False
                    self.Arg_Survival_Natural_No_Senescence = {self.strSexMale:{  12:1.00, 24:1.00, 36:0.00, 48:0.00}
                                                              ,self.strSexFemale:{12:1.00, 24:1.00, 36:0.00, 48:0.00}}
                                        
                    str_Scenario_Desc_Code = 'M' + str_Matings + '_MAF' + '_' + str_Offspring_Parms + '_M21_G6_R1_' + str_UnNat_Mortality_Folder_Code + '_SN' + '_' + str_Allow_Mutation + '_' + str_Num_Loci + '_' + str_Alleles_Per_Locus

                    pass
                elif int_Scenario_Code_B == 6:
                    ''' Scenario 6:  Same as Scenario 5 but with +++> ...
                    MAXIMAL DIVERSITY Allele Freqs (MAF)
                    Senescence Allowed YES (SY)
                    '''
                    self.Arg_int_Allele_Freq_Scheme = 0 #1 - Randomly generated allele frequencies - RANDOM DRICHLET DIVERSITY (DAF)
                    self.Arg_int_Offspring_Sex_Scheme = 1 #0 - probability-driven male sex proportion, 1 - Forced exactly even sex ratio
                    self.Arg_Allow_Senescence = True
                    self.Arg_Survival_Natural_Senescence = {self.strSexMale:{  12:1.00, 24:1.00, 36:1.00, 48:0.00}
                                                           ,self.strSexFemale:{12:1.00, 24:1.00, 36:1.00, 48:0.00}}    
                                    
                    str_Scenario_Desc_Code = 'M' + str_Matings + '_MAF' + '_' + str_Offspring_Parms + '_M21_G6_R1_' + str_UnNat_Mortality_Folder_Code + '_SY' + '_' + str_Allow_Mutation + '_' + str_Num_Loci + '_' + str_Alleles_Per_Locus

                    pass
                elif int_Scenario_Code_B == 7:
                    ''' Scenario 7:  Same as Scenario 2 but with +++> ...
                    Offspring male sex proportions probability-driven
                    NATURAL MORTALITY
                    '''
                    self.Arg_int_Allele_Freq_Scheme = 1 #1 - Randomly generated allele frequencies - RANDOM DRICHLET DIVERSITY (DAF)
                    self.Arg_int_Offspring_Sex_Scheme = 1 #0 - probability-driven male sex proportion, 1 - Forced exactly even sex ratio
                    self.Arg_Allow_Senescence = False
                    self.Arg_Survival_Natural_No_Senescence = {self.strSexMale:{  12:0.85, 24:0.85, 36:0.00, 48:0.00}
                                                              ,self.strSexFemale:{12:0.85, 24:0.85, 36:0.00, 48:0.00}}
                                        
                    str_Scenario_Desc_Code = 'M' + str_Matings + '_DAF' + '_' + str_Offspring_Parms + '_M21_G6_R1_' + str_UnNat_Mortality_Folder_Code + '_SN' + '_' + str_Allow_Mutation + '_' + str_Num_Loci + '_' + str_Alleles_Per_Locus

                    pass
                elif int_Scenario_Code_B == 8:
                    ''' Scenario 8:  Same as Scenario 3 but with +++> ...
                    Senescence Allowed YES (SY)
                    NATURAL MORTALITY
                    '''
                    self.Arg_int_Allele_Freq_Scheme = 1 #1 - Randomly generated allele frequencies - RANDOM DRICHLET DIVERSITY (DAF)
                    self.Arg_int_Offspring_Sex_Scheme = 1 #0 - probability-driven male sex proportion, 1 - Forced exactly even sex ratio
                    self.Arg_Allow_Senescence = True
                    self.Arg_Survival_Natural_Senescence = {self.strSexMale:{  12:0.85, 24:0.85, 36:0.85, 48:0.00}
                                                           ,self.strSexFemale:{12:0.85, 24:0.85, 36:0.85, 48:0.00}}    
                                    
                    str_Scenario_Desc_Code = 'M' + str_Matings + '_DAF' + '_' + str_Offspring_Parms + '_M21_G6_R1_' + str_UnNat_Mortality_Folder_Code + '_SY' + '_' + str_Allow_Mutation + '_' + str_Num_Loci + '_' + str_Alleles_Per_Locus

                    pass
                pass
            
                '''
                --------------------------
                Include UnNatural mortality scenarios
                --------------------------
                '''
                if bool_Allow_UnNat_Mortality and len(self.str_Scenario_Code_C) > 0:
                    if int_Scenario_Code_D == 1:
                        ''' Fishing scenario 1: Business as usual  - Fullfill Quota
                        Quota Multiplier = 1
                        '''
                        int_BAU_Mortality_Multiplier = 1
                        int_Replicate_Mating_Count_UnNat_Mortality_Starts = 58
                        self.Arg_Allow_UnNatural_Mortality = True                
                        self.Arg_Mortality_Application_Specs__UnNat = {globalsSS.MortalityApplication.static_str_Mating_Mortlity_Starts__UnNat:{self.strSexMale: int_Replicate_Mating_Count_UnNat_Mortality_Starts, self.strSexFemale: int_Replicate_Mating_Count_UnNat_Mortality_Starts}, globalsSS.MortalityApplication.static_str_Mortality_Application_Model__UnNat:{self.strSexMale: 3, self.strSexFemale: 3}, globalsSS.MortalityApplication.static_str_Mortality_Scaling_Total__UnNat:{self.strSexMale: 262*int_BAU_Mortality_Multiplier, self.strSexFemale: 166*int_BAU_Mortality_Multiplier}} #dict_Mortality_Application_Specs_By_Sex__UnNATURAL     
                        self.Arg_Survival_UnNatural = {self.strSexMale:{12:0.981,24:0.966,36:0.973,48:0.973,60:0.989,72:0.996,84:0.996,96:1.000,108:0.973,120:0.954,132:0.947,144:0.905,156:0.924,168:0.851,180:0.882,192:0.870,204:0.931,216:0.962,228:0.977,240:0.989,252:0.977,264:0.992,276:0.992,288:1.000,300:1.000,312:1.000,324:1.000,336:1.000}
                                                      ,self.strSexFemale:{12:0.994,24:0.958,36:0.958,48:0.958,60:0.982,72:0.988,84:0.994,96:1.000,108:0.994,120:1.000,132:0.982,144:0.988,156:0.994,168:0.952,180:0.934,192:0.855,204:0.880,216:0.892,228:0.904,240:0.934,252:0.928,264:0.976,276:0.982,288:1.000,300:1.000,312:0.988,324:0.994,336:0.994}}
                        
                        self.arg_int_Sample_Pop_When_Mating_Count_Divisible_By = 1
                        pass
                    elif int_Scenario_Code_D == 2: 
                        ''' Fishing scenario 2: Business as usual  - Fullfill Quota
                        Quota Multiplier = 2
                        '''
                        int_BAU_Mortality_Multiplier = 2
                        int_Replicate_Mating_Count_UnNat_Mortality_Starts = 58
                        self.Arg_Allow_UnNatural_Mortality = True                
                        self.Arg_Mortality_Application_Specs__UnNat = {globalsSS.MortalityApplication.static_str_Mating_Mortlity_Starts__UnNat:{self.strSexMale: int_Replicate_Mating_Count_UnNat_Mortality_Starts, self.strSexFemale: int_Replicate_Mating_Count_UnNat_Mortality_Starts}, globalsSS.MortalityApplication.static_str_Mortality_Application_Model__UnNat:{self.strSexMale: 3, self.strSexFemale: 3}, globalsSS.MortalityApplication.static_str_Mortality_Scaling_Total__UnNat:{self.strSexMale: 166*int_BAU_Mortality_Multiplier, self.strSexFemale: 262*int_BAU_Mortality_Multiplier}} #dict_Mortality_Application_Specs_By_Sex__UnNATURAL     
                        self.Arg_Survival_UnNatural = {self.strSexMale:{12:0.981,24:0.966,36:0.973,48:0.973,60:0.989,72:0.996,84:0.996,96:1.000,108:0.973,120:0.954,132:0.947,144:0.905,156:0.924,168:0.851,180:0.882,192:0.870,204:0.931,216:0.962,228:0.977,240:0.989,252:0.977,264:0.992,276:0.992,288:1.000,300:1.000,312:1.000,324:1.000,336:1.000}
                                                      ,self.strSexFemale:{12:0.994,24:0.958,36:0.958,48:0.958,60:0.982,72:0.988,84:0.994,96:1.000,108:0.994,120:1.000,132:0.982,144:0.988,156:0.994,168:0.952,180:0.934,192:0.855,204:0.880,216:0.892,228:0.904,240:0.934,252:0.928,264:0.976,276:0.982,288:1.000,300:1.000,312:0.988,324:0.994,336:0.994}}
                        
                        self.arg_int_Sample_Pop_When_Mating_Count_Divisible_By = 1
                        pass
                    elif int_Scenario_Code_D == 3: 
                        ''' Fishing scenario 3: Business as usual  - Fullfill Quota
                        Quota Multiplier = 3
                        '''
                        int_BAU_Mortality_Multiplier = 3
                        int_Replicate_Mating_Count_UnNat_Mortality_Starts = 58
                        self.Arg_Allow_UnNatural_Mortality = True                
                        self.Arg_Mortality_Application_Specs__UnNat = {globalsSS.MortalityApplication.static_str_Mating_Mortlity_Starts__UnNat:{self.strSexMale: int_Replicate_Mating_Count_UnNat_Mortality_Starts, self.strSexFemale: int_Replicate_Mating_Count_UnNat_Mortality_Starts}, globalsSS.MortalityApplication.static_str_Mortality_Application_Model__UnNat:{self.strSexMale: 3, self.strSexFemale: 3}, globalsSS.MortalityApplication.static_str_Mortality_Scaling_Total__UnNat:{self.strSexMale: 166*int_BAU_Mortality_Multiplier, self.strSexFemale: 262*int_BAU_Mortality_Multiplier}} #dict_Mortality_Application_Specs_By_Sex__UnNATURAL     
                        self.Arg_Survival_UnNatural = {self.strSexMale:{12:0.981,24:0.966,36:0.973,48:0.973,60:0.989,72:0.996,84:0.996,96:1.000,108:0.973,120:0.954,132:0.947,144:0.905,156:0.924,168:0.851,180:0.882,192:0.870,204:0.931,216:0.962,228:0.977,240:0.989,252:0.977,264:0.992,276:0.992,288:1.000,300:1.000,312:1.000,324:1.000,336:1.000}
                                                      ,self.strSexFemale:{12:0.994,24:0.958,36:0.958,48:0.958,60:0.982,72:0.988,84:0.994,96:1.000,108:0.994,120:1.000,132:0.982,144:0.988,156:0.994,168:0.952,180:0.934,192:0.855,204:0.880,216:0.892,228:0.904,240:0.934,252:0.928,264:0.976,276:0.982,288:1.000,300:1.000,312:0.988,324:0.994,336:0.994}}
                        
                        self.arg_int_Sample_Pop_When_Mating_Count_Divisible_By = 1
                        pass
                    elif int_Scenario_Code_D == 4: 
                        ''' Fishing scenario 4: Extra Fishing scenario F4  holding pop size & Quota size constant for both species
                        '''
                        int_BAU_Mortality_Multiplier = 1
                        int_Replicate_Mating_Count_UnNat_Mortality_Starts = 58
                        self.Arg_Allow_UnNatural_Mortality = True                
                        self.Arg_Mortality_Application_Specs__UnNat = {globalsSS.MortalityApplication.static_str_Mating_Mortlity_Starts__UnNat:{self.strSexMale: int_Replicate_Mating_Count_UnNat_Mortality_Starts, self.strSexFemale: int_Replicate_Mating_Count_UnNat_Mortality_Starts}, globalsSS.MortalityApplication.static_str_Mortality_Application_Model__UnNat:{self.strSexMale: 3, self.strSexFemale: 3}, globalsSS.MortalityApplication.static_str_Mortality_Scaling_Total__UnNat:{self.strSexMale: 250*int_BAU_Mortality_Multiplier, self.strSexFemale: 250*int_BAU_Mortality_Multiplier}} #dict_Mortality_Application_Specs_By_Sex__UnNATURAL     
                        self.Arg_Survival_UnNatural = {self.strSexMale:{12:0.981,24:0.966,36:0.973,48:0.973,60:0.989,72:0.996,84:0.996,96:1.000,108:0.973,120:0.954,132:0.947,144:0.905,156:0.924,168:0.851,180:0.882,192:0.870,204:0.931,216:0.962,228:0.977,240:0.989,252:0.977,264:0.992,276:0.992,288:1.000,300:1.000,312:1.000,324:1.000,336:1.000}
                                                      ,self.strSexFemale:{12:0.994,24:0.958,36:0.958,48:0.958,60:0.982,72:0.988,84:0.994,96:1.000,108:0.994,120:1.000,132:0.982,144:0.988,156:0.994,168:0.952,180:0.934,192:0.855,204:0.880,216:0.892,228:0.904,240:0.934,252:0.928,264:0.976,276:0.982,288:1.000,300:1.000,312:0.988,324:0.994,336:0.994}}
                        
                        self.arg_int_Sample_Pop_When_Mating_Count_Divisible_By = 1
                        pass
                    pass
                    
                pass
            
                str_Arg_Pop_Size = str(self.Arg_Pop_Size)
                int_Len_Arg_Pop_Size = len(str_Arg_Pop_Size)
                str_UDF_Pop_Size = str_Arg_Pop_Size
                if int_Len_Arg_Pop_Size >= 4:
                    if str_Arg_Pop_Size[-3:] == '000':
                        str_UDF_Pop_Size = str_Arg_Pop_Size[:int_Len_Arg_Pop_Size-3] + 'K'
                    pass
                pass                        
                str_Scenario_Specific_Folder = 'N' + str_UDF_Pop_Size + '_' + str_Scenario_Desc_Code
                
                str_Pop_Replicates = 'PR' + str(self.Arg_Pop_Replicates)
                strRunSpecificUserDefinedFolder = self.str_Species_Code_Short + '\\' + self.str_Scenario_Code + '\\' + str_Pop_Replicates + '\\' + self.str_Species_Code + '_' + str_Scenario_Specific_Folder
            
                return strRunSpecificUserDefinedFolder

                
            def method_Simulation_PROD_AUTO_Run_Specific_User_Defined_Folder__STFA_V1(self):
                                
                strRunSpecificUserDefinedFolder = 'PROD_DEFAULT'

                str_Allow_Mutation = ''
                if self.Arg_bool_Allow_Mutation:
                    str_Allow_Mutation = 'MY'
                else:
                    str_Allow_Mutation = 'MN'
                pass
                
                str_Num_Loci = "L" + str(self.Arg_Num_Loci)
                str_Alleles_Per_Locus = "A" + str(self.Arg_int_Alleles_Per_Locus)
                                         
                self.int_Total_MatingsToSimulatePerReplicate = self.method_Replicate_Get_Replicate_Total_Matings_NEW(self.Arg_BurnIn_Matings, self.Arg_Evolution_Years, self.Arg_Evolution_Months, self.Arg_int_Mating_Calender_Month, self.Arg_Pop_Batches, self.Arg_Pop_Replicates)
                str_Matings = str(self.int_Total_MatingsToSimulatePerReplicate)

                if len(self.Arg_list_Offspring_Production_Parms) > 1: 
                    int_Offspring_Dist = self.Arg_list_Offspring_Production_Parms[0]
                    if int_Offspring_Dist == sim.POISSON_DISTRIBUTION:
                        str_Offspring_Dist = 'p'
                        str_Offspring_Rate = str(self.Arg_Num_Offspring_Mean_Per_Mate)
                        str_Offspring_Parms = str_Offspring_Rate + str_Offspring_Dist
                    elif int_Offspring_Dist == sim.UNIFORM_DISTRIBUTION:
                        str_Offspring_Dist = 'u'
                        str_Offspring_Min = str(self.Arg_Num_Offspring_Min_Per_Mate)
                        str_Offspring_Max = str(self.Arg_Num_Offspring_Max_Per_Mate)
                        str_Offspring_Parms = str_Offspring_Min + '_' + str_Offspring_Max +  str_Offspring_Dist                        
                    elif int_Offspring_Dist == sim.BINOMIAL_DISTRIBUTION:
                        str_Offspring_Dist = 'b'
                        str_Offspring_Mean = str(int(self.Arg_Num_Offspring_Dist_Samples * self.Arg_Num_Offspring_Dist_Probability))
                        str_Offspring_Parms = str_Offspring_Mean + str_Offspring_Dist                             
                    elif int_Offspring_Dist == sim.GEOMETRIC_DISTRIBUTION:
                        str_Offspring_Dist = 'g'
                        str_Offspring_Mean = str(self.Arg_Num_Offspring_Mean_Per_Mate)
                        str_Offspring_Parms = str_Offspring_Mean + str_Offspring_Dist                          
                    else:
                        str_Offspring_Dist = 'x'
                        str_Offspring_Num = str(self.Arg_Num_Offspring_Per_Mate)
                        str_Offspring_Parms = str_Offspring_Num + str_Offspring_Dist                          
                    pass
                else:
                    str_Offspring_Dist = 'a' #Absolute number of offspring
                    str_Offspring_Num = str(self.Arg_Num_Offspring_Per_Mate)
                    str_Offspring_Parms = str_Offspring_Num + str_Offspring_Dist                       
                pass
               
                bool_Allow_UnNat_Mortality = False
                str_Scenario_Desc_Code = ''
#                 str_Scenario_Code_A = self.str_Scenario_Code[:1]
                self.str_Scenario_Code_B = self.str_Scenario_Code[1:3]
                int_Scenario_Code_B = int(self.str_Scenario_Code_B)
                if len(self.str_Scenario_Code) > 3:
                    self.str_Scenario_Code_C = self.str_Scenario_Code[3:4]
                    if self.str_Scenario_Code_C == 'F':
                        bool_Allow_UnNat_Mortality = True
                        str_UnNat_Mortality_Folder_Code = 'UMY'                                                        
                        self.str_Scenario_Code_D = self.str_Scenario_Code[-1:]
                        int_Scenario_Code_D = int(self.str_Scenario_Code_D)
                    else:
                        str_UnNat_Mortality_Folder_Code = 'UMN'
                    pass
                else:
                    str_UnNat_Mortality_Folder_Code = 'UMN'                                                       
                pass

                '''
                ---------------------------
                Secenarios: 1 - 2: Test Senescence on simplest scenario: MAF, Sex ratio forced to 0.5
                ---------------------------
                '''
                if int_Scenario_Code_B == 0:
                    ''' Scenario 0:  BASELINE SCENARIO
                    Senescence Allowed No (SN)
                    DRICHLET DIVERSITY Allele Freqs (DAF)
                    MinMaturityAge A50 (A50)
                    Mating Scheme 21 (M21), Mating in Aug (8), Gestation 5 months (Jan,1), Resting 1 months (Feb, Feb) <--- *** Gest (G5) Rest (G1)***
                    Natural Mortality No, Non-natural Mortality No (UMN)
                    '''                         
                    self.Arg_int_Allele_Freq_Scheme = 1 #1 - Randomly generated allele frequencies - RANDOM DRICHLET DIVERSITY (DAF)
                    self.Arg_int_Offspring_Sex_Scheme = 1 #0 - probability-driven male sex proportion, 1 - Forced exactly even sex ratio
                    self.Arg_Allow_Senescence = False
                                        
                    str_Scenario_Desc_Code = 'M' + str_Matings + '_DAF' + '_' + str_Offspring_Parms + '_M21_G5_R1_' + str_UnNat_Mortality_Folder_Code + '_SN' + '_' + str_Allow_Mutation + '_' + str_Num_Loci + '_' + str_Alleles_Per_Locus
                    
                    pass
                elif int_Scenario_Code_B == 1:
                    ''' Scenario 1:  Same as Scenario 0 but with +++> ...
                    Senescence Allowed YES (SY)
                    '''               

                    self.Arg_int_Allele_Freq_Scheme = 1 #1 - Randomly generated allele frequencies - RANDOM DRICHLET DIVERSITY (DAF)
                    self.Arg_int_Offspring_Sex_Scheme = 1 #0 - probability-driven male sex proportion, 1 - Forced exactly even sex ratio
                    self.Arg_Allow_Senescence = True
                    
                    str_Scenario_Desc_Code = 'M' + str_Matings + '_DAF' + '_' + str_Offspring_Parms + '_M21_G6_R1_' + str_UnNat_Mortality_Folder_Code + '_SY' + '_' + str_Allow_Mutation + '_' + str_Num_Loci + '_' + str_Alleles_Per_Locus
                    
                    pass
                elif int_Scenario_Code_B == 2:
                    ''' Scenario 2:  Same as Scenario 0 but with +++> ...
                    EMPIRICAL Allele Frequencies (EAF)
                    '''               
                    
                    self.Arg_bool_Obtain_Allele_Freqs_From_File = True
                    self.Arg_int_Offspring_Sex_Scheme = 1 #0 - probability-driven male sex proportion, 1 - Forced exactly even sex ratio
                    self.Arg_Allow_Senescence = False
                    
                    str_Scenario_Desc_Code = 'M' + str_Matings + '_EAF' + '_' + str_Offspring_Parms + '_M21_G6_R1_' + str_UnNat_Mortality_Folder_Code + '_SN' + '_' + str_Allow_Mutation + '_' + str_Num_Loci + '_' + str_Alleles_Per_Locus
                    
                    pass
                elif int_Scenario_Code_B == 3:
                    ''' Scenario 3:  Same as Scenario 1 but with +++> ...
                    EMPIRICAL Allele Frequencies (EAF)
                    '''               
                    
                    self.Arg_bool_Obtain_Allele_Freqs_From_File = True
                    self.Arg_int_Offspring_Sex_Scheme = 1 #0 - probability-driven male sex proportion, 1 - Forced exactly even sex ratio
                    self.Arg_Allow_Senescence = True
                    
                    str_Scenario_Desc_Code = 'M' + str_Matings + '_EAF' + '_' + str_Offspring_Parms + '_M21_G6_R1_' + str_UnNat_Mortality_Folder_Code + '_SY' + '_' + str_Allow_Mutation + '_' + str_Num_Loci + '_' + str_Alleles_Per_Locus
                    
                    pass
                elif int_Scenario_Code_B == 4: 
                    ''' Scenario 4:  Same as Scenario 2 but with +++> ...
                    EMPIRICAL Allele Frequencies (EAF)
                    MinMaturityAge A95 (A95)
                    '''
                    
                    self.Arg_bool_Obtain_Allele_Freqs_From_File = True
                    self.Arg_int_Offspring_Sex_Scheme = 1 #0 - probability-driven male sex proportion, 1 - Forced exactly even sex ratio
                    self.Arg_Allow_Senescence = False
                    self.Arg_Min_Mating_Age = 8
                    
                    str_Scenario_Desc_Code = 'M' + str_Matings + '_EAF' + '_' + str_Offspring_Parms + '_M21_G6_R1_' + str_UnNat_Mortality_Folder_Code + '_SN' + '_' + str_Allow_Mutation + '_' + str_Num_Loci + '_' + str_Alleles_Per_Locus + '_A95'
                    
                    pass
                elif int_Scenario_Code_B == 3: 
                    ''' Scenario 3:  Same as Scenario 1 but with +++> ...
                    Mating in Aug (8), Parturition in Sept (9), Gestation 13 months (G13), Resting 10 months (july, R10) <-- G13_R10
                    '''
                    str_Scenario_Desc_Code = 'M114_EAF_08P_M21_G13_R10_' + str_UnNat_Mortality_Folder_Code + '_A50'
                    
                    self.Arg_Parturition_Month = 9
                    self.Arg_Gestation_Length_In_Months = 13
                    self.Arg_Reproductive_Rest_Length_In_Months = 10
                    
                    pass
                elif int_Scenario_Code_B == 4: 
                    ''' Scenario 4:  Same as Scenario 3 but with +++> ...
                    MinMaturityAge A95 (A95)
                    '''
                    str_Scenario_Desc_Code = 'M114_EAF_08P_M21_G13_R10_' + str_UnNat_Mortality_Folder_Code + '_A95'
                    
                    self.Arg_Min_Mating_Age = 15
                    
                    self.Arg_Parturition_Month = 9
                    self.Arg_Gestation_Length_In_Months = 13
                    self.Arg_Reproductive_Rest_Length_In_Months = 10
                    
                    pass
                elif int_Scenario_Code_B == 5: 
                    ''' Scenario 5:  Same as Scenario 1 but with +++> ...
                    Mating Scheme 24 (M24) Random Mating Without Parent Replacement & Hermaphrodites NOT allowed
                    '''
                    str_Scenario_Desc_Code = 'M114_EAF_08P_M24_G6_R1_' + str_UnNat_Mortality_Folder_Code + '_A50'
                    
                    self.Arg_Mating_Scheme = 24
                    
                    pass
                elif int_Scenario_Code_B == 6: 
                    ''' Scenario 6:  Same as Scenario 5 but with +++> ...
                    MinMaturityAge A95 (A95)
                    '''
                    str_Scenario_Desc_Code = 'M114_EAF_08P_M24_G6_R1_' + str_UnNat_Mortality_Folder_Code + '_A95'
                    
                    self.Arg_Min_Mating_Age = 15
                    
                    self.Arg_Mating_Scheme = 24
                    
                    pass
                elif int_Scenario_Code_B == 7: 
                    ''' Scenario 5:  Same as Scenario 1 but with +++> ...
                    Mating in Aug (8), Parturition in Sept (9), Gestation 13 months (G13), Resting 10 months (july, R10) <-- G13_R10
                    Mating Scheme 24 (M24) Random Mating Without Parent Replacement & Hermaphrodites NOT allowed
                    '''
                    str_Scenario_Desc_Code = 'M114_EAF_08P_M24_G13_R10_' + str_UnNat_Mortality_Folder_Code + '_A50'
                    
                    self.Arg_Parturition_Month = 9
                    self.Arg_Gestation_Length_In_Months = 13
                    self.Arg_Reproductive_Rest_Length_In_Months = 10
                    
                    self.Arg_Mating_Scheme = 24
                    
                    pass
                elif int_Scenario_Code_B == 8: 
                    ''' Scenario 8:  Same as Scenario 7 but with +++> ...
                    MinMaturityAge A95 (A95)
                    '''
                    str_Scenario_Desc_Code = 'M114_EAF_08P_M24_G13_R10_' + str_UnNat_Mortality_Folder_Code + '_A95'
                    
                    self.Arg_Min_Mating_Age = 15
                    
                    self.Arg_Parturition_Month = 9
                    self.Arg_Gestation_Length_In_Months = 13
                    self.Arg_Reproductive_Rest_Length_In_Months = 10
                    
                    self.Arg_Mating_Scheme = 24
                    
                    pass
                elif int_Scenario_Code_B == 9: 
                    ''' Scenario 9:  Same as Scenario 1 but with +++> ...
                    Mating Scheme 25 with 2 mates (M25M2) Polyandrous Mating With 2 Mates With Parent Replacement & Hermaphrodites allowed
                    '''
                    str_Scenario_Desc_Code = 'M114_EAF_08P_M25M2_G6_R1_' + str_UnNat_Mortality_Folder_Code + '_A50'
                    
                    self.Arg_Mating_Scheme = 25
                                            
                    self.Arg_Mating_Scheme_Polygamy_Num_Mates = 2
                    #self.Arg_Num_Offspring_Per_Mate = 8/self.Arg_Mating_Scheme_Polygamy_Num_Mates
                    self.Arg_Min_Num_Offspring_Per_Mate = 4 / self.Arg_Mating_Scheme_Polygamy_Num_Mates
                    self.Arg_Max_Num_Offspring_Per_Mate = 12 / self.Arg_Mating_Scheme_Polygamy_Num_Mates                    
                    pass
                elif int_Scenario_Code_B == 10: 
                    ''' Scenario 10:  Same as Scenario 9 but with +++> ...
                    MinMaturityAge A95 (A95)
                    '''
                    str_Scenario_Desc_Code = 'M114_EAF_08P_M25M2_G6_R1_' + str_UnNat_Mortality_Folder_Code + '_A95'
                    
                    self.Arg_Min_Mating_Age = 15
                    
                    self.Arg_Mating_Scheme = 25
                                            
                    self.Arg_Mating_Scheme_Polygamy_Num_Mates = 2
                    #self.Arg_Num_Offspring_Per_Mate = 8/self.Arg_Mating_Scheme_Polygamy_Num_Mates
                    self.Arg_Min_Num_Offspring_Per_Mate = 4 / self.Arg_Mating_Scheme_Polygamy_Num_Mates
                    self.Arg_Max_Num_Offspring_Per_Mate = 12 / self.Arg_Mating_Scheme_Polygamy_Num_Mates  
                    pass
                elif int_Scenario_Code_B == 11: 
                    ''' Scenario 11:  Same as Scenario 1 but with +++> ...
                    Mating in Aug (8), Parturition in Sept (9), Gestation 13 months (G13), Resting 10 months (july, R10) <-- G13_R10
                    Mating Scheme 25 with 2 mates (M25M2) Polyandrous Mating With 2 Mates With Parent Replacement & Hermaphrodites allowed
                    '''
                    str_Scenario_Desc_Code = 'M114_EAF_08P_M25M2_G13_R10_' + str_UnNat_Mortality_Folder_Code + '_A50'
                    
                    self.Arg_Parturition_Month = 9
                    self.Arg_Gestation_Length_In_Months = 13
                    self.Arg_Reproductive_Rest_Length_In_Months = 10
                                            
                    self.Arg_Mating_Scheme = 25
                                            
                    self.Arg_Mating_Scheme_Polygamy_Num_Mates = 2
                    #self.Arg_Num_Offspring_Per_Mate = 8/self.Arg_Mating_Scheme_Polygamy_Num_Mates
                    self.Arg_Min_Num_Offspring_Per_Mate = 4 / self.Arg_Mating_Scheme_Polygamy_Num_Mates
                    self.Arg_Max_Num_Offspring_Per_Mate = 12 / self.Arg_Mating_Scheme_Polygamy_Num_Mates  
                    pass                    
                elif int_Scenario_Code_B == 12: 
                    ''' Scenario 12:  Same as Scenario 11 but with +++> ...
                    MinMaturityAge A95 (A95)
                    '''
                    str_Scenario_Desc_Code = 'M114_EAF_08P_M25M2_G13_R10_' + str_UnNat_Mortality_Folder_Code + '_A95'
                    
                    self.Arg_Min_Mating_Age = 15
                    
                    self.Arg_Parturition_Month = 9
                    self.Arg_Gestation_Length_In_Months = 13
                    self.Arg_Reproductive_Rest_Length_In_Months = 10
                                            
                    self.Arg_Mating_Scheme = 25
                                            
                    self.Arg_Mating_Scheme_Polygamy_Num_Mates = 2
                    #self.Arg_Num_Offspring_Per_Mate = 8/self.Arg_Mating_Scheme_Polygamy_Num_Mates
                    self.Arg_Min_Num_Offspring_Per_Mate = 4 / self.Arg_Mating_Scheme_Polygamy_Num_Mates
                    self.Arg_Max_Num_Offspring_Per_Mate = 12 / self.Arg_Mating_Scheme_Polygamy_Num_Mates  
                    pass                    
                pass

                ''' Include UnNatural mortality scenarios '''
                if bool_Allow_UnNat_Mortality and len(self.str_Scenario_Code_C) > 0:
                    if int_Scenario_Code_D == 1:
                        ''' Fishing scenario 1: Business as usual  - Fullfill Quota
                        Quota Multiplier = 1
                        '''
                        int_BAU_Mortality_Multiplier = 1
                        int_Replicate_Mating_Count_UnNat_Mortality_Starts = 58
                        self.Arg_Allow_UnNatural_Mortality = True                
                        self.Arg_Mortality_Application_Specs__UnNat = {globalsSS.MortalityApplication.static_str_Mating_Mortlity_Starts__UnNat:{self.strSexMale: int_Replicate_Mating_Count_UnNat_Mortality_Starts, self.strSexFemale: int_Replicate_Mating_Count_UnNat_Mortality_Starts}, globalsSS.MortalityApplication.static_str_Mortality_Application_Model__UnNat:{self.strSexMale: 3, self.strSexFemale: 3}, globalsSS.MortalityApplication.static_str_Mortality_Scaling_Total__UnNat:{self.strSexMale: 262*int_BAU_Mortality_Multiplier, self.strSexFemale: 166*int_BAU_Mortality_Multiplier}} #dict_Mortality_Application_Specs_By_Sex__UnNATURAL     
                        self.Arg_Survival_UnNatural = {self.strSexMale:{12:0.981,24:0.966,36:0.973,48:0.973,60:0.989,72:0.996,84:0.996,96:1.000,108:0.973,120:0.954,132:0.947,144:0.905,156:0.924,168:0.851,180:0.882,192:0.870,204:0.931,216:0.962,228:0.977,240:0.989,252:0.977,264:0.992,276:0.992,288:1.000,300:1.000,312:1.000,324:1.000,336:1.000}
                                                      ,self.strSexFemale:{12:0.994,24:0.958,36:0.958,48:0.958,60:0.982,72:0.988,84:0.994,96:1.000,108:0.994,120:1.000,132:0.982,144:0.988,156:0.994,168:0.952,180:0.934,192:0.855,204:0.880,216:0.892,228:0.904,240:0.934,252:0.928,264:0.976,276:0.982,288:1.000,300:1.000,312:0.988,324:0.994,336:0.994}}
                        
                        self.arg_int_Sample_Pop_When_Mating_Count_Divisible_By = 1
                        pass
                    elif int_Scenario_Code_D == 2: 
                        ''' Fishing scenario 2: Business as usual  - Fullfill Quota
                        Quota Multiplier = 2
                        '''
                        int_BAU_Mortality_Multiplier = 2
                        int_Replicate_Mating_Count_UnNat_Mortality_Starts = 58
                        self.Arg_Allow_UnNatural_Mortality = True                
                        self.Arg_Mortality_Application_Specs__UnNat = {globalsSS.MortalityApplication.static_str_Mating_Mortlity_Starts__UnNat:{self.strSexMale: int_Replicate_Mating_Count_UnNat_Mortality_Starts, self.strSexFemale: int_Replicate_Mating_Count_UnNat_Mortality_Starts}, globalsSS.MortalityApplication.static_str_Mortality_Application_Model__UnNat:{self.strSexMale: 3, self.strSexFemale: 3}, globalsSS.MortalityApplication.static_str_Mortality_Scaling_Total__UnNat:{self.strSexMale: 166*int_BAU_Mortality_Multiplier, self.strSexFemale: 262*int_BAU_Mortality_Multiplier}} #dict_Mortality_Application_Specs_By_Sex__UnNATURAL     
                        self.Arg_Survival_UnNatural = {self.strSexMale:{12:0.981,24:0.966,36:0.973,48:0.973,60:0.989,72:0.996,84:0.996,96:1.000,108:0.973,120:0.954,132:0.947,144:0.905,156:0.924,168:0.851,180:0.882,192:0.870,204:0.931,216:0.962,228:0.977,240:0.989,252:0.977,264:0.992,276:0.992,288:1.000,300:1.000,312:1.000,324:1.000,336:1.000}
                                                      ,self.strSexFemale:{12:0.994,24:0.958,36:0.958,48:0.958,60:0.982,72:0.988,84:0.994,96:1.000,108:0.994,120:1.000,132:0.982,144:0.988,156:0.994,168:0.952,180:0.934,192:0.855,204:0.880,216:0.892,228:0.904,240:0.934,252:0.928,264:0.976,276:0.982,288:1.000,300:1.000,312:0.988,324:0.994,336:0.994}}
                        
                        self.arg_int_Sample_Pop_When_Mating_Count_Divisible_By = 1
                        pass
                    elif int_Scenario_Code_D == 3: 
                        ''' Fishing scenario 3: Business as usual  - Fullfill Quota
                        Quota Multiplier = 3
                        '''
                        int_BAU_Mortality_Multiplier = 3
                        int_Replicate_Mating_Count_UnNat_Mortality_Starts = 58
                        self.Arg_Allow_UnNatural_Mortality = True                
                        self.Arg_Mortality_Application_Specs__UnNat = {globalsSS.MortalityApplication.static_str_Mating_Mortlity_Starts__UnNat:{self.strSexMale: int_Replicate_Mating_Count_UnNat_Mortality_Starts, self.strSexFemale: int_Replicate_Mating_Count_UnNat_Mortality_Starts}, globalsSS.MortalityApplication.static_str_Mortality_Application_Model__UnNat:{self.strSexMale: 3, self.strSexFemale: 3}, globalsSS.MortalityApplication.static_str_Mortality_Scaling_Total__UnNat:{self.strSexMale: 166*int_BAU_Mortality_Multiplier, self.strSexFemale: 262*int_BAU_Mortality_Multiplier}} #dict_Mortality_Application_Specs_By_Sex__UnNATURAL     
                        self.Arg_Survival_UnNatural = {self.strSexMale:{12:0.981,24:0.966,36:0.973,48:0.973,60:0.989,72:0.996,84:0.996,96:1.000,108:0.973,120:0.954,132:0.947,144:0.905,156:0.924,168:0.851,180:0.882,192:0.870,204:0.931,216:0.962,228:0.977,240:0.989,252:0.977,264:0.992,276:0.992,288:1.000,300:1.000,312:1.000,324:1.000,336:1.000}
                                                      ,self.strSexFemale:{12:0.994,24:0.958,36:0.958,48:0.958,60:0.982,72:0.988,84:0.994,96:1.000,108:0.994,120:1.000,132:0.982,144:0.988,156:0.994,168:0.952,180:0.934,192:0.855,204:0.880,216:0.892,228:0.904,240:0.934,252:0.928,264:0.976,276:0.982,288:1.000,300:1.000,312:0.988,324:0.994,336:0.994}}
                        
                        self.arg_int_Sample_Pop_When_Mating_Count_Divisible_By = 1
                        pass
                    elif int_Scenario_Code_D == 4: 
                        ''' Fishing scenario 4: Extra Fishing scenario F4  holding pop size & Quota size constant for both species
                        '''
                        int_BAU_Mortality_Multiplier = 1
                        int_Replicate_Mating_Count_UnNat_Mortality_Starts = 58
                        self.Arg_Allow_UnNatural_Mortality = True                
                        self.Arg_Mortality_Application_Specs__UnNat = {globalsSS.MortalityApplication.static_str_Mating_Mortlity_Starts__UnNat:{self.strSexMale: int_Replicate_Mating_Count_UnNat_Mortality_Starts, self.strSexFemale: int_Replicate_Mating_Count_UnNat_Mortality_Starts}, globalsSS.MortalityApplication.static_str_Mortality_Application_Model__UnNat:{self.strSexMale: 3, self.strSexFemale: 3}, globalsSS.MortalityApplication.static_str_Mortality_Scaling_Total__UnNat:{self.strSexMale: 250*int_BAU_Mortality_Multiplier, self.strSexFemale: 250*int_BAU_Mortality_Multiplier}} #dict_Mortality_Application_Specs_By_Sex__UnNATURAL     
                        self.Arg_Survival_UnNatural = {self.strSexMale:{12:0.981,24:0.966,36:0.973,48:0.973,60:0.989,72:0.996,84:0.996,96:1.000,108:0.973,120:0.954,132:0.947,144:0.905,156:0.924,168:0.851,180:0.882,192:0.870,204:0.931,216:0.962,228:0.977,240:0.989,252:0.977,264:0.992,276:0.992,288:1.000,300:1.000,312:1.000,324:1.000,336:1.000}
                                                      ,self.strSexFemale:{12:0.994,24:0.958,36:0.958,48:0.958,60:0.982,72:0.988,84:0.994,96:1.000,108:0.994,120:1.000,132:0.982,144:0.988,156:0.994,168:0.952,180:0.934,192:0.855,204:0.880,216:0.892,228:0.904,240:0.934,252:0.928,264:0.976,276:0.982,288:1.000,300:1.000,312:0.988,324:0.994,336:0.994}}
                        
                        self.arg_int_Sample_Pop_When_Mating_Count_Divisible_By = 1
                        pass
                    pass
                    
                pass
            
                str_Arg_Pop_Size = str(self.Arg_Pop_Size)
                int_Len_Arg_Pop_Size = len(str_Arg_Pop_Size)
                str_UDF_Pop_Size = str_Arg_Pop_Size
                if int_Len_Arg_Pop_Size >= 4:
                    if str_Arg_Pop_Size[-3:] == '000':
                        str_UDF_Pop_Size = str_Arg_Pop_Size[:int_Len_Arg_Pop_Size-3] + 'K'
                    pass
                pass                        
                str_Scenario_Specific_Folder = 'N' + str_UDF_Pop_Size + '_' + str_Scenario_Desc_Code
                
                str_Pop_Replicates = 'PR' + str(self.Arg_Pop_Replicates)
                strRunSpecificUserDefinedFolder = self.str_Species_Code_Short + '\\' + self.str_Scenario_Code + '\\' + str_Pop_Replicates + '\\' + self.str_Species_Code + '_' + str_Scenario_Specific_Folder
            
                return strRunSpecificUserDefinedFolder

            def method_Simulation_PROD_AUTO_Run_Specific_User_Defined_Folder__SMOG_V1(self):
                                
                strRunSpecificUserDefinedFolder = 'PROD_DEFAULT'

                '''
                ~~~~~~~~~~~~~~~~~~~~
                Replicate Run - Parameter Specification
                ~~~~~~~~~~~~~~~~~~~~
                '''
                str_Allow_Mutation = ''
                if self.Arg_bool_Allow_Mutation:
                    str_Allow_Mutation = 'MY'
                else:
                    str_Allow_Mutation = 'MN'
                pass
                
                str_Num_Loci = "L" + str(self.Arg_Num_Loci)
                str_Alleles_Per_Locus = "A" + str(self.Arg_int_Alleles_Per_Locus)
                                         
                self.int_Total_MatingsToSimulatePerReplicate = self.method_Replicate_Get_Replicate_Total_Matings(self.Arg_BurnIn_Matings, self.Arg_Evolution_Years, self.Arg_Evolution_Months, self.Arg_int_Mating_Calender_Month)
                str_Matings = str(self.int_Total_MatingsToSimulatePerReplicate)

                if len(self.Arg_list_Offspring_Production_Parms) > 1: 
                    int_Offspring_Dist = self.Arg_list_Offspring_Production_Parms[0]
                    if int_Offspring_Dist == sim.POISSON_DISTRIBUTION:
                        str_Offspring_Dist = 'p'
                        str_Offspring_Rate = str(self.Arg_Num_Offspring_Mean_Per_Mate)
                        str_Offspring_Parms = str_Offspring_Rate + str_Offspring_Dist
                    elif int_Offspring_Dist == sim.UNIFORM_DISTRIBUTION:
                        str_Offspring_Dist = 'u'
                        str_Offspring_Min = str(self.Arg_Num_Offspring_Min_Per_Mate)
                        str_Offspring_Max = str(self.Arg_Num_Offspring_Max_Per_Mate)
                        str_Offspring_Parms = str_Offspring_Min + '_' + str_Offspring_Max +  str_Offspring_Dist                        
                    elif int_Offspring_Dist == sim.BINOMIAL_DISTRIBUTION:
                        str_Offspring_Dist = 'b'
                        str_Offspring_Mean = str(int(self.Arg_Num_Offspring_Dist_Samples * self.Arg_Num_Offspring_Dist_Probability))
                        str_Offspring_Parms = str_Offspring_Mean + str_Offspring_Dist                          
                    elif int_Offspring_Dist == sim.GEOMETRIC_DISTRIBUTION:
                        str_Offspring_Dist = 'g'
                        str_Offspring_Mean = str(self.Arg_Num_Offspring_Mean_Per_Mate)
                        str_Offspring_Parms = str_Offspring_Mean + str_Offspring_Dist                          
                    else:
                        str_Offspring_Dist = 'x'
                        str_Offspring_Num = str(self.Arg_Num_Offspring_Per_Mate)
                        str_Offspring_Parms = str_Offspring_Num + str_Offspring_Dist                          
                    pass
                else:
                    str_Offspring_Dist = 'a' #Absolute number of offspring
                    str_Offspring_Num = str(self.Arg_Num_Offspring_Per_Mate)
                    str_Offspring_Parms = str_Offspring_Num + str_Offspring_Dist                       
                pass
               
                bool_Allow_UnNat_Mortality = False
                str_Scenario_Desc_Code = ''
#                 str_Scenario_Code_A = self.str_Scenario_Code[:1]
                self.str_Scenario_Code_B = self.str_Scenario_Code[1:3]
                int_Scenario_Code_B = int(self.str_Scenario_Code_B)
                if len(self.str_Scenario_Code) > 3:
                    self.str_Scenario_Code_C = self.str_Scenario_Code[3:4]
                    if self.str_Scenario_Code_C == 'F':
                        bool_Allow_UnNat_Mortality = True
                        str_UnNat_Mortality_Folder_Code = 'UMY'                                                        
                        self.str_Scenario_Code_D = self.str_Scenario_Code[-1:]
                        int_Scenario_Code_D = int(self.str_Scenario_Code_D)
                    else:
                        str_UnNat_Mortality_Folder_Code = 'UMN'
                    pass
                else:
                    str_UnNat_Mortality_Folder_Code = 'UMN'                                                       
                pass

                '''
                ---------------------------
                Secenarios: 1 - 2: Test Senescence on simplest scenario: MAF, Sex ratio forced to 0.5
                ---------------------------
                '''
                if int_Scenario_Code_B == 0:
                    ''' Scenario 0:  BASELINE SCENARIO
                    Senescence Allowed No (SN)
                    MAXIMAL DIVERSITY Allele Freqs (MAF)
                    Mating Scheme 21 (M21), Mating in Aug (8), Gestation 6 months (Feb,2), Resting 1 months (Mar, 3) <--- *** Gest (G6) Rest (G1)***
                    Natural Mortality No, Non-natural Mortality No (UMN)
                    '''                         
                    self.Arg_int_Allele_Freq_Scheme = 1 #1 - Randomly generated allele frequencies - RANDOM DRICHLET DIVERSITY (DAF)
                    self.Arg_int_Offspring_Sex_Scheme = 1 #0 - probability-driven male sex proportion, 1 - Forced exactly even sex ratio
                    self.Arg_Allow_Senescence = False
                                        
                    str_Scenario_Desc_Code = 'M' + str_Matings + '_DAF' + '_' + str_Offspring_Parms + '_M21_G6_R1_' + str_UnNat_Mortality_Folder_Code + '_SN' + '_' + str_Allow_Mutation + '_' + str_Num_Loci + '_' + str_Alleles_Per_Locus
                    
                    pass
                elif int_Scenario_Code_B == 1:
                    ''' Scenario 1:  Same as Scenario 0 but with +++> ...
                    Senescence Allowed YES (SY)
                    '''               

                    self.Arg_int_Allele_Freq_Scheme = 1 #1 - Randomly generated allele frequencies - RANDOM DRICHLET DIVERSITY (DAF)
                    self.Arg_int_Offspring_Sex_Scheme = 1 #0 - probability-driven male sex proportion, 1 - Forced exactly even sex ratio
                    self.Arg_Allow_Senescence = True
#                     self.Arg_Survival_Natural_No_Senescence = {self.strSexMale:{  12:1.00, 24:1.00, 36:1.00, 48:1.00, 60:1.00, 72:1.00, 84:1.00, 96:1.00, 108:1.00, 120:1.00, 132:1.00, 144:1.00, 156:1.00, 168:1.00, 180:1.00, 192:1.00, 204:1.00, 216:1.00, 228:1.00, 240:1.00, 252:1.00, 264:1.00, 276:1.00, 288:1.00, 300:1.00, 312:1.00, 324:1.00, 336:1.00, 348:0.00}
#                                                               ,self.strSexFemale:{12:1.00, 24:1.00, 36:1.00, 48:1.00, 60:1.00, 72:1.00, 84:1.00, 96:1.00, 108:1.00, 120:1.00, 132:1.00, 144:1.00, 156:1.00, 168:1.00, 180:1.00, 192:1.00, 204:1.00, 216:1.00, 228:1.00, 240:1.00, 252:1.00, 264:1.00, 276:1.00, 288:1.00, 300:1.00, 312:1.00, 324:1.00, 336:1.00, 348:0.00}}
                    
                    str_Scenario_Desc_Code = 'M' + str_Matings + '_DAF' + '_' + str_Offspring_Parms + '_M21_G6_R1_' + str_UnNat_Mortality_Folder_Code + '_SY' + '_' + str_Allow_Mutation + '_' + str_Num_Loci + '_' + str_Alleles_Per_Locus
                    
                    pass
                elif int_Scenario_Code_B == 2: 
                    ''' Scenario 2:  Same as Scenario 0 but with +++> ...
                    minMatingAge = 12
                    '''
                    self.Arg_int_Allele_Freq_Scheme = 1 #1 - Randomly generated allele frequencies - RANDOM DRICHLET DIVERSITY (DAF)
                    self.Arg_int_Offspring_Sex_Scheme = 1 #0 - probability-driven male sex proportion, 1 - Forced exactly even sex ratio
                    self.Arg_Allow_Senescence = False
                    self.Arg_Min_Mating_Age = 12
                                        
                    str_Scenario_Desc_Code = 'M' + str_Matings + '_DAF' + '_' + str_Offspring_Parms + '_M21_G6_R1_' + str_UnNat_Mortality_Folder_Code + '_SN' + '_' + str_Allow_Mutation + '_' + str_Num_Loci + '_' + str_Alleles_Per_Locus
                    
                    pass
                elif int_Scenario_Code_B == 3:
                    ''' Scenario 3:  Same as Scenario 0 but with +++> ...
                    minMatingAge = 12
                    '''
                    self.Arg_int_Allele_Freq_Scheme = 1 #1 - Randomly generated allele frequencies - RANDOM DRICHLET DIVERSITY (DAF)
                    self.Arg_int_Offspring_Sex_Scheme = 1 #0 - probability-driven male sex proportion, 1 - Forced exactly even sex ratio
                    self.Arg_Allow_Senescence = False
                    self.Arg_Min_Mating_Age = 12
                                        
                    str_Scenario_Desc_Code = 'M' + str_Matings + '_DAF' + '_' + str_Offspring_Parms + '_M21_G6_R1_' + str_UnNat_Mortality_Folder_Code + '_SN' + '_' + str_Allow_Mutation + '_' + str_Num_Loci + '_' + str_Alleles_Per_Locus
                    
                    pass
                elif int_Scenario_Code_B == 4:
                    ''' Scenario 4:  Same as Scenario 3 but with +++> ...
                   Senescence Allowed YES (SY)
                    '''
                    self.Arg_int_Allele_Freq_Scheme = 1 #1 - Randomly generated allele frequencies - RANDOM DRICHLET DIVERSITY (DAF)
                    self.Arg_int_Offspring_Sex_Scheme = 1 #0 - probability-driven male sex proportion, 1 - Forced exactly even sex ratio
                    self.Arg_Allow_Senescence = True
                    self.Arg_Survival_Natural_Senescence = {self.strSexMale:{  12:1.00, 24:1.00, 36:1.00, 48:0.00}
                                                           ,self.strSexFemale:{12:1.00, 24:1.00, 36:1.00, 48:0.00}}    
                                    
                    str_Scenario_Desc_Code = 'M' + str_Matings + '_DAF' + '_' + str_Offspring_Parms + '_M21_G6_R1_' + str_UnNat_Mortality_Folder_Code + '_SY' + '_' + str_Allow_Mutation + '_' + str_Num_Loci + '_' + str_Alleles_Per_Locus

                    pass
                elif int_Scenario_Code_B == 5:
                    ''' Scenario 5:  Same as Scenario 2 but with +++> ...
                    MAXIMAL DIVERSITY Allele Freqs (MAF)
                    Offspring male sex proportions probability-driven
                    '''
                    self.Arg_int_Allele_Freq_Scheme = 0 #1 - Randomly generated allele frequencies - RANDOM DRICHLET DIVERSITY (DAF)
                    self.Arg_int_Offspring_Sex_Scheme = 0 #0 - probability-driven male sex proportion, 1 - Forced exactly even sex ratio
                    self.Arg_Allow_Senescence = False
                    self.Arg_Survival_Natural_No_Senescence = {self.strSexMale:{  12:1.00, 24:1.00, 36:0.00, 48:0.00}
                                                              ,self.strSexFemale:{12:1.00, 24:1.00, 36:0.00, 48:0.00}}
                                        
                    str_Scenario_Desc_Code = 'M' + str_Matings + '_MAF' + '_' + str_Offspring_Parms + '_M21_G6_R1_' + str_UnNat_Mortality_Folder_Code + '_SN' + '_' + str_Allow_Mutation + '_' + str_Num_Loci + '_' + str_Alleles_Per_Locus

                    pass
                elif int_Scenario_Code_B == 6:
                    ''' Scenario 6:  Same as Scenario 5 but with +++> ...
                    MAXIMAL DIVERSITY Allele Freqs (MAF)
                    Senescence Allowed YES (SY)
                    '''
                    self.Arg_int_Allele_Freq_Scheme = 0 #1 - Randomly generated allele frequencies - RANDOM DRICHLET DIVERSITY (DAF)
                    self.Arg_int_Offspring_Sex_Scheme = 1 #0 - probability-driven male sex proportion, 1 - Forced exactly even sex ratio
                    self.Arg_Allow_Senescence = True
                    self.Arg_Survival_Natural_Senescence = {self.strSexMale:{  12:1.00, 24:1.00, 36:1.00, 48:0.00}
                                                           ,self.strSexFemale:{12:1.00, 24:1.00, 36:1.00, 48:0.00}}    
                                    
                    str_Scenario_Desc_Code = 'M' + str_Matings + '_MAF' + '_' + str_Offspring_Parms + '_M21_G6_R1_' + str_UnNat_Mortality_Folder_Code + '_SY' + '_' + str_Allow_Mutation + '_' + str_Num_Loci + '_' + str_Alleles_Per_Locus

                    pass
                elif int_Scenario_Code_B == 7:
                    ''' Scenario 7:  Same as Scenario 2 but with +++> ...
                    Offspring male sex proportions probability-driven
                    NATURAL MORTALITY
                    '''
                    self.Arg_int_Allele_Freq_Scheme = 1 #1 - Randomly generated allele frequencies - RANDOM DRICHLET DIVERSITY (DAF)
                    self.Arg_int_Offspring_Sex_Scheme = 1 #0 - probability-driven male sex proportion, 1 - Forced exactly even sex ratio
                    self.Arg_Allow_Senescence = False
                    self.Arg_Survival_Natural_No_Senescence = {self.strSexMale:{  12:0.85, 24:0.85, 36:0.00, 48:0.00}
                                                              ,self.strSexFemale:{12:0.85, 24:0.85, 36:0.00, 48:0.00}}
                                        
                    str_Scenario_Desc_Code = 'M' + str_Matings + '_DAF' + '_' + str_Offspring_Parms + '_M21_G6_R1_' + str_UnNat_Mortality_Folder_Code + '_SN' + '_' + str_Allow_Mutation + '_' + str_Num_Loci + '_' + str_Alleles_Per_Locus

                    pass
                elif int_Scenario_Code_B == 8:
                    ''' Scenario 8:  Same as Scenario 3 but with +++> ...
                    Senescence Allowed YES (SY)
                    NATURAL MORTALITY
                    '''
                    self.Arg_int_Allele_Freq_Scheme = 1 #1 - Randomly generated allele frequencies - RANDOM DRICHLET DIVERSITY (DAF)
                    self.Arg_int_Offspring_Sex_Scheme = 1 #0 - probability-driven male sex proportion, 1 - Forced exactly even sex ratio
                    self.Arg_Allow_Senescence = True
                    self.Arg_Survival_Natural_Senescence = {self.strSexMale:{  12:0.85, 24:0.85, 36:0.85, 48:0.00}
                                                           ,self.strSexFemale:{12:0.85, 24:0.85, 36:0.85, 48:0.00}}    
                                    
                    str_Scenario_Desc_Code = 'M' + str_Matings + '_DAF' + '_' + str_Offspring_Parms + '_M21_G6_R1_' + str_UnNat_Mortality_Folder_Code + '_SY' + '_' + str_Allow_Mutation + '_' + str_Num_Loci + '_' + str_Alleles_Per_Locus

                    pass
                pass
            
                '''
                --------------------------
                Include UnNatural mortality scenarios
                --------------------------
                '''
                if bool_Allow_UnNat_Mortality and len(self.str_Scenario_Code_C) > 0:
                    if int_Scenario_Code_D == 1:
                        ''' Fishing scenario 1: Business as usual  - Fullfill Quota
                        Quota Multiplier = 1
                        '''
                        int_BAU_Mortality_Multiplier = 1
                        int_Replicate_Mating_Count_UnNat_Mortality_Starts = 58
                        self.Arg_Allow_UnNatural_Mortality = True                
                        self.Arg_Mortality_Application_Specs__UnNat = {globalsSS.MortalityApplication.static_str_Mating_Mortlity_Starts__UnNat:{self.strSexMale: int_Replicate_Mating_Count_UnNat_Mortality_Starts, self.strSexFemale: int_Replicate_Mating_Count_UnNat_Mortality_Starts}, globalsSS.MortalityApplication.static_str_Mortality_Application_Model__UnNat:{self.strSexMale: 3, self.strSexFemale: 3}, globalsSS.MortalityApplication.static_str_Mortality_Scaling_Total__UnNat:{self.strSexMale: 262*int_BAU_Mortality_Multiplier, self.strSexFemale: 166*int_BAU_Mortality_Multiplier}} #dict_Mortality_Application_Specs_By_Sex__UnNATURAL     
                        self.Arg_Survival_UnNatural = {self.strSexMale:{12:0.981,24:0.966,36:0.973,48:0.973,60:0.989,72:0.996,84:0.996,96:1.000,108:0.973,120:0.954,132:0.947,144:0.905,156:0.924,168:0.851,180:0.882,192:0.870,204:0.931,216:0.962,228:0.977,240:0.989,252:0.977,264:0.992,276:0.992,288:1.000,300:1.000,312:1.000,324:1.000,336:1.000}
                                                      ,self.strSexFemale:{12:0.994,24:0.958,36:0.958,48:0.958,60:0.982,72:0.988,84:0.994,96:1.000,108:0.994,120:1.000,132:0.982,144:0.988,156:0.994,168:0.952,180:0.934,192:0.855,204:0.880,216:0.892,228:0.904,240:0.934,252:0.928,264:0.976,276:0.982,288:1.000,300:1.000,312:0.988,324:0.994,336:0.994}}
                        
                        self.arg_int_Sample_Pop_When_Mating_Count_Divisible_By = 1
                        pass
                    elif int_Scenario_Code_D == 2: 
                        ''' Fishing scenario 2: Business as usual  - Fullfill Quota
                        Quota Multiplier = 2
                        '''
                        int_BAU_Mortality_Multiplier = 2
                        int_Replicate_Mating_Count_UnNat_Mortality_Starts = 58
                        self.Arg_Allow_UnNatural_Mortality = True                
                        self.Arg_Mortality_Application_Specs__UnNat = {globalsSS.MortalityApplication.static_str_Mating_Mortlity_Starts__UnNat:{self.strSexMale: int_Replicate_Mating_Count_UnNat_Mortality_Starts, self.strSexFemale: int_Replicate_Mating_Count_UnNat_Mortality_Starts}, globalsSS.MortalityApplication.static_str_Mortality_Application_Model__UnNat:{self.strSexMale: 3, self.strSexFemale: 3}, globalsSS.MortalityApplication.static_str_Mortality_Scaling_Total__UnNat:{self.strSexMale: 166*int_BAU_Mortality_Multiplier, self.strSexFemale: 262*int_BAU_Mortality_Multiplier}} #dict_Mortality_Application_Specs_By_Sex__UnNATURAL     
                        self.Arg_Survival_UnNatural = {self.strSexMale:{12:0.981,24:0.966,36:0.973,48:0.973,60:0.989,72:0.996,84:0.996,96:1.000,108:0.973,120:0.954,132:0.947,144:0.905,156:0.924,168:0.851,180:0.882,192:0.870,204:0.931,216:0.962,228:0.977,240:0.989,252:0.977,264:0.992,276:0.992,288:1.000,300:1.000,312:1.000,324:1.000,336:1.000}
                                                      ,self.strSexFemale:{12:0.994,24:0.958,36:0.958,48:0.958,60:0.982,72:0.988,84:0.994,96:1.000,108:0.994,120:1.000,132:0.982,144:0.988,156:0.994,168:0.952,180:0.934,192:0.855,204:0.880,216:0.892,228:0.904,240:0.934,252:0.928,264:0.976,276:0.982,288:1.000,300:1.000,312:0.988,324:0.994,336:0.994}}
                        
                        self.arg_int_Sample_Pop_When_Mating_Count_Divisible_By = 1
                        pass
                    elif int_Scenario_Code_D == 3: 
                        ''' Fishing scenario 3: Business as usual  - Fullfill Quota
                        Quota Multiplier = 3
                        '''
                        int_BAU_Mortality_Multiplier = 3
                        int_Replicate_Mating_Count_UnNat_Mortality_Starts = 58
                        self.Arg_Allow_UnNatural_Mortality = True                
                        self.Arg_Mortality_Application_Specs__UnNat = {globalsSS.MortalityApplication.static_str_Mating_Mortlity_Starts__UnNat:{self.strSexMale: int_Replicate_Mating_Count_UnNat_Mortality_Starts, self.strSexFemale: int_Replicate_Mating_Count_UnNat_Mortality_Starts}, globalsSS.MortalityApplication.static_str_Mortality_Application_Model__UnNat:{self.strSexMale: 3, self.strSexFemale: 3}, globalsSS.MortalityApplication.static_str_Mortality_Scaling_Total__UnNat:{self.strSexMale: 166*int_BAU_Mortality_Multiplier, self.strSexFemale: 262*int_BAU_Mortality_Multiplier}} #dict_Mortality_Application_Specs_By_Sex__UnNATURAL     
                        self.Arg_Survival_UnNatural = {self.strSexMale:{12:0.981,24:0.966,36:0.973,48:0.973,60:0.989,72:0.996,84:0.996,96:1.000,108:0.973,120:0.954,132:0.947,144:0.905,156:0.924,168:0.851,180:0.882,192:0.870,204:0.931,216:0.962,228:0.977,240:0.989,252:0.977,264:0.992,276:0.992,288:1.000,300:1.000,312:1.000,324:1.000,336:1.000}
                                                      ,self.strSexFemale:{12:0.994,24:0.958,36:0.958,48:0.958,60:0.982,72:0.988,84:0.994,96:1.000,108:0.994,120:1.000,132:0.982,144:0.988,156:0.994,168:0.952,180:0.934,192:0.855,204:0.880,216:0.892,228:0.904,240:0.934,252:0.928,264:0.976,276:0.982,288:1.000,300:1.000,312:0.988,324:0.994,336:0.994}}
                        
                        self.arg_int_Sample_Pop_When_Mating_Count_Divisible_By = 1
                        pass
                    elif int_Scenario_Code_D == 4: 
                        ''' Fishing scenario 4: Extra Fishing scenario F4  holding pop size & Quota size constant for both species
                        '''
                        int_BAU_Mortality_Multiplier = 1
                        int_Replicate_Mating_Count_UnNat_Mortality_Starts = 58
                        self.Arg_Allow_UnNatural_Mortality = True                
                        self.Arg_Mortality_Application_Specs__UnNat = {globalsSS.MortalityApplication.static_str_Mating_Mortlity_Starts__UnNat:{self.strSexMale: int_Replicate_Mating_Count_UnNat_Mortality_Starts, self.strSexFemale: int_Replicate_Mating_Count_UnNat_Mortality_Starts}, globalsSS.MortalityApplication.static_str_Mortality_Application_Model__UnNat:{self.strSexMale: 3, self.strSexFemale: 3}, globalsSS.MortalityApplication.static_str_Mortality_Scaling_Total__UnNat:{self.strSexMale: 250*int_BAU_Mortality_Multiplier, self.strSexFemale: 250*int_BAU_Mortality_Multiplier}} #dict_Mortality_Application_Specs_By_Sex__UnNATURAL     
                        self.Arg_Survival_UnNatural = {self.strSexMale:{12:0.981,24:0.966,36:0.973,48:0.973,60:0.989,72:0.996,84:0.996,96:1.000,108:0.973,120:0.954,132:0.947,144:0.905,156:0.924,168:0.851,180:0.882,192:0.870,204:0.931,216:0.962,228:0.977,240:0.989,252:0.977,264:0.992,276:0.992,288:1.000,300:1.000,312:1.000,324:1.000,336:1.000}
                                                      ,self.strSexFemale:{12:0.994,24:0.958,36:0.958,48:0.958,60:0.982,72:0.988,84:0.994,96:1.000,108:0.994,120:1.000,132:0.982,144:0.988,156:0.994,168:0.952,180:0.934,192:0.855,204:0.880,216:0.892,228:0.904,240:0.934,252:0.928,264:0.976,276:0.982,288:1.000,300:1.000,312:0.988,324:0.994,336:0.994}}
                        
                        self.arg_int_Sample_Pop_When_Mating_Count_Divisible_By = 1
                        pass
                    pass
                    
                pass
            
                str_Arg_Pop_Size = str(self.Arg_Pop_Size)
                int_Len_Arg_Pop_Size = len(str_Arg_Pop_Size)
                str_UDF_Pop_Size = str_Arg_Pop_Size
                if int_Len_Arg_Pop_Size >= 4:
                    if str_Arg_Pop_Size[-3:] == '000':
                        str_UDF_Pop_Size = str_Arg_Pop_Size[:int_Len_Arg_Pop_Size-3] + 'K'
                    pass
                pass                        
                str_Scenario_Specific_Folder = 'N' + str_UDF_Pop_Size + '_' + str_Scenario_Desc_Code
                
                str_Pop_Replicates = 'PR' + str(self.Arg_Pop_Replicates)
                strRunSpecificUserDefinedFolder = self.str_Species_Code_Short + '\\' + self.str_Scenario_Code + '\\' + str_Pop_Replicates + '\\' + self.str_Species_Code + '_' + str_Scenario_Specific_Folder
            
                return strRunSpecificUserDefinedFolder
                
            def method_Simulation_PROD_AUTO_Run_Specific_User_Defined_Folder__TUTR_V1(self):
                                
                strRunSpecificUserDefinedFolder = 'PROD_DEFAULT'

                '''
                ~~~~~~~~~~~~~~~~~~~~
                Replicate Run - Parameter Specification
                ~~~~~~~~~~~~~~~~~~~~
                '''
                str_Allow_Mutation = ''
                if self.Arg_bool_Allow_Mutation:
                    str_Allow_Mutation = 'MY'
                else:
                    str_Allow_Mutation = 'MN'
                pass
                
                str_Num_Loci = "L" + str(self.Arg_Num_Loci)
                str_Alleles_Per_Locus = "A" + str(self.Arg_int_Alleles_Per_Locus)
                                         
                self.int_Total_MatingsToSimulatePerReplicate = self.method_Replicate_Get_Replicate_Total_Matings(self.Arg_BurnIn_Matings, self.Arg_Evolution_Years, self.Arg_Evolution_Months, self.Arg_int_Mating_Calender_Month)
                str_Matings = str(self.int_Total_MatingsToSimulatePerReplicate)

                if len(self.Arg_list_Offspring_Production_Parms) > 1: 
                    int_Offspring_Dist = self.Arg_list_Offspring_Production_Parms[0]
                    if int_Offspring_Dist == sim.POISSON_DISTRIBUTION:
                        str_Offspring_Dist = 'p'
                        str_Offspring_Rate = str(self.Arg_Num_Offspring_Mean_Per_Mate)
                        str_Offspring_Rate = str_Offspring_Rate.replace('.','_')
                        str_Offspring_Parms = str_Offspring_Rate + str_Offspring_Dist
                    elif int_Offspring_Dist == sim.UNIFORM_DISTRIBUTION:
                        str_Offspring_Dist = 'u'
                        str_Offspring_Min = str(self.Arg_Num_Offspring_Min_Per_Mate)
                        str_Offspring_Max = str(self.Arg_Num_Offspring_Max_Per_Mate)
                        str_Offspring_Parms = str_Offspring_Min + '_' + str_Offspring_Max +  str_Offspring_Dist                        
                    elif int_Offspring_Dist == sim.BINOMIAL_DISTRIBUTION:
                        str_Offspring_Dist = 'b'
                        str_Offspring_Mean = str(int(self.Arg_Num_Offspring_Dist_Samples * self.Arg_Num_Offspring_Dist_Probability))
                        str_Offspring_Parms = str_Offspring_Mean + str_Offspring_Dist                          
                    elif int_Offspring_Dist == sim.GEOMETRIC_DISTRIBUTION:
                        str_Offspring_Dist = 'g'
                        str_Offspring_Mean = str(self.Arg_Num_Offspring_Mean_Per_Mate)
                        str_Offspring_Parms = str_Offspring_Mean + str_Offspring_Dist                          
                    else:
                        str_Offspring_Dist = 'x'
                        str_Offspring_Num = str(self.Arg_Num_Offspring_Per_Mate)
                        str_Offspring_Parms = str_Offspring_Num + str_Offspring_Dist                          
                    pass
                else:
                    str_Offspring_Dist = 'a' #Absolute number of offspring
                    str_Offspring_Num = str(self.Arg_Num_Offspring_Per_Mate)
                    str_Offspring_Parms = str_Offspring_Num + str_Offspring_Dist                       
                pass
               
                bool_Allow_UnNat_Mortality = False
                str_Scenario_Desc_Code = ''
#                 str_Scenario_Code_A = self.str_Scenario_Code[:1]
                self.str_Scenario_Code_B = self.str_Scenario_Code[1:3]
                int_Scenario_Code_B = int(self.str_Scenario_Code_B)
                if len(self.str_Scenario_Code) > 3:
                    self.str_Scenario_Code_C = self.str_Scenario_Code[3:4]
                    if self.str_Scenario_Code_C == 'F':
                        bool_Allow_UnNat_Mortality = True
                        str_UnNat_Mortality_Folder_Code = 'UMY'                                                        
                        self.str_Scenario_Code_D = self.str_Scenario_Code[-1:]
                        int_Scenario_Code_D = int(self.str_Scenario_Code_D)
                    else:
                        str_UnNat_Mortality_Folder_Code = 'UMN'
                    pass
                else:
                    str_UnNat_Mortality_Folder_Code = 'UMN'                                                       
                pass

                '''
                ---------------------------
                Secenarios: 1 - 2: Test Senescence on simplest scenario: MAF, Sex ratio forced to 0.5
                ---------------------------
                '''
                if int_Scenario_Code_B == 0:
                    ''' Scenario 0:  BASELINE SCENARIO
                    Senescence Allowed No (SN)
                    MAXIMAL DIVERSITY Allele Freqs (MAF)
                    Mating Scheme 21 (M21), Mating in Aug (8), Gestation 6 months (Feb,2), Resting 1 months (Mar, 3) <--- *** Gest (G6) Rest (G1)***
                    Natural Mortality No, Non-natural Mortality No (UMN)
                    '''                         
                    self.Arg_int_Allele_Freq_Scheme = 1 #1 - Randomly generated allele frequencies - RANDOM DRICHLET DIVERSITY (DAF)
                    self.Arg_int_Offspring_Sex_Scheme = 1 #0 - probability-driven male sex proportion, 1 - Forced exactly even sex ratio
                    self.Arg_Allow_Senescence = False
                                        
                    str_Scenario_Desc_Code = 'M' + str_Matings + '_DAF' + '_' + str_Offspring_Parms + '_M21_G6_R1_' + str_UnNat_Mortality_Folder_Code + '_SN' + '_' + str_Allow_Mutation + '_' + str_Num_Loci + '_' + str_Alleles_Per_Locus
                    
                    pass
                elif int_Scenario_Code_B == 1:
                    ''' Scenario 1:  Same as Scenario 0 but with +++> ...
                    Senescence Allowed YES (SY)
                    '''               

                    self.Arg_int_Allele_Freq_Scheme = 1 #1 - Randomly generated allele frequencies - RANDOM DRICHLET DIVERSITY (DAF)
                    self.Arg_int_Offspring_Sex_Scheme = 1 #0 - probability-driven male sex proportion, 1 - Forced exactly even sex ratio
                    self.Arg_Allow_Senescence = True
#                     self.Arg_Survival_Natural_No_Senescence = {self.strSexMale:{  12:1.00, 24:1.00, 36:1.00, 48:1.00, 60:1.00, 72:1.00, 84:1.00, 96:1.00, 108:1.00, 120:1.00, 132:1.00, 144:1.00, 156:1.00, 168:1.00, 180:1.00, 192:1.00, 204:1.00, 216:1.00, 228:1.00, 240:1.00, 252:1.00, 264:1.00, 276:1.00, 288:1.00, 300:1.00, 312:1.00, 324:1.00, 336:1.00, 348:0.00}
#                                                               ,self.strSexFemale:{12:1.00, 24:1.00, 36:1.00, 48:1.00, 60:1.00, 72:1.00, 84:1.00, 96:1.00, 108:1.00, 120:1.00, 132:1.00, 144:1.00, 156:1.00, 168:1.00, 180:1.00, 192:1.00, 204:1.00, 216:1.00, 228:1.00, 240:1.00, 252:1.00, 264:1.00, 276:1.00, 288:1.00, 300:1.00, 312:1.00, 324:1.00, 336:1.00, 348:0.00}}
                    
                    str_Scenario_Desc_Code = 'M' + str_Matings + '_DAF' + '_' + str_Offspring_Parms + '_M21_G6_R1_' + str_UnNat_Mortality_Folder_Code + '_SY' + '_' + str_Allow_Mutation + '_' + str_Num_Loci + '_' + str_Alleles_Per_Locus
                    
                    pass
                elif int_Scenario_Code_B == 2: 
                    ''' Scenario 2:  Same as Scenario 0 but with +++> ...
                    Offspring male sex proportions probability-driven
                    '''
                    self.Arg_int_Allele_Freq_Scheme = 1 #1 - Randomly generated allele frequencies - RANDOM DRICHLET DIVERSITY (DAF)
                    self.Arg_int_Offspring_Sex_Scheme = 0 #0 - probability-driven male sex proportion, 1 - Forced exactly even sex ratio
                    self.Arg_Allow_Senescence = False
                                        
                    str_Scenario_Desc_Code = 'M' + str_Matings + '_DAF' + '_' + str_Offspring_Parms + '_M21_G6_R1_' + str_UnNat_Mortality_Folder_Code + '_SN' + '_' + str_Allow_Mutation + '_' + str_Num_Loci + '_' + str_Alleles_Per_Locus
                    
                    pass
                elif int_Scenario_Code_B == 3:
                    ''' Scenario 3:  Same as Scenario 0 but with +++> ...
                    minMatingAge = 12
                    '''
                    self.Arg_int_Allele_Freq_Scheme = 1 #1 - Randomly generated allele frequencies - RANDOM DRICHLET DIVERSITY (DAF)
                    self.Arg_int_Offspring_Sex_Scheme = 1 #0 - probability-driven male sex proportion, 1 - Forced exactly even sex ratio
                    self.Arg_Allow_Senescence = False
                    self.Arg_Min_Mating_Age = 12
                                        
                    str_Scenario_Desc_Code = 'M' + str_Matings + '_DAF' + '_' + str_Offspring_Parms + '_M21_G6_R1_' + str_UnNat_Mortality_Folder_Code + '_SN' + '_' + str_Allow_Mutation + '_' + str_Num_Loci + '_' + str_Alleles_Per_Locus
                    
                    pass
                elif int_Scenario_Code_B == 4:
                    ''' Scenario 4:  Same as Scenario 3 but with +++> ...
                   Senescence Allowed YES (SY)
                    '''
                    self.Arg_int_Allele_Freq_Scheme = 1 #1 - Randomly generated allele frequencies - RANDOM DRICHLET DIVERSITY (DAF)
                    self.Arg_int_Offspring_Sex_Scheme = 1 #0 - probability-driven male sex proportion, 1 - Forced exactly even sex ratio
                    self.Arg_Allow_Senescence = True
                    self.Arg_Survival_Natural_Senescence = {self.strSexMale:{  12:1.00, 24:1.00, 36:1.00, 48:0.00}
                                                           ,self.strSexFemale:{12:1.00, 24:1.00, 36:1.00, 48:0.00}}    
                                    
                    str_Scenario_Desc_Code = 'M' + str_Matings + '_DAF' + '_' + str_Offspring_Parms + '_M21_G6_R1_' + str_UnNat_Mortality_Folder_Code + '_SY' + '_' + str_Allow_Mutation + '_' + str_Num_Loci + '_' + str_Alleles_Per_Locus

                    pass
                elif int_Scenario_Code_B == 5:
                    ''' Scenario 5:  Same as Scenario 2 but with +++> ...
                    MAXIMAL DIVERSITY Allele Freqs (MAF)
                    Offspring male sex proportions probability-driven
                    '''
                    self.Arg_int_Allele_Freq_Scheme = 0 #1 - Randomly generated allele frequencies - RANDOM DRICHLET DIVERSITY (DAF)
                    self.Arg_int_Offspring_Sex_Scheme = 0 #0 - probability-driven male sex proportion, 1 - Forced exactly even sex ratio
                    self.Arg_Allow_Senescence = False
                    self.Arg_Survival_Natural_No_Senescence = {self.strSexMale:{  12:1.00, 24:1.00, 36:0.00, 48:0.00}
                                                              ,self.strSexFemale:{12:1.00, 24:1.00, 36:0.00, 48:0.00}}
                                        
                    str_Scenario_Desc_Code = 'M' + str_Matings + '_MAF' + '_' + str_Offspring_Parms + '_M21_G6_R1_' + str_UnNat_Mortality_Folder_Code + '_SN' + '_' + str_Allow_Mutation + '_' + str_Num_Loci + '_' + str_Alleles_Per_Locus

                    pass
                elif int_Scenario_Code_B == 6:
                    ''' Scenario 6:  Same as Scenario 5 but with +++> ...
                    MAXIMAL DIVERSITY Allele Freqs (MAF)
                    Senescence Allowed YES (SY)
                    '''
                    self.Arg_int_Allele_Freq_Scheme = 0 #1 - Randomly generated allele frequencies - RANDOM DRICHLET DIVERSITY (DAF)
                    self.Arg_int_Offspring_Sex_Scheme = 1 #0 - probability-driven male sex proportion, 1 - Forced exactly even sex ratio
                    self.Arg_Allow_Senescence = True
                    self.Arg_Survival_Natural_Senescence = {self.strSexMale:{  12:1.00, 24:1.00, 36:1.00, 48:0.00}
                                                           ,self.strSexFemale:{12:1.00, 24:1.00, 36:1.00, 48:0.00}}    
                                    
                    str_Scenario_Desc_Code = 'M' + str_Matings + '_MAF' + '_' + str_Offspring_Parms + '_M21_G6_R1_' + str_UnNat_Mortality_Folder_Code + '_SY' + '_' + str_Allow_Mutation + '_' + str_Num_Loci + '_' + str_Alleles_Per_Locus

                    pass
                elif int_Scenario_Code_B == 7:
                    ''' Scenario 7:  Same as Scenario 2 but with +++> ...
                    Offspring male sex proportions probability-driven
                    NATURAL MORTALITY
                    '''
                    self.Arg_int_Allele_Freq_Scheme = 1 #1 - Randomly generated allele frequencies - RANDOM DRICHLET DIVERSITY (DAF)
                    self.Arg_int_Offspring_Sex_Scheme = 1 #0 - probability-driven male sex proportion, 1 - Forced exactly even sex ratio
                    self.Arg_Allow_Senescence = False
                    self.Arg_Survival_Natural_No_Senescence = {self.strSexMale:{  12:0.85, 24:0.85, 36:0.00, 48:0.00}
                                                              ,self.strSexFemale:{12:0.85, 24:0.85, 36:0.00, 48:0.00}}
                                        
                    str_Scenario_Desc_Code = 'M' + str_Matings + '_DAF' + '_' + str_Offspring_Parms + '_M21_G6_R1_' + str_UnNat_Mortality_Folder_Code + '_SN' + '_' + str_Allow_Mutation + '_' + str_Num_Loci + '_' + str_Alleles_Per_Locus

                    pass
                elif int_Scenario_Code_B == 8:
                    ''' Scenario 8:  Same as Scenario 3 but with +++> ...
                    Senescence Allowed YES (SY)
                    NATURAL MORTALITY
                    '''
                    self.Arg_int_Allele_Freq_Scheme = 1 #1 - Randomly generated allele frequencies - RANDOM DRICHLET DIVERSITY (DAF)
                    self.Arg_int_Offspring_Sex_Scheme = 1 #0 - probability-driven male sex proportion, 1 - Forced exactly even sex ratio
                    self.Arg_Allow_Senescence = True
                    self.Arg_Survival_Natural_Senescence = {self.strSexMale:{  12:0.85, 24:0.85, 36:0.85, 48:0.00}
                                                           ,self.strSexFemale:{12:0.85, 24:0.85, 36:0.85, 48:0.00}}    
                                    
                    str_Scenario_Desc_Code = 'M' + str_Matings + '_DAF' + '_' + str_Offspring_Parms + '_M21_G6_R1_' + str_UnNat_Mortality_Folder_Code + '_SY' + '_' + str_Allow_Mutation + '_' + str_Num_Loci + '_' + str_Alleles_Per_Locus

                    pass
                pass
            
                '''
                --------------------------
                Include UnNatural mortality scenarios
                --------------------------
                '''
                if bool_Allow_UnNat_Mortality and len(self.str_Scenario_Code_C) > 0:
                    if int_Scenario_Code_D == 1:
                        ''' Fishing scenario 1: Business as usual  - Fullfill Quota
                        Quota Multiplier = 1
                        '''
                        int_BAU_Mortality_Multiplier = 1
                        int_Replicate_Mating_Count_UnNat_Mortality_Starts = 58
                        self.Arg_Allow_UnNatural_Mortality = True                
                        self.Arg_Mortality_Application_Specs__UnNat = {globalsSS.MortalityApplication.static_str_Mating_Mortlity_Starts__UnNat:{self.strSexMale: int_Replicate_Mating_Count_UnNat_Mortality_Starts, self.strSexFemale: int_Replicate_Mating_Count_UnNat_Mortality_Starts}, globalsSS.MortalityApplication.static_str_Mortality_Application_Model__UnNat:{self.strSexMale: 3, self.strSexFemale: 3}, globalsSS.MortalityApplication.static_str_Mortality_Scaling_Total__UnNat:{self.strSexMale: 262*int_BAU_Mortality_Multiplier, self.strSexFemale: 166*int_BAU_Mortality_Multiplier}} #dict_Mortality_Application_Specs_By_Sex__UnNATURAL     
                        self.Arg_Survival_UnNatural = {self.strSexMale:{12:0.981,24:0.966,36:0.973,48:0.973,60:0.989,72:0.996,84:0.996,96:1.000,108:0.973,120:0.954,132:0.947,144:0.905,156:0.924,168:0.851,180:0.882,192:0.870,204:0.931,216:0.962,228:0.977,240:0.989,252:0.977,264:0.992,276:0.992,288:1.000,300:1.000,312:1.000,324:1.000,336:1.000}
                                                      ,self.strSexFemale:{12:0.994,24:0.958,36:0.958,48:0.958,60:0.982,72:0.988,84:0.994,96:1.000,108:0.994,120:1.000,132:0.982,144:0.988,156:0.994,168:0.952,180:0.934,192:0.855,204:0.880,216:0.892,228:0.904,240:0.934,252:0.928,264:0.976,276:0.982,288:1.000,300:1.000,312:0.988,324:0.994,336:0.994}}
                        
                        self.arg_int_Sample_Pop_When_Mating_Count_Divisible_By = 1
                        pass
                    elif int_Scenario_Code_D == 2: 
                        ''' Fishing scenario 2: Business as usual  - Fullfill Quota
                        Quota Multiplier = 2
                        '''
                        int_BAU_Mortality_Multiplier = 2
                        int_Replicate_Mating_Count_UnNat_Mortality_Starts = 58
                        self.Arg_Allow_UnNatural_Mortality = True                
                        self.Arg_Mortality_Application_Specs__UnNat = {globalsSS.MortalityApplication.static_str_Mating_Mortlity_Starts__UnNat:{self.strSexMale: int_Replicate_Mating_Count_UnNat_Mortality_Starts, self.strSexFemale: int_Replicate_Mating_Count_UnNat_Mortality_Starts}, globalsSS.MortalityApplication.static_str_Mortality_Application_Model__UnNat:{self.strSexMale: 3, self.strSexFemale: 3}, globalsSS.MortalityApplication.static_str_Mortality_Scaling_Total__UnNat:{self.strSexMale: 166*int_BAU_Mortality_Multiplier, self.strSexFemale: 262*int_BAU_Mortality_Multiplier}} #dict_Mortality_Application_Specs_By_Sex__UnNATURAL     
                        self.Arg_Survival_UnNatural = {self.strSexMale:{12:0.981,24:0.966,36:0.973,48:0.973,60:0.989,72:0.996,84:0.996,96:1.000,108:0.973,120:0.954,132:0.947,144:0.905,156:0.924,168:0.851,180:0.882,192:0.870,204:0.931,216:0.962,228:0.977,240:0.989,252:0.977,264:0.992,276:0.992,288:1.000,300:1.000,312:1.000,324:1.000,336:1.000}
                                                      ,self.strSexFemale:{12:0.994,24:0.958,36:0.958,48:0.958,60:0.982,72:0.988,84:0.994,96:1.000,108:0.994,120:1.000,132:0.982,144:0.988,156:0.994,168:0.952,180:0.934,192:0.855,204:0.880,216:0.892,228:0.904,240:0.934,252:0.928,264:0.976,276:0.982,288:1.000,300:1.000,312:0.988,324:0.994,336:0.994}}
                        
                        self.arg_int_Sample_Pop_When_Mating_Count_Divisible_By = 1
                        pass
                    elif int_Scenario_Code_D == 3: 
                        ''' Fishing scenario 3: Business as usual  - Fullfill Quota
                        Quota Multiplier = 3
                        '''
                        int_BAU_Mortality_Multiplier = 3
                        int_Replicate_Mating_Count_UnNat_Mortality_Starts = 58
                        self.Arg_Allow_UnNatural_Mortality = True                
                        self.Arg_Mortality_Application_Specs__UnNat = {globalsSS.MortalityApplication.static_str_Mating_Mortlity_Starts__UnNat:{self.strSexMale: int_Replicate_Mating_Count_UnNat_Mortality_Starts, self.strSexFemale: int_Replicate_Mating_Count_UnNat_Mortality_Starts}, globalsSS.MortalityApplication.static_str_Mortality_Application_Model__UnNat:{self.strSexMale: 3, self.strSexFemale: 3}, globalsSS.MortalityApplication.static_str_Mortality_Scaling_Total__UnNat:{self.strSexMale: 166*int_BAU_Mortality_Multiplier, self.strSexFemale: 262*int_BAU_Mortality_Multiplier}} #dict_Mortality_Application_Specs_By_Sex__UnNATURAL     
                        self.Arg_Survival_UnNatural = {self.strSexMale:{12:0.981,24:0.966,36:0.973,48:0.973,60:0.989,72:0.996,84:0.996,96:1.000,108:0.973,120:0.954,132:0.947,144:0.905,156:0.924,168:0.851,180:0.882,192:0.870,204:0.931,216:0.962,228:0.977,240:0.989,252:0.977,264:0.992,276:0.992,288:1.000,300:1.000,312:1.000,324:1.000,336:1.000}
                                                      ,self.strSexFemale:{12:0.994,24:0.958,36:0.958,48:0.958,60:0.982,72:0.988,84:0.994,96:1.000,108:0.994,120:1.000,132:0.982,144:0.988,156:0.994,168:0.952,180:0.934,192:0.855,204:0.880,216:0.892,228:0.904,240:0.934,252:0.928,264:0.976,276:0.982,288:1.000,300:1.000,312:0.988,324:0.994,336:0.994}}
                        
                        self.arg_int_Sample_Pop_When_Mating_Count_Divisible_By = 1
                        pass
                    elif int_Scenario_Code_D == 4: 
                        ''' Fishing scenario 4: Extra Fishing scenario F4  holding pop size & Quota size constant for both species
                        '''
                        int_BAU_Mortality_Multiplier = 1
                        int_Replicate_Mating_Count_UnNat_Mortality_Starts = 58
                        self.Arg_Allow_UnNatural_Mortality = True                
                        self.Arg_Mortality_Application_Specs__UnNat = {globalsSS.MortalityApplication.static_str_Mating_Mortlity_Starts__UnNat:{self.strSexMale: int_Replicate_Mating_Count_UnNat_Mortality_Starts, self.strSexFemale: int_Replicate_Mating_Count_UnNat_Mortality_Starts}, globalsSS.MortalityApplication.static_str_Mortality_Application_Model__UnNat:{self.strSexMale: 3, self.strSexFemale: 3}, globalsSS.MortalityApplication.static_str_Mortality_Scaling_Total__UnNat:{self.strSexMale: 250*int_BAU_Mortality_Multiplier, self.strSexFemale: 250*int_BAU_Mortality_Multiplier}} #dict_Mortality_Application_Specs_By_Sex__UnNATURAL     
                        self.Arg_Survival_UnNatural = {self.strSexMale:{12:0.981,24:0.966,36:0.973,48:0.973,60:0.989,72:0.996,84:0.996,96:1.000,108:0.973,120:0.954,132:0.947,144:0.905,156:0.924,168:0.851,180:0.882,192:0.870,204:0.931,216:0.962,228:0.977,240:0.989,252:0.977,264:0.992,276:0.992,288:1.000,300:1.000,312:1.000,324:1.000,336:1.000}
                                                      ,self.strSexFemale:{12:0.994,24:0.958,36:0.958,48:0.958,60:0.982,72:0.988,84:0.994,96:1.000,108:0.994,120:1.000,132:0.982,144:0.988,156:0.994,168:0.952,180:0.934,192:0.855,204:0.880,216:0.892,228:0.904,240:0.934,252:0.928,264:0.976,276:0.982,288:1.000,300:1.000,312:0.988,324:0.994,336:0.994}}
                        
                        self.arg_int_Sample_Pop_When_Mating_Count_Divisible_By = 1
                        pass
                    pass
                    
                pass
            
                str_Arg_Pop_Size = str(self.Arg_Pop_Size)
                int_Len_Arg_Pop_Size = len(str_Arg_Pop_Size)
                str_UDF_Pop_Size = str_Arg_Pop_Size
                if int_Len_Arg_Pop_Size >= 4:
                    if str_Arg_Pop_Size[-3:] == '000':
                        str_UDF_Pop_Size = str_Arg_Pop_Size[:int_Len_Arg_Pop_Size-3] + 'K'
                    pass
                pass                        
                str_Scenario_Specific_Folder = 'N' + str_UDF_Pop_Size + '_' + str_Scenario_Desc_Code
                
                str_Pop_Replicates = 'PR' + str(self.Arg_Pop_Replicates)
                strRunSpecificUserDefinedFolder = self.str_Species_Code_Short + '\\' + self.str_Scenario_Code + '\\' + str_Pop_Replicates + '\\' + self.str_Species_Code + '_' + str_Scenario_Specific_Folder
            
                return strRunSpecificUserDefinedFolder
                
            def method_Simulation_PROD_AUTO_Run_Specific_User_Defined_Folder__TUTR_V2(self):
                                
                strRunSpecificUserDefinedFolder = 'PROD_DEFAULT'

                '''
                ~~~~~~~~~~~~~~~~~~~~
                Replicate Run - Parameter Specification
                ~~~~~~~~~~~~~~~~~~~~
                '''
                str_Allow_Mutation = ''
                if self.Arg_bool_Allow_Mutation:
                    str_Allow_Mutation = 'MY'
                else:
                    str_Allow_Mutation = 'MN'
                pass
                
                str_Num_Loci = "L" + str(self.Arg_Num_Loci)
                str_Alleles_Per_Locus = "A" + str(self.Arg_int_Alleles_Per_Locus)
                                         
                self.int_Total_MatingsToSimulatePerReplicate = self.method_Replicate_Get_Replicate_Total_Matings(self.Arg_BurnIn_Matings, self.Arg_Evolution_Years, self.Arg_Evolution_Months, self.Arg_int_Mating_Calender_Month)
                str_Matings = str(self.int_Total_MatingsToSimulatePerReplicate)

                if len(self.Arg_list_Offspring_Production_Parms) > 1: 
                    int_Offspring_Dist = self.Arg_list_Offspring_Production_Parms[0]
                    if int_Offspring_Dist == sim.POISSON_DISTRIBUTION:
                        str_Offspring_Dist = 'p'
                        str_Offspring_Rate = str(self.Arg_Num_Offspring_Mean_Per_Mate)
                        str_Offspring_Parms = str_Offspring_Rate + str_Offspring_Dist
                    elif int_Offspring_Dist == sim.UNIFORM_DISTRIBUTION:
                        str_Offspring_Dist = 'u'
                        str_Offspring_Min = str(self.Arg_Num_Offspring_Min_Per_Mate)
                        str_Offspring_Max = str(self.Arg_Num_Offspring_Max_Per_Mate)
                        str_Offspring_Parms = str_Offspring_Min + '_' + str_Offspring_Max +  str_Offspring_Dist                        
                    elif int_Offspring_Dist == sim.BINOMIAL_DISTRIBUTION:
                        str_Offspring_Dist = 'b'
                        str_Offspring_Mean = str(int(self.Arg_Num_Offspring_Dist_Samples * self.Arg_Num_Offspring_Dist_Probability))
                        str_Offspring_Parms = str_Offspring_Mean + str_Offspring_Dist                          
                    elif int_Offspring_Dist == sim.GEOMETRIC_DISTRIBUTION:
                        str_Offspring_Dist = 'g'
                        str_Offspring_Mean = str(self.Arg_Num_Offspring_Mean_Per_Mate)
                        str_Offspring_Parms = str_Offspring_Mean + str_Offspring_Dist                          
                    else:
                        str_Offspring_Dist = 'x'
                        str_Offspring_Num = str(self.Arg_Num_Offspring_Per_Mate)
                        str_Offspring_Parms = str_Offspring_Num + str_Offspring_Dist                          
                    pass
                else:
                    str_Offspring_Dist = 'a' #Absolute number of offspring
                    str_Offspring_Num = str(self.Arg_Num_Offspring_Per_Mate)
                    str_Offspring_Parms = str_Offspring_Num + str_Offspring_Dist                       
                pass
               
                bool_Allow_UnNat_Mortality = False
                str_Scenario_Desc_Code = ''
#                 str_Scenario_Code_A = self.str_Scenario_Code[:1]
                self.str_Scenario_Code_B = self.str_Scenario_Code[1:3]
                int_Scenario_Code_B = int(self.str_Scenario_Code_B)
                if len(self.str_Scenario_Code) > 3:
                    self.str_Scenario_Code_C = self.str_Scenario_Code[3:4]
                    if self.str_Scenario_Code_C == 'F':
                        bool_Allow_UnNat_Mortality = True
                        str_UnNat_Mortality_Folder_Code = 'UMY'                                                        
                        self.str_Scenario_Code_D = self.str_Scenario_Code[-1:]
                        int_Scenario_Code_D = int(self.str_Scenario_Code_D)
                    else:
                        str_UnNat_Mortality_Folder_Code = 'UMN'
                    pass
                else:
                    str_UnNat_Mortality_Folder_Code = 'UMN'                                                       
                pass

                '''
                ---------------------------
                Secenarios: 1 - 2: Test Senescence on simplest scenario: MAF, Sex ratio forced to 0.5
                ---------------------------
                '''
                if int_Scenario_Code_B == 0:
                    ''' Scenario 0:  BASELINE SCENARIO
                    Senescence Allowed No (SN)
                    MAXIMAL DIVERSITY Allele Freqs (MAF)
                    Mating Scheme 21 (M21), Mating in Aug (8), Gestation 6 months (Feb,2), Resting 1 months (Mar, 3) <--- *** Gest (G6) Rest (G1)***
                    Natural Mortality No, Non-natural Mortality No (UMN)
                    '''                         
                    self.Arg_int_Allele_Freq_Scheme = 1 #1 - Randomly generated allele frequencies - RANDOM DRICHLET DIVERSITY (DAF)
                    self.Arg_int_Offspring_Sex_Scheme = 1 #0 - probability-driven male sex proportion, 1 - Forced exactly even sex ratio
                    self.Arg_Allow_Senescence = False
                                        
                    str_Scenario_Desc_Code = 'M' + str_Matings + '_DAF' + '_' + str_Offspring_Parms + '_M21_G6_R1_' + str_UnNat_Mortality_Folder_Code + '_SN' + '_' + str_Allow_Mutation + '_' + str_Num_Loci + '_' + str_Alleles_Per_Locus
                    
                    pass
                elif int_Scenario_Code_B == 1:
                    ''' Scenario 1:  Same as Scenario 0 but with +++> ...
                    Senescence Allowed YES (SY)
                    '''               

                    self.Arg_int_Allele_Freq_Scheme = 1 #1 - Randomly generated allele frequencies - RANDOM DRICHLET DIVERSITY (DAF)
                    self.Arg_int_Offspring_Sex_Scheme = 1 #0 - probability-driven male sex proportion, 1 - Forced exactly even sex ratio
                    self.Arg_Allow_Senescence = True
#                     self.Arg_Survival_Natural_No_Senescence = {self.strSexMale:{  12:1.00, 24:1.00, 36:1.00, 48:1.00, 60:1.00, 72:1.00, 84:1.00, 96:1.00, 108:1.00, 120:1.00, 132:1.00, 144:1.00, 156:1.00, 168:1.00, 180:1.00, 192:1.00, 204:1.00, 216:1.00, 228:1.00, 240:1.00, 252:1.00, 264:1.00, 276:1.00, 288:1.00, 300:1.00, 312:1.00, 324:1.00, 336:1.00, 348:0.00}
#                                                               ,self.strSexFemale:{12:1.00, 24:1.00, 36:1.00, 48:1.00, 60:1.00, 72:1.00, 84:1.00, 96:1.00, 108:1.00, 120:1.00, 132:1.00, 144:1.00, 156:1.00, 168:1.00, 180:1.00, 192:1.00, 204:1.00, 216:1.00, 228:1.00, 240:1.00, 252:1.00, 264:1.00, 276:1.00, 288:1.00, 300:1.00, 312:1.00, 324:1.00, 336:1.00, 348:0.00}}
                    
                    str_Scenario_Desc_Code = 'M' + str_Matings + '_DAF' + '_' + str_Offspring_Parms + '_M21_G6_R1_' + str_UnNat_Mortality_Folder_Code + '_SY' + '_' + str_Allow_Mutation + '_' + str_Num_Loci + '_' + str_Alleles_Per_Locus
                    
                    pass
                elif int_Scenario_Code_B == 2: 
                    ''' Scenario 2:  Same as Scenario 0 but with +++> ...
                    Offspring male sex proportions probability-driven
                    '''
                    self.Arg_int_Allele_Freq_Scheme = 1 #1 - Randomly generated allele frequencies - RANDOM DRICHLET DIVERSITY (DAF)
                    self.Arg_int_Offspring_Sex_Scheme = 0 #0 - probability-driven male sex proportion, 1 - Forced exactly even sex ratio
                    self.Arg_Allow_Senescence = False
                                        
                    str_Scenario_Desc_Code = 'M' + str_Matings + '_DAF' + '_' + str_Offspring_Parms + '_M21_G6_R1_' + str_UnNat_Mortality_Folder_Code + '_SN' + '_' + str_Allow_Mutation + '_' + str_Num_Loci + '_' + str_Alleles_Per_Locus
                    
                    pass
                elif int_Scenario_Code_B == 3:
                    ''' Scenario 3:  Same as Scenario 0 but with +++> ...
                    minMatingAge = 12
                    '''
                    self.Arg_int_Allele_Freq_Scheme = 1 #1 - Randomly generated allele frequencies - RANDOM DRICHLET DIVERSITY (DAF)
                    self.Arg_int_Offspring_Sex_Scheme = 1 #0 - probability-driven male sex proportion, 1 - Forced exactly even sex ratio
                    self.Arg_Allow_Senescence = False
                    self.Arg_Min_Mating_Age = 12
                                        
                    str_Scenario_Desc_Code = 'M' + str_Matings + '_DAF' + '_' + str_Offspring_Parms + '_M21_G6_R1_' + str_UnNat_Mortality_Folder_Code + '_SN' + '_' + str_Allow_Mutation + '_' + str_Num_Loci + '_' + str_Alleles_Per_Locus
                    
                    pass
                elif int_Scenario_Code_B == 4:
                    ''' Scenario 4:  Same as Scenario 3 but with +++> ...
                   Senescence Allowed YES (SY)
                    '''
                    self.Arg_int_Allele_Freq_Scheme = 1 #1 - Randomly generated allele frequencies - RANDOM DRICHLET DIVERSITY (DAF)
                    self.Arg_int_Offspring_Sex_Scheme = 1 #0 - probability-driven male sex proportion, 1 - Forced exactly even sex ratio
                    self.Arg_Allow_Senescence = True
                    self.Arg_Survival_Natural_Senescence = {self.strSexMale:{  12:1.00, 24:1.00, 36:1.00, 48:0.00}
                                                           ,self.strSexFemale:{12:1.00, 24:1.00, 36:1.00, 48:0.00}}    
                                    
                    str_Scenario_Desc_Code = 'M' + str_Matings + '_DAF' + '_' + str_Offspring_Parms + '_M21_G6_R1_' + str_UnNat_Mortality_Folder_Code + '_SY' + '_' + str_Allow_Mutation + '_' + str_Num_Loci + '_' + str_Alleles_Per_Locus

                    pass
                elif int_Scenario_Code_B == 5:
                    ''' Scenario 5:  Same as Scenario 2 but with +++> ...
                    MAXIMAL DIVERSITY Allele Freqs (MAF)
                    Offspring male sex proportions probability-driven
                    '''
                    self.Arg_int_Allele_Freq_Scheme = 0 #1 - Randomly generated allele frequencies - RANDOM DRICHLET DIVERSITY (DAF)
                    self.Arg_int_Offspring_Sex_Scheme = 0 #0 - probability-driven male sex proportion, 1 - Forced exactly even sex ratio
                    self.Arg_Allow_Senescence = False
                    self.Arg_Survival_Natural_No_Senescence = {self.strSexMale:{  12:1.00, 24:1.00, 36:0.00, 48:0.00}
                                                              ,self.strSexFemale:{12:1.00, 24:1.00, 36:0.00, 48:0.00}}
                                        
                    str_Scenario_Desc_Code = 'M' + str_Matings + '_MAF' + '_' + str_Offspring_Parms + '_M21_G6_R1_' + str_UnNat_Mortality_Folder_Code + '_SN' + '_' + str_Allow_Mutation + '_' + str_Num_Loci + '_' + str_Alleles_Per_Locus

                    pass
                elif int_Scenario_Code_B == 6:
                    ''' Scenario 6:  Same as Scenario 5 but with +++> ...
                    MAXIMAL DIVERSITY Allele Freqs (MAF)
                    Senescence Allowed YES (SY)
                    '''
                    self.Arg_int_Allele_Freq_Scheme = 0 #1 - Randomly generated allele frequencies - RANDOM DRICHLET DIVERSITY (DAF)
                    self.Arg_int_Offspring_Sex_Scheme = 1 #0 - probability-driven male sex proportion, 1 - Forced exactly even sex ratio
                    self.Arg_Allow_Senescence = True
                    self.Arg_Survival_Natural_Senescence = {self.strSexMale:{  12:1.00, 24:1.00, 36:1.00, 48:0.00}
                                                           ,self.strSexFemale:{12:1.00, 24:1.00, 36:1.00, 48:0.00}}    
                                    
                    str_Scenario_Desc_Code = 'M' + str_Matings + '_MAF' + '_' + str_Offspring_Parms + '_M21_G6_R1_' + str_UnNat_Mortality_Folder_Code + '_SY' + '_' + str_Allow_Mutation + '_' + str_Num_Loci + '_' + str_Alleles_Per_Locus

                    pass
                elif int_Scenario_Code_B == 7:
                    ''' Scenario 7:  Same as Scenario 2 but with +++> ...
                    Offspring male sex proportions probability-driven
                    NATURAL MORTALITY
                    '''
                    self.Arg_int_Allele_Freq_Scheme = 1 #1 - Randomly generated allele frequencies - RANDOM DRICHLET DIVERSITY (DAF)
                    self.Arg_int_Offspring_Sex_Scheme = 1 #0 - probability-driven male sex proportion, 1 - Forced exactly even sex ratio
                    self.Arg_Allow_Senescence = False
                    self.Arg_Survival_Natural_No_Senescence = {self.strSexMale:{  12:0.85, 24:0.85, 36:0.00, 48:0.00}
                                                              ,self.strSexFemale:{12:0.85, 24:0.85, 36:0.00, 48:0.00}}
                                        
                    str_Scenario_Desc_Code = 'M' + str_Matings + '_DAF' + '_' + str_Offspring_Parms + '_M21_G6_R1_' + str_UnNat_Mortality_Folder_Code + '_SN' + '_' + str_Allow_Mutation + '_' + str_Num_Loci + '_' + str_Alleles_Per_Locus

                    pass
                elif int_Scenario_Code_B == 8:
                    ''' Scenario 8:  Same as Scenario 3 but with +++> ...
                    Senescence Allowed YES (SY)
                    NATURAL MORTALITY
                    '''
                    self.Arg_int_Allele_Freq_Scheme = 1 #1 - Randomly generated allele frequencies - RANDOM DRICHLET DIVERSITY (DAF)
                    self.Arg_int_Offspring_Sex_Scheme = 1 #0 - probability-driven male sex proportion, 1 - Forced exactly even sex ratio
                    self.Arg_Allow_Senescence = True
                    self.Arg_Survival_Natural_Senescence = {self.strSexMale:{  12:0.85, 24:0.85, 36:0.85, 48:0.00}
                                                           ,self.strSexFemale:{12:0.85, 24:0.85, 36:0.85, 48:0.00}}    
                                    
                    str_Scenario_Desc_Code = 'M' + str_Matings + '_DAF' + '_' + str_Offspring_Parms + '_M21_G6_R1_' + str_UnNat_Mortality_Folder_Code + '_SY' + '_' + str_Allow_Mutation + '_' + str_Num_Loci + '_' + str_Alleles_Per_Locus

                    pass
                pass
            
                '''
                --------------------------
                Include UnNatural mortality scenarios
                --------------------------
                '''
                if bool_Allow_UnNat_Mortality and len(self.str_Scenario_Code_C) > 0:
                    if int_Scenario_Code_D == 1:
                        ''' Fishing scenario 1: Business as usual  - Fullfill Quota
                        Quota Multiplier = 1
                        '''
                        int_BAU_Mortality_Multiplier = 1
                        int_Replicate_Mating_Count_UnNat_Mortality_Starts = 58
                        self.Arg_Allow_UnNatural_Mortality = True                
                        self.Arg_Mortality_Application_Specs__UnNat = {globalsSS.MortalityApplication.static_str_Mating_Mortlity_Starts__UnNat:{self.strSexMale: int_Replicate_Mating_Count_UnNat_Mortality_Starts, self.strSexFemale: int_Replicate_Mating_Count_UnNat_Mortality_Starts}, globalsSS.MortalityApplication.static_str_Mortality_Application_Model__UnNat:{self.strSexMale: 3, self.strSexFemale: 3}, globalsSS.MortalityApplication.static_str_Mortality_Scaling_Total__UnNat:{self.strSexMale: 262*int_BAU_Mortality_Multiplier, self.strSexFemale: 166*int_BAU_Mortality_Multiplier}} #dict_Mortality_Application_Specs_By_Sex__UnNATURAL     
                        self.Arg_Survival_UnNatural = {self.strSexMale:{12:0.981,24:0.966,36:0.973,48:0.973,60:0.989,72:0.996,84:0.996,96:1.000,108:0.973,120:0.954,132:0.947,144:0.905,156:0.924,168:0.851,180:0.882,192:0.870,204:0.931,216:0.962,228:0.977,240:0.989,252:0.977,264:0.992,276:0.992,288:1.000,300:1.000,312:1.000,324:1.000,336:1.000}
                                                      ,self.strSexFemale:{12:0.994,24:0.958,36:0.958,48:0.958,60:0.982,72:0.988,84:0.994,96:1.000,108:0.994,120:1.000,132:0.982,144:0.988,156:0.994,168:0.952,180:0.934,192:0.855,204:0.880,216:0.892,228:0.904,240:0.934,252:0.928,264:0.976,276:0.982,288:1.000,300:1.000,312:0.988,324:0.994,336:0.994}}
                        
                        self.arg_int_Sample_Pop_When_Mating_Count_Divisible_By = 1
                        pass
                    elif int_Scenario_Code_D == 2: 
                        ''' Fishing scenario 2: Business as usual  - Fullfill Quota
                        Quota Multiplier = 2
                        '''
                        int_BAU_Mortality_Multiplier = 2
                        int_Replicate_Mating_Count_UnNat_Mortality_Starts = 58
                        self.Arg_Allow_UnNatural_Mortality = True                
                        self.Arg_Mortality_Application_Specs__UnNat = {globalsSS.MortalityApplication.static_str_Mating_Mortlity_Starts__UnNat:{self.strSexMale: int_Replicate_Mating_Count_UnNat_Mortality_Starts, self.strSexFemale: int_Replicate_Mating_Count_UnNat_Mortality_Starts}, globalsSS.MortalityApplication.static_str_Mortality_Application_Model__UnNat:{self.strSexMale: 3, self.strSexFemale: 3}, globalsSS.MortalityApplication.static_str_Mortality_Scaling_Total__UnNat:{self.strSexMale: 166*int_BAU_Mortality_Multiplier, self.strSexFemale: 262*int_BAU_Mortality_Multiplier}} #dict_Mortality_Application_Specs_By_Sex__UnNATURAL     
                        self.Arg_Survival_UnNatural = {self.strSexMale:{12:0.981,24:0.966,36:0.973,48:0.973,60:0.989,72:0.996,84:0.996,96:1.000,108:0.973,120:0.954,132:0.947,144:0.905,156:0.924,168:0.851,180:0.882,192:0.870,204:0.931,216:0.962,228:0.977,240:0.989,252:0.977,264:0.992,276:0.992,288:1.000,300:1.000,312:1.000,324:1.000,336:1.000}
                                                      ,self.strSexFemale:{12:0.994,24:0.958,36:0.958,48:0.958,60:0.982,72:0.988,84:0.994,96:1.000,108:0.994,120:1.000,132:0.982,144:0.988,156:0.994,168:0.952,180:0.934,192:0.855,204:0.880,216:0.892,228:0.904,240:0.934,252:0.928,264:0.976,276:0.982,288:1.000,300:1.000,312:0.988,324:0.994,336:0.994}}
                        
                        self.arg_int_Sample_Pop_When_Mating_Count_Divisible_By = 1
                        pass
                    elif int_Scenario_Code_D == 3: 
                        ''' Fishing scenario 3: Business as usual  - Fullfill Quota
                        Quota Multiplier = 3
                        '''
                        int_BAU_Mortality_Multiplier = 3
                        int_Replicate_Mating_Count_UnNat_Mortality_Starts = 58
                        self.Arg_Allow_UnNatural_Mortality = True                
                        self.Arg_Mortality_Application_Specs__UnNat = {globalsSS.MortalityApplication.static_str_Mating_Mortlity_Starts__UnNat:{self.strSexMale: int_Replicate_Mating_Count_UnNat_Mortality_Starts, self.strSexFemale: int_Replicate_Mating_Count_UnNat_Mortality_Starts}, globalsSS.MortalityApplication.static_str_Mortality_Application_Model__UnNat:{self.strSexMale: 3, self.strSexFemale: 3}, globalsSS.MortalityApplication.static_str_Mortality_Scaling_Total__UnNat:{self.strSexMale: 166*int_BAU_Mortality_Multiplier, self.strSexFemale: 262*int_BAU_Mortality_Multiplier}} #dict_Mortality_Application_Specs_By_Sex__UnNATURAL     
                        self.Arg_Survival_UnNatural = {self.strSexMale:{12:0.981,24:0.966,36:0.973,48:0.973,60:0.989,72:0.996,84:0.996,96:1.000,108:0.973,120:0.954,132:0.947,144:0.905,156:0.924,168:0.851,180:0.882,192:0.870,204:0.931,216:0.962,228:0.977,240:0.989,252:0.977,264:0.992,276:0.992,288:1.000,300:1.000,312:1.000,324:1.000,336:1.000}
                                                      ,self.strSexFemale:{12:0.994,24:0.958,36:0.958,48:0.958,60:0.982,72:0.988,84:0.994,96:1.000,108:0.994,120:1.000,132:0.982,144:0.988,156:0.994,168:0.952,180:0.934,192:0.855,204:0.880,216:0.892,228:0.904,240:0.934,252:0.928,264:0.976,276:0.982,288:1.000,300:1.000,312:0.988,324:0.994,336:0.994}}
                        
                        self.arg_int_Sample_Pop_When_Mating_Count_Divisible_By = 1
                        pass
                    elif int_Scenario_Code_D == 4: 
                        ''' Fishing scenario 4: Extra Fishing scenario F4  holding pop size & Quota size constant for both species
                        '''
                        int_BAU_Mortality_Multiplier = 1
                        int_Replicate_Mating_Count_UnNat_Mortality_Starts = 58
                        self.Arg_Allow_UnNatural_Mortality = True                
                        self.Arg_Mortality_Application_Specs__UnNat = {globalsSS.MortalityApplication.static_str_Mating_Mortlity_Starts__UnNat:{self.strSexMale: int_Replicate_Mating_Count_UnNat_Mortality_Starts, self.strSexFemale: int_Replicate_Mating_Count_UnNat_Mortality_Starts}, globalsSS.MortalityApplication.static_str_Mortality_Application_Model__UnNat:{self.strSexMale: 3, self.strSexFemale: 3}, globalsSS.MortalityApplication.static_str_Mortality_Scaling_Total__UnNat:{self.strSexMale: 250*int_BAU_Mortality_Multiplier, self.strSexFemale: 250*int_BAU_Mortality_Multiplier}} #dict_Mortality_Application_Specs_By_Sex__UnNATURAL     
                        self.Arg_Survival_UnNatural = {self.strSexMale:{12:0.981,24:0.966,36:0.973,48:0.973,60:0.989,72:0.996,84:0.996,96:1.000,108:0.973,120:0.954,132:0.947,144:0.905,156:0.924,168:0.851,180:0.882,192:0.870,204:0.931,216:0.962,228:0.977,240:0.989,252:0.977,264:0.992,276:0.992,288:1.000,300:1.000,312:1.000,324:1.000,336:1.000}
                                                      ,self.strSexFemale:{12:0.994,24:0.958,36:0.958,48:0.958,60:0.982,72:0.988,84:0.994,96:1.000,108:0.994,120:1.000,132:0.982,144:0.988,156:0.994,168:0.952,180:0.934,192:0.855,204:0.880,216:0.892,228:0.904,240:0.934,252:0.928,264:0.976,276:0.982,288:1.000,300:1.000,312:0.988,324:0.994,336:0.994}}
                        
                        self.arg_int_Sample_Pop_When_Mating_Count_Divisible_By = 1
                        pass
                    pass
                    
                pass
            
                str_Arg_Pop_Size = str(self.Arg_Pop_Size)
                int_Len_Arg_Pop_Size = len(str_Arg_Pop_Size)
                str_UDF_Pop_Size = str_Arg_Pop_Size
                if int_Len_Arg_Pop_Size >= 4:
                    if str_Arg_Pop_Size[-3:] == '000':
                        str_UDF_Pop_Size = str_Arg_Pop_Size[:int_Len_Arg_Pop_Size-3] + 'K'
                    pass
                pass                        
                str_Scenario_Specific_Folder = 'N' + str_UDF_Pop_Size + '_' + str_Scenario_Desc_Code
                
                str_Pop_Replicates = 'PR' + str(self.Arg_Pop_Replicates)
                strRunSpecificUserDefinedFolder = self.str_Species_Code_Short + '\\' + self.str_Scenario_Code + '\\' + str_Pop_Replicates + '\\' + self.str_Species_Code + '_' + str_Scenario_Specific_Folder
            
                return strRunSpecificUserDefinedFolder

            def method_Simulation_PROD_AUTO_Run_Specific_User_Defined_Folder__GAMO_V1(self):
                                
                strRunSpecificUserDefinedFolder = 'PROD_DEFAULT'

                '''
                ~~~~~~~~~~~~~~~~~~~~
                Replicate Run - Parameter Specification
                ~~~~~~~~~~~~~~~~~~~~
                '''
                str_Allow_Mutation = ''
                if self.Arg_bool_Allow_Mutation:
                    str_Allow_Mutation = 'MY'
                else:
                    str_Allow_Mutation = 'MN'
                pass
                
                str_Num_Loci = "L" + str(self.Arg_Num_Loci)
                str_Alleles_Per_Locus = "A" + str(self.Arg_int_Alleles_Per_Locus)
                                         
                self.int_Total_MatingsToSimulatePerReplicate = self.method_Replicate_Get_Replicate_Total_Matings(self.Arg_BurnIn_Matings, self.Arg_Evolution_Years, self.Arg_Evolution_Months, self.Arg_int_Mating_Calender_Month)
                str_Matings = str(self.int_Total_MatingsToSimulatePerReplicate)

                if len(self.Arg_list_Offspring_Production_Parms) > 1: 
                    int_Offspring_Dist = self.Arg_list_Offspring_Production_Parms[0]
                    if int_Offspring_Dist == sim.POISSON_DISTRIBUTION:
                        str_Offspring_Dist = 'p'
                        str_Offspring_Rate = str(self.Arg_Num_Offspring_Mean_Per_Mate)
                        str_Offspring_Rate = str_Offspring_Rate.replace('.','_')
                        str_Offspring_Parms = str_Offspring_Rate + str_Offspring_Dist
                    elif int_Offspring_Dist == sim.UNIFORM_DISTRIBUTION:
                        str_Offspring_Dist = 'u'
                        str_Offspring_Min = str(self.Arg_Num_Offspring_Min_Per_Mate)
                        str_Offspring_Max = str(self.Arg_Num_Offspring_Max_Per_Mate)
                        str_Offspring_Parms = str_Offspring_Min + '_' + str_Offspring_Max +  str_Offspring_Dist                        
                    elif int_Offspring_Dist == sim.BINOMIAL_DISTRIBUTION:
                        str_Offspring_Dist = 'b'
                        str_Offspring_Mean = str(int(self.Arg_Num_Offspring_Dist_Samples * self.Arg_Num_Offspring_Dist_Probability))
                        str_Offspring_Parms = str_Offspring_Mean + str_Offspring_Dist                          
                    elif int_Offspring_Dist == sim.GEOMETRIC_DISTRIBUTION:
                        str_Offspring_Dist = 'g'
                        str_Offspring_Mean = str(self.Arg_Num_Offspring_Mean_Per_Mate)
                        str_Offspring_Parms = str_Offspring_Mean + str_Offspring_Dist                          
                    else:
                        str_Offspring_Dist = 'x'
                        str_Offspring_Num = str(self.Arg_Num_Offspring_Per_Mate)
                        str_Offspring_Parms = str_Offspring_Num + str_Offspring_Dist                          
                    pass
                else:
                    str_Offspring_Dist = 'a' #Absolute number of offspring
                    str_Offspring_Num = str(self.Arg_Num_Offspring_Per_Mate)
                    str_Offspring_Parms = str_Offspring_Num + str_Offspring_Dist                       
                pass
               
                bool_Allow_UnNat_Mortality = False
                str_Scenario_Desc_Code = ''
#                 str_Scenario_Code_A = self.str_Scenario_Code[:1]
                self.str_Scenario_Code_B = self.str_Scenario_Code[1:3]
                int_Scenario_Code_B = int(self.str_Scenario_Code_B)
                if len(self.str_Scenario_Code) > 3:
                    self.str_Scenario_Code_C = self.str_Scenario_Code[3:4]
                    if self.str_Scenario_Code_C == 'F':
                        bool_Allow_UnNat_Mortality = True
                        str_UnNat_Mortality_Folder_Code = 'UMY'                                                        
                        self.str_Scenario_Code_D = self.str_Scenario_Code[-1:]
                        int_Scenario_Code_D = int(self.str_Scenario_Code_D)
                    else:
                        str_UnNat_Mortality_Folder_Code = 'UMN'
                    pass
                else:
                    str_UnNat_Mortality_Folder_Code = 'UMN'                                                       
                pass

                '''
                ---------------------------
                Secenarios: 1 - 2: Test Senescence on simplest scenario: MAF, Sex ratio forced to 0.5
                ---------------------------
                '''
                if int_Scenario_Code_B == 0:
                    ''' Scenario 0:  BASELINE SCENARIO
                    Senescence Allowed No (SN)
                    MAXIMAL DIVERSITY Allele Freqs (MAF)
                    Mating Scheme 21 (M21), Mating in Aug (8), Gestation 6 months (Feb,2), Resting 1 months (Mar, 3) <--- *** Gest (G6) Rest (G1)***
                    Natural Mortality No, Non-natural Mortality No (UMN)
                    '''                         
                    self.Arg_int_Allele_Freq_Scheme = 1 #1 - Randomly generated allele frequencies - RANDOM DRICHLET DIVERSITY (DAF)
                    self.Arg_int_Offspring_Sex_Scheme = 1 #0 - probability-driven male sex proportion, 1 - Forced exactly even sex ratio
                    self.Arg_Allow_Senescence = False
                                        
                    str_Scenario_Desc_Code = 'M' + str_Matings + '_DAF' + '_' + str_Offspring_Parms + '_M21_G6_R1_' + str_UnNat_Mortality_Folder_Code + '_SN' + '_' + str_Allow_Mutation + '_' + str_Num_Loci + '_' + str_Alleles_Per_Locus
                    
                    pass
                elif int_Scenario_Code_B == 1:
                    ''' Scenario 1:  Same as Scenario 0 but with +++> ...
                    Senescence Allowed YES (SY)
                    '''               

                    self.Arg_int_Allele_Freq_Scheme = 1 #1 - Randomly generated allele frequencies - RANDOM DRICHLET DIVERSITY (DAF)
                    self.Arg_int_Offspring_Sex_Scheme = 1 #0 - probability-driven male sex proportion, 1 - Forced exactly even sex ratio
                    self.Arg_Allow_Senescence = True
#                     self.Arg_Survival_Natural_No_Senescence = {self.strSexMale:{  12:1.00, 24:1.00, 36:1.00, 48:1.00, 60:1.00, 72:1.00, 84:1.00, 96:1.00, 108:1.00, 120:1.00, 132:1.00, 144:1.00, 156:1.00, 168:1.00, 180:1.00, 192:1.00, 204:1.00, 216:1.00, 228:1.00, 240:1.00, 252:1.00, 264:1.00, 276:1.00, 288:1.00, 300:1.00, 312:1.00, 324:1.00, 336:1.00, 348:0.00}
#                                                               ,self.strSexFemale:{12:1.00, 24:1.00, 36:1.00, 48:1.00, 60:1.00, 72:1.00, 84:1.00, 96:1.00, 108:1.00, 120:1.00, 132:1.00, 144:1.00, 156:1.00, 168:1.00, 180:1.00, 192:1.00, 204:1.00, 216:1.00, 228:1.00, 240:1.00, 252:1.00, 264:1.00, 276:1.00, 288:1.00, 300:1.00, 312:1.00, 324:1.00, 336:1.00, 348:0.00}}
                    
                    str_Scenario_Desc_Code = 'M' + str_Matings + '_DAF' + '_' + str_Offspring_Parms + '_M21_G6_R1_' + str_UnNat_Mortality_Folder_Code + '_SY' + '_' + str_Allow_Mutation + '_' + str_Num_Loci + '_' + str_Alleles_Per_Locus
                    
                    pass
                elif int_Scenario_Code_B == 2: 
                    ''' Scenario 2:  Same as Scenario 0 but with +++> ...
                    Offspring male sex proportions probability-driven
                    '''
                    self.Arg_int_Allele_Freq_Scheme = 1 #1 - Randomly generated allele frequencies - RANDOM DRICHLET DIVERSITY (DAF)
                    self.Arg_int_Offspring_Sex_Scheme = 0 #0 - probability-driven male sex proportion, 1 - Forced exactly even sex ratio
                    self.Arg_Allow_Senescence = False
                                        
                    str_Scenario_Desc_Code = 'M' + str_Matings + '_DAF' + '_' + str_Offspring_Parms + '_M21_G6_R1_' + str_UnNat_Mortality_Folder_Code + '_SN' + '_' + str_Allow_Mutation + '_' + str_Num_Loci + '_' + str_Alleles_Per_Locus
                    
                    pass
                elif int_Scenario_Code_B == 3:
                    ''' Scenario 3:  Same as Scenario 0 but with +++> ...
                    minMatingAge = 12
                    '''
                    self.Arg_int_Allele_Freq_Scheme = 1 #1 - Randomly generated allele frequencies - RANDOM DRICHLET DIVERSITY (DAF)
                    self.Arg_int_Offspring_Sex_Scheme = 1 #0 - probability-driven male sex proportion, 1 - Forced exactly even sex ratio
                    self.Arg_Allow_Senescence = False
                    self.Arg_Min_Mating_Age = 12
                                        
                    str_Scenario_Desc_Code = 'M' + str_Matings + '_DAF' + '_' + str_Offspring_Parms + '_M21_G6_R1_' + str_UnNat_Mortality_Folder_Code + '_SN' + '_' + str_Allow_Mutation + '_' + str_Num_Loci + '_' + str_Alleles_Per_Locus
                    
                    pass
                elif int_Scenario_Code_B == 4:
                    ''' Scenario 4:  Same as Scenario 3 but with +++> ...
                   Senescence Allowed YES (SY)
                    '''
                    self.Arg_int_Allele_Freq_Scheme = 1 #1 - Randomly generated allele frequencies - RANDOM DRICHLET DIVERSITY (DAF)
                    self.Arg_int_Offspring_Sex_Scheme = 1 #0 - probability-driven male sex proportion, 1 - Forced exactly even sex ratio
                    self.Arg_Allow_Senescence = True
                    self.Arg_Survival_Natural_Senescence = {self.strSexMale:{  12:1.00, 24:1.00, 36:1.00, 48:0.00}
                                                           ,self.strSexFemale:{12:1.00, 24:1.00, 36:1.00, 48:0.00}}    
                                    
                    str_Scenario_Desc_Code = 'M' + str_Matings + '_DAF' + '_' + str_Offspring_Parms + '_M21_G6_R1_' + str_UnNat_Mortality_Folder_Code + '_SY' + '_' + str_Allow_Mutation + '_' + str_Num_Loci + '_' + str_Alleles_Per_Locus

                    pass
                elif int_Scenario_Code_B == 5:
                    ''' Scenario 5:  Same as Scenario 2 but with +++> ...
                    MAXIMAL DIVERSITY Allele Freqs (MAF)
                    Offspring male sex proportions probability-driven
                    '''
                    self.Arg_int_Allele_Freq_Scheme = 0 #1 - Randomly generated allele frequencies - RANDOM DRICHLET DIVERSITY (DAF)
                    self.Arg_int_Offspring_Sex_Scheme = 0 #0 - probability-driven male sex proportion, 1 - Forced exactly even sex ratio
                    self.Arg_Allow_Senescence = False
                    self.Arg_Survival_Natural_No_Senescence = {self.strSexMale:{  12:1.00, 24:1.00, 36:0.00, 48:0.00}
                                                              ,self.strSexFemale:{12:1.00, 24:1.00, 36:0.00, 48:0.00}}
                                        
                    str_Scenario_Desc_Code = 'M' + str_Matings + '_MAF' + '_' + str_Offspring_Parms + '_M21_G6_R1_' + str_UnNat_Mortality_Folder_Code + '_SN' + '_' + str_Allow_Mutation + '_' + str_Num_Loci + '_' + str_Alleles_Per_Locus

                    pass
                elif int_Scenario_Code_B == 6:
                    ''' Scenario 6:  Same as Scenario 5 but with +++> ...
                    MAXIMAL DIVERSITY Allele Freqs (MAF)
                    Senescence Allowed YES (SY)
                    '''
                    self.Arg_int_Allele_Freq_Scheme = 0 #1 - Randomly generated allele frequencies - RANDOM DRICHLET DIVERSITY (DAF)
                    self.Arg_int_Offspring_Sex_Scheme = 1 #0 - probability-driven male sex proportion, 1 - Forced exactly even sex ratio
                    self.Arg_Allow_Senescence = True
                    self.Arg_Survival_Natural_Senescence = {self.strSexMale:{  12:1.00, 24:1.00, 36:1.00, 48:0.00}
                                                           ,self.strSexFemale:{12:1.00, 24:1.00, 36:1.00, 48:0.00}}    
                                    
                    str_Scenario_Desc_Code = 'M' + str_Matings + '_MAF' + '_' + str_Offspring_Parms + '_M21_G6_R1_' + str_UnNat_Mortality_Folder_Code + '_SY' + '_' + str_Allow_Mutation + '_' + str_Num_Loci + '_' + str_Alleles_Per_Locus

                    pass
                elif int_Scenario_Code_B == 7:
                    ''' Scenario 7:  Same as Scenario 2 but with +++> ...
                    Offspring male sex proportions probability-driven
                    NATURAL MORTALITY
                    '''
                    self.Arg_int_Allele_Freq_Scheme = 1 #1 - Randomly generated allele frequencies - RANDOM DRICHLET DIVERSITY (DAF)
                    self.Arg_int_Offspring_Sex_Scheme = 1 #0 - probability-driven male sex proportion, 1 - Forced exactly even sex ratio
                    self.Arg_Allow_Senescence = False
                    self.Arg_Survival_Natural_No_Senescence = {self.strSexMale:{  12:0.85, 24:0.85, 36:0.00, 48:0.00}
                                                              ,self.strSexFemale:{12:0.85, 24:0.85, 36:0.00, 48:0.00}}
                                        
                    str_Scenario_Desc_Code = 'M' + str_Matings + '_DAF' + '_' + str_Offspring_Parms + '_M21_G6_R1_' + str_UnNat_Mortality_Folder_Code + '_SN' + '_' + str_Allow_Mutation + '_' + str_Num_Loci + '_' + str_Alleles_Per_Locus

                    pass
                elif int_Scenario_Code_B == 8:
                    ''' Scenario 8:  Same as Scenario 3 but with +++> ...
                    Senescence Allowed YES (SY)
                    NATURAL MORTALITY
                    '''
                    self.Arg_int_Allele_Freq_Scheme = 1 #1 - Randomly generated allele frequencies - RANDOM DRICHLET DIVERSITY (DAF)
                    self.Arg_int_Offspring_Sex_Scheme = 1 #0 - probability-driven male sex proportion, 1 - Forced exactly even sex ratio
                    self.Arg_Allow_Senescence = True
                    self.Arg_Survival_Natural_Senescence = {self.strSexMale:{  12:0.85, 24:0.85, 36:0.85, 48:0.00}
                                                           ,self.strSexFemale:{12:0.85, 24:0.85, 36:0.85, 48:0.00}}    
                                    
                    str_Scenario_Desc_Code = 'M' + str_Matings + '_DAF' + '_' + str_Offspring_Parms + '_M21_G6_R1_' + str_UnNat_Mortality_Folder_Code + '_SY' + '_' + str_Allow_Mutation + '_' + str_Num_Loci + '_' + str_Alleles_Per_Locus

                    pass
                pass
            
                '''
                --------------------------
                Include UnNatural mortality scenarios
                --------------------------
                '''
                if bool_Allow_UnNat_Mortality and len(self.str_Scenario_Code_C) > 0:
                    if int_Scenario_Code_D == 1:
                        ''' Fishing scenario 1: Business as usual  - Fullfill Quota
                        Quota Multiplier = 1
                        '''
                        int_BAU_Mortality_Multiplier = 1
                        int_Replicate_Mating_Count_UnNat_Mortality_Starts = 58
                        self.Arg_Allow_UnNatural_Mortality = True                
                        self.Arg_Mortality_Application_Specs__UnNat = {globalsSS.MortalityApplication.static_str_Mating_Mortlity_Starts__UnNat:{self.strSexMale: int_Replicate_Mating_Count_UnNat_Mortality_Starts, self.strSexFemale: int_Replicate_Mating_Count_UnNat_Mortality_Starts}, globalsSS.MortalityApplication.static_str_Mortality_Application_Model__UnNat:{self.strSexMale: 3, self.strSexFemale: 3}, globalsSS.MortalityApplication.static_str_Mortality_Scaling_Total__UnNat:{self.strSexMale: 262*int_BAU_Mortality_Multiplier, self.strSexFemale: 166*int_BAU_Mortality_Multiplier}} #dict_Mortality_Application_Specs_By_Sex__UnNATURAL     
                        self.Arg_Survival_UnNatural = {self.strSexMale:{12:0.981,24:0.966,36:0.973,48:0.973,60:0.989,72:0.996,84:0.996,96:1.000,108:0.973,120:0.954,132:0.947,144:0.905,156:0.924,168:0.851,180:0.882,192:0.870,204:0.931,216:0.962,228:0.977,240:0.989,252:0.977,264:0.992,276:0.992,288:1.000,300:1.000,312:1.000,324:1.000,336:1.000}
                                                      ,self.strSexFemale:{12:0.994,24:0.958,36:0.958,48:0.958,60:0.982,72:0.988,84:0.994,96:1.000,108:0.994,120:1.000,132:0.982,144:0.988,156:0.994,168:0.952,180:0.934,192:0.855,204:0.880,216:0.892,228:0.904,240:0.934,252:0.928,264:0.976,276:0.982,288:1.000,300:1.000,312:0.988,324:0.994,336:0.994}}
                        
                        self.arg_int_Sample_Pop_When_Mating_Count_Divisible_By = 1
                        pass
                    elif int_Scenario_Code_D == 2: 
                        ''' Fishing scenario 2: Business as usual  - Fullfill Quota
                        Quota Multiplier = 2
                        '''
                        int_BAU_Mortality_Multiplier = 2
                        int_Replicate_Mating_Count_UnNat_Mortality_Starts = 58
                        self.Arg_Allow_UnNatural_Mortality = True                
                        self.Arg_Mortality_Application_Specs__UnNat = {globalsSS.MortalityApplication.static_str_Mating_Mortlity_Starts__UnNat:{self.strSexMale: int_Replicate_Mating_Count_UnNat_Mortality_Starts, self.strSexFemale: int_Replicate_Mating_Count_UnNat_Mortality_Starts}, globalsSS.MortalityApplication.static_str_Mortality_Application_Model__UnNat:{self.strSexMale: 3, self.strSexFemale: 3}, globalsSS.MortalityApplication.static_str_Mortality_Scaling_Total__UnNat:{self.strSexMale: 166*int_BAU_Mortality_Multiplier, self.strSexFemale: 262*int_BAU_Mortality_Multiplier}} #dict_Mortality_Application_Specs_By_Sex__UnNATURAL     
                        self.Arg_Survival_UnNatural = {self.strSexMale:{12:0.981,24:0.966,36:0.973,48:0.973,60:0.989,72:0.996,84:0.996,96:1.000,108:0.973,120:0.954,132:0.947,144:0.905,156:0.924,168:0.851,180:0.882,192:0.870,204:0.931,216:0.962,228:0.977,240:0.989,252:0.977,264:0.992,276:0.992,288:1.000,300:1.000,312:1.000,324:1.000,336:1.000}
                                                      ,self.strSexFemale:{12:0.994,24:0.958,36:0.958,48:0.958,60:0.982,72:0.988,84:0.994,96:1.000,108:0.994,120:1.000,132:0.982,144:0.988,156:0.994,168:0.952,180:0.934,192:0.855,204:0.880,216:0.892,228:0.904,240:0.934,252:0.928,264:0.976,276:0.982,288:1.000,300:1.000,312:0.988,324:0.994,336:0.994}}
                        
                        self.arg_int_Sample_Pop_When_Mating_Count_Divisible_By = 1
                        pass
                    elif int_Scenario_Code_D == 3: 
                        ''' Fishing scenario 3: Business as usual  - Fullfill Quota
                        Quota Multiplier = 3
                        '''
                        int_BAU_Mortality_Multiplier = 3
                        int_Replicate_Mating_Count_UnNat_Mortality_Starts = 58
                        self.Arg_Allow_UnNatural_Mortality = True                
                        self.Arg_Mortality_Application_Specs__UnNat = {globalsSS.MortalityApplication.static_str_Mating_Mortlity_Starts__UnNat:{self.strSexMale: int_Replicate_Mating_Count_UnNat_Mortality_Starts, self.strSexFemale: int_Replicate_Mating_Count_UnNat_Mortality_Starts}, globalsSS.MortalityApplication.static_str_Mortality_Application_Model__UnNat:{self.strSexMale: 3, self.strSexFemale: 3}, globalsSS.MortalityApplication.static_str_Mortality_Scaling_Total__UnNat:{self.strSexMale: 166*int_BAU_Mortality_Multiplier, self.strSexFemale: 262*int_BAU_Mortality_Multiplier}} #dict_Mortality_Application_Specs_By_Sex__UnNATURAL     
                        self.Arg_Survival_UnNatural = {self.strSexMale:{12:0.981,24:0.966,36:0.973,48:0.973,60:0.989,72:0.996,84:0.996,96:1.000,108:0.973,120:0.954,132:0.947,144:0.905,156:0.924,168:0.851,180:0.882,192:0.870,204:0.931,216:0.962,228:0.977,240:0.989,252:0.977,264:0.992,276:0.992,288:1.000,300:1.000,312:1.000,324:1.000,336:1.000}
                                                      ,self.strSexFemale:{12:0.994,24:0.958,36:0.958,48:0.958,60:0.982,72:0.988,84:0.994,96:1.000,108:0.994,120:1.000,132:0.982,144:0.988,156:0.994,168:0.952,180:0.934,192:0.855,204:0.880,216:0.892,228:0.904,240:0.934,252:0.928,264:0.976,276:0.982,288:1.000,300:1.000,312:0.988,324:0.994,336:0.994}}
                        
                        self.arg_int_Sample_Pop_When_Mating_Count_Divisible_By = 1
                        pass
                    elif int_Scenario_Code_D == 4: 
                        ''' Fishing scenario 4: Extra Fishing scenario F4  holding pop size & Quota size constant for both species
                        '''
                        int_BAU_Mortality_Multiplier = 1
                        int_Replicate_Mating_Count_UnNat_Mortality_Starts = 58
                        self.Arg_Allow_UnNatural_Mortality = True                
                        self.Arg_Mortality_Application_Specs__UnNat = {globalsSS.MortalityApplication.static_str_Mating_Mortlity_Starts__UnNat:{self.strSexMale: int_Replicate_Mating_Count_UnNat_Mortality_Starts, self.strSexFemale: int_Replicate_Mating_Count_UnNat_Mortality_Starts}, globalsSS.MortalityApplication.static_str_Mortality_Application_Model__UnNat:{self.strSexMale: 3, self.strSexFemale: 3}, globalsSS.MortalityApplication.static_str_Mortality_Scaling_Total__UnNat:{self.strSexMale: 250*int_BAU_Mortality_Multiplier, self.strSexFemale: 250*int_BAU_Mortality_Multiplier}} #dict_Mortality_Application_Specs_By_Sex__UnNATURAL     
                        self.Arg_Survival_UnNatural = {self.strSexMale:{12:0.981,24:0.966,36:0.973,48:0.973,60:0.989,72:0.996,84:0.996,96:1.000,108:0.973,120:0.954,132:0.947,144:0.905,156:0.924,168:0.851,180:0.882,192:0.870,204:0.931,216:0.962,228:0.977,240:0.989,252:0.977,264:0.992,276:0.992,288:1.000,300:1.000,312:1.000,324:1.000,336:1.000}
                                                      ,self.strSexFemale:{12:0.994,24:0.958,36:0.958,48:0.958,60:0.982,72:0.988,84:0.994,96:1.000,108:0.994,120:1.000,132:0.982,144:0.988,156:0.994,168:0.952,180:0.934,192:0.855,204:0.880,216:0.892,228:0.904,240:0.934,252:0.928,264:0.976,276:0.982,288:1.000,300:1.000,312:0.988,324:0.994,336:0.994}}
                        
                        self.arg_int_Sample_Pop_When_Mating_Count_Divisible_By = 1
                        pass
                    pass
                    
                pass
            
                str_Arg_Pop_Size = str(self.Arg_Pop_Size)
                int_Len_Arg_Pop_Size = len(str_Arg_Pop_Size)
                str_UDF_Pop_Size = str_Arg_Pop_Size
                if int_Len_Arg_Pop_Size >= 4:
                    if str_Arg_Pop_Size[-3:] == '000':
                        str_UDF_Pop_Size = str_Arg_Pop_Size[:int_Len_Arg_Pop_Size-3] + 'K'
                    pass
                pass                        
                str_Scenario_Specific_Folder = 'N' + str_UDF_Pop_Size + '_' + str_Scenario_Desc_Code
                
                str_Pop_Replicates = 'PR' + str(self.Arg_Pop_Replicates)
                strRunSpecificUserDefinedFolder = self.str_Species_Code_Short + '\\' + self.str_Scenario_Code + '\\' + str_Pop_Replicates + '\\' + self.str_Species_Code + '_' + str_Scenario_Specific_Folder
            
                return strRunSpecificUserDefinedFolder
                
                
            def method_Simulation_PROD_Run_Specific_User_Defined_Folder__SOG_V2(self):                
                
                strRunSpecificUserDefinedFolder = 'PROD_DEFAULT'
                
                '''
                ~~~~~~~~~~~~~~~~~
                SOG_V2
                ~~~~~~~~~~~~~~~~~
                '''
                #strRunSpecificUserDefinedFolder = '761_N2000_M27_PR500_SN_O1_LD2'
                strRunSpecificUserDefinedFolder = '761_N4000_761_M27_PR500_SN_O1_LD2'
                #strRunSpecificUserDefinedFolder = '763_N2000_M27_PR500_SN_O1_LD2'
                #strRunSpecificUserDefinedFolder = '763_N4000_M27_PR500_SN_O1_LD2'
                
                strRunSpecificUserDefinedFolder = self.str_Species_Code + '_' + strRunSpecificUserDefinedFolder
                pass
                
                return strRunSpecificUserDefinedFolder

            def method_Simulation_PROD_Run_Specific_User_Defined_Folder__SDG_V1(self):                
                
                strRunSpecificUserDefinedFolder = 'PROD_DEFAULT'
                
                '''
                ~~~~~~~~~~~~~~~~~
                SDG_V1
                ~~~~~~~~~~~~~~~~~
                '''                    
                #self.strRunSpecificUserDefinedFolder = 'N500_M128_PR1000_SR1_V3'
                
                strRunSpecificUserDefinedFolder = self.str_Species_Code + '_' + strRunSpecificUserDefinedFolder
                
                return strRunSpecificUserDefinedFolder

            def method_Simulation_TEST_Run_Specific_User_Defined_Folder(self):
                                
                strRunSpecificUserDefinedFolder = 'TEST_DEFAULT'

                '''
                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                SPECIES SPECIFICATION
                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                '''
                #self.str_Species_Code = 'SDG_V1'
                #self.str_Species_Code = 'SOG_V1'
                #self.str_Species_Code = 'SOG_V2'
                #self.str_Species_Code = 'CAPL_V1'
                self.str_Species_Code = 'CAOB_V1'

                '''
                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                SCENARIO SPECIFICATION
                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                '''
                self.str_Scenario_Code = 'L1'
                                
                '''
                ----------------------------------
                DEVEL - User Specified Run Folder
                ----------------------------------
                '''        
                ''' DEBUGGING '''            
                str_UDF = '_TEST_N1K_NM_G18R24_V1'
                ''' DEBUGGING '''
                
                strRunSpecificUserDefinedFolder = self.strUniqueRunID #+ str_UDF
                strRunSpecificUserDefinedFolder = self.str_Species_Code + '_' + strRunSpecificUserDefinedFolder 
                                   
                return strRunSpecificUserDefinedFolder

            '''
            DEFAULT PARMS
            '''
            def method_Simulation_Standard_Model_Arguments_CAOB_V1(self):
                
                #self.Arg_Pop_Replicates = 1
                #self.Arg_Pop_Size = 1000
                self.Arg_Mating_Scheme = 21
                self.Arg_Mating_Scheme_Polygamy_Num_Mates = 2
                self.Arg_Max_Age = 34
                self.Arg_Max_Mating_Age = 33
                self.Arg_Min_Mating_Age = 16
                self.Arg_Min_Num_Offspring_Per_Mate = 5
                #self.Arg_Num_Offspring_Per_Mate = 10
                self.Arg_Max_Num_Offspring_Per_Mate = 12
                self.Arg_Parturition_Month = 2
                self.Arg_Gestation_Length_In_Months = 6
                self.Arg_Reproductive_Rest_Length_In_Months = 1
                
                self.Arg_Allow_Senescence = False

                self.Arg_Mortality_Application_Specs__Nat = {globalsSS.MortalityApplication.static_str_Mating_Mortlity_Starts__Nat:{self.strSexMale: 1, self.strSexFemale: 1}, globalsSS.MortalityApplication.static_str_Mortality_Application_Model__Nat:{self.strSexMale: 3, self.strSexFemale: 3}, globalsSS.MortalityApplication.static_str_Mortality_Scaling_Total__Nat:{self.strSexMale: 1, self.strSexFemale: 1}}  #dict_Mortality_Application_Specs_By_Sex__NATURAL                              
                
                ''' Two alternative Natural Survival Distributions dependeing on if Senescene is allowed '''
                self.Arg_Survival_Natural_Senescence = {self.strSexMale:{12:0.913,24:0.913,36:0.913,48:0.913,60:0.913,72:0.913,84:0.913,96:0.913,108:0.913,120:0.913,132:0.913,144:0.913,156:0.913,168:0.913,180:0.913,192:0.913,204:0.913,216:0.913,228:0.913,240:0.913,252:0.913,264:0.913,276:0.913,288:0.913,300:0.913,312:0.913,324:0.913,336:0.913,348:0.913,360:0.913,372:0.913,384:0.913,396:0.913,408:1.0}
                                            ,self.strSexFemale:{12:0.913,24:0.913,36:0.913,48:0.913,60:0.913,72:0.913,84:0.913,96:0.913,108:0.913,120:0.913,132:0.913,144:0.913,156:0.913,168:0.913,180:0.913,192:0.913,204:0.913,216:0.913,228:0.913,240:0.913,252:0.913,264:0.913,276:0.913,288:0.913,300:0.913,312:0.913,324:0.913,336:0.913,348:0.913,360:0.913,372:0.913,384:0.913,396:0.913,408:1.0}}
                
                self.Arg_Survival_Natural_No_Senescence = {self.strSexMale:{12:0.913,24:0.913,36:0.913,48:0.913,60:0.913,72:0.913,84:0.913,96:0.913,108:0.913,120:0.913,132:0.913,144:0.913,156:0.913,168:0.913,180:0.913,192:0.913,204:0.913,216:0.913,228:0.913,240:0.913,252:0.913,264:0.913,276:0.913,288:0.913,300:0.913,312:0.913,324:0.913,336:0.913,348:0.913,360:0.913,372:0.913,384:0.913,396:0.0,408:0.0}
                                            ,self.strSexFemale:{12:0.913,24:0.913,36:0.913,48:0.913,60:0.913,72:0.913,84:0.913,96:0.913,108:0.913,120:0.913,132:0.913,144:0.913,156:0.913,168:0.913,180:0.913,192:0.913,204:0.913,216:0.913,228:0.913,240:0.913,252:0.913,264:0.913,276:0.913,288:0.913,300:0.913,312:0.913,324:0.913,336:0.913,348:0.913,360:0.913,372:0.913,384:0.913,396:0.0,408:0.0}}
            
                self.Arg_Allow_UnNatural_Mortality = False                
                self.Arg_Mortality_Application_Specs__UnNat = {globalsSS.MortalityApplication.static_str_Mating_Mortlity_Starts__UnNat:{self.strSexMale: 70, self.strSexFemale: 70}, globalsSS.MortalityApplication.static_str_Mortality_Application_Model__UnNat:{self.strSexMale: 3, self.strSexFemale: 3}, globalsSS.MortalityApplication.static_str_Mortality_Scaling_Total__UnNat:{self.strSexMale: 140, self.strSexFemale: 135}} #dict_Mortality_Application_Specs_By_Sex__UnNATURAL     
                self.Arg_Survival_UnNatural = {self.strSexMale:{12:0.950,24:0.971,36:0.971,48:0.986,60:1.000,72:0.979,84:0.986,96:0.986,108:1.000,120:1.000,132:0.993,144:0.993,156:1.000,168:1.000,180:1.000,192:1.000,204:1.000,216:0.964,228:0.957,240:0.957,252:0.957,264:0.921,276:0.921,288:0.907,300:0.871,312:0.907,324:0.921,336:0.971,348:0.964,360:0.986,372:1.000,384:1.000,396:0.979,408:1.000}
                                              ,self.strSexFemale:{12:0.963,24:0.985,36:0.956,48:0.978,60:0.948,72:0.978,84:0.970,96:0.963,108:0.963,120:0.993,132:0.993,144:0.985,156:0.993,168:0.978,180:1.000,192:0.993,204:0.993,216:0.985,228:0.978,240:0.970,252:0.993,264:0.985,276:0.956,288:0.963,300:0.926,312:0.956,324:0.867,336:0.933,348:0.963,360:0.970,372:0.978,384:0.978,396:0.985,408:0.985}}
   
                self.arg_int_Sample_Pop_When_Mating_Count_Divisible_By = 3
                
                return True

            def method_Simulation_Standard_Model_Arguments_CAPL_V1(self):
                
                #self.Arg_Pop_Replicates = 1
                #self.Arg_Pop_Size = 1000
                self.Arg_Mating_Scheme = 21
                self.Arg_Mating_Scheme_Polygamy_Num_Mates = 2
                self.Arg_Max_Age = 28
                self.Arg_Max_Mating_Age = 27
                self.Arg_Min_Mating_Age = 10
                self.Arg_Min_Num_Offspring_Per_Mate = 3
                #self.Arg_Num_Offspring_Per_Mate = 8
                self.Arg_Max_Num_Offspring_Per_Mate = 12
                self.Arg_Parturition_Month = 2
                self.Arg_Gestation_Length_In_Months = 6
                self.Arg_Reproductive_Rest_Length_In_Months = 1
                
                self.Arg_Allow_Senescence = False

                self.Arg_Mortality_Application_Specs__Nat = {globalsSS.MortalityApplication.static_str_Mating_Mortlity_Starts__Nat:{self.strSexMale: 1, self.strSexFemale: 1}, globalsSS.MortalityApplication.static_str_Mortality_Application_Model__Nat:{self.strSexMale: 3, self.strSexFemale: 3}, globalsSS.MortalityApplication.static_str_Mortality_Scaling_Total__Nat:{self.strSexMale: 1, self.strSexFemale: 1}}  #dict_Mortality_Application_Specs_By_Sex__NATURAL                              
                
                ''' Two alternative Natural Survival Distributions dependeing on if Senescene is allowed '''
                self.Arg_Survival_Natural_Senescence = {self.strSexMale:{12:0.88, 24:0.88, 36:0.88, 48:0.88, 60:0.88, 72:0.88, 84:0.88, 96:0.88, 108:0.88, 120:0.88, 132:0.88, 144:0.88, 156:0.88, 168:0.88, 180:0.88, 192:0.88, 204:0.88, 216:0.88, 228:0.88, 240:0.88, 252:0.88, 264:0.88, 276:0.88, 288:0.88,300:0.88,312:0.88,324:0.88,336:1.0}
                                                       ,self.strSexFemale:{12:0.88, 24:0.88, 36:0.88, 48:0.88, 60:0.88, 72:0.88, 84:0.88, 96:0.88, 108:0.88, 120:0.88, 132:0.88, 144:0.88, 156:0.88, 168:0.88, 180:0.88, 192:0.88, 204:0.88, 216:0.88, 228:0.88, 240:0.88, 252:0.88, 264:0.88, 276:0.88, 288:0.88,300:0.88,312:0.88,324:0.88,336:1.0}}

                self.Arg_Survival_Natural_No_Senescence = {self.strSexMale:{12:0.88, 24:0.88, 36:0.88, 48:0.88, 60:0.88, 72:0.88, 84:0.88, 96:0.88, 108:0.88, 120:0.88, 132:0.88, 144:0.88, 156:0.88, 168:0.88, 180:0.88, 192:0.88, 204:0.88, 216:0.88, 228:0.88, 240:0.88, 252:0.88, 264:0.88, 276:0.88, 288:0.88,300:0.88,312:0.88,324:0.0,336:0.0}
                                                          ,self.strSexFemale:{12:0.88, 24:0.88, 36:0.88, 48:0.88, 60:0.88, 72:0.88, 84:0.88, 96:0.88, 108:0.88, 120:0.88, 132:0.88, 144:0.88, 156:0.88, 168:0.88, 180:0.88, 192:0.88, 204:0.88, 216:0.88, 228:0.88, 240:0.88, 252:0.88, 264:0.88, 276:0.88, 288:0.88,300:0.88,312:0.88,324:0.0,336:0.0}}

                self.Arg_Allow_UnNatural_Mortality = False                
                self.Arg_Mortality_Application_Specs__UnNat = {globalsSS.MortalityApplication.static_str_Mating_Mortlity_Starts__UnNat:{self.strSexMale: 58, self.strSexFemale: 58}, globalsSS.MortalityApplication.static_str_Mortality_Application_Model__UnNat:{self.strSexMale: 3, self.strSexFemale: 3}, globalsSS.MortalityApplication.static_str_Mortality_Scaling_Total__UnNat:{self.strSexMale: 166, self.strSexFemale: 262}} #dict_Mortality_Application_Specs_By_Sex__UnNATURAL     
                self.Arg_Survival_UnNatural = {self.strSexMale:{12:0.981,24:0.966,36:0.973,48:0.973,60:0.989,72:0.996,84:0.996,96:1.000,108:0.973,120:0.954,132:0.947,144:0.905,156:0.924,168:0.851,180:0.882,192:0.870,204:0.931,216:0.962,228:0.977,240:0.989,252:0.977,264:0.992,276:0.992,288:1.000,300:1.000,312:1.000,324:1.000,336:1.000}
                                              ,self.strSexFemale:{12:0.994,24:0.958,36:0.958,48:0.958,60:0.982,72:0.988,84:0.994,96:1.000,108:0.994,120:1.000,132:0.982,144:0.988,156:0.994,168:0.952,180:0.934,192:0.855,204:0.880,216:0.892,228:0.904,240:0.934,252:0.928,264:0.976,276:0.982,288:1.000,300:1.000,312:0.988,324:0.994,336:0.994}}
                
                self.arg_int_Sample_Pop_When_Mating_Count_Divisible_By = 3
                        
                return True

            def method_Simulation_Standard_Model_Arguments_SSOG_V1(self):

                '''
                ~~~~~~~~~~~~~~~~~~~~
                Replicate Run - Parameter Specification
                ~~~~~~~~~~~~~~~~~~~~
                '''
                '''
                LIFE HIST DATA - Using FEMALE Ages only
                 Simple Overlapping Generations Model 1
                    >> Life History Params
                    Maximum age              : 4
                    Maximal mating age       : 3
                    Minimal mating age (m)   : 1
                    Minimal mating age (fm)  : 1
                    Litter sex ratio (fm:m)  : 1:1
                    Litter size(fm)          : 1
                    Gestation          (G)   : 6 months
                    Reproductive Cycle (R)   : 1 months
                    >> Survival Params
                    Natural survival         : 0.85 Age independent
                    NOTE: For Nat Survival Prob Dist #Max Age must be 1.0 (100% Survival) for UnNatural mortality to work.  These animals will all die at mating anyway. 
                    Fishing survival         : 0.95 Age independent
                    >> AgeNe Params
                    bx(fm)                   : 0.33 (1 offspring every 3 years = 1/3 = 0.33)
                    sx(fm)                   : Age independent - see natural mortality distribution
                    >> Genetic Params
                    Genetic data source      : Simulated 
                    #Loci                    : 20 (Average of 10 alleles per locus)
                    Allele Freqs             : Calculated (Maximal diversity or Random Drichlet)


                    #SSOG OVERLAPPING GENS - Mating in Aug (8), Gestation 6 months (Feb,2), Resting 1 months (Mar, 3)
                '''

                self.str_Scenario_Code_A = 'L'
                self.Arg_Pop_Replicates = 1
                self.list_Scenario_Code_B = ['01']
                self.list_Pop_Sizes = [1000]
                self.list_Scenario_Code_CD = ['A1']
        
                self.Arg_BurnIn_Matings = 27
                self.Arg_Evolution_Years = 8
                self.Arg_Evolution_Months = 8
                self.Arg_int_Mating_Calender_Month = 8
                
                '''
                ------------------
                Allele Freq Scheme
                0 - Equal starting allele frequencies - MAXIMAL DIVERSITY (MAF)
                1 - Randomly generated allele frequencies - RANDOM DRICHLET DIVERSITY (DAF)
                ------------------
                '''
                self.Arg_bool_Obtain_Allele_Freqs_From_File = False
                self.Arg_int_Allele_Freq_Scheme = 0
                
                self.Arg_Num_Loci = 20
                self.Arg_int_Alleles_Per_Locus = 10
                
                self.Arg_bool_Allow_Mutation = True
                
                #self.Arg_Pop_Replicates = 1
                #self.Arg_Pop_Size = 1000
                self.Arg_Mating_Scheme = 21
                self.Arg_Mating_Scheme_Polygamy_Num_Mates = 2
                self.Arg_Max_Age = 4
                self.Arg_Max_Mating_Age = 3
                self.Arg_Min_Mating_Age = 1
                
                self.Arg_Num_Offspring_Per_Mate = 1
                self.Arg_list_Offspring_Production_Parms = [self.Arg_Num_Offspring_Per_Mate] 
                #self.Arg_Min_Num_Offspring_Per_Mate = 1
                #self.Arg_Max_Num_Offspring_Per_Mate = 3
                
                self.Arg_int_Offspring_Sex_Scheme = 0 #0 - probability-driven male sex proportion, 1 - Forced exactly even sex ratio
                
                self.Arg_Parturition_Month = 2
                self.Arg_Gestation_Length_In_Months = 6
                self.Arg_Reproductive_Rest_Length_In_Months = 1
                
                self.Arg_Allow_Senescence = False

                self.Arg_Mortality_Application_Specs__Nat = {globalsSS.MortalityApplication.static_str_Mating_Mortlity_Starts__Nat:{self.strSexMale: 1, self.strSexFemale: 1}, globalsSS.MortalityApplication.static_str_Mortality_Application_Model__Nat:{self.strSexMale: 3, self.strSexFemale: 3}, globalsSS.MortalityApplication.static_str_Mortality_Scaling_Total__Nat:{self.strSexMale: 1, self.strSexFemale: 1}}  #dict_Mortality_Application_Specs_By_Sex__NATURAL                              
                
                ''' Two alternative Natural Survival Distributions dependeing on if Senescene is allowed '''
#                 self.Arg_Survival_Natural_Senescence = {self.strSexMale:{  12:0.85, 24:0.85, 36:0.85, 48:0.00}
#                                                        ,self.strSexFemale:{12:0.85, 24:0.85, 36:0.85, 48:0.00}}
#                 self.Arg_Survival_Natural_Senescence = {self.strSexMale:{  12:1.00, 24:1.00, 36:1.00, 48:0.00}
#                                                        ,self.strSexFemale:{12:1.00, 24:1.00, 36:1.00, 48:0.00}}

#                 self.Arg_Survival_Natural_No_Senescence = {self.strSexMale:{  12:0.85, 24:0.85, 36:0.85, 48:0.85, 60:0.00}
#                                                           ,self.strSexFemale:{12:0.85, 24:0.85, 36:0.85, 48:1.00, 60:0.00}}
#                 self.Arg_Survival_Natural_No_Senescence = {self.strSexMale:{  12:1.00, 24:1.00, 36:0.00, 48:0.00, 60:0.00}
#                                                           ,self.strSexFemale:{12:1.00, 24:1.00, 36:0.00, 48:0.00, 60:0.00}}
                self.Arg_Survival_Natural_No_Senescence = {self.strSexMale:{  12:1.00, 24:1.00, 36:0.00, 48:0.00}
                                                          ,self.strSexFemale:{12:1.00, 24:1.00, 36:0.00, 48:0.00}}

                self.Arg_Allow_UnNatural_Mortality = False                
                self.Arg_Mortality_Application_Specs__UnNat = {globalsSS.MortalityApplication.static_str_Mating_Mortlity_Starts__UnNat:{self.strSexMale: 59, self.strSexFemale: 59}, globalsSS.MortalityApplication.static_str_Mortality_Application_Model__UnNat:{self.strSexMale: 3, self.strSexFemale: 3}, globalsSS.MortalityApplication.static_str_Mortality_Scaling_Total__UnNat:{self.strSexMale: 250, self.strSexFemale: 250}} #dict_Mortality_Application_Specs_By_Sex__UnNATURAL     
                self.Arg_Survival_UnNatural = {self.strSexMale:{    12:0.95, 24:0.95, 36:0.85, 48:1.00}
                                              ,self.strSexFemale:{12:0.95, 24:0.95, 36:0.85, 48:1.00}}
                
                self.arg_int_Sample_Pop_When_Mating_Count_Divisible_By = 3
                        
                return True

            def method_Simulation_Standard_Model_Arguments_SMOG_V1(self):

                '''
                LIFE HIST DATA - Using FEMALE Ages only
                 Simple Overlapping Generations Model 1
                    >> Life History Params
                    Maximum age              : 4
                    Maximal mating age       : 3
                    Minimal mating age (m)   : 1
                    Minimal mating age (fm)  : 1
                    Litter sex ratio (fm:m)  : 1:1
                    Litter size(fm)          : 1
                    Gestation          (G)   : 6 months
                    Reproductive Cycle (R)   : 1 months
                    >> Survival Params
                    Natural survival         : 0.85 Age independent
                    NOTE: For Nat Survival Prob Dist #Max Age must be 1.0 (100% Survival) for UnNatural mortality to work.  These animals will all die at mating anyway. 
                    Fishing survival         : 0.95 Age independent
                    >> AgeNe Params
                    bx(fm)                   : 0.33 (1 offspring every 3 years = 1/3 = 0.33)
                    sx(fm)                   : Age independent - see natural mortality distribution
                    >> Genetic Params
                    Genetic data source      : Simulated 
                    #Loci                    : 20 (Average of 10 alleles per locus)
                    Allele Freqs             : Calculated (Maximal diversity or Random Drichlet)


                    #SSOG OVERLAPPING GENS - Mating in Aug (8), Gestation 6 months (Feb,2), Resting 1 months (Mar, 3)
                '''

                self.str_Scenario_Code_A = 'L'
                self.Arg_Pop_Replicates = 1
                self.list_Scenario_Code_B = ['00']
                self.list_Pop_Sizes = [1000]
                self.list_Scenario_Code_CD = ['A1']
        
                self.Arg_BurnIn_Matings = 27
                self.Arg_Evolution_Years = 8
                self.Arg_Evolution_Months = 8
                self.Arg_int_Mating_Calender_Month = 8
                
                '''
                ------------------
                Allele Freq Scheme
                0 - Equal starting allele frequencies - MAXIMAL DIVERSITY (MAF)
                1 - Randomly generated allele frequencies - RANDOM DRICHLET DIVERSITY (DAF)
                ------------------
                '''
                self.Arg_bool_Obtain_Allele_Freqs_From_File = False
                self.Arg_int_Allele_Freq_Scheme = 0
                
                self.Arg_Num_Loci = 20
                self.Arg_int_Alleles_Per_Locus = 10
                
                self.Arg_bool_Allow_Mutation = True
                
                #self.Arg_Pop_Replicates = 1
                #self.Arg_Pop_Size = 1000
                self.Arg_Mating_Scheme = 21
                self.Arg_Mating_Scheme_Polygamy_Num_Mates = 2
                self.Arg_Max_Age = 29
                self.Arg_Max_Mating_Age = 28
                self.Arg_Min_Mating_Age = 6
                
                self.Arg_Num_Offspring_Per_Mate = 1
                self.Arg_list_Offspring_Production_Parms = [self.Arg_Num_Offspring_Per_Mate] 
                #self.Arg_Min_Num_Offspring_Per_Mate = 1
                #self.Arg_Max_Num_Offspring_Per_Mate = 3
                
                self.Arg_int_Offspring_Sex_Scheme = 0 #0 - probability-driven male sex proportion, 1 - Forced exactly even sex ratio
                
                self.Arg_Parturition_Month = 1
                self.Arg_Gestation_Length_In_Months = 5
                self.Arg_Reproductive_Rest_Length_In_Months = 1
                
                self.Arg_Allow_Senescence = False

                self.Arg_Mortality_Application_Specs__Nat = {globalsSS.MortalityApplication.static_str_Mating_Mortlity_Starts__Nat:{self.strSexMale: 1, self.strSexFemale: 1}, globalsSS.MortalityApplication.static_str_Mortality_Application_Model__Nat:{self.strSexMale: 3, self.strSexFemale: 3}, globalsSS.MortalityApplication.static_str_Mortality_Scaling_Total__Nat:{self.strSexMale: 1, self.strSexFemale: 1}}  #dict_Mortality_Application_Specs_By_Sex__NATURAL                              
                
                ''' Two alternative Natural Survival Distributions dependeing on if Senescene is allowed '''
                self.Arg_Survival_Natural_No_Senescence = {self.strSexMale:{  12:1.00, 24:1.00, 36:1.00, 48:1.00, 60:1.00, 72:1.00, 84:1.00, 96:1.00, 108:1.00, 120:1.00, 132:1.00, 144:1.00, 156:1.00, 168:1.00, 180:1.00, 192:1.00, 204:1.00, 216:1.00, 228:1.00, 240:1.00, 252:1.00, 264:1.00, 276:1.00, 288:1.00, 300:1.00, 312:1.00, 324:1.00, 336:0.00, 348:0.00}
                                                          ,self.strSexFemale:{12:1.00, 24:1.00, 36:1.00, 48:1.00, 60:1.00, 72:1.00, 84:1.00, 96:1.00, 108:1.00, 120:1.00, 132:1.00, 144:1.00, 156:1.00, 168:1.00, 180:1.00, 192:1.00, 204:1.00, 216:1.00, 228:1.00, 240:1.00, 252:1.00, 264:1.00, 276:1.00, 288:1.00, 300:1.00, 312:1.00, 324:1.00, 336:0.00, 348:0.00}}

                self.Arg_Survival_Natural_Senescence =    {self.strSexMale:{  12:1.00, 24:1.00, 36:1.00, 48:1.00, 60:1.00, 72:1.00, 84:1.00, 96:1.00, 108:1.00, 120:1.00, 132:1.00, 144:1.00, 156:1.00, 168:1.00, 180:1.00, 192:1.00, 204:1.00, 216:1.00, 228:1.00, 240:1.00, 252:1.00, 264:1.00, 276:1.00, 288:1.00, 300:1.00, 312:1.00, 324:1.00, 336:1.00, 348:0.00}
                                                          ,self.strSexFemale:{12:1.00, 24:1.00, 36:1.00, 48:1.00, 60:1.00, 72:1.00, 84:1.00, 96:1.00, 108:1.00, 120:1.00, 132:1.00, 144:1.00, 156:1.00, 168:1.00, 180:1.00, 192:1.00, 204:1.00, 216:1.00, 228:1.00, 240:1.00, 252:1.00, 264:1.00, 276:1.00, 288:1.00, 300:1.00, 312:1.00, 324:1.00, 336:1.00, 348:0.00}}

                self.Arg_Allow_UnNatural_Mortality = False                
                self.Arg_Mortality_Application_Specs__UnNat = {globalsSS.MortalityApplication.static_str_Mating_Mortlity_Starts__UnNat:{self.strSexMale: 59, self.strSexFemale: 59}, globalsSS.MortalityApplication.static_str_Mortality_Application_Model__UnNat:{self.strSexMale: 3, self.strSexFemale: 3}, globalsSS.MortalityApplication.static_str_Mortality_Scaling_Total__UnNat:{self.strSexMale: 250, self.strSexFemale: 250}} #dict_Mortality_Application_Specs_By_Sex__UnNATURAL     
                self.Arg_Survival_UnNatural = {self.strSexMale:{  12:0.47, 24:0.88, 36:0.87, 48:0.92, 60:0.86, 72:1.00, 84:0.93, 96:0.89, 108:1.00, 120:1.00, 132:1.00, 144:1.00, 156:1.00, 168:1.00, 180:0.73, 192:1.00, 204:1.00, 216:1.00, 228:0.33, 240:1.00, 252:0.00, 264:0.00, 276:0.00, 288:0.00, 300:0.00, 312:0.00, 324:0.00, 336:0.00, 348:1.00}
                                              ,self.strSexFemale:{12:0.41, 24:0.85, 36:0.88, 48:0.96, 60:0.93, 72:0.92, 84:1.00, 96:1.00, 108:1.00, 120:1.00, 132:1.00, 144:1.00, 156:0.94, 168:1.00, 180:1.00, 192:0.81, 204:1.00, 216:1.00, 228:1.00, 240:0.50, 252:1.00, 264:1.00, 276:1.00, 288:1.00, 300:1.00, 312:1.00, 324:1.00, 336:1.00, 348:1.00}}
                
                self.arg_int_Sample_Pop_When_Mating_Count_Divisible_By = 3
                        
                return True

            def method_Simulation_Standard_Model_Arguments_TUTR_V1(self):

                '''
                LIFE HIST DATA - Using FEMALE Ages only
                 Simple Overlapping Generations Model 1
                    >> Life History Params
                    Maximum age              : 4
                    Maximal mating age       : 3
                    Minimal mating age (m)   : 1
                    Minimal mating age (fm)  : 1
                    Litter sex ratio (fm:m)  : 1:1
                    Litter size(fm)          : 1
                    Gestation          (G)   : 6 months
                    Reproductive Cycle (R)   : 1 months
                    >> Survival Params
                    Natural survival         : 0.85 Age independent
                    NOTE: For Nat Survival Prob Dist #Max Age must be 1.0 (100% Survival) for UnNatural mortality to work.  These animals will all die at mating anyway. 
                    Fishing survival         : 0.95 Age independent
                    >> AgeNe Params
                    bx(fm)                   : 0.33 (1 offspring every 3 years = 1/3 = 0.33)
                    sx(fm)                   : Age independent - see natural mortality distribution
                    >> Genetic Params
                    Genetic data source      : Simulated 
                    #Loci                    : 20 (Average of 10 alleles per locus)
                    Allele Freqs             : Calculated (Maximal diversity or Random Drichlet)


                    #SSOG OVERLAPPING GENS - Mating in Aug (8), Gestation 6 months (Feb,2), Resting 1 months (Mar, 3)
                '''

                self.str_Scenario_Code_A = 'L'
                self.Arg_Pop_Replicates = 1
                self.list_Scenario_Code_B = ['00']
                self.list_Pop_Sizes = [1000]
                self.list_Scenario_Code_CD = ['A1']
        
                self.Arg_BurnIn_Matings = 27
                self.Arg_Evolution_Years = 8
                self.Arg_Evolution_Months = 8
                self.Arg_int_Mating_Calender_Month = 8
                
                '''
                ------------------
                Allele Freq Scheme
                0 - Equal starting allele frequencies - MAXIMAL DIVERSITY (MAF)
                1 - Randomly generated allele frequencies - RANDOM DRICHLET DIVERSITY (DAF)
                ------------------
                '''
                self.Arg_bool_Obtain_Allele_Freqs_From_File = False
                self.Arg_int_Allele_Freq_Scheme = 0
                
                self.Arg_Num_Loci = 20
                self.Arg_int_Alleles_Per_Locus = 10
                
                self.Arg_bool_Allow_Mutation = True
                
                #self.Arg_Pop_Replicates = 1
                #self.Arg_Pop_Size = 1000
                self.Arg_Mating_Scheme = 21
                self.Arg_Mating_Scheme_Polygamy_Num_Mates = 2
                self.Arg_Max_Age = 36
                self.Arg_Max_Mating_Age = 35
                self.Arg_Min_Mating_Age = 8
                
                self.Arg_Num_Offspring_Per_Mate = 1
                self.Arg_list_Offspring_Production_Parms = [self.Arg_Num_Offspring_Per_Mate] 
                #self.Arg_Min_Num_Offspring_Per_Mate = 1
                #self.Arg_Max_Num_Offspring_Per_Mate = 3
                
                self.Arg_int_Offspring_Sex_Scheme = 0 #0 - probability-driven male sex proportion, 1 - Forced exactly even sex ratio
                
                self.Arg_Parturition_Month = 1
                self.Arg_Gestation_Length_In_Months = 5
                self.Arg_Reproductive_Rest_Length_In_Months = 1
                
                self.Arg_Allow_Senescence = False

                self.Arg_Mortality_Application_Specs__Nat = {globalsSS.MortalityApplication.static_str_Mating_Mortlity_Starts__Nat:{self.strSexMale: 1, self.strSexFemale: 1}, globalsSS.MortalityApplication.static_str_Mortality_Application_Model__Nat:{self.strSexMale: 3, self.strSexFemale: 3}, globalsSS.MortalityApplication.static_str_Mortality_Scaling_Total__Nat:{self.strSexMale: 1, self.strSexFemale: 1}}  #dict_Mortality_Application_Specs_By_Sex__NATURAL                              
                
                ''' Two alternative Natural Survival Distributions dependeing on if Senescene is allowed '''
                self.Arg_Survival_Natural_No_Senescence = {self.strSexMale:{  12:0.824, 24:0.851, 36:0.873, 48:0.89, 60:0.903, 72:0.913, 84:0.919, 96:0.924, 108:0.926, 120:0.927, 132:0.926, 144:0.924, 156:0.921, 168:0.916, 180:0.911, 192:0.904, 204:0.896, 216:0.887, 228:0.877, 240:0.867, 252:0.854, 264:0.841, 276:0.827, 288:0.811, 300:0.794, 312:0.776, 324:0.756, 336:0.735, 348:0.712, 360:0.687, 372:0.661, 384:0.634, 396:0.000, 408:0.575, 420:0.000, 432:0.000}
                                                          ,self.strSexFemale:{12:0.842, 24:0.880, 36:0.909, 48:0.93, 60:0.945, 72:0.955, 84:0.962, 96:0.966, 108:0.968, 120:0.969, 132:0.968, 144:0.967, 156:0.964, 168:0.960, 180:0.956, 192:0.951, 204:0.945, 216:0.937, 228:0.929, 240:0.920, 252:0.909, 264:0.898, 276:0.884, 288:0.869, 300:0.852, 312:0.833, 324:0.812, 336:0.789, 348:0.763, 360:0.735, 372:0.704, 384:0.670, 396:0.630, 408:0.594, 420:0.000, 432:0.000}}

#                 self.Arg_Survival_Natural_No_Senescence = {self.strSexMale:{  12:0.824, 24:0.851, 36:0.873, 48:0.89, 60:0.903, 72:0.913, 84:0.919, 96:0.924, 108:0.926, 120:0.927, 132:0.926, 144:0.924, 156:0.921, 168:0.916, 180:0.911, 192:0.904, 204:0.896, 216:0.887, 228:0.877, 240:0.867, 252:0.854, 264:0.841, 276:0.827, 288:0.811, 300:0.794, 312:0.776, 324:0.756, 336:0.735, 348:0.712, 360:0.687, 372:0.661, 384:0.634, 396:0.630, 408:0.575, 420:0.000, 432:0.000}
#                                                           ,self.strSexFemale:{12:0.842, 24:0.880, 36:0.909, 48:0.93, 60:0.945, 72:0.955, 84:0.962, 96:0.966, 108:0.968, 120:0.969, 132:0.968, 144:0.967, 156:0.964, 168:0.960, 180:0.956, 192:0.951, 204:0.945, 216:0.937, 228:0.929, 240:0.920, 252:0.909, 264:0.898, 276:0.884, 288:0.869, 300:0.852, 312:0.833, 324:0.812, 336:0.789, 348:0.763, 360:0.735, 372:0.704, 384:0.670, 396:0.630, 408:0.594, 420:0.000, 432:0.000}}
                
                self.Arg_Survival_Natural_Senescence =    {self.strSexMale:{  12:0.824, 24:0.851, 36:0.873, 48:0.89, 60:0.903, 72:0.913, 84:0.919, 96:0.924, 108:0.926, 120:0.927, 132:0.926, 144:0.924, 156:0.921, 168:0.916, 180:0.911, 192:0.904, 204:0.896, 216:0.887, 228:0.877, 240:0.867, 252:0.854, 264:0.841, 276:0.827, 288:0.811, 300:0.794, 312:0.776, 324:0.756, 336:0.735, 348:0.712, 360:0.687, 372:0.661, 384:0.634, 396:0.000, 408:0.575, 420:0.543, 432:0.000}
                                                          ,self.strSexFemale:{12:0.842, 24:0.880, 36:0.909, 48:0.93, 60:0.945, 72:0.955, 84:0.962, 96:0.966, 108:0.968, 120:0.969, 132:0.968, 144:0.967, 156:0.964, 168:0.960, 180:0.956, 192:0.951, 204:0.945, 216:0.937, 228:0.929, 240:0.920, 252:0.909, 264:0.898, 276:0.884, 288:0.869, 300:0.852, 312:0.833, 324:0.812, 336:0.789, 348:0.763, 360:0.735, 372:0.704, 384:0.670, 396:0.630, 408:0.594, 420:0.000, 432:0.000}}

                self.Arg_Allow_UnNatural_Mortality = False                
                self.Arg_Mortality_Application_Specs__UnNat = {globalsSS.MortalityApplication.static_str_Mating_Mortlity_Starts__UnNat:{self.strSexMale: 59, self.strSexFemale: 59}, globalsSS.MortalityApplication.static_str_Mortality_Application_Model__UnNat:{self.strSexMale: 3, self.strSexFemale: 3}, globalsSS.MortalityApplication.static_str_Mortality_Scaling_Total__UnNat:{self.strSexMale: 250, self.strSexFemale: 250}} #dict_Mortality_Application_Specs_By_Sex__UnNATURAL     
                self.Arg_Survival_UnNatural =             {self.strSexMale:{  12:0.824, 24:0.851, 36:0.873, 48:0.89, 60:0.903, 72:0.913, 84:0.919, 96:0.924, 108:0.926, 120:0.927, 132:0.926, 144:0.924, 156:0.921, 168:0.916, 180:0.911, 192:0.904, 204:0.896, 216:0.887, 228:0.877, 240:0.867, 252:0.854, 264:0.841, 276:0.827, 288:0.811, 300:0.794, 312:0.776, 324:0.756, 336:0.735, 348:0.712, 360:0.687, 372:0.661, 384:0.634, 396:1.000, 408:0.575, 420:0.543, 432:1.000}
                                                          ,self.strSexFemale:{12:0.842, 24:0.880, 36:0.909, 48:0.93, 60:0.945, 72:0.955, 84:0.962, 96:0.966, 108:0.968, 120:0.969, 132:0.968, 144:0.967, 156:0.964, 168:0.960, 180:0.956, 192:0.951, 204:0.945, 216:0.937, 228:0.929, 240:0.920, 252:0.909, 264:0.898, 276:0.884, 288:0.869, 300:0.852, 312:0.833, 324:0.812, 336:0.789, 348:0.763, 360:0.735, 372:0.704, 384:0.670, 396:0.630, 408:0.594, 420:1.000, 432:1.000}}
                
                self.arg_int_Sample_Pop_When_Mating_Count_Divisible_By = 4
                        
                return True

            def method_Simulation_Standard_Model_Arguments_TUTR_V2(self):

                '''
                LIFE HIST DATA - Using FEMALE Ages only
                 Simple Overlapping Generations Model 1
                    >> Life History Params
                    Maximum age              : 4
                    Maximal mating age       : 3
                    Minimal mating age (m)   : 1
                    Minimal mating age (fm)  : 1
                    Litter sex ratio (fm:m)  : 1:1
                    Litter size(fm)          : 1
                    Gestation          (G)   : 6 months
                    Reproductive Cycle (R)   : 1 months
                    >> Survival Params
                    Natural survival         : 0.85 Age independent
                    NOTE: For Nat Survival Prob Dist #Max Age must be 1.0 (100% Survival) for UnNatural mortality to work.  These animals will all die at mating anyway. 
                    Fishing survival         : 0.95 Age independent
                    >> AgeNe Params
                    bx(fm)                   : 0.33 (1 offspring every 3 years = 1/3 = 0.33)
                    sx(fm)                   : Age independent - see natural mortality distribution
                    >> Genetic Params
                    Genetic data source      : Simulated 
                    #Loci                    : 20 (Average of 10 alleles per locus)
                    Allele Freqs             : Calculated (Maximal diversity or Random Drichlet)


                    #SSOG OVERLAPPING GENS - Mating in Aug (8), Gestation 6 months (Feb,2), Resting 1 months (Mar, 3)
                '''

                self.str_Scenario_Code_A = 'L'
                self.Arg_Pop_Replicates = 1
                self.list_Scenario_Code_B = ['00']
                self.list_Pop_Sizes = [1000]
                self.list_Scenario_Code_CD = ['A1']
        
                self.Arg_BurnIn_Matings = 27
                self.Arg_Evolution_Years = 8
                self.Arg_Evolution_Months = 8
                self.Arg_int_Mating_Calender_Month = 8
                
                '''
                ------------------
                Allele Freq Scheme
                0 - Equal starting allele frequencies - MAXIMAL DIVERSITY (MAF)
                1 - Randomly generated allele frequencies - RANDOM DRICHLET DIVERSITY (DAF)
                ------------------
                '''
                self.Arg_bool_Obtain_Allele_Freqs_From_File = False
                self.Arg_int_Allele_Freq_Scheme = 0
                
                self.Arg_Num_Loci = 20
                self.Arg_int_Alleles_Per_Locus = 10
                
                self.Arg_bool_Allow_Mutation = True
                
                #self.Arg_Pop_Replicates = 1
                #self.Arg_Pop_Size = 1000
                self.Arg_Mating_Scheme = 21
                self.Arg_Mating_Scheme_Polygamy_Num_Mates = 2
                self.Arg_Max_Age = 34
                self.Arg_Max_Mating_Age = 34
                self.Arg_Min_Mating_Age = 8
                
                self.Arg_Num_Offspring_Per_Mate = 1
                self.Arg_list_Offspring_Production_Parms = [self.Arg_Num_Offspring_Per_Mate] 
                #self.Arg_Min_Num_Offspring_Per_Mate = 1
                #self.Arg_Max_Num_Offspring_Per_Mate = 3
                
                self.Arg_int_Offspring_Sex_Scheme = 0 #0 - probability-driven male sex proportion, 1 - Forced exactly even sex ratio
                
                self.Arg_Parturition_Month = 1
                self.Arg_Gestation_Length_In_Months = 5
                self.Arg_Reproductive_Rest_Length_In_Months = 1
                
                self.Arg_Allow_Senescence = False

                self.Arg_Mortality_Application_Specs__Nat = {globalsSS.MortalityApplication.static_str_Mating_Mortlity_Starts__Nat:{self.strSexMale: 1, self.strSexFemale: 1}, globalsSS.MortalityApplication.static_str_Mortality_Application_Model__Nat:{self.strSexMale: 3, self.strSexFemale: 3}, globalsSS.MortalityApplication.static_str_Mortality_Scaling_Total__Nat:{self.strSexMale: 1, self.strSexFemale: 1}}  #dict_Mortality_Application_Specs_By_Sex__NATURAL                              
                
                ''' Two alternative Natural Survival Distributions dependeing on if Senescene is allowed '''
                self.Arg_Survival_Natural_No_Senescence = {self.strSexMale:{  12:0.824, 24:0.851, 36:0.873, 48:0.89, 60:0.903, 72:0.913, 84:0.919, 96:0.924, 108:0.926, 120:0.927, 132:0.926, 144:0.924, 156:0.921, 168:0.916, 180:0.911, 192:0.904, 204:0.896, 216:0.887, 228:0.877, 240:0.867, 252:0.854, 264:0.841, 276:0.827, 288:0.811, 300:0.794, 312:0.776, 324:0.756, 336:0.735, 348:0.712, 360:0.687, 372:0.661, 384:0.634, 396:0.000, 408:0.575, 420:0.000, 432:0.000}
                                                          ,self.strSexFemale:{12:0.842, 24:0.880, 36:0.909, 48:0.93, 60:0.945, 72:0.955, 84:0.962, 96:0.966, 108:0.968, 120:0.969, 132:0.968, 144:0.967, 156:0.964, 168:0.960, 180:0.956, 192:0.951, 204:0.945, 216:0.937, 228:0.929, 240:0.920, 252:0.909, 264:0.898, 276:0.884, 288:0.869, 300:0.852, 312:0.833, 324:0.812, 336:0.789, 348:0.763, 360:0.735, 372:0.704, 384:0.670, 396:0.630, 408:0.594, 420:0.000, 432:0.000}}

#                 self.Arg_Survival_Natural_No_Senescence = {self.strSexMale:{  12:0.824, 24:0.851, 36:0.873, 48:0.89, 60:0.903, 72:0.913, 84:0.919, 96:0.924, 108:0.926, 120:0.927, 132:0.926, 144:0.924, 156:0.921, 168:0.916, 180:0.911, 192:0.904, 204:0.896, 216:0.887, 228:0.877, 240:0.867, 252:0.854, 264:0.841, 276:0.827, 288:0.811, 300:0.794, 312:0.776, 324:0.756, 336:0.735, 348:0.712, 360:0.687, 372:0.661, 384:0.634, 396:0.630, 408:0.575, 420:0.000, 432:0.000}
#                                                           ,self.strSexFemale:{12:0.842, 24:0.880, 36:0.909, 48:0.93, 60:0.945, 72:0.955, 84:0.962, 96:0.966, 108:0.968, 120:0.969, 132:0.968, 144:0.967, 156:0.964, 168:0.960, 180:0.956, 192:0.951, 204:0.945, 216:0.937, 228:0.929, 240:0.920, 252:0.909, 264:0.898, 276:0.884, 288:0.869, 300:0.852, 312:0.833, 324:0.812, 336:0.789, 348:0.763, 360:0.735, 372:0.704, 384:0.670, 396:0.630, 408:0.594, 420:0.000, 432:0.000}}
                
                self.Arg_Survival_Natural_Senescence =    {self.strSexMale:{  12:0.824, 24:0.851, 36:0.873, 48:0.89, 60:0.903, 72:0.913, 84:0.919, 96:0.924, 108:0.926, 120:0.927, 132:0.926, 144:0.924, 156:0.921, 168:0.916, 180:0.911, 192:0.904, 204:0.896, 216:0.887, 228:0.877, 240:0.867, 252:0.854, 264:0.841, 276:0.827, 288:0.811, 300:0.794, 312:0.776, 324:0.756, 336:0.735, 348:0.712, 360:0.687, 372:0.661, 384:0.634, 396:0.000, 408:0.575, 420:0.543, 432:0.000}
                                                          ,self.strSexFemale:{12:0.842, 24:0.880, 36:0.909, 48:0.93, 60:0.945, 72:0.955, 84:0.962, 96:0.966, 108:0.968, 120:0.969, 132:0.968, 144:0.967, 156:0.964, 168:0.960, 180:0.956, 192:0.951, 204:0.945, 216:0.937, 228:0.929, 240:0.920, 252:0.909, 264:0.898, 276:0.884, 288:0.869, 300:0.852, 312:0.833, 324:0.812, 336:0.789, 348:0.763, 360:0.735, 372:0.704, 384:0.670, 396:0.630, 408:0.594, 420:0.000, 432:0.000}}

                self.Arg_Allow_UnNatural_Mortality = False                
                self.Arg_Mortality_Application_Specs__UnNat = {globalsSS.MortalityApplication.static_str_Mating_Mortlity_Starts__UnNat:{self.strSexMale: 59, self.strSexFemale: 59}, globalsSS.MortalityApplication.static_str_Mortality_Application_Model__UnNat:{self.strSexMale: 3, self.strSexFemale: 3}, globalsSS.MortalityApplication.static_str_Mortality_Scaling_Total__UnNat:{self.strSexMale: 250, self.strSexFemale: 250}} #dict_Mortality_Application_Specs_By_Sex__UnNATURAL     
                self.Arg_Survival_UnNatural =             {self.strSexMale:{  12:0.824, 24:0.851, 36:0.873, 48:0.89, 60:0.903, 72:0.913, 84:0.919, 96:0.924, 108:0.926, 120:0.927, 132:0.926, 144:0.924, 156:0.921, 168:0.916, 180:0.911, 192:0.904, 204:0.896, 216:0.887, 228:0.877, 240:0.867, 252:0.854, 264:0.841, 276:0.827, 288:0.811, 300:0.794, 312:0.776, 324:0.756, 336:0.735, 348:0.712, 360:0.687, 372:0.661, 384:0.634, 396:1.000, 408:0.575, 420:0.543, 432:1.000}
                                                          ,self.strSexFemale:{12:0.842, 24:0.880, 36:0.909, 48:0.93, 60:0.945, 72:0.955, 84:0.962, 96:0.966, 108:0.968, 120:0.969, 132:0.968, 144:0.967, 156:0.964, 168:0.960, 180:0.956, 192:0.951, 204:0.945, 216:0.937, 228:0.929, 240:0.920, 252:0.909, 264:0.898, 276:0.884, 288:0.869, 300:0.852, 312:0.833, 324:0.812, 336:0.789, 348:0.763, 360:0.735, 372:0.704, 384:0.670, 396:0.630, 408:0.594, 420:1.000, 432:1.000}}
                
                self.arg_int_Sample_Pop_When_Mating_Count_Divisible_By = 4
                        
                return True
                        
            def method_Simulation_Standard_Model_Arguments_STFA_V1_OLD(self):
                
                #self.Arg_Pop_Replicates = 1
                #self.Arg_Pop_Size = 1000
                self.Arg_Mating_Scheme = 21
                self.Arg_Mating_Scheme_Polygamy_Num_Mates = 2
                self.Arg_Max_Age = 29
                self.Arg_Max_Mating_Age = 28
                self.Arg_Min_Mating_Age = 6
                self.Arg_Min_Num_Offspring_Per_Mate = 3
                #self.Arg_Num_Offspring_Per_Mate = 5
                self.Arg_Max_Num_Offspring_Per_Mate = 10
                self.Arg_Parturition_Month = 1
                self.Arg_Gestation_Length_In_Months = 5
                self.Arg_Reproductive_Rest_Length_In_Months = 1
                
                self.Arg_Allow_Senescence = False

                self.Arg_Mortality_Application_Specs__Nat = {globalsSS.MortalityApplication.static_str_Mating_Mortlity_Starts__Nat:{self.strSexMale: 1, self.strSexFemale: 1}, globalsSS.MortalityApplication.static_str_Mortality_Application_Model__Nat:{self.strSexMale: 3, self.strSexFemale: 3}, globalsSS.MortalityApplication.static_str_Mortality_Scaling_Total__Nat:{self.strSexMale: 1, self.strSexFemale: 1}}  #dict_Mortality_Application_Specs_By_Sex__NATURAL                              
                
                self.Arg_Survival_Natural_No_Senescence = {self.strSexMale:{  12:0.47, 24:0.88, 36:0.87, 48:0.92, 60:0.86, 72:1.00, 84:0.93, 96:0.89, 108:1.00, 120:1.00, 132:1.00, 144:1.00, 156:1.00, 168:1.00, 180:0.73, 192:1.00, 204:1.00, 216:1.00, 228:0.33, 240:1.00, 252:0.00, 264:0.00, 276:0.00, 288:0.00, 300:0.00, 312:0.00, 324:0.00, 336:0.00, 348:0.00}
                                                       ,self.strSexFemale:{12:0.41, 24:0.85, 36:0.88, 48:0.96, 60:0.93, 72:0.92, 84:1.00, 96:1.00, 108:1.00, 120:1.00, 132:1.00, 144:1.00, 156:0.94, 168:1.00, 180:1.00, 192:0.81, 204:1.00, 216:1.00, 228:1.00, 240:0.50, 252:1.00, 264:1.00, 276:1.00, 288:1.00, 300:1.00, 312:1.00, 324:1.00, 336:1.00, 348:0.00}}

                self.Arg_Allow_UnNatural_Mortality = False                
                self.Arg_Mortality_Application_Specs__UnNat = {globalsSS.MortalityApplication.static_str_Mating_Mortlity_Starts__UnNat:{self.strSexMale: 59, self.strSexFemale: 59}, globalsSS.MortalityApplication.static_str_Mortality_Application_Model__UnNat:{self.strSexMale: 3, self.strSexFemale: 3}, globalsSS.MortalityApplication.static_str_Mortality_Scaling_Total__UnNat:{self.strSexMale: 250, self.strSexFemale: 250}} #dict_Mortality_Application_Specs_By_Sex__UnNATURAL     
                self.Arg_Survival_UnNatural = {self.strSexMale:{  12:0.47, 24:0.88, 36:0.87, 48:0.92, 60:0.86, 72:1.00, 84:0.93, 96:0.89, 108:1.00, 120:1.00, 132:1.00, 144:1.00, 156:1.00, 168:1.00, 180:0.73, 192:1.00, 204:1.00, 216:1.00, 228:0.33, 240:1.00, 252:0.00, 264:0.00, 276:0.00, 288:0.00, 300:0.00, 312:0.00, 324:0.00, 336:0.00, 348:1.00}
                                              ,self.strSexFemale:{12:0.41, 24:0.85, 36:0.88, 48:0.96, 60:0.93, 72:0.92, 84:1.00, 96:1.00, 108:1.00, 120:1.00, 132:1.00, 144:1.00, 156:0.94, 168:1.00, 180:1.00, 192:0.81, 204:1.00, 216:1.00, 228:1.00, 240:0.50, 252:1.00, 264:1.00, 276:1.00, 288:1.00, 300:1.00, 312:1.00, 324:1.00, 336:1.00, 348:1.00}}
                
                self.arg_int_Sample_Pop_When_Mating_Count_Divisible_By = 3
                        
                return True
                                 
            def method_Simulation_Standard_Model_Arguments_STFA_V1(self):

                '''
                ~~~~~~~~~~~~~~~~~~~~
                Replicate Run - Parameter Specification
                ~~~~~~~~~~~~~~~~~~~~
                '''
                '''
                LIFE HIST DATA - Using FEMALE Ages only
                Zebra/Leopard shark - Stegostoma fasciatum
                    >> Life History Params
                    Maximum age              : 29 (f) <-- This is Geraghty MaxAge + 1  
                    Maximal mating age       : 28 (f) 32(m) <-- This is Geraghty MaxAge
                    Minimal mating age (m)   : ? (?) <-- Age at which 50% are mature
                    Minimal mating age (fm)  : 6 (6) <-- Age at which 50% are mature
                        OR
                    Minimal mating age (m)   : ? (?) <-- Age at which 95% are mature
                    Minimal mating age (fm)  : 8 (8) <-- Age at which 95% are mature
                    Litter sex ratio (fm:m)  : 1:1
                    Litter size(fm)          : 3 - 10 (Mean: 5, S.E: ?, Range: 3 - 10) PG - Fecundity did not increase with age
                    Gestation          (G)   : 5 months
                    Reproductive Cycle (R)   : 1 months
                    >> Survival Params
                    Natural survival         : 0.913 Age independent (mean of 5 estimates in McAuley, Simpfendorfer & Hall (2007) from (Pauly (1980), Hoenig (1983) method (i), Hoenig (1983) method (ii), Hoenig (1983) method (iii), Jensen (1996))
                    NOTE: For Nat Survival Prob Dist #Max Age must be 1.0 (100% Survival) for UnNatural mortality to work.  These animals will all die at mating anyway. 
                    Fishing survival         : As per 2008 Observer Catch by Sex
                    >> AgeNe Params
                    bx(fm)                   : 3.3   (9.6 offspring every 3 years = 10/3 = 3.3)
                    sx(fm)                   : Age dependent - see notural mortality distribution
                    >> Genetic Params
                    Genetic data source      : Empirical - Christine Dudgeon - SE QLD population 
                    #Loci                    : 14 (Average of 14 alleles per locus) <-- From empirical CAOB Genetic data
                    Allele Freqs             : Empirical or Random Drichlet


                    #STFA OVERLAPPING GENS - Mating in Aug (8), Gestation 5 months (Feb,2), Resting 1 months (Mar, 3)
                '''

                self.str_Scenario_Code_A = 'L'
                self.Arg_Pop_Replicates = 1
                self.list_Scenario_Code_B = ['01']
                self.list_Pop_Sizes = [1000]
                self.list_Scenario_Code_CD = ['A1']
        
                self.Arg_BurnIn_Matings = 27
                self.Arg_Evolution_Years = 8
                self.Arg_Evolution_Months = 8
                self.Arg_int_Mating_Calender_Month = 8
                
                '''
                ------------------
                Allele Freq Scheme
                0 - Equal starting allele frequencies - MAXIMAL DIVERSITY (MAF)
                1 - Randomly generated allele frequencies - RANDOM DRICHLET DIVERSITY (DAF)
                ------------------
                '''
                self.Arg_bool_Obtain_Allele_Freqs_From_File = False
                self.Arg_int_Allele_Freq_Scheme = 1 #DRICHLET
                
                self.Arg_Num_Loci = 20
                self.Arg_int_Alleles_Per_Locus = 10
                
                self.Arg_bool_Allow_Mutation = True
                
                #self.Arg_Pop_Replicates = 1
                #self.Arg_Pop_Size = 1000
                self.Arg_Mating_Scheme = 21
                self.Arg_Mating_Scheme_Polygamy_Num_Mates = 2
                self.Arg_Max_Age = 28
                self.Arg_Max_Mating_Age = 28
                self.Arg_Min_Mating_Age = 6
                
                self.Arg_Num_Offspring_Per_Mate = 1
                self.Arg_list_Offspring_Production_Parms = [self.Arg_Num_Offspring_Per_Mate] 
                #self.Arg_Min_Num_Offspring_Per_Mate = 1
                #self.Arg_Max_Num_Offspring_Per_Mate = 3
                
                self.Arg_int_Offspring_Sex_Scheme = 0 #0 - probability-driven male sex proportion, 1 - Forced exactly even sex ratio
                
                self.Arg_Parturition_Month = 1
                self.Arg_Gestation_Length_In_Months = 5
                self.Arg_Reproductive_Rest_Length_In_Months = 1

                self.Arg_Allow_Senescence = False

                self.Arg_Mortality_Application_Specs__Nat = {globalsSS.MortalityApplication.static_str_Mating_Mortlity_Starts__Nat:{self.strSexMale: 1, self.strSexFemale: 1}, globalsSS.MortalityApplication.static_str_Mortality_Application_Model__Nat:{self.strSexMale: 3, self.strSexFemale: 3}, globalsSS.MortalityApplication.static_str_Mortality_Scaling_Total__Nat:{self.strSexMale: 1, self.strSexFemale: 1}}  #dict_Mortality_Application_Specs_By_Sex__NATURAL                              
                
                ''' Two alternative Natural Survival Distributions dependeing on if Senescene is allowed '''
#                 self.Arg_Survival_Natural_Senescence = {self.strSexMale:{  12:0.47, 24:0.88, 36:0.87, 48:0.92, 60:0.86, 72:1.00, 84:0.93, 96:0.89, 108:1.00, 120:1.00, 132:1.00, 144:1.00, 156:1.00, 168:1.00, 180:0.73, 192:1.00, 204:1.00, 216:1.00, 228:0.33, 240:1.00, 252:0.00, 264:0.00, 276:0.00, 288:0.00, 300:0.00, 312:0.00, 324:0.00, 336:0.00, 348:1.00}
#                                                        ,self.strSexFemale:{12:0.41, 24:0.85, 36:0.88, 48:0.96, 60:0.93, 72:0.92, 84:1.00, 96:1.00, 108:1.00, 120:1.00, 132:1.00, 144:1.00, 156:0.94, 168:1.00, 180:1.00, 192:0.81, 204:1.00, 216:1.00, 228:1.00, 240:0.50, 252:1.00, 264:1.00, 276:1.00, 288:1.00, 300:1.00, 312:1.00, 324:1.00, 336:1.00, 348:1.00}}
#                 ''' CAPTIVE Raw Data '''
#                 self.Arg_Survival_Natural_No_Senescence = {self.strSexMale:{  12:0.47, 24:0.88, 36:0.87, 48:0.92, 60:0.86, 72:1.00, 84:0.93, 96:0.89, 108:1.00, 120:1.00, 132:1.00, 144:1.00, 156:1.00, 168:1.00, 180:0.73, 192:1.00, 204:1.00, 216:1.00, 228:0.33, 240:1.00, 252:0.00, 264:0.00, 276:0.00, 288:0.00, 300:0.00, 312:0.00, 324:0.00, 336:0.00, 348:0.00}
#                                                           ,self.strSexFemale:{12:0.41, 24:0.85, 36:0.88, 48:0.96, 60:0.93, 72:0.92, 84:1.00, 96:1.00, 108:1.00, 120:1.00, 132:1.00, 144:1.00, 156:0.94, 168:1.00, 180:1.00, 192:0.81, 204:1.00, 216:1.00, 228:1.00, 240:0.50, 252:1.00, 264:1.00, 276:1.00, 288:1.00, 300:1.00, 312:1.00, 324:1.00, 336:1.00, 348:0.00}}

                ''' CAPTIVE Data altered to have at least 1% mort at everay age  '''
#                 self.Arg_Survival_Natural_No_Senescence = {self.strSexMale:{  12:0.47, 24:0.88, 36:0.87, 48:0.92, 60:0.86, 72:0.99, 84:0.93, 96:0.89, 108:0.99, 120:0.99, 132:0.99, 144:0.99, 156:0.99, 168:0.99, 180:0.73, 192:0.99, 204:0.99, 216:0.99, 228:0.33, 240:0.99, 252:0.00, 264:0.00, 276:0.00, 288:0.00, 300:0.00, 312:0.00, 324:0.00, 336:0.00, 348:0.00}
#                                                           ,self.strSexFemale:{12:0.41, 24:0.85, 36:0.88, 48:0.96, 60:0.93, 72:0.92, 84:0.99, 96:0.99, 108:0.99, 120:0.99, 132:0.99, 144:0.99, 156:0.94, 168:0.99, 180:0.99, 192:0.81, 204:0.99, 216:0.99, 228:0.99, 240:0.50, 252:0.99, 264:0.99, 276:0.99, 288:0.99, 300:0.99, 312:0.99, 324:0.99, 336:0.99, 348:0.00}}
                self.Arg_Survival_Natural_No_Senescence = {self.strSexMale:{   12: 0.47, 24: 0.88, 36: 0.87, 48: 0.92, 60: 0.86, 72: 0.90, 84: 0.93, 96: 0.89, 108: 0.90, 120: 0.90, 132: 0.90, 144: 0.90, 156: 0.90, 168: 0.90, 180: 0.73, 192: 0.90, 204: 0.90, 216: 0.90, 228: 0.33, 240: 0.90, 252: 0.10, 264: 0.10, 276: 0.10, 288: 0.10, 300: 0.10, 312: 0.10, 324: 0.10, 336: 0.10, 348: 0.10}
                                                           ,self.strSexFemale:{12: 0.41, 24: 0.85, 36: 0.88, 48: 0.96, 60: 0.93, 72: 0.92, 84: 0.90, 96: 0.90, 108: 0.90, 120: 0.90, 132: 0.90, 144: 0.90, 156: 0.94, 168: 0.90, 180: 0.90, 192: 0.81, 204: 0.90, 216: 0.90, 228: 0.90, 240: 0.50, 252: 0.90, 264: 0.90, 276: 0.90, 288: 0.90, 300: 0.90, 312: 0.90, 324: 0.90, 336: 0.90, 348: 0.90}}

                
                self.Arg_Allow_UnNatural_Mortality = False                
                self.Arg_Mortality_Application_Specs__UnNat = {globalsSS.MortalityApplication.static_str_Mating_Mortlity_Starts__UnNat:{self.strSexMale: 59, self.strSexFemale: 59}, globalsSS.MortalityApplication.static_str_Mortality_Application_Model__UnNat:{self.strSexMale: 3, self.strSexFemale: 3}, globalsSS.MortalityApplication.static_str_Mortality_Scaling_Total__UnNat:{self.strSexMale: 250, self.strSexFemale: 250}} #dict_Mortality_Application_Specs_By_Sex__UnNATURAL     
                self.Arg_Survival_UnNatural = {self.strSexMale:{  12:0.47, 24:0.88, 36:0.87, 48:0.92, 60:0.86, 72:1.00, 84:0.93, 96:0.89, 108:1.00, 120:1.00, 132:1.00, 144:1.00, 156:1.00, 168:1.00, 180:0.73, 192:1.00, 204:1.00, 216:1.00, 228:0.33, 240:1.00, 252:0.00, 264:0.00, 276:0.00, 288:0.00, 300:0.00, 312:0.00, 324:0.00, 336:0.00, 348:1.00}
                                              ,self.strSexFemale:{12:0.41, 24:0.85, 36:0.88, 48:0.96, 60:0.93, 72:0.92, 84:1.00, 96:1.00, 108:1.00, 120:1.00, 132:1.00, 144:1.00, 156:0.94, 168:1.00, 180:1.00, 192:0.81, 204:1.00, 216:1.00, 228:1.00, 240:0.50, 252:1.00, 264:1.00, 276:1.00, 288:1.00, 300:1.00, 312:1.00, 324:1.00, 336:1.00, 348:1.00}}
                
                self.arg_int_Sample_Pop_When_Mating_Count_Divisible_By = 3


                
                return True

            def method_Simulation_Standard_Model_Arguments_GAMO_V1(self):

                '''
                LIFE HIST DATA - Using FEMALE Ages only
                 Simple Overlapping Generations Model 1
                    >> Life History Params
                    Maximum age              : 4
                    Maximal mating age       : 3
                    Minimal mating age (m)   : 1
                    Minimal mating age (fm)  : 1
                    Litter sex ratio (fm:m)  : 1:1
                    Litter size(fm)          : 1
                    Gestation          (G)   : 6 months
                    Reproductive Cycle (R)   : 1 months
                    >> Survival Params
                    Natural survival         : 0.85 Age independent
                    NOTE: For Nat Survival Prob Dist #Max Age must be 1.0 (100% Survival) for UnNatural mortality to work.  These animals will all die at mating anyway. 
                    Fishing survival         : 0.95 Age independent
                    >> AgeNe Params
                    bx(fm)                   : 0.33 (1 offspring every 3 years = 1/3 = 0.33)
                    sx(fm)                   : Age independent - see natural mortality distribution
                    >> Genetic Params
                    Genetic data source      : Simulated 
                    #Loci                    : 20 (Average of 10 alleles per locus)
                    Allele Freqs             : Calculated (Maximal diversity or Random Drichlet)


                    #SSOG OVERLAPPING GENS - Mating in Aug (8), Gestation 6 months (Feb,2), Resting 1 months (Mar, 3)
                '''

                self.str_Scenario_Code_A = 'L'
                self.Arg_Pop_Replicates = 1
                self.list_Scenario_Code_B = ['00']
                self.list_Pop_Sizes = [1000]
                self.list_Scenario_Code_CD = ['A1']
        
                self.Arg_BurnIn_Matings = 27
                self.Arg_Evolution_Years = 8
                self.Arg_Evolution_Months = 8
                self.Arg_int_Mating_Calender_Month = 8
                
                '''
                ------------------
                Allele Freq Scheme
                0 - Equal starting allele frequencies - MAXIMAL DIVERSITY (MAF)
                1 - Randomly generated allele frequencies - RANDOM DRICHLET DIVERSITY (DAF)
                ------------------
                '''
                self.Arg_bool_Obtain_Allele_Freqs_From_File = False
                self.Arg_int_Allele_Freq_Scheme = 0
                
                self.Arg_Num_Loci = 20
                self.Arg_int_Alleles_Per_Locus = 10
                
                self.Arg_bool_Allow_Mutation = True
                
                #self.Arg_Pop_Replicates = 1
                #self.Arg_Pop_Size = 1000
                self.Arg_Mating_Scheme = 21
                self.Arg_Mating_Scheme_Polygamy_Num_Mates = 2
                self.Arg_Max_Age = 20
                self.Arg_Max_Mating_Age = 20
                self.Arg_Min_Mating_Age = 7 #Same as waples Age at Maturity
                
                self.Arg_Num_Offspring_Per_Mate = 2
                self.Arg_list_Offspring_Production_Parms = [self.Arg_Num_Offspring_Per_Mate] 
                #self.Arg_Min_Num_Offspring_Per_Mate = 1
                #self.Arg_Max_Num_Offspring_Per_Mate = 3
                
                self.Arg_int_Offspring_Sex_Scheme = 0 #0 - probability-driven male sex proportion, 1 - Forced exactly even sex ratio
                
                self.Arg_Parturition_Month = 1
                self.Arg_Gestation_Length_In_Months = 5
                self.Arg_Reproductive_Rest_Length_In_Months = 1
                
                self.Arg_Allow_Senescence = False

                self.Arg_Mortality_Application_Specs__Nat = {globalsSS.MortalityApplication.static_str_Mating_Mortlity_Starts__Nat:{self.strSexMale: 1, self.strSexFemale: 1}, globalsSS.MortalityApplication.static_str_Mortality_Application_Model__Nat:{self.strSexMale: 3, self.strSexFemale: 3}, globalsSS.MortalityApplication.static_str_Mortality_Scaling_Total__Nat:{self.strSexMale: 1, self.strSexFemale: 1}}  #dict_Mortality_Application_Specs_By_Sex__NATURAL                              
                
                ''' Two alternative Natural Survival Distributions dependeing on if Senescene is allowed '''
                self.Arg_Survival_Natural_No_Senescence = {self.strSexMale:{  12:0.1, 24:0.5, 36:0.82, 48:0.82, 60:0.82, 72:0.82, 84:0.82, 96:0.82, 108:0.82, 120:0.82, 132:0.82, 144:0.82, 156:0.82, 168:0.82, 180:0.82, 192:0.82, 204:0.82, 216:0.82, 228:0.82, 240:0.82, 252:0.00}
                                                          ,self.strSexFemale:{12:0.1, 24:0.5, 36:0.82, 48:0.82, 60:0.82, 72:0.82, 84:0.82, 96:0.82, 108:0.82, 120:0.82, 132:0.82, 144:0.82, 156:0.82, 168:0.82, 180:0.82, 192:0.82, 204:0.82, 216:0.82, 228:0.82, 240:0.82, 252:0.00}}
 
                self.Arg_Survival_Natural_Senescence =    {self.strSexMale:{  12:0.1, 24:0.5, 36:0.82, 48:0.82, 60:0.82, 72:0.82, 84:0.82, 96:0.82, 108:0.82, 120:0.82, 132:0.82, 144:0.82, 156:0.82, 168:0.82, 180:0.82, 192:0.82, 204:0.82, 216:0.82, 228:0.82, 240:0.82, 252:0.00}
                                                          ,self.strSexFemale:{12:0.1, 24:0.5, 36:0.82, 48:0.82, 60:0.82, 72:0.82, 84:0.82, 96:0.82, 108:0.82, 120:0.82, 132:0.82, 144:0.82, 156:0.82, 168:0.82, 180:0.82, 192:0.82, 204:0.82, 216:0.82, 228:0.82, 240:0.82, 252:0.00}}

#                 self.Arg_Survival_Natural_No_Senescence = {self.strSexMale:{  12:0.1, 24:0.5, 36:0.82, 48:0.82, 60:0.82, 72:0.82, 84:0.82, 96:0.82, 108:0.82, 120:0.82, 132:0.82, 144:0.82, 156:0.82, 168:0.82, 180:0.82, 192:0.82, 204:0.82, 216:0.82, 228:0.82, 240:0.82, 252:0.00, 264:0.00}
#                                                           ,self.strSexFemale:{12:0.1, 24:0.5, 36:0.82, 48:0.82, 60:0.82, 72:0.82, 84:0.82, 96:0.82, 108:0.82, 120:0.82, 132:0.82, 144:0.82, 156:0.82, 168:0.82, 180:0.82, 192:0.82, 204:0.82, 216:0.82, 228:0.82, 240:0.82, 252:0.00, 264:0.00}}
# 
#                 self.Arg_Survival_Natural_Senescence =    {self.strSexMale:{  12:0.1, 24:0.5, 36:0.82, 48:0.82, 60:0.82, 72:0.82, 84:0.82, 96:0.82, 108:0.82, 120:0.82, 132:0.82, 144:0.82, 156:0.82, 168:0.82, 180:0.82, 192:0.82, 204:0.82, 216:0.82, 228:0.82, 240:0.82, 252:0.00, 264:0.00}
#                                                           ,self.strSexFemale:{12:0.1, 24:0.5, 36:0.82, 48:0.82, 60:0.82, 72:0.82, 84:0.82, 96:0.82, 108:0.82, 120:0.82, 132:0.82, 144:0.82, 156:0.82, 168:0.82, 180:0.82, 192:0.82, 204:0.82, 216:0.82, 228:0.82, 240:0.82, 252:0.00, 264:0.00}}

                self.Arg_Allow_UnNatural_Mortality = False                
                self.Arg_Mortality_Application_Specs__UnNat = {globalsSS.MortalityApplication.static_str_Mating_Mortlity_Starts__UnNat:{self.strSexMale: 59, self.strSexFemale: 59}, globalsSS.MortalityApplication.static_str_Mortality_Application_Model__UnNat:{self.strSexMale: 3, self.strSexFemale: 3}, globalsSS.MortalityApplication.static_str_Mortality_Scaling_Total__UnNat:{self.strSexMale: 250, self.strSexFemale: 250}} #dict_Mortality_Application_Specs_By_Sex__UnNATURAL     
                self.Arg_Survival_UnNatural =             {self.strSexMale:{  12:0.1, 24:0.5, 36:0.82, 48:0.82, 60:0.82, 72:0.82, 84:0.82, 96:0.82, 108:0.82, 120:0.82, 132:0.82, 144:0.82, 156:0.82, 168:0.82, 180:0.82, 192:0.82, 204:0.82, 216:0.82, 228:0.82, 240:0.82, 252:0.00, 264:0.00}
                                                          ,self.strSexFemale:{12:0.1, 24:0.5, 36:0.82, 48:0.82, 60:0.82, 72:0.82, 84:0.82, 96:0.82, 108:0.82, 120:0.82, 132:0.82, 144:0.82, 156:0.82, 168:0.82, 180:0.82, 192:0.82, 204:0.82, 216:0.82, 228:0.82, 240:0.82, 252:0.00, 264:0.00}}
                
                self.arg_int_Sample_Pop_When_Mating_Count_Divisible_By = 4
                        
                return True
            
                                 
            def method_Simulation_Single_Run_Parameters_Initialization(self):
                #------------------ Shark Sim SINGLE RUN parameters --------------------------------
        
        
                #EXAMPLE PARAMETERS:
                #------------- Simplest & Smallest Ovelapping Gen Population [Generation length: 1] -----------------------<
                #popnSize            = 10    # population size.
                #maxAge              = 3     # maximum age. individuals with age > maxAge will die.
                #minMatingAge        = 1     # minimal mating age.
                #maxMatingAge        = 2     # maximal mating age.
                #meanvarnumOffspring = 2     # mean number of offspring per individual
                #gen                 = 5     # generations to simulate
                #------------- Simplest & Smallest Discrete Gen Population [Generation length: 1] -----------------------<
                #popnSize            =20    # population size.
                #maxAge              =2     # maximum age. individuals with age > maxAge will die.
                #minMatingAge        =1     # minimal mating age.
                #maxMatingAge        =1     # maximal mating age.
                #meanvarnumOffspring =1     # mean number of offspring per individual
                #gen                 =6     # generations to simulate
                #---------------------------------------------------------------

                #WORKING PARAMETERS:        
                # ----------------- Define mating scheme --------------------------------

                self.intMatingSchemeType = globalsSS.MatingSchemeType.static_WF_Diploid_Sexual_Random_Mating
                self.listMatingParentSelectionScheme = []
                # WF_Diploid_Sexual_Random_Mating = 0 - Standard Wright-Fisher diploid sexual random mating (includes a probability of 1/N hermaaphroditic matings)
                #self.intMatingSchemeType    = globalsSS.MatingSchemeType.static_Diploid_Dioecious_Random_Mating
                # Diploid_Dioecious_Random_Mating = 1 - Distinct sexes (dioecious). Random mating with replacement where one parent may be randomly picked more than once to be a parent
                #self.intMatingSchemeType    = globalsSS.MatingSchemeType.static_Diploid_Monecious_Random_Mating
                # Diploid_Monecious_Random_Mating = 2 - NO Distinct sexes (monecious). Random mating with replacement where one parent may be randomly picked more than once to be a parent
                #self.intMatingSchemeType    = globalsSS.MatingSchemeType.static_Diploid_Polygamous_Random_Mating
                # Diploid_Polygamous_Random_Mating = 3 - Distinct sexes (diecious). Polyanderous Random mating with replacement where one parent may be randomly picked more than once to be a parent
                #MUST SPECIFY POLYGAMOUS MATE SEX AND NUM OF MATES
                
                self.simupopPolygamousSex = sim.FEMALE
                self.intPolygamousMateNumber = 2

                # -------------------------- Define population parameters
                self.popnSize                = 40    # population size.
        
                # -------------------------- Define timespan
                self.gen                     = 4     # generations to simulate - NEEDS TO BE A MULTIPLE OF THE MAX AGE OR OFFSPRING MAY NOT 
        
                # -------------------------- Define life history parameters
                self.intPopulationInitialAges = globalsSS.InitialAgeDistribution.static_EvenAgeAndNumberSpreadAcrossLifeStages  
                self.floatSexRatioOfMales = 0.5   # Proportion of Males in population
                self.maxAge                  = 4    # maximum age. individuals with age >= maxAge will die.
                self.maxMatingAge            = 2     # maximal mating age (mating cannot occur >= to this age).
                self.minMatingAge            = 1     # minimal mating age. (mating CAN occur >= to this age)
                
                self.intMinNumOffspring      = 1     # min number of offspring per individual
                self.meanvarnumOffspring     = 1     # mean number of offspring per individual
                self.intMaxNumOffspring      = 3     # max number of offspring per individual
                '''
                DISCRETE Generations Life History Example:

                 Maximum age (truly Max Age-0.1)     : 3
                 Maximal mating age                  : 2
                 Minimal mating age                  : 1
                 

                 Sub-adult               - L0: age <  1
                 Reproductive adult      - L1: age >= 1 and age =< 1.9       [age < maxMatingAge]
                 Post-reproductive adult - L2: age >= 2 and age =< 2.9       [maxMatingAge < age < maxAge]
                 Mort!                   - L3: age >= 3                      [age > maxAge] DIED! So should always be Zero

                 Generations cannot overlap as only individuals age 1 can reproduce as die subsequnetly
                '''
                
                '''
                Overlapping Generations Life History Example:

                 Population size                     : 30
                 Maximum age (truly Max Age-0.1)     : 4
                 Maximal mating age                  : 3
                 Minimal mating age                  : 1
                 

                 Sub-adult               - L0: age <  1
                 Reproductive adult      - L1: age >= 1 and age =< 2.9       [age < maxMatingAge]
                 Post-reproductive adult - L2: age >= 3 and age =< 3.9       [maxMatingAge < age < maxAge]
                 Mort!                   - L3: age >= 4                      [age > maxAge] DIED! So should always be Zero

                 Generations are overlapping as mating can occur between individuals of ages 1-2
                '''

                self.listOffspringNumberParameters=[1]
                #self.listOffspringNumberParameters=[sim.GEOMETRIC_DISTRIBUTION, 0.99]
                    #(GEOMETRIC_DISTRIBUTION, p) EG [sim.GEOMETRIC_DISTRIBUTION, 0.9] gives a mean of 1.1 and a variance of 0.12
                    #(POISSON_DISTRIBUTION, p), p > 0 EG [sim.POISSON_DISTRIBUTION, 1]
                    #(BINOMIAL_DISTRIBUTION, p, N), 0 < p <=1, N > 0
                    #(UNIFORM_DISTRIBUTION, a, b), 0 <= a <= b.  EG [sim.UNIFORM_DISTRIBUTION, 1, 2]
        
                # -------------------------- Define Loci parameters
                self.nLoci                   = 8    # Number of loci
                self.nAllelesPerLoci         = 12+1   # Max Number of alleles per loci <-- DEPENDENT on AllelE freqencies specified.   #we have to increment all alleles by 1, as SimuPop counts 0 as a valid allele
                # List of allele frequencies ** NOTE: Number of frequencies must equal number of loci AND total freqs must = 1 **
                #CODE HAS CHANGED. THIS IS PROB THE Alele_Per_LOcus_Distribution --> self.intAlleleFrequencyScheme   = 0     # Defined allel freq distrition scheme used in run. 
                    #0 - Auto-calculated, even frequencies accross all loci. Frequency distribution not required. 
                    #1 - Allele frequency distribution provided in a list for each and every loci (listAlleleFreqs)
                    #2 - Allele frequency distribution provided in a single list item to applay to ALL_AVAIL loci (listAlleleFreqs) 
                #self.listAlleleFreqs=[0.25, 0.25, 0.2, 0.15, 0.05, 0.05, 0.02, 0.01, 0.01, 0.005, 0.005]
                #self.listAlleleFreqs=[[0.2, 0.8]]
                #listAlleleFreqs=[]
                #self.listAlleleFreqs=[ [0.2, 0.8]  #Allele freq for Loci-1
                #                 ,[0.6, 0.4]  #Allele freq for Loci-2 etc
                #                ]
                #self.listAlleleFreqs=[ [0.194, 0.111, 0.056, 0.333, 0.167, 0.083, 0.028, 0.028]                              #COB-4-316-005F
                #                 ,[0.026, 0.158, 0.079, 0.184, 0.184, 0.132, 0.158, 0.053, 0.026]                       #COB-4-165-006F
                #                 ,[0.065, 0.500, 0.174, 0.174, 0.022, 0.065]                                            #COB-3-252-011N
                #                 ,[0.023, 0.429, 0.238, 0.262, 0.024, 0.024]                                            #COB-3-218-014N
                #                 ,[0.021, 0.174, 0.391, 0.087, 0.022, 0.109, 0.022, 0.022, 0.065, 0.043, 0.022, 0.022]  #COB-2-190-024V
                #                 ,[0.042, 0.021, 0.479, 0.292, 0.104, 0.062]                                            #COB-2-214-040V
                #                 ,[0.023, 0.068, 0.091, 0.114, 0.045, 0.273, 0.023, 0.295, 0.068]                       #COB-2-128-042P
                #                 ,[0.040, 0.042, 0.104, 0.104, 0.042, 0.188, 0.146, 0.188, 0.104, 0.042]                #COB-2-236-048P
                #                ]
                
                self.boolReportDemographicNE_Ne = True
                
                self.boolReportLDNe = True
                
                for i in range(0 in self.nLoci):
                    self.listLociToReportNE.append(i)
                
                self.boolReportTemporalFS_P1_Ne = True
                
                self.intMatingCalenderMonth = 11
                
                self.intGestationLengthInMonths = 14
                
                self.intGestationLengthInMonths = 10
                
                self.intTotalMonthsToSimulate = 36
                
                self.boolSuppressBurnInOutput = False

                # -------------------------- Define Run parameters
                self.intReplicates = 1
              
                pass

            def method_Simulation_Run_Obtain_Allele_Frequencies_From_ALL_ALLELE_FREQUENCIES_File(self, str_Input_File_Path, str_Input_File_Name):
                
                bool_Success = False
                
                self.listAlleleNames_Entire = []
                self.listAlleleNames_EntireNested = []
                self.listAlleleCounts_Entire = []
                self.listAlleleFreqs_Entire = []

                str_Input_Path_And_FileName = os__path.join(str_Input_File_Path, str_Input_File_Name)
                
                ''' Check if file exists '''
                with FileHandler() as obj_FileOp:
                    bool_Success = obj_FileOp.fileExists(str_Input_Path_And_FileName)
                    if not bool_Success:
                        return bool_Success
                    pass
                pass
                
                ''' Get the locus number and the allele frequencies from the file '''
                with SSInputHandler() as objSSInputOperation:
                    #dictLocus_AlleleName_AlleleFreqs = {} #AutoVivificationHandler()
                    bool_Success, intLocusNumber, dictLocus_AlleleName_AlleleFreqs = objSSInputOperation.method_ImportAlleleFrequencies_FromARLEQUIN_AllAlleleFreqs_File(str_Input_Path_And_FileName)
                    if not bool_Success:
                        return bool_Success
                    pass
                pass
            
                self.odictAlleleFreqsAtSimInitialization = dictLocus_AlleleName_AlleleFreqs 
                dictAlleleName_AlleleFreqs = {}
                dictLocus_AlleleFreqs = AutoVivificationHandler()
                #listAlleleNames_Working = []
                #listAlleleFreqs_Working = []
                #Convert dict to list
                #intTotalLoci = len(dictLocus_AlleleName_AlleleFreqs)
                intTotalLoci = intLocusNumber
                for key1 in range(0, intTotalLoci+1):
                    #DEBUG_ON
                    #if i == 18:
                    #    pass
                    #DEBUG_OFF
                    #key1 = str(i)
                    if key1 in dictLocus_AlleleName_AlleleFreqs:
                        dictAlleleName_AlleleFreqs = dictLocus_AlleleName_AlleleFreqs[key1]
                        listAlleleNames_Working = []
                        listAlleleCounts_Working = []
                        listAlleleFreqs_Working = []
                        for key2, value2 in dictAlleleName_AlleleFreqs.items():
                            #{'Locus_Name': strLocusName, 'Allele_Name': strAlleleName, 'Allele_Freq': floatAlleleFreq}}
                            str_AlleleName = value2['Allele_Name']
                            listAlleleNames_Working.append(str_AlleleName)
                            floatAlleleFreq = value2['Allele_Freq']
                            listAlleleFreqs_Working.append(floatAlleleFreq)
                            listAlleleCounts_Working.append(key2)
                        #All allele freqs have been recovered for this locus, now..
                        
                        #Check if allele freqs add up to exactly 1 and adjust the most common allele by the difference
                        #First, work out how much the allele freqs imported vary from 1
                        intTotalAlleles = len(listAlleleFreqs_Working)
                        #floatAlleleFreq = 1 / intTotalAlleles
                        floatAlleleFreqLeftover = 1-(sum(listAlleleFreqs_Working))
                        #Second, select the highest allele frequency in the list for this locus
                        floatListMaxValue = max(listAlleleFreqs_Working)
                        floatListMaxValueIndex = listAlleleFreqs_Working.index(floatListMaxValue)
                        #Third, add the leftover to the highest frq value
                        floatNewAlleleFreq = floatListMaxValue + floatAlleleFreqLeftover
                        #Fourth, update the list with the new value
                        listAlleleFreqs_Working[floatListMaxValueIndex] = floatNewAlleleFreq
                        #Finally, append this list of allele frequencies to the master list of allele frequencies    
                        self.listAlleleFreqs.append(listAlleleFreqs_Working)
                        self.listAlleleNames_EntireNested.append(listAlleleNames_Working)
                        self.listAlleleNames_Entire.extend(listAlleleNames_Working)
                        self.listAlleleCounts_Entire.extend(listAlleleCounts_Working)
                        self.listAlleleFreqs_Entire.extend(listAlleleFreqs_Working)
                    pass
                pass
            
                self.nLoci = intTotalLoci
                
                return True
            
            def method_Simulation_Run_Obtain_Allele_Frequencies_From_GENEPOP_File(self, str_Input_File_Path, str_Input_File_Name):
                
                bool_Success = False
                str_Message = ''
                
                self.listAlleleNames_Entire = []
                self.listAlleleNames_EntireNested = []
                self.listAlleleCounts_Entire = []
                self.listAlleleFreqs_Entire = []

                str_Input_Path_And_FileName = os__path.join(str_Input_File_Path, str_Input_File_Name)
                
                ''' Check if file exists '''
                with FileHandler() as obj_FileOp:
                    bool_Success = obj_FileOp.fileExists(str_Input_Path_And_FileName)
                    if not bool_Success:
                        return bool_Success
                    pass
                pass
                
                ''' Get the locus number and the allele frequencies from the file '''
                with SSInputHandler() as objSSInputOperation:
                    #dictLocus_AlleleName_AlleleFreqs = {} #AutoVivificationHandler()
                    bool_Get_Locus_Number_Only = False
                    bool_Success, intLocusNumber, odictLocus_AlleleName_AlleleFreqs, str_Message = objSSInputOperation.method_ImportAlleleFrequencies_From_GENEPOP_File(str_Input_Path_And_FileName, bool_Get_Locus_Number_Only)
                    if not bool_Success:
                        return bool_Success, str_Message
                    pass
                pass
            
                self.odictAlleleFreqsAtSimInitialization = odictLocus_AlleleName_AlleleFreqs 
                dictAlleleName_AlleleFreqs = {}
                #dictLocus_AlleleFreqs = AutoVivificationHandler()
                #listAlleleNames_Working = []
                #listAlleleFreqs_Working = []
                #Convert dict to list
                #intTotalLoci = len(dictLocus_AlleleName_AlleleFreqs)
                intTotalLoci = intLocusNumber
                for key1 in range(0, intTotalLoci+1):
                    #DEBUG_ON
                    #if i == 18:
                    #    pass
                    #DEBUG_OFF
                    #key1 = str(i)
                    if key1 in odictLocus_AlleleName_AlleleFreqs:
                        dictAlleleName_AlleleFreqs = odictLocus_AlleleName_AlleleFreqs[key1]
                        listAlleleNames_Working = []
                        listAlleleCounts_Working = []
                        listAlleleFreqs_Working = []
                        for key2, value2 in dictAlleleName_AlleleFreqs.items():
                            #{'Locus_Name': strLocusName, 'Allele_Name': strAlleleName, 'Allele_Freq': floatAlleleFreq}}
                            str_AlleleName = value2['Allele_Name']
                            listAlleleNames_Working.append(str_AlleleName)
                            floatAlleleFreq = value2['Allele_Freq']
                            listAlleleFreqs_Working.append(floatAlleleFreq)
                            listAlleleCounts_Working.append(key2)
                        #All allele freqs have been recovered for this locus, now..
                        
                        #Check if allele freqs add up to exactly 1 and adjust the most common allele by the difference
                        #First, work out how much the allele freqs imported vary from 1
                        intTotalAlleles = len(listAlleleFreqs_Working)
                        #floatAlleleFreq = 1 / intTotalAlleles
                        floatAlleleFreqLeftover = 1-(sum(listAlleleFreqs_Working))
                        #Second, select the highest allele frequency in the list for this locus
                        floatListMaxValue = max(listAlleleFreqs_Working)
                        floatListMaxValueIndex = listAlleleFreqs_Working.index(floatListMaxValue)
                        #Third, add the leftover to the highest frq value
                        floatNewAlleleFreq = floatListMaxValue + floatAlleleFreqLeftover
                        #Fourth, update the list with the new value
                        listAlleleFreqs_Working[floatListMaxValueIndex] = floatNewAlleleFreq
                        #Finally, append this list of allele frequencies to the master list of allele frequencies    
                        self.listAlleleFreqs.append(listAlleleFreqs_Working)
                        self.listAlleleNames_EntireNested.append(listAlleleNames_Working)
                        self.listAlleleNames_Entire.extend(listAlleleNames_Working)
                        self.listAlleleCounts_Entire.extend(listAlleleCounts_Working)
                        self.listAlleleFreqs_Entire.extend(listAlleleFreqs_Working)
                    pass
                pass
            
                self.nLoci = intTotalLoci
                
                return bool_Success, str_Message
            
            def method_Simulation_Run_Folder_File_Initialization(self):
                
                #---------< Input files
                
                # Put them here if any
                
                #---------< Output files
                str_Output_Path = self.str_Current_Run_Path__Logs
                
                # Suffix for all Simulation Run level files
                strFilenameSuffix = self.strSimDateTimeStamp + '_run'
                
                # Sim Timings Summary Log File
                strFilenameSuffix = self.strSimDateTimeStamp + '_run'
                outputFileNameTimingSummaryLogAllBatchesForDelete = str_Output_Path + '\\' + self.strFileNameProgramPrefix + 'timing_summary_log_*_run.tr_sl_ssim'
                self.outputFileNameTimingSummaryLogAllBatches = str_Output_Path + '\\' + self.strFileNameProgramPrefix + 'timing_summary_log_' + strFilenameSuffix + '.tr_sl_ssim'
                # Purge by Wildcard
                with FileHandler() as objectFileHandler:        
                    objectFileHandler.methodDelete_MultipleFilesByWildcard(outputFileNameTimingSummaryLogAllBatchesForDelete) 

                # Sim Summary Log File
                outputFileNameSummaryLogAllBatchesForDelete = str_Output_Path + '\\' + self.strFileNameProgramPrefix + 'summary_log_*_run.r_sl_ssim'
                self.outputFileNameSummaryLogAllBatches = str_Output_Path + '\\' + self.strFileNameProgramPrefix + 'summary_log_' + strFilenameSuffix + '.r_sl_ssim'
                # Purge by Wildcard
                with FileHandler() as objectFileHandler:        
                    objectFileHandler.methodDelete_MultipleFilesByWildcard(outputFileNameSummaryLogAllBatchesForDelete) 
 
                # Sim Individuals Log File for all batches
                outputFileNameIndividualLogAllBatchesForDelete = str_Output_Path + '\\' + self.strFileNameProgramPrefix + 'individ_log_full_*_run.r_il_ssim'
                self.outputFileNameIndividualLogAllBatches = str_Output_Path + '\\' + self.strFileNameProgramPrefix + 'individ_log_full_' + strFilenameSuffix + '.r_il_ssim'
                # Purge by Wildcard
                with FileHandler() as objectFileHandler:        
                    objectFileHandler.methodDelete_MultipleFilesByWildcard(outputFileNameIndividualLogAllBatchesForDelete) 

                '''
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                LEVEL Specific Reporting
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                '''
                    
                '''SIM LEVEL - SLF - Reporting - All Batches'''
                outputFileName_Sim_Level_SLF__ForDelete = str_Output_Path + '\\' + self.strFileNameProgramPrefix + 'level_specific_*_run.' + globalsSS.SS_Level_Details.static_Output_File_Suffix__Level_SIM
                self.outputFileName_Sim_Level_SLF = str_Output_Path + '\\' + self.strFileNameProgramPrefix + 'level_specific_SLF_' + strFilenameSuffix + globalsSS.SS_Level_Details.static_Output_File_Suffix__Level_SIM
                # Purge by Wildcard
                with FileHandler() as objectFileHandler:        
                    objectFileHandler.methodDelete_MultipleFilesByWildcard(outputFileName_Sim_Level_SLF__ForDelete) 

                '''BATCH LEVEL - BLF - Reporting - All Batches'''
                outputFileName_Batch_Level_BLF__ForDelete = str_Output_Path + '\\' + self.strFileNameProgramPrefix + 'level_specific_*_run' + globalsSS.SS_Level_Details.static_Output_File_Suffix__Level_BATCH
                self.outputFileName_Batch_Level_BLF = str_Output_Path + '\\' + self.strFileNameProgramPrefix + 'level_specific_BLF_' + strFilenameSuffix + globalsSS.SS_Level_Details.static_Output_File_Suffix__Level_BATCH
                # Purge by Wildcard
                with FileHandler() as objectFileHandler:        
                    objectFileHandler.methodDelete_MultipleFilesByWildcard(outputFileName_Batch_Level_BLF__ForDelete) 

                '''REPLICATE LEVEL - RLF - Reporting - All Batches'''
                outputFileName_Replicate_Level_RLF_EOR_ForDelete = str_Output_Path + '\\' + self.strFileNameProgramPrefix + 'level_specific_*_run' + globalsSS.SS_Level_Details.static_Output_File_Suffix__Level_REPLICATE_EOR
                self.outputFileName_Replicate_Level_RLF_End_Of_Replicate = str_Output_Path + '\\' + self.strFileNameProgramPrefix + 'level_specific_RLF_EOR_' + strFilenameSuffix + globalsSS.SS_Level_Details.static_Output_File_Suffix__Level_REPLICATE_EOR
                # Purge by Wildcard
                with FileHandler() as objectFileHandler:        
                    objectFileHandler.methodDelete_MultipleFilesByWildcard(outputFileName_Replicate_Level_RLF_EOR_ForDelete) 

                outputFileName_Replicate_Level_RLF__ForDelete = str_Output_Path + '\\' + self.strFileNameProgramPrefix + 'level_specific_*_run' + globalsSS.SS_Level_Details.static_Output_File_Suffix__Level_REPLICATE_PF
                self.outputFileName_Replicate_Level_RLF_Post_Fertilization = str_Output_Path + '\\' + self.strFileNameProgramPrefix + 'level_specific_RLF_PF_' + strFilenameSuffix + globalsSS.SS_Level_Details.static_Output_File_Suffix__Level_REPLICATE_PF
                # Purge by Wildcard
                with FileHandler() as objectFileHandler:        
                    objectFileHandler.methodDelete_MultipleFilesByWildcard(outputFileName_Replicate_Level_RLF__ForDelete) 

                '''VSP LEVEL - VLF - Reporting - All Batches'''
                outputFileName_VSP_Level_Age_Class_VLF_EOR__ForDelete = str_Output_Path + '\\' + self.strFileNameProgramPrefix + 'level_specific_*_run' + globalsSS.SS_Level_Details.static_Output_File_Suffix__Level_Age_Class_VSP_EOR
                self.outputFileName_VSP_Level_Age_Class_VLF_EOR = str_Output_Path + '\\' + self.strFileNameProgramPrefix + 'level_specific_VLF_' + strFilenameSuffix + globalsSS.SS_Level_Details.static_Output_File_Suffix__Level_Age_Class_VSP_EOR
                # Purge by Wildcard
                with FileHandler() as objectFileHandler:        
                    objectFileHandler.methodDelete_MultipleFilesByWildcard(outputFileName_VSP_Level_Age_Class_VLF_EOR__ForDelete) 

                outputFileName_VSP_Level_Age_Class_VLF_PF__ForDelete = str_Output_Path + '\\' + self.strFileNameProgramPrefix + 'level_specific_*_run' + globalsSS.SS_Level_Details.static_Output_File_Suffix__Level_Age_Class_VSP_PF
                self.outputFileName_VSP_Level_Age_Class_VLF_PF = str_Output_Path + '\\' + self.strFileNameProgramPrefix + 'level_specific_VLF_' + strFilenameSuffix + globalsSS.SS_Level_Details.static_Output_File_Suffix__Level_Age_Class_VSP_PF
                # Purge by Wildcard
                with FileHandler() as objectFileHandler:        
                    objectFileHandler.methodDelete_MultipleFilesByWildcard(outputFileName_VSP_Level_Age_Class_VLF_PF__ForDelete) 

                outputFileName_VSP_Level_Life_Stage_VLF_EOR__ForDelete = str_Output_Path + '\\' + self.strFileNameProgramPrefix + 'level_specific_*_run' + globalsSS.SS_Level_Details.static_Output_File_Suffix__Level_Life_Stage_VSP_EOR
                self.outputFileName_VSP_Level_Life_Stage_VLF_EOR = str_Output_Path + '\\' + self.strFileNameProgramPrefix + 'level_specific_VLF_' + strFilenameSuffix + globalsSS.SS_Level_Details.static_Output_File_Suffix__Level_Life_Stage_VSP_EOR
                # Purge by Wildcard
                with FileHandler() as objectFileHandler:        
                    objectFileHandler.methodDelete_MultipleFilesByWildcard(outputFileName_VSP_Level_Life_Stage_VLF_EOR__ForDelete) 

                outputFileName_VSP_Level_Life_Stage_VLF_PF__ForDelete = str_Output_Path + '\\' + self.strFileNameProgramPrefix + 'level_specific_*_run' + globalsSS.SS_Level_Details.static_Output_File_Suffix__Level_Life_Stage_VSP_PF
                self.outputFileName_VSP_Level_Life_Stage_VLF_PF = str_Output_Path + '\\' + self.strFileNameProgramPrefix + 'level_specific_VLF_' + strFilenameSuffix + globalsSS.SS_Level_Details.static_Output_File_Suffix__Level_Life_Stage_VSP_PF
                # Purge by Wildcard
                with FileHandler() as objectFileHandler:        
                    objectFileHandler.methodDelete_MultipleFilesByWildcard(outputFileName_VSP_Level_Life_Stage_VLF_PF__ForDelete) 

                '''
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                EXCEL Reporting
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                '''
                    
                '''EXCEK LEVEL - ELF - Reporting - All Batches'''
                outputFileName_Excel_Level_ELF__ForDelete = str_Output_Path + '\\' + self.strFileNameProgramPrefix + 'excel_level_*_run.r_excel_elf_ssim'
                self.outputFileName_Excel_Level_ELF_WO_Suffix = self.strFileNameProgramPrefix + 'excel_level_ELF_' + strFilenameSuffix
                self.outputFileName_Excel_Level_ELF = str_Output_Path + '\\' + self.outputFileName_Excel_Level_ELF_WO_Suffix + '.r_excel_elf_ssim'
                # Purge by Wildcard
                with FileHandler() as objectFileHandler:        
                    objectFileHandler.methodDelete_MultipleFilesByWildcard(outputFileName_Excel_Level_ELF__ForDelete) 

                '''
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                CUSTOM Reporting
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                '''
                    
                # Sim Individuals Log File for NE Reporting batches
                outputFileNameIndividualLogNEStatisticsRepBatchesForDelete = str_Output_Path + '\\' + self.strFileNameProgramPrefix + 'individ_log_NE_Experiments_Cumulative_*_run.r_il_ssim'
                #self.outputFileNameIndividualLogNEStatisticsRepBatches = str_Output_Path + '\\' + self.strFileNameProgramPrefix + 'individ_log_NE_Reporting_' + self.strSimDateTimeStamp + '_run.r_il_ssim'
                self.outputFileNameIndividualLogNEStatisticsRepBatches = str_Output_Path + '\\' + self.strFileNameProgramPrefix + 'individ_log_NE_Experiments_Cumulative_' + strFilenameSuffix + '.r_il_ssim'
                # Purge by Wildcard
#                 with FileHandler() as objectFileHandler:        
#                     objectFileHandler.methodDelete_MultipleFilesByWildcard(outputFileNameIndividualLogNEStatisticsRepBatchesForDelete) 
                
#                 # Sim Individuals Log File for Custom 1 Reporting batches
#                 outputFileNameCustom1ReportingExperimentDumpForDelete = str_Output_Path + '\\' + self.strFileNameProgramPrefix + 'individ_log_Cust_1_Reporting_*_run.r_il_ssim'
#                 self.outputFileNameCustom1ReportingExperimentDump = str_Output_Path + '\\' + self.strFileNameProgramPrefix + 'individ_log_Cust_1_Reporting_' + strFilenameSuffix + '.r_il_ssim'
#                 # Purge by Wildcard
#                 boolPurgeThisFile4 = False
#                 if boolPurgeThisFile4:
#                     with FileHandler() as objectFileHandler:        
#                         objectFileHandler.methodDelete_MultipleFilesByWildcard(outputFileNameCustom1ReportingExperimentDumpForDelete) 

#                 #Sim Individuals Log File for Custom 2 Reporting batches
#                 outputFileNameCustom2ReportingExperimentDumpForDelete = str_Output_Path + '\\' + self.strFileNameProgramPrefix + 'individ_log_Cust_2_Reporting_*_run.r_il_ssim'
#                 self.outputFileNameCustom2ReportingExperimentDump = str_Output_Path + '\\' + self.strFileNameProgramPrefix + 'individ_log_Cust_2_Reporting_' + strFilenameSuffix + '.r_il_ssim'
#                 # Purge by Wildcard
#                 boolPurgeThisFile4 = False
#                 if boolPurgeThisFile4:
#                     with FileHandler() as objectFileHandler:        
#                         objectFileHandler.methodDelete_MultipleFilesByWildcard(outputFileNameCustom2ReportingExperimentDumpForDelete) 

                #Sim Individuals Log File for AgeNE Reporting batches
                outputFileNameAgeNeStatisticsDumpForDelete = str_Output_Path + '\\' + self.strFileNameProgramPrefix + 'individ_log_AgeNe_Reporting_*_run.ab_il_ssim'
                #self.outputFileNameIndividualLogAgeNeStatisticsAllRepBatches = str_Output_Path + '\\' + self.strFileNameProgramPrefix + 'individ_log_NE_Reporting_' + strFilenameSuffix + '.r_il_ssim'
                self.outputFileNameIndividualLogAgeNeStatisticsAllRepBatches = str_Output_Path + '\\' + self.strFileNameProgramPrefix + 'individ_log_AgeNe_Reporting_' + strFilenameSuffix + '.r_il_ssim'
                #Purge by Wildcard
                boolPurgeThisFile4 = False
                if boolPurgeThisFile4:
                    with FileHandler() as objectFileHandler:        
                        objectFileHandler.methodDelete_MultipleFilesByWildcard(outputFileNameAgeNeStatisticsDumpForDelete) 

                #Sim Individuals Log File for AgeNE Reporting batches
                outputFileNameCustomReportingLDNE1DumpForDelete = str_Output_Path + '\\' + self.strFileNameProgramPrefix + 'Cust_Reporting_LDNE_1*_run.r_cLDNe1_ssim'
                #self.outputFileNameIndividualLogAgeNeStatisticsAllRepBatches = str_Output_Path + '\\' + self.strFileNameProgramPrefix + 'individ_log_NE_Reporting_' + strFilenameSuffix + '.r_il_ssim'
                self.outputFileNameCustomReportingLDNE1Dump = str_Output_Path + '\\' + self.strFileNameProgramPrefix + 'Cust_Reporting_LDNE_1_' + strFilenameSuffix + '.r_cLDNe1_ssim'
                #Purge by Wildcard
                boolPurgeThisFile4 = False
                if boolPurgeThisFile4:
                    with FileHandler() as objectFileHandler:        
                        objectFileHandler.methodDelete_MultipleFilesByWildcard(outputFileNameCustomReportingLDNE1DumpForDelete) 

                pass
            
                #Sim Individuals Log File for AgeNE Reporting batches
                outputFileNameCustomReportingLDNE_SelectiveLocusJackknife_L1_ForDelete = str_Output_Path + '\\' + self.strFileNameProgramPrefix + 'Cust_Reporting_LDNE_SLJ_L1*_run.r_cLDNeSLJ_L1_ssim'
                #self.outputFileNameIndividualLogAgeNeStatisticsAllRepBatches = str_Output_Path + '\\' + self.strFileNameProgramPrefix + 'individ_log_NE_Reporting_' + strFilenameSuffix + '.r_il_ssim'
                self.outputFileNameCustomReportingLDNE_SelectiveLocusJackknife_L1 = str_Output_Path + '\\' + self.strFileNameProgramPrefix + 'Cust_Reporting_LDNE_SLJ_L1_' + strFilenameSuffix + '.r_cLDNeSLJ_L1_ssim'
                #Purge by Wildcard
                boolPurgeThisFile4 = False
                if boolPurgeThisFile4:
                    with FileHandler() as objectFileHandler:        
                        objectFileHandler.methodDelete_MultipleFilesByWildcard(outputFileNameCustomReportingLDNE_SelectiveLocusJackknife_L1_ForDelete) 

                pass
 
                #Sim Individuals Log File for AgeNE Reporting batches
                outputFileNameCustomReportingLDNE_SelectiveLocusJackknife_L2_ForDelete = str_Output_Path + '\\' + self.strFileNameProgramPrefix + 'Cust_Reporting_LDNE_SLJ_L2*_run.r_cLDNeSLJ_L2_ssim'
                #self.outputFileNameIndividualLogAgeNeStatisticsAllRepBatches = str_Output_Path + '\\' + self.strFileNameProgramPrefix + 'individ_log_NE_Reporting_' + strFilenameSuffix + '.r_il_ssim'
                self.outputFileNameCustomReportingLDNE_SelectiveLocusJackknife_L2 = str_Output_Path + '\\' + self.strFileNameProgramPrefix + 'Cust_Reporting_LDNE_SLJ_L2_' + strFilenameSuffix + '.r_cLDNeSLJ_L2_ssim'
                #Purge by Wildcard
                boolPurgeThisFile4 = False
                if boolPurgeThisFile4:
                    with FileHandler() as objectFileHandler:        
                        objectFileHandler.methodDelete_MultipleFilesByWildcard(outputFileNameCustomReportingLDNE_SelectiveLocusJackknife_L2_ForDelete) 

                pass
 
                #Sim Individuals Log File for AgeNE Reporting batches
                outputFileNameCustomReportingLDNE_SelectiveLocusJackknife_L3_ForDelete = str_Output_Path + '\\' + self.strFileNameProgramPrefix + 'Cust_Reporting_LDNE_SLJ_L3*_run.r_cLDNeSLJ_L3_ssim'
                #self.outputFileNameIndividualLogAgeNeStatisticsAllRepBatches = str_Output_Path + '\\' + self.strFileNameProgramPrefix + 'individ_log_NE_Reporting_' + strFilenameSuffix + '.r_il_ssim'
                self.outputFileNameCustomReportingLDNE_SelectiveLocusJackknife_L3 = str_Output_Path + '\\' + self.strFileNameProgramPrefix + 'Cust_Reporting_LDNE_SLJ_L3_' + strFilenameSuffix + '.r_cLDNeSLJ_L3_ssim'
                #Purge by Wildcard
                boolPurgeThisFile4 = False
                if boolPurgeThisFile4:
                    with FileHandler() as objectFileHandler:        
                        objectFileHandler.methodDelete_MultipleFilesByWildcard(outputFileNameCustomReportingLDNE_SelectiveLocusJackknife_L3_ForDelete) 

                pass
 
                #Sim Individuals Log File for AgeNE Reporting batches
                outputFileNameCustomReportingLDNE_SelectiveLocusJackknife_L4_ForDelete = str_Output_Path + '\\' + self.strFileNameProgramPrefix + 'Cust_Reporting_LDNE_SLJ_L4*_run.r_cLDNeSLJ_L4_ssim'
                #self.outputFileNameIndividualLogAgeNeStatisticsAllRepBatches = str_Output_Path + '\\' + self.strFileNameProgramPrefix + 'individ_log_NE_Reporting_' + strFilenameSuffix + '.r_il_ssim'
                self.outputFileNameCustomReportingLDNE_SelectiveLocusJackknife_L4 = str_Output_Path + '\\' + self.strFileNameProgramPrefix + 'Cust_Reporting_LDNE_SLJ_L4_' + strFilenameSuffix + '.r_cLDNeSLJ_L4_ssim'
                #Purge by Wildcard
                boolPurgeThisFile4 = False
                if boolPurgeThisFile4:
                    with FileHandler() as objectFileHandler:        
                        objectFileHandler.methodDelete_MultipleFilesByWildcard(outputFileNameCustomReportingLDNE_SelectiveLocusJackknife_L4_ForDelete) 

                pass
 
            def method_Excel_Output_Initialization(self, str_Excel_Output_Path, str_Excel_Output_File_WO_Suffix):
                
                ''' Get Initial Excel Writer to write all subsequent data sheets'''

                with SSOutputHandler() as obj_Output:
                    writer_Excel = obj_Output.func_Get_Excel_Writer(str_Excel_Output_Path, str_Excel_Output_File_WO_Suffix)
                
                return writer_Excel
           
            '''
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            Batch processing
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            '''
            def method_Batch_Pre_Processing(self):
                
                '''
                Batch parameter import from config
                '''
                self.method_Batch_Current_Batch_Parameter_Import_From_Config_Files()
                
                '''
                Batch parameter initialization
                '''
                # This method receives a list of parameters required for the batch and all related replicates
                self.method_Batch_Current_Batch_Parameter_Initialization()

                '''
                Batch EXPERIMENT parameter initialization
                '''
                self.method_Batch_Current_Batch_Experiment_Parameter_Initialization()
                
                '''
                Batch Mortality Parameter Assignment
                '''
                self.method_Batch_Mortality_Parameter_Assignment()
 
                bool_Predict_N1 = False
                if bool_Predict_N1:
                    '''
                    Batch population size parameter initialization
                    '''
                    # Perform an analysis to determine the population size that produces even numbers of potential sires and dames
                    # Adjust specified population size to ensure this
                    #self.method_Batch_PreCheck_PopSize_InitialiseCurrentReplicateParameters()
                    
                    '''
                    ------------------
                    Kill Switch - boolPopulationSizeIsValid
                    ------------------
                    '''
                    
                    boolPopulationSizeIsValid = False
                    while boolPopulationSizeIsValid == False:
                        self.method_Batch_Predict_Sim_N1_Newborns_Per_Year()
                        boolPopulationSizeIsValid = self.method_Batch_Check_Population_Size_Validity(self.intAgeNe_Sim_BurnIn_N1_Newborns_PREDICTED, self.intAgeNe_Sim_N1_Newborns_PREDICTED)
    
                        '''
                        ------------------
                        Kill Switch - boolPopulationSizeIsValid
                        ------------------
                        '''                    
                        boolPopulationSizeIsValid = True
                        
                        
                        if boolPopulationSizeIsValid == False:
                            self.popnSize += 1
                        pass
                    pass
                    #DEBUG_ON
                    #raw_input('\n Population Size Validated & Adjusted - Press return to continue... \n')
                    #DEBUG_OFF
                pass

                '''
                Batch Embedded Field Filename Initialization
                '''
                self.method_Batch_Embedded_Field_Filename_Generation()
 

                '''
                Batch AgeNe parameter initialization
                '''
                #Sim parms must be assigned BEFORE Manual parms if using matching sim parms to manual parms
                self.method_Batch_AgeNe_Sim_Parameters()
                self.method_Batch_AgeNe_Manual_Parameters()


                '''
                Batch Folder & File initialization
                '''
                #Initialize Folder & Files
                self.method_Batch_Folder_File_Initialization()


                '''
                Batch reporting object & reporting property specification
                '''
                #Customised reporting
                self.method_Batch_Custom_1_Output_Reporting_Detail()
                self.method_Batch_Custom_2_Output_Reporting_Detail()
                self.method_Batch_Custom_3_Output_Reporting_Detail()
                self.method_Batch_Custom_4_Output_Reporting_Detail()
                self.method_Batch_Custom_5_Output_Reporting_Detail()
                self.method_Batch_Custom_LDNE_1_Output_Reporting_Detail()
                
                pass

            def method_Batch_Current_Batch_Parameter_Import_From_SAMPLING_STRATEGY_Config(self):
 
                obj_SSErrorOp = SSErrorOperation([])

                '''
                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                Args from Sampling Strategy config
                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                '''

                obj_Config = self.obj_Config_Sampling_Strategy
                
                if obj_Config == None:
                    str_Message_Text = 'self.obj_Config_Sampling_Strategy = None'
                    int_Stack_Trace_Level = 2
                    obj_SSErrorOp.func_Error_Handler__Caught_Exceptions(int_Stack_Trace_Level, str_Message_Text, tup_Args = (self.str_App_Arg_Output_Base_Path, self.strUniqueRunID))
                    return False  
                pass         
            
                config_parser_Config = obj_Config.config_parser_Config
            
                if config_parser_Config == None:
                    str_Message_Text = 'obj_Config_Sampling_Strategy.config_parser_Config = None'
                    int_Stack_Trace_Level = 2
                    obj_SSErrorOp.func_Error_Handler__Caught_Exceptions(int_Stack_Trace_Level, str_Message_Text, tup_Args = (self.str_App_Arg_Output_Base_Path, self.strUniqueRunID))
                    return False
                pass    
         
                        
                ''' <<<<<<< SECTION: Project_Details '''
                bool_Section_Exists = False
                ''' Specify SECTION to get '''
                str_Section = obj_Config.static_str_Section__Scenario_Project_Details
                ''' Check if SECTION exists in config file '''
                bool_Section_Exists = obj_Config.func_Check_If_Config_File_SECTION_Is_Expected(obj_Config, str_Section, True)
                '''Its NOT OK if the SECTION does not exist, however if the SECTION exists, read the option '''
                if bool_Section_Exists:
                    ''' Specify OPTION to get '''
                    str_Option = obj_Config.static_str_Option__Scenario_Project_Name
                    value_Type = ''
                    '''Its NOT OK if the OPTION does not exist'''
                    '''Read the OPTION'''
                    bool_Option_Exists = False 
                    bool_Option_Exists, value_Option = obj_Config.func_Read_OPTION(True, False, obj_Config, str_Section, str_Option, value_Type)
                    if bool_Option_Exists:
                        self.str_Sampling_Strategy_Scenario_Project_Name = value_Option
                        self.Arg_Sampling_Strategy_Scenario_Project_Name = value_Option
                    pass
                pass
                bool_Exists = bool_Section_Exists and bool_Option_Exists
                self.bool_str_Sampling_Strategy_Scenario_Project_Name__FOUND = bool_Exists            
                '''Its NOT OK if the SECTION does not exist, however if the SECTION exists, read the option '''
                if bool_Section_Exists:
                    ''' Specify OPTION to get '''
                    str_Option = obj_Config.static_str_Option__Scenario_Project_UID
                    value_Type = 0
                    '''Its NOT OK if the OPTION does not exist'''
                    '''Read the OPTION'''
                    bool_Option_Exists = False 
                    bool_Option_Exists, value_Option = obj_Config.func_Read_OPTION(True, False, obj_Config, str_Section, str_Option, value_Type)
                    if bool_Option_Exists:
                        self.int_Sampling_Strategy_Project_UID = value_Option
                        self.Arg_Sampling_Strategy_Project_UID = value_Option
                    pass
                pass
                bool_Exists = bool_Section_Exists and bool_Option_Exists
                self.bool_int_Batch_Setting_Details__Project_UID__FOUND = bool_Exists  
                '''Its NOT OK if the SECTION does not exist, however if the SECTION exists, read the option '''
                if bool_Section_Exists:
                    ''' Specify OPTION to get '''
                    str_Option = obj_Config.static_str_Option__Scenario_Project_Species_Name
                    value_Type = ''
                    '''Its NOT OK if the OPTION does not exist'''
                    '''Read the OPTION'''
                    bool_Option_Exists = False 
                    bool_Option_Exists, value_Option = obj_Config.func_Read_OPTION(True, False, obj_Config, str_Section, str_Option, value_Type)
                    if bool_Option_Exists:
                        self.str_Sampling_Strategy_Project_Species_Name = value_Option
                        self.Arg_Sampling_Strategy_Project_Species_Name = value_Option
                    pass
                pass
                bool_Exists = bool_Section_Exists and bool_Option_Exists
                self.bool_str_Sampling_Strategy_Project_Species_Name__FOUND = bool_Exists  


                ''' <<<<<<< SECTION: Scenario_Details '''
                bool_Section_Exists = False
                ''' Specify SECTION to get '''
                str_Section = obj_Config.static_str_Section__Scenario_Details
                ''' Check if SECTION exists in config file '''
                bool_Section_Exists = obj_Config.func_Check_If_Config_File_SECTION_Is_Expected(obj_Config, str_Section, True)
                '''Its NOT OK if the SECTION does not exist, however if the SECTION exists, read the option '''
                if bool_Section_Exists:
                    ''' Specify OPTION to get '''
                    str_Option = obj_Config.static_str_Option__Scenario_Name
                    value_Type = ''
                    '''Its NOT OK if the OPTION does not exist'''
                    '''Read the OPTION'''
                    bool_Option_Exists = False 
                    bool_Option_Exists, value_Option = obj_Config.func_Read_OPTION(True, False, obj_Config, str_Section, str_Option, value_Type)
                    if bool_Option_Exists:
                        self.str_Sampling_Strategy_Scenario_Name = value_Option
                        self.Arg_Sampling_Strategy_Scenario_Name = value_Option
                    pass
                pass
                bool_Exists = bool_Section_Exists and bool_Option_Exists
                self.bool_str_Scenario_Name__FOUND = bool_Exists            
                '''Its NOT OK if the SECTION does not exist, however if the SECTION exists, read the option '''
                if bool_Section_Exists:
                    ''' Specify OPTION to get '''
                    str_Option = obj_Config.static_str_Option__Scenario_UID
                    value_Type = 0
                    '''Its NOT OK if the OPTION does not exist'''
                    '''Read the OPTION'''
                    bool_Option_Exists = False 
                    bool_Option_Exists, value_Option = obj_Config.func_Read_OPTION(True, False, obj_Config, str_Section, str_Option, value_Type)
                    if bool_Option_Exists:
                        self.int_Sampling_Strategy_Scenario_UID = value_Option
                        self.Arg_Sampling_Strategy_Scenario_UID = value_Option
                    pass
                pass
                bool_Exists = bool_Section_Exists and bool_Option_Exists
                self.bool_int_Sampling_Strategy_Scenario_UID__FOUND = bool_Exists

                ''' <<<<<<< SECTION: static_str_Section__Sampling_Strategy_Run_Details '''
                bool_Section_Exists = False
                ''' Specify SECTION to get '''
                str_Section = obj_Config.static_str_Section__Sampling_Strategy_Run_Details
                ''' Check if SECTION exists in config file '''
                bool_Section_Exists = obj_Config.func_Check_If_Config_File_SECTION_Is_Expected(obj_Config, str_Section, True)
                '''Its NOT OK if the SECTION does not exist, however if the SECTION exists, read the option '''
                if bool_Section_Exists:
                    ''' Specify OPTION to get '''
                    str_Option = obj_Config.static_str_Option__Sampling_Strategy_Run_Ne_Estimator_External_Process_Version
                    value_Type = ''
                    '''Its OK if the OPTION does not exist'''
                    '''Read the OPTION'''
                    bool_Option_Exists = False 
                    bool_Option_Exists, value_Option = obj_Config.func_Read_OPTION(False, False, obj_Config, str_Section, str_Option, value_Type)
                    if bool_Option_Exists:
                        ''' Get the version of Ne Estimator to use '''
                        self.str_Sampling_Strategy_Run_Ne_Estimator_External_Process_Version = value_Option
                    else:
                        ''' Default to NeEstimator2 v2.01 '''
                        self.str_Sampling_Strategy_Run_Ne_Estimator_External_Process_Version = 'Ne2_0_1.exe'
                    pass
                pass
                bool_Exists = bool_Section_Exists and bool_Option_Exists
                self.bool_str_Sampling_Strategy_Run_Ne_Estimator_External_Process_Version__FOUND = bool_Exists            
                '''Its NOT OK if the SECTION does not exist, however if the SECTION exists, read the option '''
                if bool_Section_Exists:
                    ''' Specify OPTION to get '''
                    str_Option = obj_Config.static_str_Option__Sampling_Strategy_Run_LDNe_External_Process_Run_Time_Max_Seconds
                    value_Type = 0
                    '''Its OK if the OPTION does not exist'''
                    '''Read the OPTION'''
                    bool_Option_Exists = False 
                    bool_Option_Exists, value_Option = obj_Config.func_Read_OPTION(False, False, obj_Config, str_Section, str_Option, value_Type)
                    if bool_Option_Exists:
                        ''' Terminate zombie processes after this amount of elapsed time - 0 means that zombie processes will NOT be terminated'''
                        self.int_Sampling_Strategy_Run_LDNe_External_Process_Run_Time_Max_Seconds = value_Option
                    else:
                        ''' Default to 300 seconds (5 mins) '''
                        self.int_Sampling_Strategy_Run_LDNe_External_Process_Run_Time_Max_Seconds = 1200
                    pass
                pass
                bool_Exists = bool_Section_Exists and bool_Option_Exists
                self.bool_int_Sampling_Strategy_Run_LDNe_External_Process_Run_Time_Max_Seconds__FOUND = bool_Exists            
                '''Its NOT OK if the SECTION does not exist, however if the SECTION exists, read the option '''
                if bool_Section_Exists:
                    ''' Specify OPTION to get '''
                    str_Option = obj_Config.static_str_Option__Sampling_Strategy_Run_LDNe_External_Process_Repeat_FAILED_Max_Count
                    value_Type = 0
                    '''Its OK if the OPTION does not exist'''
                    '''Read the OPTION'''
                    bool_Option_Exists = False 
                    bool_Option_Exists, value_Option = obj_Config.func_Read_OPTION(False, False, obj_Config, str_Section, str_Option, value_Type)
                    if bool_Option_Exists:
                        ''' Retry running of FAILED processes this many times - 0 means that FAILED processes will NOT be rerun '''
                        self.int_Sampling_Strategy_Run_LDNe_External_Process_Repeat_FAILED_Max_Count = value_Option
                    else:
                        ''' Default to 100 '''
                        self.int_Sampling_Strategy_Run_LDNe_External_Process_Repeat_FAILED_Max_Count = 100
                    pass
                pass
                bool_Exists = bool_Section_Exists and bool_Option_Exists
                self.bool_Sampling_Strategy_Run_LDNe_External_Process_Repeat_FAILED_Max_Count__FOUND = bool_Exists            
                '''Its NOT OK if the SECTION does not exist, however if the SECTION exists, read the option '''
                if bool_Section_Exists:
                    ''' Specify OPTION to get '''
                    str_Option = obj_Config.static_str_Option__Sampling_Strategy_Run_LDNe_External_Process_Number_Of_Concurrent_Processes_Allowed
                    value_Type = 0
                    '''Its OK if the OPTION does not exist'''
                    '''Read the OPTION'''
                    bool_Option_Exists = False 
                    bool_Option_Exists, value_Option = obj_Config.func_Read_OPTION(False, False, obj_Config, str_Section, str_Option, value_Type)
                    if bool_Option_Exists:
                        ''' Number of concurrent external prcesses allowed to run at once '''
                        self.int_Sampling_Strategy_Run_LDNe_External_Process_Number_Of_Concurrent_Processes_Allowed = value_Option
                    else:
                        ''' Default to 20 '''
                        self.int_Sampling_Strategy_Run_LDNe_External_Process_Number_Of_Concurrent_Processes_Allowed = 20
                    pass
                pass
                bool_Exists = bool_Section_Exists and bool_Option_Exists
                self.bool_Sampling_Strategy_Run_LDNe_External_Process_Number_Of_Concurrent_Processes_Allowed__FOUND = bool_Exists            
                '''Its NOT OK if the SECTION does not exist, however if the SECTION exists, read the option '''
                if bool_Section_Exists:
                    ''' Specify OPTION to get '''
                    str_Option = obj_Config.static_str_Option__Sampling_Strategy_Run_LDNe_External_Process_Zombie_Found_Serially_Count_Allowed
                    value_Type = 0
                    '''Its OK if the OPTION does not exist'''
                    '''Read the OPTION'''
                    bool_Option_Exists = False 
                    bool_Option_Exists, value_Option = obj_Config.func_Read_OPTION(False, False, obj_Config, str_Section, str_Option, value_Type)
                    if bool_Option_Exists:
                        ''' Terminate processes that prove to be ZOMBIE this number of times SERIALLY - 0 means that ZOMBIE processes will NOT be monitored '''
                        self.int_Sampling_Strategy_Run_LDNe_External_Process_Zombie_Found_Serially_Count_Allowed = value_Option
                    else:
                        ''' Default to 30 '''
                        self.int_Sampling_Strategy_Run_LDNe_External_Process_Zombie_Found_Serially_Count_Allowed = 30
                    pass
                pass
                bool_Exists = bool_Section_Exists and bool_Option_Exists
                self.bool_Sampling_Strategy_Run_LDNe_External_Process_Zombie_Found_Serially_Count_Allowed__FOUND = bool_Exists            
                '''Its NOT OK if the SECTION does not exist, however if the SECTION exists, read the option '''
                if bool_Section_Exists:
                    ''' Specify OPTION to get '''
                    str_Option = obj_Config.static_str_Option__Sampling_Strategy_Run_LDNe_Accuracy_Line_Sampling_Plan_Dict__PLAN_CODE__REPS
                    value_Type = ''
                    '''Its OK if the OPTION does not exist'''
                    '''Read the OPTION'''
                    bool_Option_Exists = False 
                    bool_Option_Exists, value_Option = obj_Config.func_Read_OPTION(True, False, obj_Config, str_Section, str_Option, value_Type)
                    if bool_Option_Exists:
                        ''' Use this sampling plan to determine the LDNe power analysis accuracy guideline '''
                        list_Options = value_Option.split(':')
                        self.dict_Sampling_Strategy_Run_LDNe_Accuracy_Line_Sampling_Plan_Dict__PLAN_CODE__REPS = {list_Options[0]:int(list_Options[1])}
                    else:
                        ''' Default to Fully Sampled Cohorts & 1 Rep '''
                        self.dict_Sampling_Strategy_Run_LDNe_Accuracy_Line_Sampling_Plan_Dict__PLAN_CODE__REPS = {obj_Config.static_str_Value__Sampling_Strategy_Run_LDNe_Accuracy_Line_Sampling_Plan_FAC:1}
                    pass
                pass
                bool_Exists = bool_Section_Exists and bool_Option_Exists
                self.bool_dict_Sampling_Strategy_Run_LDNe_Accuracy_Line_Sampling_Plan_Dict__PLAN_CODE__REPS__FOUND = bool_Exists            
                '''Its NOT OK if the SECTION does not exist, however if the SECTION exists, read the option '''
                if bool_Section_Exists:
                    ''' Specify OPTION to get '''
                    str_Option = obj_Config.static_str_Option__Sampling_Strategy_Run_LDNe_Other_Sampling_Plans_CSV_Dict__PLAN_CODE__REPS
                    value_Type = ''
                    '''Its OK if the OPTION does not exist'''
                    '''Read the OPTION'''
                    bool_Option_Exists = False 
                    bool_Option_Exists, value_Option = obj_Config.func_Read_OPTION(False, False, obj_Config, str_Section, str_Option, value_Type)
                    if bool_Option_Exists:
                        ''' Use this sampling plan to determine the LDNe power analysis accuracy guideline '''
                        self.dict_Sampling_Strategy_Run_LDNe_Other_Sampling_Plans_CSV_Dict__PLAN_CODE__REPS = {}
                        list_Options = value_Option.split(',')
                        for str_Option in list_Options:
                            list_Option = str_Option.split(':')
                            if list_Option[0] not in self.dict_Sampling_Strategy_Run_LDNe_Other_Sampling_Plans_CSV_Dict__PLAN_CODE__REPS.keys():
                                self.dict_Sampling_Strategy_Run_LDNe_Other_Sampling_Plans_CSV_Dict__PLAN_CODE__REPS[list_Option[0]] = int(list_Option[1])
                            pass
                        pass
                    else:
                        ''' Default to nothing - no other sampling plans '''
                        self.dict_Sampling_Strategy_Run_LDNe_Other_Sampling_Plans_CSV_Dict__PLAN_CODE__REPS = {}
                    pass
                pass
                bool_Exists = bool_Section_Exists and bool_Option_Exists
                self.bool_dict_Sampling_Strategy_Run_LDNe_Other_Sampling_Plans_CSV_Dict__PLAN_CODE__REPS__FOUND = bool_Exists            

                ''' <<<<<<< SECTION: Sampling_Strategy_Details '''
                bool_Section_Exists = False
                ''' Specify SECTION to get '''
                str_Section = obj_Config.static_str_Section__Sampling_Strategy_Details
                ''' Check if SECTION exists in config file '''
                bool_Section_Exists = obj_Config.func_Check_If_Config_File_SECTION_Is_Expected(obj_Config, str_Section, True)
                '''Its NOT OK if the SECTION does not exist, however if the SECTION exists, read the option '''
                if bool_Section_Exists:
                    ''' Specify OPTION to get '''
                    str_Option = obj_Config.static_str_Option__Sampling_Strategy_Name
                    value_Type = ''
                    '''Its NOT OK if the OPTION does not exist'''
                    '''Read the OPTION'''
                    bool_Option_Exists = False 
                    bool_Option_Exists, value_Option = obj_Config.func_Read_OPTION(True, False, obj_Config, str_Section, str_Option, value_Type)
                    if bool_Option_Exists:
                        self.str_Sampling_Strategy_Name = value_Option
                        self.Arg_Sampling_Strategy_Name = value_Option
                    pass
                pass
                bool_Exists = bool_Section_Exists and bool_Option_Exists
                self.bool_str_Batch_Setting_Details__Scenario_Name__FOUND = bool_Exists            
                '''Its NOT OK if the SECTION does not exist, however if the SECTION exists, read the option '''
                if bool_Section_Exists:
                    ''' Specify OPTION to get '''
                    str_Option = obj_Config.static_str_Option__Sampling_Strategy_UID
                    value_Type = 0
                    '''Its NOT OK if the OPTION does not exist'''
                    '''Read the OPTION'''
                    bool_Option_Exists = False 
                    bool_Option_Exists, value_Option = obj_Config.func_Read_OPTION(True, False, obj_Config, str_Section, str_Option, value_Type)
                    if bool_Option_Exists:
                        self.int_Sampling_Strategy_UID = value_Option
                        self.Arg_Sampling_Strategy_UID = value_Option
                    pass
                pass
                bool_Exists = bool_Section_Exists and bool_Option_Exists
                self.bool_int_Sampling_Strategy_UID__FOUND = bool_Exists


                ''' <<<<<<< SECTION: Sample_Details '''
                bool_Section_Exists = False
                ''' Specify SECTION to get '''
                str_Section = obj_Config.static_str_Section__Sampling_Strategy_Sample_Details
                ''' Check if SECTION exists in config file '''
                bool_Section_Exists = obj_Config.func_Check_If_Config_File_SECTION_Is_Expected(obj_Config, str_Section, True)
                '''Its NOT OK if the SECTION does not exist, however if the SECTION exists, read the option '''
                if bool_Section_Exists:
                    ''' Specify OPTION to get '''
                    str_Option = obj_Config.static_str_Option__Sampling_Strategy_Sample_Range_Min
                    value_Type = 0
                    '''Its NOT OK if the OPTION does not exist'''
                    '''Read the OPTION'''
                    bool_Option_Exists = False 
                    bool_Option_Exists, value_Option = obj_Config.func_Read_OPTION(True, False, obj_Config, str_Section, str_Option, value_Type)
                    if bool_Option_Exists:
                        self.int_Sampling_Strategy_Sample_Range_Min = value_Option
                        self.Arg_Sampling_Strategy_Sample_Range_Min = value_Option
                    pass
                pass
                bool_Exists = bool_Section_Exists and bool_Option_Exists
                self.bool_int_Sampling_Strategy_Sample_Range_Min__FOUND = bool_Exists
                '''Its NOT OK if the SECTION does not exist, however if the SECTION exists, read the option '''
                if bool_Section_Exists:
                    ''' Specify OPTION to get '''
                    str_Option = obj_Config.static_str_Option__Sampling_Strategy_Sample_Range_Max
                    value_Type = 0
                    '''Its NOT OK if the OPTION does not exist'''
                    '''Read the OPTION'''
                    bool_Option_Exists = False 
                    bool_Option_Exists, value_Option = obj_Config.func_Read_OPTION(True, False, obj_Config, str_Section, str_Option, value_Type)
                    if bool_Option_Exists:
                        self.int_Sampling_Strategy_Sample_Range_Max = value_Option
                        self.Arg_Sampling_Strategy_Sample_Range_Max = value_Option
                    pass
                pass
                bool_Exists = bool_Section_Exists and bool_Option_Exists
                self.bool_int_Sampling_Strategy_Sample_Range_Max__FOUND = bool_Exists
                '''Its NOT OK if the SECTION does not exist, however if the SECTION exists, read the option '''
                if bool_Section_Exists:
                    ''' Specify OPTION to get '''
                    str_Option = obj_Config.static_str_Option__Sampling_Strategy_Sample_Range_Increment
                    value_Type = 0
                    '''Its NOT OK if the OPTION does not exist'''
                    '''Read the OPTION'''
                    bool_Option_Exists = False 
                    bool_Option_Exists, value_Option = obj_Config.func_Read_OPTION(True, False, obj_Config, str_Section, str_Option, value_Type)
                    if bool_Option_Exists:
                        self.int_Sampling_Strategy_Sample_Range_Increment = value_Option
                        self.Arg_Sampling_Strategy_Sample_Range_Increment = value_Option
                    pass
                pass
                bool_Exists = bool_Section_Exists and bool_Option_Exists
                self.bool_int_Sampling_Strategy_Sample_Range_Increment__FOUND = bool_Exists
                
                
                
                ''' <<<<<<< SECTION: Locus_Details '''
                bool_Section_Exists = False
                ''' Specify SECTION to get '''
                str_Section = obj_Config.static_str_Section__Sampling_Strategy_Locus_Details
                ''' Check if SECTION exists in config file '''
                bool_Section_Exists = obj_Config.func_Check_If_Config_File_SECTION_Is_Expected(obj_Config, str_Section, True)
                '''Its NOT OK if the SECTION does not exist, however if the SECTION exists, read the option '''
                if bool_Section_Exists:
                    ''' Specify OPTION to get '''
                    str_Option = obj_Config.static_str_Option__Sampling_Strategy_Locus_Range_Min
                    value_Type = 0
                    '''Its NOT OK if the OPTION does not exist'''
                    '''Read the OPTION'''
                    bool_Option_Exists = False 
                    bool_Option_Exists, value_Option = obj_Config.func_Read_OPTION(True, False, obj_Config, str_Section, str_Option, value_Type)
                    if bool_Option_Exists:
                        self.int_Sampling_Strategy_Locus_Range_Min = value_Option
                        self.Arg_Sampling_Strategy_Locus_Range_Min = value_Option
                    pass
                pass
                bool_Exists = bool_Section_Exists and bool_Option_Exists
                self.bool_int_Sampling_Strategy_Locus_Range_Min__FOUND = bool_Exists
                '''Its NOT OK if the SECTION does not exist, however if the SECTION exists, read the option '''
                if bool_Section_Exists:
                    ''' Specify OPTION to get '''
                    str_Option = obj_Config.static_str_Option__Sampling_Strategy_Locus_Range_Max
                    value_Type = 0
                    '''Its NOT OK if the OPTION does not exist'''
                    '''Read the OPTION'''
                    bool_Option_Exists = False 
                    bool_Option_Exists, value_Option = obj_Config.func_Read_OPTION(True, False, obj_Config, str_Section, str_Option, value_Type)
                    if bool_Option_Exists:
                        self.int_Sampling_Strategy_Locus_Range_Max = value_Option
                        self.Arg_Sampling_Strategy_Locus_Range_Max = value_Option
                    pass
                pass
                bool_Exists = bool_Section_Exists and bool_Option_Exists
                self.bool_int_Sampling_Strategy_Locus_Range_Max__FOUND = bool_Exists
                '''Its NOT OK if the SECTION does not exist, however if the SECTION exists, read the option '''
                if bool_Section_Exists:
                    ''' Specify OPTION to get '''
                    str_Option = obj_Config.static_str_Option__Sampling_Strategy_Locus_Range_Increment
                    value_Type = 0
                    '''Its NOT OK if the OPTION does not exist'''
                    '''Read the OPTION'''
                    bool_Option_Exists = False 
                    bool_Option_Exists, value_Option = obj_Config.func_Read_OPTION(True, False, obj_Config, str_Section, str_Option, value_Type)
                    if bool_Option_Exists:
                        self.int_Sampling_Strategy_Locus_Range_Increment = value_Option
                        self.Arg_Sampling_Strategy_Locus_Range_Increment = value_Option
                    pass
                pass
                bool_Exists = bool_Section_Exists and bool_Option_Exists
                self.bool_int_Sampling_Strategy_Locus_Range_Increment__FOUND = bool_Exists
                
                
                ''' <<<<<<< SECTION: LDNe_Details '''
                bool_Section_Exists = False
                ''' Specify SECTION to get '''
                str_Section = obj_Config.static_str_Section__Sampling_Strategy_LDNe_Details
                ''' Check if SECTION exists in config file '''
                bool_Section_Exists = obj_Config.func_Check_If_Config_File_SECTION_Is_Expected(obj_Config, str_Section, True)
                '''Its NOT OK if the SECTION does not exist, however if the SECTION exists, read the option '''
                if bool_Section_Exists:
                    ''' Specify OPTION to get '''
                    str_Option = obj_Config.static_str_Option__Sampling_Strategy_LDNe_FULL_Estimates__Percentage_Of_Loci_To_Keep
                    value_Type = 0.0
                    '''Its NOT OK if the OPTION does not exist'''
                    '''Read the OPTION'''
                    bool_Option_Exists = False 
                    bool_Option_Exists, value_Option = obj_Config.func_Read_OPTION(True, False, obj_Config, str_Section, str_Option, value_Type)
                    if bool_Option_Exists:
                        self.float_Sampling_EXP_2_2__LDNe_FULL_Estimates__Percentage_Of_Loci_To_Keep = value_Option
                    pass
                pass
                bool_Exists = bool_Section_Exists and bool_Option_Exists
                self.bool_float_Sampling_EXP_2_2__LDNe_FULL_Estimates__Percentage_Of_Loci_To_Keep__FOUND = bool_Exists
                '''Its NOT OK if the SECTION does not exist, however if the SECTION exists, read the option '''
                if bool_Section_Exists:
                    ''' Specify OPTION to get '''
                    str_Option = obj_Config.static_str_Option__Sampling_Strategy_LDNe_Replicates
                    value_Type = 0
                    '''Its NOT OK if the OPTION does not exist'''
                    '''Read the OPTION'''
                    bool_Option_Exists = False 
                    bool_Option_Exists, value_Option = obj_Config.func_Read_OPTION(True, False, obj_Config, str_Section, str_Option, value_Type)
                    if bool_Option_Exists:
                        self.int_Sampling_Strategy_LDNe_Replicates = value_Option
                        self.Arg_Sampling_Strategy_LDNe_Replicates = value_Option
                    pass
                pass
                bool_Exists = bool_Section_Exists and bool_Option_Exists
                self.bool_int_Sampling_Strategy_LDNe_Replicates__FOUND = bool_Exists
                '''Its NOT OK if the SECTION does not exist, however if the SECTION exists, read the option '''
                if bool_Section_Exists:
                    ''' Specify OPTION to get '''
                    str_Option = obj_Config.static_str_Option__Sampling_Strategy_LDNe_PCrit_To_Get
                    value_Type = ''
                    '''Its NOT OK if the OPTION does not exist'''
                    '''Read the OPTION'''
                    bool_Option_Exists = False 
                    bool_Option_Exists, value_Option = obj_Config.func_Read_OPTION(True, False, obj_Config, str_Section, str_Option, value_Type)
                    if bool_Option_Exists:
                        self.str_Sampling_Strategy_LDNe_PCrit_To_Get = value_Option
                        self.Arg_Sampling_Strategy_LDNe_PCrit_To_Get = value_Option

                        ''' Check if string is a NUMERIC PCrit '''
                        bool_IsNumeric = False
                        try:
                            float_Ne2_LDNe_PCrit = float(self.str_Sampling_Strategy_LDNe_PCrit_To_Get)
                            bool_IsNumeric = True
                        except ValueError:
                            bool_IsNumeric = False
                        pass
                
                        if bool_IsNumeric:                        
                            self.list_float_Arg_LDNe_PCrits_To_Get = [float_Ne2_LDNe_PCrit]
                        elif self.str_Sampling_Strategy_LDNe_PCrit_To_Get == obj_Config.static_str_Value__Sampling_Strategy_LDNe_PCrit_To_Get__NoS:
                            self.list_float_Arg_LDNe_PCrits_To_Get = [float(globalsSS.LDNe_PCrit__Float.static_float_LDNe_PCrit_NoS)]
                        pass
                    pass
                pass
                bool_Exists = bool_Section_Exists and bool_Option_Exists
                self.bool_str_Sampling_Strategy_LDNe_PCrit_To_Get__FOUND = bool_Exists
        

                ''' <<<<<<< SECTION: Sample_Proportion_Details '''
                bool_Section_Exists = False
                ''' Specify SECTION to get '''
                str_Section = obj_Config.static_str_Section__Sampling_Strategy_Sample_Proportion_Details
                ''' Check if SECTION exists in config file '''
                bool_Section_Exists = obj_Config.func_Check_If_Config_File_SECTION_Is_Expected(obj_Config, str_Section, True)
                '''Its NOT OK if the SECTION does not exist, however if the SECTION exists, read the option '''
                if bool_Section_Exists:
                    ''' Specify OPTION to get '''
                    str_Option = obj_Config.static_str_Option__Sampling_Strategy_Sample_Proportions_Source
                    value_Type = ''
                    '''Its NOT OK if the OPTION does not exist'''
                    '''Read the OPTION'''
                    bool_Option_Exists = False 
                    bool_Option_Exists, value_Option = obj_Config.func_Read_OPTION(True, False, obj_Config, str_Section, str_Option, value_Type)
                    if bool_Option_Exists:
                        self.str_Sampling_Strategy_Sample_Proportions_Source = value_Option
                        if self.str_Sampling_Strategy_Sample_Proportions_Source == obj_Config.static_str_Value__Sampling_Strategy_Sample_Proportions_Source__USER_PROPORTIONS:
                            '''
                            Phase out static_str_Value__Sampling_Strategy_Sample_Proportions_Source__USER_PROPORTIONS
                            '''                            
                            #self.bool_SAMPLING_STRATEGY_Config__User_Defined_Sampling_Proportions = True
                            #self.Arg_Sampling_Strategy_Sample_Proportions_Source  = obj_Config.static_str_Value__Sampling_Strategy_Sample_Proportions_Source__USER_PROPORTIONS
                            #self.int_Sampling_Strategy_Sample_Proportions_Source  = globalsSS.Experment_Groups.static_int_Experiment_Sampling_Strategy_v1_1__USER_PROPORTIONS
                            self.Arg_Sampling_Strategy_Sample_Proportions_Source  = obj_Config.static_str_Value__Sampling_Strategy_Sample_Proportions_Source__USER_SAMPLE_PROPORTIONS
                            self.int_Sampling_Strategy_Sample_Proportions_Source  = globalsSS.Experment_Groups.static_int_Experiment_Sampling_Strategy_v1_1__USER_SAMPLE_PROPORTIONS
                            pass
                        elif self.str_Sampling_Strategy_Sample_Proportions_Source == obj_Config.static_str_Value__Sampling_Strategy_Sample_Proportions_Source__USER_SAMPLE_NUMBERS:
                            #self.bool_SAMPLING_STRATEGY_Config__User_Defined_Sampling_Proportions = True
                            self.Arg_Sampling_Strategy_Sample_Proportions_Source  = obj_Config.static_str_Value__Sampling_Strategy_Sample_Proportions_Source__USER_SAMPLE_NUMBERS
                            self.int_Sampling_Strategy_Sample_Proportions_Source  = globalsSS.Experment_Groups.static_int_Experiment_Sampling_Strategy_v1_1__USER_SAMPLE_NUMBERS
                            pass
                        elif self.str_Sampling_Strategy_Sample_Proportions_Source == obj_Config.static_str_Value__Sampling_Strategy_Sample_Proportions_Source__USER_SAMPLE_PROPORTIONS:
                            #self.bool_SAMPLING_STRATEGY_Config__User_Defined_Sampling_Proportions = True
                            self.Arg_Sampling_Strategy_Sample_Proportions_Source  = obj_Config.static_str_Value__Sampling_Strategy_Sample_Proportions_Source__USER_SAMPLE_PROPORTIONS
                            self.int_Sampling_Strategy_Sample_Proportions_Source  = globalsSS.Experment_Groups.static_int_Experiment_Sampling_Strategy_v1_1__USER_SAMPLE_PROPORTIONS
                            pass
                        elif self.str_Sampling_Strategy_Sample_Proportions_Source == obj_Config.static_str_Value__Sampling_Strategy_Sample_Proportions_Source__USER_AGE_COHORTS:
                            #self.bool_SAMPLING_STRATEGY_Config__User_Defined_Sampling_Proportions = False
                            self.Arg_Sampling_Strategy_Sample_Proportions_Source  = obj_Config.static_str_Value__Sampling_Strategy_Sample_Proportions_Source__USER_AGE_COHORTS
                            self.int_Sampling_Strategy_Sample_Proportions_Source  = globalsSS.Experment_Groups.static_int_Experiment_Sampling_Strategy_v1_1__USER_AGE_COHORTS
                            pass
                        else:
                            str_Message_Text = 'Non-existent OPTION: ' + str_Option + ' for SECTION: ' + str_Section + ' in config_parser_Config: obj_Config_Batch_Scenario' 
                            int_Stack_Trace_Level = 2
                            obj_SSErrorOp.func_Error_Handler__Caught_Exceptions(int_Stack_Trace_Level, str_Message_Text, tup_Args = (self.str_App_Arg_Output_Base_Path, self.strUniqueRunID))
                        pass
                    pass
                pass
                bool_Exists = bool_Section_Exists and bool_Option_Exists
                self.bool_str_Sampling_Strategy_Sample_Proportions_Source__FOUND = bool_Exists                

#                ''' <<<<<<<<<< Sample_Proportions '''
#                 if self.str_Sampling_Strategy_Sample_Proportions_Source == obj_Config.static_str_Value__Sampling_Strategy_Sample_Proportions_Source__USER_PROPORTIONS:
#                     '''
#                     Phase out static_str_Value__Sampling_Strategy_Sample_Proportions_Source__USER_PROPORTIONS
#                     ''' 
#                     ''' <<<<<<< SECTION: Sample_Proportions_By_Age '''
#                     bool_Section_Exists = False
#                     ''' Specify SECTION to get '''
#                     str_Section = obj_Config.static_str_Section__Sampling_Strategy_Sample_Proportions_By_Age__Age_And_Sample_Proportion
#                     ''' Check if SECTION exists in config file '''
#                     bool_Section_Exists = obj_Config.func_Check_If_Config_File_SECTION_Is_Expected(obj_Config, str_Section, True)
#                     '''Its NOT OK if the SECTION does not exist, however if the SECTION exists, read the option '''
#                     if bool_Section_Exists:
#                         ''' Specify OPTION to get '''
#                         str_Option = str(1)
#                         value_Type = 0
#                         '''Its NOT OK if the OPTION does not exist'''
#                         '''Read the OPTION'''
#                         bool_Option_Exists = False 
#                         bool_Option_Exists, dict_Option = obj_Config.func_Read_OPTION(True, True, obj_Config, str_Section, str_Option, value_Type)
#                         if bool_Option_Exists:
#                             self.dict_Sampling_Strategy_Sample_Proportions_By_Age__Age_And_Sample_Proportion = OrderedDict([(int(key_str_Age)*12, float(value_str_Rate)) for key_str_Age, value_str_Rate in dict_Option.items()])
#                             self.Arg_dict_Sampling_Strategy_Sample_Proportions_By_Age__Age_And_Sample_Proportion = OrderedDict([(int(key_str_Age)*12, float(value_str_Rate)) for key_str_Age, value_str_Rate in dict_Option.items()])
#                         pass
#                     pass
#                     bool_Exists = bool_Section_Exists and bool_Option_Exists
#                     self.bool_dict_Sampling_Strategy_Sample_Proportions_By_Age__Age_And_Sample_Proportion__FOUND = bool_Exists                   
#                 pass
            
                ''' <<<<<<<<<< Sample_Proportions '''
                if self.str_Sampling_Strategy_Sample_Proportions_Source == obj_Config.static_str_Value__Sampling_Strategy_Sample_Proportions_Source__USER_SAMPLE_PROPORTIONS:
                    '''
                    Phase out static_str_Value__Sampling_Strategy_Sample_Proportions_Source__USER_PROPORTIONS
                    ''' 
                    ''' <<<<<<< SECTION: Sample_Proportions_By_Age '''
                    bool_Section_Exists = False
                    ''' Specify SECTION to get '''
                    str_Section = obj_Config.static_str_Section__Sampling_Strategy_Sample_Proportions_By_Age__Total_Sample_Size_By_Age_Proportion
                    ''' Check if SECTION exists in config file '''
                    bool_Section_Exists = obj_Config.func_Check_If_Config_File_SECTION_Is_Expected(obj_Config, str_Section, True)
                    '''Its NOT OK if the SECTION does not exist, however if the SECTION exists, read the option '''
                    if bool_Section_Exists:
                        ''' Specify OPTION to get '''
                        str_Option = str(1)
                        value_Type = 0
                        '''Its NOT OK if the OPTION does not exist'''
                        '''Read the OPTION'''
                        bool_Option_Exists = False 
                        bool_Option_Exists, dict_Option = obj_Config.func_Read_OPTION(True, True, obj_Config, str_Section, str_Option, value_Type)
                        if bool_Option_Exists:
                            self.dict_Sampling_Strategy_Sample_Proportions_By_Age__Total_Sample_Size_By_Age_Proportion = OrderedDict([(int(key_str_Age)*12, float(value_str_Rate)) for key_str_Age, value_str_Rate in dict_Option.items()])
                            self.Arg_dict_Sampling_Strategy_Sample_Proportions_By_Age__Total_Sample_Size_By_Age_Proportion = OrderedDict([(int(key_str_Age)*12, float(value_str_Rate)) for key_str_Age, value_str_Rate in dict_Option.items()])
                        pass
                    pass
                    bool_Exists = bool_Section_Exists and bool_Option_Exists
                    self.bool_dict_Sampling_Strategy_Sample_Proportions_By_Age__Total_Sample_Size_By_Age_Proportion__FOUND = bool_Exists                   
                pass
            
                if self.str_Sampling_Strategy_Sample_Proportions_Source == obj_Config.static_str_Value__Sampling_Strategy_Sample_Proportions_Source__USER_SAMPLE_NUMBERS:

                    ''' <<<<<<< SECTION: Sample_Proportions_By_Age '''
                    bool_Section_Exists = False
                    ''' Specify SECTION to get '''
                    str_Section = obj_Config.static_str_Section__Sampling_Strategy_Sample_Proportions_By_Age__Age_And_Sample_Number
                    ''' Check if SECTION exists in config file '''
                    bool_Section_Exists = obj_Config.func_Check_If_Config_File_SECTION_Is_Expected(obj_Config, str_Section, True)
                    '''Its NOT OK if the SECTION does not exist, however if the SECTION exists, read the option '''
                    if bool_Section_Exists:
                        ''' Specify OPTION to get '''
                        str_Option = str(1)
                        value_Type = 0
                        '''Its NOT OK if the OPTION does not exist'''
                        '''Read the OPTION'''
                        bool_Option_Exists = False 
                        bool_Option_Exists, dict_Option = obj_Config.func_Read_OPTION(True, True, obj_Config, str_Section, str_Option, value_Type)
                        if bool_Option_Exists:
                            self.dict_Sampling_Strategy_Sample_Proportions_By_Age__Age_And_Sample_Number = OrderedDict([(int(key_str_Age)*12, float(value_str_Rate)) for key_str_Age, value_str_Rate in dict_Option.items()])
                            self.Arg_dict_Sampling_Strategy_Sample_Proportions_By_Age__Age_And_Sample_Number = OrderedDict([(int(key_str_Age)*12, float(value_str_Rate)) for key_str_Age, value_str_Rate in dict_Option.items()])
                        pass
                    pass
                    bool_Exists = bool_Section_Exists and bool_Option_Exists
                    self.bool_dict_Sampling_Strategy_Sample_Proportions_By_Age__Age_And_Sample_Number__FOUND = bool_Exists                   
                pass    
            
                if self.str_Sampling_Strategy_Sample_Proportions_Source == obj_Config.static_str_Value__Sampling_Strategy_Sample_Proportions_Source__USER_SAMPLE_PROPORTIONS:

                    ''' <<<<<<< SECTION: Sample_Proportions_By_Age '''
                    bool_Section_Exists = False
                    ''' Specify SECTION to get '''
                    str_Section = obj_Config.static_str_Section__Sampling_Strategy_Sample_Proportions_By_Age__Total_Sample_Size_By_Age_Proportion
                    ''' Check if SECTION exists in config file '''
                    bool_Section_Exists = obj_Config.func_Check_If_Config_File_SECTION_Is_Expected(obj_Config, str_Section, True)
                    '''Its NOT OK if the SECTION does not exist, however if the SECTION exists, read the option '''
                    if bool_Section_Exists:
                        ''' Specify OPTION to get '''
                        str_Option = str(1)
                        value_Type = 0
                        '''Its NOT OK if the OPTION does not exist'''
                        '''Read the OPTION'''
                        bool_Option_Exists = False 
                        bool_Option_Exists, dict_Option = obj_Config.func_Read_OPTION(True, True, obj_Config, str_Section, str_Option, value_Type)
                        if bool_Option_Exists:
                            self.dict_Sampling_Strategy_Sample_Proportions_By_Age__Total_Sample_Size_By_Age_Proportion = OrderedDict([(int(key_str_Age)*12, float(value_str_Rate)) for key_str_Age, value_str_Rate in dict_Option.items()])
                            self.Arg_dict_Sampling_Strategy_Sample_Proportions_By_Age__Total_Sample_Size_By_Age_Proportion = OrderedDict([(int(key_str_Age)*12, float(value_str_Rate)) for key_str_Age, value_str_Rate in dict_Option.items()])
                        pass
                    pass
                    bool_Exists = bool_Section_Exists and bool_Option_Exists
                    self.bool_dict_Sampling_Strategy_Sample_Proportions_By_Age__Total_Sample_Size_By_Age_Proportion__FOUND = bool_Exists                   
                pass    
                #else:
                if self.str_Sampling_Strategy_Sample_Proportions_Source == obj_Config.static_str_Value__Sampling_Strategy_Sample_Proportions_Source__USER_AGE_COHORTS:
                 
                    ''' <<<<<<< SECTION: Sample_Cohorts_By_Age '''
                    bool_Section_Exists = False
                    ''' Specify SECTION to get '''
                    str_Section = obj_Config.static_str_Section__Sampling_Strategy_Sample_Proportions_By_Age__Age_And_Cohort_Proportion
                    ''' Check if SECTION exists in config file '''
                    bool_Section_Exists = obj_Config.func_Check_If_Config_File_SECTION_Is_Expected(obj_Config, str_Section, True)
                    '''Its NOT OK if the SECTION does not exist, however if the SECTION exists, read the option '''
                    if bool_Section_Exists:
                        ''' Specify OPTION to get '''
                        str_Option = str(1)
                        value_Type = 0
                        '''Its NOT OK if the OPTION does not exist'''
                        '''Read the OPTION'''
                        bool_Option_Exists = False 
                        bool_Option_Exists, dict_Option = obj_Config.func_Read_OPTION(True, True, obj_Config, str_Section, str_Option, value_Type)
                        if bool_Option_Exists:
                            #self.dict_Sampling_Strategy_Sample_Proportions_By_Age__Age_And_Cohort_Proportion = OrderedDict([((int(key_str_Age)+1)*12, float(value_str_Rate)) for key_str_Age, value_str_Rate in dict_Option.items()])
                            #self.Arg_dict_Sampling_Strategy_Sample_Proportions_By_Age__Age_And_Cohort_Proportion = OrderedDict([((int(key_str_Age)+1)*12, float(value_str_Rate)) for key_str_Age, value_str_Rate in dict_Option.items()])
                            self.dict_Sampling_Strategy_Sample_Proportions_By_Age__Age_And_Cohort_Proportion = OrderedDict([(int(key_str_Age)*12, float(value_str_Rate)) for key_str_Age, value_str_Rate in dict_Option.items()])
                            self.Arg_dict_Sampling_Strategy_Sample_Proportions_By_Age__Age_And_Cohort_Proportion = OrderedDict([(int(key_str_Age)*12, float(value_str_Rate)) for key_str_Age, value_str_Rate in dict_Option.items()])
                        pass
                    pass
                    bool_Exists = bool_Section_Exists and bool_Option_Exists
                    self.bool_dict_Sampling_Strategy_Sample_Proportions_By_Age__Age_And_Cohort_Proportion__FOUND = bool_Exists                   
                     
                pass


                     
                return True
                         
            def method_Batch_Current_Batch_Parameter_Validate_And_Convert__SAMPLING_STRATEGY_Config(self): 

                obj_Config = self.obj_Config_Sampling_Strategy 
 
                '''
                -----------------------------------------
                Validate & Convert - Args for Sampling Strategy  
                -----------------------------------------
                '''   
                int_Sampling_Strategy_1_0__Total_Experiments = (((self.Arg_Sampling_Strategy_Sample_Range_Max - self.Arg_Sampling_Strategy_Sample_Range_Min) / self.Arg_Sampling_Strategy_Sample_Range_Increment)+1) * (((self.Arg_Sampling_Strategy_Locus_Range_Max - self.Arg_Sampling_Strategy_Locus_Range_Min) / self.Arg_Sampling_Strategy_Locus_Range_Increment)+1) 

                if int_Sampling_Strategy_1_0__Total_Experiments > 12 or int_Sampling_Strategy_1_0__Total_Experiments == 0:
                    #print('Invalid number of experiments: '+ str(int_Sampling_Strategy_1_0__Total_Experiments))
                    str_Valid_Values = '1 - 12'
                    str_Message_Text = 'Invalid number of sampling strategy experiments: ' + str(int_Sampling_Strategy_1_0__Total_Experiments) + '; valid values: ' + str_Valid_Values
                    int_Stack_Trace_Level = 2
                    with SSErrorOperation([]) as obj_SSErrorOp:
                        obj_SSErrorOp.func_Error_Handler__Caught_Exceptions(int_Stack_Trace_Level, str_Message_Text, tup_Args = (self.str_App_Arg_Output_Base_Path, self.strUniqueRunID))
                    pass
                pass                    
            
                self.int_Sampling_Strategy_1_0__Sample_Replicates = self.Arg_Sampling_Strategy_LDNe_Replicates
                self.int_Sampling_Strategy_1_0__Sample_Min = self.Arg_Sampling_Strategy_Sample_Range_Min
                self.int_Sampling_Strategy_1_0__Sample_Max = self.Arg_Sampling_Strategy_Sample_Range_Max
                self.int_Sampling_Strategy_1_0__Sample_Increment = self.Arg_Sampling_Strategy_Sample_Range_Increment
                self.int_Sampling_Strategy_1_0__Loci_Min = self.Arg_Sampling_Strategy_Locus_Range_Min
                self.int_Sampling_Strategy_1_0__Loci_Max = self.Arg_Sampling_Strategy_Locus_Range_Max
                self.int_Sampling_Strategy_1_0__Loci_Increment = self.Arg_Sampling_Strategy_Locus_Range_Increment

#                     '''
#                     Phase out static_str_Value__Sampling_Strategy_Sample_Proportions_Source__USER_PROPORTIONS
#                     ''' 
#                 if self.str_Sampling_Strategy_Sample_Proportions_Source == obj_Config.static_str_Value__Sampling_Strategy_Sample_Proportions_Source__USER_PROPORTIONS:
#                     self.dict_Sampling_Strategy_1_0__Age_Cohort_Sample_Proportions_Of_Total_Sample = self.Arg_dict_Sampling_Strategy_Sample_Proportions_By_Age__Age_And_Sample_Proportion
#                     pass
                if self.str_Sampling_Strategy_Sample_Proportions_Source == obj_Config.static_str_Value__Sampling_Strategy_Sample_Proportions_Source__USER_SAMPLE_PROPORTIONS:
                    self.dict_Sampling_Strategy_1_0__Age_Cohort_Sample_Proportions_Of_Total_Sample = self.Arg_dict_Sampling_Strategy_Sample_Proportions_By_Age__Total_Sample_Size_By_Age_Proportion
                    pass
                elif self.str_Sampling_Strategy_Sample_Proportions_Source == obj_Config.static_str_Value__Sampling_Strategy_Sample_Proportions_Source__USER_SAMPLE_NUMBERS:
                    self.dict_Sampling_Strategy_1_0__Age_Cohort_Sample_Proportions_Of_Total_Sample = self.Arg_dict_Sampling_Strategy_Sample_Proportions_By_Age__Age_And_Sample_Number
                    pass
                elif self.str_Sampling_Strategy_Sample_Proportions_Source == obj_Config.static_str_Value__Sampling_Strategy_Sample_Proportions_Source__USER_SAMPLE_PROPORTIONS:
                    self.dict_Sampling_Strategy_1_0__Age_Cohort_Sample_Proportions_Of_Total_Sample = self.Arg_dict_Sampling_Strategy_Sample_Proportions_By_Age__Total_Sample_Size_By_Age_Proportion
                    pass
                elif self.str_Sampling_Strategy_Sample_Proportions_Source == obj_Config.static_str_Value__Sampling_Strategy_Sample_Proportions_Source__USER_AGE_COHORTS:
                    self.dict_Sampling_Strategy_1_0__Age_Cohort_Sample_Proportions_Of_Total_Sample = self.Arg_dict_Sampling_Strategy_Sample_Proportions_By_Age__Age_And_Cohort_Proportion
                    pass
                pass

                '''
                -----------------------------------------
                Validate & Convert - list_float_Arg_LDNe_PCrits_To_Get  
                -----------------------------------------
                '''   
                param_Value = self.list_float_Arg_LDNe_PCrits_To_Get
                
                if param_Value == [globalsSS.LDNe_PCrit__Float.static_float_LDNe_PCrit_0_00]:
                    self.str_SAMPLING_STRATEGY_Config__PCrit_To_Process = globalsSS.Ne2Bulk_Processing.static_stringNe2Bulk_PCrit_To_Process_PCrit_0_00
                elif param_Value == [globalsSS.LDNe_PCrit__Float.static_float_LDNe_PCrit_0_01]:
                    self.str_SAMPLING_STRATEGY_Config__PCrit_To_Process = globalsSS.Ne2Bulk_Processing.static_stringNe2Bulk_PCrit_To_Process_PCrit_0_01
                elif param_Value == [globalsSS.LDNe_PCrit__Float.static_float_LDNe_PCrit_0_02]:
                    self.str_SAMPLING_STRATEGY_Config__PCrit_To_Process = globalsSS.Ne2Bulk_Processing.static_stringNe2Bulk_PCrit_To_Process_PCrit_0_02
                elif param_Value == [globalsSS.LDNe_PCrit__Float.static_float_LDNe_PCrit_0_05]:
                    self.str_SAMPLING_STRATEGY_Config__PCrit_To_Process = globalsSS.Ne2Bulk_Processing.static_stringNe2Bulk_PCrit_To_Process_PCrit_0_05
                elif param_Value == [globalsSS.LDNe_PCrit__Float.static_float_LDNe_PCrit_NoS]:
                    self.str_SAMPLING_STRATEGY_Config__PCrit_To_Process = globalsSS.Ne2Bulk_Processing.static_stringNe2Bulk_PCrit_To_Process_PCrit_NoS
                else:
                    ''' CHANGE THIS for each validation '''
                    dict_Valid_Values = vars(globalsSS.LDNe_PCrit__Float)
                    ''' Report the validation error '''
                    dict_Valid_Values = OrderedDict(sorted(dict_Valid_Values.items(), key=lambda x:x[1]))
                    str_Valid_Values = ''
                    for key, value in dict_Valid_Values.items():
                        if not key.startswith('_'):
                            str_Valid_Values += str(key) + ' = ' + str(value) + ', '
                        pass
                    pass
                    str_Valid_Values = '[' + str_Valid_Values[:-2] + ']'
                    str_Message_Text = 'Invalid config option value: ' + str(param_Value) + '; valid values: ' + str_Valid_Values
                    int_Stack_Trace_Level = 2
                    with SSErrorOperation([]) as obj_SSErrorOp:
                        obj_SSErrorOp.func_Error_Handler__Caught_Exceptions(int_Stack_Trace_Level, str_Message_Text, tup_Args = (self.str_App_Arg_Output_Base_Path, self.strUniqueRunID))
                    pass
                pass                        
        
                self.str_Sampling_Strategy_1_0__LDNe_PCrits_To_Get = self.str_SAMPLING_STRATEGY_Config__PCrit_To_Process
                self.str_Sampling_EXP_2_2__LDNe_PCrits_To_Get = self.str_SAMPLING_STRATEGY_Config__PCrit_To_Process
        
                return True

        
            def method_Batch_Current_Batch_Parameter_Import_From_BATCH_SCENARIO_Config(self):
 
                obj_SSErrorOp = SSErrorOperation([])
                
                '''
                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                Args from Batch Scenario config
                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                '''
                
                obj_Config = self.obj_Config_Batch_Scenario
                
                if obj_Config == None:
                    str_Message_Text = 'self.obj_Config_Batch_Scenario = None'
                    int_Stack_Trace_Level = 2
                    obj_SSErrorOp.func_Error_Handler__Caught_Exceptions(int_Stack_Trace_Level, str_Message_Text, tup_Args = (self.str_App_Arg_Output_Base_Path, self.strUniqueRunID))
                    return False  
                pass         
            
                config_parser_Config = obj_Config.config_parser_Config
            
                if config_parser_Config == None:
                    str_Message_Text = 'obj_Config_Batch_Scenario.config_parser_Config = None'
                    int_Stack_Trace_Level = 2
                    obj_SSErrorOp.func_Error_Handler__Caught_Exceptions(int_Stack_Trace_Level, str_Message_Text, tup_Args = (self.str_App_Arg_Output_Base_Path, self.strUniqueRunID))
                    return False
                pass    
         
                        
                ''' <<<<<<< SECTION: INI_File '''
                bool_Section_Exists = False
                ''' Specify SECTION to get '''
                str_Section = obj_Config.static_str_Section__INI_File
                ''' Check if SECTION exists in config file '''
                bool_Section_Exists = obj_Config.func_Check_If_Config_File_SECTION_Is_Expected(obj_Config, str_Section, True)
                '''Its NOT OK if the SECTION does not exist, however if the SECTION exists, read the option '''
                if bool_Section_Exists:
                    ''' Specify OPTION to get '''
                    str_Option = obj_Config.static_str_Option__INI_Filename
                    value_Type = ''
                    '''Its NOT OK if the OPTION does not exist'''
                    '''Read the OPTION'''
                    bool_Option_Exists = False 
                    bool_Option_Exists, value_Option = obj_Config.func_Read_OPTION(True, False, obj_Config, str_Section, str_Option, value_Type)
                    if bool_Option_Exists:
                        self.str_Scenario_INI_Filename = value_Option
                    pass
                pass
                bool_Exists = bool_Section_Exists and bool_Option_Exists
                self.bool_str_Scenario_INI_Filename__FOUND = bool_Exists            
                '''Its NOT OK if the SECTION does not exist, however if the SECTION exists, read the option '''
                if bool_Section_Exists:
                    ''' Specify OPTION to get '''
                    str_Option = obj_Config.static_str_Option__INI_Creation_Run_ID
                    value_Type = ''
                    '''Its NOT OK if the OPTION does not exist'''
                    '''Read the OPTION'''
                    bool_Option_Exists = False 
                    bool_Option_Exists, value_Option = obj_Config.func_Read_OPTION(True, False, obj_Config, str_Section, str_Option, value_Type)
                    if bool_Option_Exists:
                        self.str_Scenario_INI_Creation_Run_ID = value_Option
                    pass
                pass
                bool_Exists = bool_Section_Exists and bool_Option_Exists
                self.bool_str_Scenario_INI_Creation_Run_ID__FOUND = bool_Exists            
                '''Its NOT OK if the SECTION does not exist, however if the SECTION exists, read the option '''
                if bool_Section_Exists:
                    ''' Specify OPTION to get '''
                    str_Option = obj_Config.static_str_Option__INI_UID
                    value_Type = 0
                    '''Its NOT OK if the OPTION does not exist'''
                    '''Read the OPTION'''
                    bool_Option_Exists = False 
                    bool_Option_Exists, value_Option = obj_Config.func_Read_OPTION(True, False, obj_Config, str_Section, str_Option, value_Type)
                    if bool_Option_Exists:
                        self.int_Scenario_INI_UID = value_Option
                    pass
                pass
                bool_Exists = bool_Section_Exists and bool_Option_Exists
                self.bool_int_Scenario_INI_UID__FOUND = bool_Exists            
                
                
                ''' <<<<<<< SECTION: Project_Details '''
                bool_Section_Exists = False
                ''' Specify SECTION to get '''
                str_Section = obj_Config.static_str_Section__Scenario_Project_Details
                ''' Check if SECTION exists in config file '''
                bool_Section_Exists = obj_Config.func_Check_If_Config_File_SECTION_Is_Expected(obj_Config, str_Section, True)
                '''Its NOT OK if the SECTION does not exist, however if the SECTION exists, read the option '''
                if bool_Section_Exists:
                    ''' Specify OPTION to get '''
                    str_Option = obj_Config.static_str_Option__Scenario_Project_Name
                    value_Type = ''
                    '''Its NOT OK if the OPTION does not exist'''
                    '''Read the OPTION'''
                    bool_Option_Exists = False 
                    bool_Option_Exists, value_Option = obj_Config.func_Read_OPTION(True, False, obj_Config, str_Section, str_Option, value_Type)
                    if bool_Option_Exists:
                        self.str_Scenario_Project_Name = value_Option
                        self.Arg_Scenario_Project_Name = value_Option
                    pass
                pass
                bool_Exists = bool_Section_Exists and bool_Option_Exists
                self.bool_str_Scenario_Project_Name__FOUND = bool_Exists            
                '''If the SECTION exists, read the option '''
                if bool_Section_Exists:
                    ''' Specify OPTION to get '''
                    str_Option = obj_Config.static_str_Option__Scenario_Project_UID
                    value_Type = 0
                    '''Its NOT OK if the OPTION does not exist'''
                    '''Read the OPTION'''
                    bool_Option_Exists = False 
                    bool_Option_Exists, value_Option = obj_Config.func_Read_OPTION(True, False, obj_Config, str_Section, str_Option, value_Type)
                    if bool_Option_Exists:
                        self.int_Scenario_Project_UID = value_Option
                        self.Arg_Scenario_Project_UID = value_Option
                    pass
                pass
                bool_Exists = bool_Section_Exists and bool_Option_Exists
                self.bool_int_Scenario_Project_UID__FOUND = bool_Exists  
                '''If the SECTION exists, read the option '''
                if bool_Section_Exists:
                    ''' Specify OPTION to get '''
                    str_Option = obj_Config.static_str_Option__Scenario_Project_Species_Name
                    value_Type = ''
                    '''Its NOT OK if the OPTION does not exist'''
                    '''Read the OPTION'''
                    bool_Option_Exists = False 
                    bool_Option_Exists, value_Option = obj_Config.func_Read_OPTION(True, False, obj_Config, str_Section, str_Option, value_Type)
                    if bool_Option_Exists:
                        self.str_Scenario_Project_Species_Name = value_Option
                        self.Arg_Species_Name = value_Option
                    pass
                pass
                bool_Exists = bool_Section_Exists and bool_Option_Exists
                self.bool_str_Scenario_Project_Species_Name__FOUND = bool_Exists  


                ''' <<<<<<< SECTION: Scenario_Details '''
                bool_Section_Exists = False
                ''' Specify SECTION to get '''
                str_Section = obj_Config.static_str_Section__Scenario_Details
                ''' Check if SECTION exists in config file '''
                bool_Section_Exists = obj_Config.func_Check_If_Config_File_SECTION_Is_Expected(obj_Config, str_Section, True)
                '''Its NOT OK if the SECTION does not exist, however if the SECTION exists, read the option '''
                if bool_Section_Exists:
                    ''' Specify OPTION to get '''
                    str_Option = obj_Config.static_str_Option__Scenario_Name
                    value_Type = ''
                    '''Its NOT OK if the OPTION does not exist'''
                    '''Read the OPTION'''
                    bool_Option_Exists = False 
                    bool_Option_Exists, value_Option = obj_Config.func_Read_OPTION(True, False, obj_Config, str_Section, str_Option, value_Type)
                    if bool_Option_Exists:
                        self.str_Scenario_Name = value_Option
                        self.Arg_Scenario_Name = value_Option
                    pass
                pass
                bool_Exists = bool_Section_Exists and bool_Option_Exists
                self.bool_str_Scenario_Name__FOUND = bool_Exists            
                '''If the SECTION exists, read the option '''
                if bool_Section_Exists:
                    ''' Specify OPTION to get '''
                    str_Option = obj_Config.static_str_Option__Scenario_UID
                    value_Type = 0
                    '''Its NOT OK if the OPTION does not exist'''
                    '''Read the OPTION'''
                    bool_Option_Exists = False 
                    bool_Option_Exists, value_Option = obj_Config.func_Read_OPTION(True, False, obj_Config, str_Section, str_Option, value_Type)
                    if bool_Option_Exists:
                        self.int_Scenario_UID = value_Option
                        self.Arg_Scenario_UID = value_Option
                    pass
                pass
                bool_Exists = bool_Section_Exists and bool_Option_Exists
                self.bool_int_Scenario_UID__FOUND = bool_Exists
             
                
                ''' <<<<<<< SECTION: Batch_Settings '''
                bool_Section_Exists = False
                ''' Specify SECTION to get '''
                str_Section = obj_Config.static_str_Section__Scenario_Batch_Settings
                ''' Check if SECTION exists in config file '''
                bool_Section_Exists = obj_Config.func_Check_If_Config_File_SECTION_Is_Expected(obj_Config, str_Section, True)
                '''Its NOT OK if the SECTION does not exist, however if the SECTION exists, read the option '''
                if bool_Section_Exists:
                    ''' Specify OPTION to get '''
                    str_Option = obj_Config.static_str_Option__Scenario_Batch_Settings_File
                    value_Type = ''
                    '''Its NOT OK if the OPTION does not exist'''
                    '''Read the OPTION'''
                    bool_Option_Exists = False 
                    bool_Option_Exists, value_Option = obj_Config.func_Read_OPTION(True, False, obj_Config, str_Section, str_Option, value_Type)
                    if bool_Option_Exists:
                        self.str_Scenario_Batch_Settings_File = value_Option
                        self.Arg_Scenario_Batch_Settings_File = value_Option
                pass
                bool_Exists = bool_Section_Exists and bool_Option_Exists
                self.bool_str_Scenario_Batch_Settings_File__Current__FOUND = bool_Exists        
             
                
#                 ''' <<<<<<< SECTION: Sampling_Strategy_Settings '''
#                 bool_Section_Exists = False
#                 ''' Specify SECTION to get '''
#                 str_Section = obj_Config.static_str_Section__Scenario_Sampling_Strategy_Settings
#                 ''' Check if SECTION exists in config file '''
#                 bool_Section_Exists = obj_Config.func_Check_If_Config_File_SECTION_Is_Expected(obj_Config, str_Section, True)
#                 '''Its NOT OK if the SECTION does not exist, however if the SECTION exists, read the option '''
#                 if bool_Section_Exists:
#                     ''' Specify OPTION to get '''
#                     str_Option = obj_Config.static_str_Option__Scenario_Sampling_Strategy_Settings_File
#                     value_Type = ''
#                     '''Its NOT OK if the OPTION does not exist'''
#                     '''Read the OPTION'''
#                     bool_Option_Exists = False 
#                     bool_Option_Exists, value_Option = obj_Config.func_Read_OPTION(True, False, obj_Config, str_Section, str_Option, value_Type)
#                     if bool_Option_Exists:
#                         self.str_Scenario_Sampling_Strategy_Settings_File = value_Option
#                 pass
#                 bool_Exists = bool_Section_Exists and bool_Option_Exists
#                 self.bool_str_Sampling_Strategy_Path_And_File__Current__FOUND = bool_Exists        
#              
               
                ''' <<<<<<< SECTION: Simulation_Batch_Details '''
                bool_Section_Exists = False
                ''' Specify SECTION to get '''
                str_Section = obj_Config.static_str_Section__Simulation_Batch_Details
                ''' Check if SECTION exists in config file '''
                bool_Section_Exists = obj_Config.func_Check_If_Config_File_SECTION_Is_Expected(obj_Config, str_Section, True)
                '''Its NOT OK if the SECTION does not exist, however if the SECTION exists, read the option '''
                if bool_Section_Exists:
                    ''' Specify OPTION to get '''
                    str_Option = obj_Config.static_str_Option__Simulation_Batch_Replicates
                    value_Type = 0
                    '''Its NOT OK if the OPTION does not exist'''
                    '''Read the OPTION'''
                    bool_Option_Exists = False 
                    bool_Option_Exists, value_Option = obj_Config.func_Read_OPTION(True, False, obj_Config, str_Section, str_Option, value_Type)
                    if bool_Option_Exists:
                        self.int_Simulation_Batch_Replicates = value_Option
                        self.Arg_Population_Replicates = value_Option
                    pass
                pass
                bool_Exists = bool_Section_Exists and bool_Option_Exists
                self.bool_int_Simulation_Batch_Replicates__FOUND = bool_Exists
                if bool_Section_Exists:
                    ''' Specify OPTION to get '''
                    str_Option = obj_Config.static_str_Option__Simulation_Batch_Replicate_Length_Burn_In
                    value_Type = 0
                    '''Its NOT OK if the OPTION does not exist'''
                    '''Read the OPTION'''
                    bool_Option_Exists = False 
                    bool_Option_Exists, value_Option = obj_Config.func_Read_OPTION(True, False, obj_Config, str_Section, str_Option, value_Type)
                    if bool_Option_Exists:
                        self.int_Simulation_Batch_Replicate_Length_Burn_In = value_Option
                        self.Arg_Replicate_Burn_In_Annual_Matings = value_Option
                    pass
                pass
                bool_Exists = bool_Section_Exists and bool_Option_Exists
                self.bool_int_Simulation_Batch_Replicate_Length_Burn_In__FOUND = bool_Exists
                if bool_Section_Exists:
                    ''' Specify OPTION to get '''
                    str_Option = obj_Config.static_str_Option__Simulation_Batch_Replicate_Length_Temporal_Evolution
                    value_Type = 0
                    '''Its NOT OK if the OPTION does not exist'''
                    '''Read the OPTION'''
                    bool_Option_Exists = False 
                    bool_Option_Exists, value_Option = obj_Config.func_Read_OPTION(True, False, obj_Config, str_Section, str_Option, value_Type)
                    if bool_Option_Exists:
                        self.int_Simulation_Batch_Replicate_Length_Temporal_Evolution = value_Option
                        self.Arg_Replicate_Length_Temporal_Evolution = value_Option
                        self.Arg_Replicate_Temporal_Evolution_Years = self.Arg_Replicate_Length_Temporal_Evolution - 1 # Minus one beacause the last one will be defined as months
                    pass
                pass
                bool_Exists = bool_Section_Exists and bool_Option_Exists
                self.bool_int_Simulation_Batch_Replicate_Length_Temporal_Evolution__FOUND = bool_Exists
        
        
                ''' <<<<<<< SECTION: Population_Details '''
                bool_Section_Exists = False
                ''' Specify SECTION to get '''
                str_Section = obj_Config.static_str_Section__Population_Demographic_Details
                ''' Check if SECTION exists in config file '''
                bool_Section_Exists = obj_Config.func_Check_If_Config_File_SECTION_Is_Expected(obj_Config, str_Section, True)
                '''Its NOT OK if the SECTION does not exist, however if the SECTION exists, read the option '''
                if bool_Section_Exists:
                    ''' Specify OPTION to get '''
                    str_Option = obj_Config.static_str_Option__Population_Size
                    value_Type = 0
                    '''Its NOT OK if the OPTION does not exist'''
                    '''Read the OPTION'''
                    bool_Option_Exists = False 
                    bool_Option_Exists, value_Option = obj_Config.func_Read_OPTION(True, False, obj_Config, str_Section, str_Option, value_Type)
                    if bool_Option_Exists:
                        self.int_Population_Size = value_Option
                        self.Arg_Population_Size = value_Option
                    pass
                pass
                bool_Exists = bool_Section_Exists and bool_Option_Exists
                self.bool_int_Population_Size__FOUND = bool_Exists


                ''' <<<<<<< SECTION: Genome_Details '''
                bool_Section_Exists = False
                ''' Specify SECTION to get '''
                str_Section = obj_Config.static_str_Section__Genome_Details
                ''' Check if SECTION exists in config file '''
                bool_Section_Exists = obj_Config.func_Check_If_Config_File_SECTION_Is_Expected(obj_Config, str_Section, True)
                '''Its NOT OK if the SECTION does not exist, however if the SECTION exists, read the option '''
                if bool_Section_Exists:
                    ''' Specify OPTION to get '''
                    str_Option = obj_Config.static_str_Option__Genome_Locus_Number
                    value_Type = 0
                    '''Its NOT OK if the OPTION does not exist'''
                    '''Read the OPTION'''
                    bool_Option_Exists = False 
                    bool_Option_Exists, value_Option = obj_Config.func_Read_OPTION(True, False, obj_Config, str_Section, str_Option, value_Type)
                    if bool_Option_Exists:
                        self.int_Genome_Locus_Number = value_Option
                        self.Arg_Genome_Locus_Number = value_Option
                    pass
                pass
                bool_Exists = bool_Section_Exists and bool_Option_Exists
                self.bool_int_Genome_Locus_Number__FOUND = bool_Exists
                '''Its NOT OK if the SECTION does not exist, however if the SECTION exists, read the option '''
                if bool_Section_Exists:
                    ''' Specify OPTION to get '''
                    str_Option = obj_Config.static_str_Option__Genome_Alleles_Per_Locus_Distribution
                    value_Type = ''
                    '''Its NOT OK if the OPTION does not exist'''
                    '''Read the OPTION'''
                    bool_Option_Exists = False 
                    bool_Option_Exists, value_Option = obj_Config.func_Read_OPTION(True, False, obj_Config, str_Section, str_Option, value_Type)
                    if bool_Option_Exists:
                        self.str_Genome_Alleles_Per_Locus_Distribution = value_Option
                        self.Arg_Genome_Alleles_Per_Locus_Distribution = value_Option
                        if self.str_Genome_Alleles_Per_Locus_Distribution == obj_Config.static_str_Value__Genome_Alleles_Per_Locus_Distribution_UNIFORM:
                            str_Option = obj_Config.static_str_Option__Genome_Alleles_Per_Locus_Distribution_UNIFORM_Number_Alleles_Per_Locus 
                            value_Type = 0
                            '''Its NOT OK if the OPTION does not exist'''
                            '''Read the OPTION'''
                            bool_Option_Exists = False 
                            bool_Option_Exists, value_Option = obj_Config.func_Read_OPTION(True, False, obj_Config, str_Section, str_Option, value_Type)
                            if bool_Option_Exists:
                                self.int_Genome_Alleles_Per_Locus_Distribution_UNIFORM_Number_Alleles_Per_Locus = value_Option
                                self.Arg_Genome_UNIFORM_Number_Alleles_Per_Locus = value_Option
                            pass
                        elif self.str_Genome_Alleles_Per_Locus_Distribution == obj_Config.static_str_Value__Genome_Alleles_Per_Locus_Distribution_BINOMIAL:
                            str_Option = obj_Config.static_str_Option__Genome_Alleles_Per_Locus_Distribution_BINOMIAL_Mean_Number_Alleles_Per_Locus 
                            value_Type = 0.0
                            '''Its NOT OK if the OPTION does not exist'''
                            '''Read the OPTION'''
                            bool_Option_Exists = False 
                            bool_Option_Exists, value_Option = obj_Config.func_Read_OPTION(True, False, obj_Config, str_Section, str_Option, value_Type)
                            if bool_Option_Exists:
                                self.float_Genome_Alleles_Per_Locus_Distribution_BINOMIAL_Mean_Number_Alleles_Per_Locus = value_Option
                                self.Arg_Genome_BINOMIAL_Mean_Number_Alleles_Per_Locus = value_Option
                            pass
                            str_Option = obj_Config.static_str_Option__Genome_Alleles_Per_Locus_Distribution_BINOMIAL_StdDev_Alleles_Per_Locus 
                            value_Type = 0.0
                            '''Its NOT OK if the OPTION does not exist'''
                            '''Read the OPTION'''
                            bool_Option_Exists = False 
                            bool_Option_Exists, value_Option = obj_Config.func_Read_OPTION(True, False, obj_Config, str_Section, str_Option, value_Type)
                            if bool_Option_Exists:
                                self.float_Genome_Alleles_Per_Locus_Distribution_BINOMIAL_StdDev_Alleles_Per_Locus = value_Option
                                self.Arg_Genome_BINOMIAL_StdDev_Alleles_Per_Locus = value_Option
                            pass
                        else:
                            str_Message_Text = 'Non-existent OPTION: ' + str_Option + ' for SECTION: ' + str_Section + ' in config_parser_Config: obj_Config_Batch_Scenario' 
                            int_Stack_Trace_Level = 2
                            obj_SSErrorOp.func_Error_Handler__Caught_Exceptions(int_Stack_Trace_Level, str_Message_Text, tup_Args = (self.str_App_Arg_Output_Base_Path, self.strUniqueRunID))
                        pass
                    pass
                pass
                bool_Exists = bool_Section_Exists and bool_Option_Exists
                self.bool_Genome_Alleles_Per_Locus_Distribution__FOUND = bool_Exists
                '''Its NOT OK if the SECTION does not exist, however if the SECTION exists, read the option '''
                if bool_Section_Exists:
                    ''' Specify OPTION to get '''
                    str_Option = obj_Config.static_str_Option__Genome_Allele_Frequency_Distribution
                    value_Type = ''
                    '''Its NOT OK if the OPTION does not exist'''
                    '''Read the OPTION'''
                    bool_Option_Exists = False 
                    bool_Option_Exists, value_Option = obj_Config.func_Read_OPTION(True, False, obj_Config, str_Section, str_Option, value_Type)
                    if bool_Option_Exists:
                        self.str_Genome_Allele_Frequency_Distribution = value_Option
                        self.Arg_Genome_Allele_Frequency_Distribution = value_Option
                        if self.str_Genome_Allele_Frequency_Distribution == obj_Config.static_str_Value__Genome_Allele_Frequency_Distribution_NON_RANDOM:
                            '''Already read this OPTION '''
                            self.str_Genome__Source_ALL_ALLELE_FREQUENCIES_File_Path_And_Name = ''
                            self.Arg_Genome_Source_FILE  = ''                                
                            self.Arg_bool_Obtain_Allele_Freqs_From_File = False
                            pass
                        elif self.str_Genome_Allele_Frequency_Distribution == obj_Config.static_str_Value__Genome_Allele_Frequency_Distribution_UNIFORM:
                            '''
                            Phase out static_str_Value__Genome_Allele_Frequency_Distribution_UNIFORM
                            '''
                            self.str_Genome_Allele_Frequency_Distribution = obj_Config.static_str_Value__Genome_Allele_Frequency_Distribution_NON_RANDOM
                            self.Arg_Genome_Allele_Frequency_Distribution = obj_Config.static_str_Value__Genome_Allele_Frequency_Distribution_NON_RANDOM
                            self.str_Genome__Source_ALL_ALLELE_FREQUENCIES_File_Path_And_Name = ''
                            self.Arg_Genome_Source_FILE  = ''                                
                            self.Arg_bool_Obtain_Allele_Freqs_From_File = False
                            pass
                        elif self.str_Genome_Allele_Frequency_Distribution == obj_Config.static_str_Value__Genome_Allele_Frequency_Distribution_DRICHLET:
                            '''Already read this OPTION '''
                            self.str_Genome__Source_ALL_ALLELE_FREQUENCIES_File_Path_And_Name = ''
                            self.Arg_Genome_Source_FILE  = ''                                
                            self.Arg_bool_Obtain_Allele_Freqs_From_File = False
                            pass
                        elif self.str_Genome_Allele_Frequency_Distribution == obj_Config.static_str_Value__Genome_Allele_Frequency_Distribution_ALL_ALLELE_FREQUENCIES:
                            str_Option = obj_Config.static_str_Option__Genome__Source_ALL_ALLELE_FREQUENCIES_File_Path_And_Name 
                            value_Type = ''
                            '''Its NOT OK if the OPTION does not exist'''
                            '''Read the OPTION'''
                            bool_Option_Exists = False 
                            bool_Option_Exists, value_Option = obj_Config.func_Read_OPTION(True, False, obj_Config, str_Section, str_Option, value_Type)
                            if bool_Option_Exists:
                                self.str_Genome__Source_ALL_ALLELE_FREQUENCIES_File_Path_And_Name = value_Option
                                self.Arg_Genome_Source_FILE  = value_Option
                                self.Arg_bool_Obtain_Allele_Freqs_From_File = True                                
                            else:
                                self.str_Genome__Source_ALL_ALLELE_FREQUENCIES_File_Path_And_Name = ''
                                self.Arg_Genome_Source_FILE  = ''                                
                                self.Arg_bool_Obtain_Allele_Freqs_From_File = False
                            pass
                        elif self.str_Genome_Allele_Frequency_Distribution == obj_Config.static_str_Value__Genome_Allele_Frequency_Distribution_GENEPOP:
                            str_Option = obj_Config.static_str_Option__Genome__Source_GENEPOP_File_Path_And_Name 
                            value_Type = ''
                            '''Its NOT OK if the OPTION does not exist'''
                            '''Read the OPTION'''
                            bool_Option_Exists = False 
                            bool_Option_Exists, value_Option = obj_Config.func_Read_OPTION(True, False, obj_Config, str_Section, str_Option, value_Type)
                            if bool_Option_Exists:
                                self.str_Genome__Source_GENEPOP_File_Path_And_Name = value_Option
                                self.Arg_Genome_Source_FILE  = value_Option
                                self.Arg_bool_Obtain_Allele_Freqs_From_File = True                                
                            else:
                                self.str_Genome__Source_GENEPOP_File_Path_And_Name = ''
                                self.Arg_Genome_Source_FILE  = ''                                
                                self.Arg_bool_Obtain_Allele_Freqs_From_File = False
                            pass
                        else:
                            str_Message_Text = 'Non-existent OPTION: ' + str_Option + ' for SECTION: ' + str_Section + ' in config_parser_Config: obj_Config_Batch_Scenario' 
                            int_Stack_Trace_Level = 2
                            obj_SSErrorOp.func_Error_Handler__Caught_Exceptions(int_Stack_Trace_Level, str_Message_Text, tup_Args = (self.str_App_Arg_Output_Base_Path, self.strUniqueRunID))
                        pass
                    pass
                pass
                bool_Exists = bool_Section_Exists and bool_Option_Exists
                self.bool_Genome_Allele_Frequency_Distribution__FOUND = bool_Exists 
                '''Its NOT OK if the SECTION does not exist, however if the SECTION exists, read the option '''
                if bool_Section_Exists:
                    ''' Specify OPTION to get '''
                    str_Option = obj_Config.static_str_Option__Genome_Mutation_Rate
                    value_Type = 0.0
                    '''Its NOT OK if the OPTION does not exist'''
                    '''Read the OPTION'''
                    bool_Option_Exists = False
                    ''' NOTE !!! This has been set to a defalut value until implemented in next version '''
                    bool_Implemented = False
                    bool_Option_Exists, value_Option = obj_Config.func_Read_OPTION(bool_Implemented, False, obj_Config, str_Section, str_Option, value_Type)
                    if bool_Option_Exists:
                        self.float_Genome_Mutation_Rate = value_Option
                        self.Arg_Genome_Mutation_Rate = value_Option
                    else:
                        ''' NOTE !!! This has been set to a defalut value until implemented in next version '''
                        self.float_Genome_Mutation_Rate = 0
                        self.Arg_Genome_Mutation_Rate = 0                        
                    pass
                pass
                bool_Exists = bool_Section_Exists and bool_Option_Exists
                self.bool_float_Genome_Mutation_Rate__FOUND = bool_Exists
                self.Arg_Genome_Mutation_Allowed = False
                if self.Arg_Genome_Mutation_Rate > 0:
                    self.Arg_Genome_Mutation_Allowed = True
                pass
            
                
                ''' <<<<<<< SECTION: Life_History '''
                bool_Section_Exists = False
                ''' Specify SECTION to get '''
                str_Section = obj_Config.static_str_Section__Species_Life_History_Details
                ''' Check if SECTION exists in config file '''
                bool_Section_Exists = obj_Config.func_Check_If_Config_File_SECTION_Is_Expected(obj_Config, str_Section, True)
                '''Its NOT OK if the SECTION does not exist, however if the SECTION exists, read the option '''
                if bool_Section_Exists:
                    ''' Specify OPTION to get '''
                    str_Option = obj_Config.static_str_Option__Species_Life_History_Max_Age
                    value_Type = 0
                    '''Its NOT OK if the OPTION does not exist'''
                    '''Read the OPTION'''
                    bool_Option_Exists = False 
                    bool_Option_Exists, value_Option = obj_Config.func_Read_OPTION(True, False, obj_Config, str_Section, str_Option, value_Type)
                    if bool_Option_Exists:
                        self.int_Species_Life_History_Max_Age = value_Option
                        self.Arg_Species_Life_History_Max_Age = value_Option
                    pass
                pass
                bool_Exists = bool_Section_Exists and bool_Option_Exists
                self.bool_int_Species_Life_History_Max_Age__FOUND = bool_Exists
                if bool_Section_Exists:
                    ''' Specify OPTION to get '''
                    str_Option = obj_Config.static_str_Option__Species_Life_History_Max_Mating_Age
                    value_Type = 0
                    '''Its NOT OK if the OPTION does not exist'''
                    '''Read the OPTION'''
                    bool_Option_Exists = False 
                    bool_Option_Exists, value_Option = obj_Config.func_Read_OPTION(True, False, obj_Config, str_Section, str_Option, value_Type)
                    if bool_Option_Exists:
                        self.int_Species_Life_History_Max_Mating_Age = value_Option
                        self.Arg_Species_Life_History_Max_Mating_Age = value_Option
                    pass
                pass
                bool_Exists = bool_Section_Exists and bool_Option_Exists
                self.bool_int_Species_Life_History_Max_Mating_Age__FOUND = bool_Exists
                if bool_Section_Exists:
                    ''' Specify OPTION to get '''
                    str_Option = obj_Config.static_str_Option__Species_Life_History_Min_Mating_Age
                    value_Type = 0
                    '''Its NOT OK if the OPTION does not exist'''
                    '''Read the OPTION'''
                    bool_Option_Exists = False 
                    bool_Option_Exists, value_Option = obj_Config.func_Read_OPTION(True, False, obj_Config, str_Section, str_Option, value_Type)
                    if bool_Option_Exists:
                        self.int_Species_Life_History_Min_Mating_Age = value_Option
                        self.Arg_Species_Life_History_Min_Mating_Age = value_Option
                    pass
                pass
                bool_Exists = bool_Section_Exists and bool_Option_Exists
                self.bool_int_Species_Life_History_Min_Mating_Age__FOUND = bool_Exists

                self.Arg_Species_Life_History_Allow_Senescence = False
                if self.int_Species_Life_History_Max_Mating_Age < self.int_Species_Life_History_Max_Mating_Age:
                    self.Arg_Species_Life_History_Allow_Senescence = True
                pass
            

                ''' <<<<<<< SECTION: Mating_Details '''
                bool_Section_Exists = False
                ''' Specify SECTION to get '''
                str_Section = obj_Config.static_str_Section__Species_Mating_Details
                ''' Check if SECTION exists in config file '''
                ''' NOTE !!! This has been set to a defalut value until implemented in next version '''
                bool_Implemented = False                
                bool_Section_Exists = obj_Config.func_Check_If_Config_File_SECTION_Is_Expected(obj_Config, str_Section, bool_Implemented)
                ''' NOTE !!! This has been set to a defalut value until implemented in next version '''
                bool_Section_Exists = True
                '''Its NOT OK if the SECTION does not exist, however if the SECTION exists, read the option '''
                if bool_Section_Exists:
                    ''' Specify OPTION to get '''
                    str_Option = obj_Config.static_str_Option__Species_Mating_Scheme
                    value_Type = 0
                    '''Its NOT OK if the OPTION does not exist'''
                    ''' NOTE !!! This has been set to a defalut value until implemented in next version '''
                    bool_Implemented = False
                    '''Read the OPTION'''
                    bool_Option_Exists = False 
                    bool_Option_Exists, value_Option = obj_Config.func_Read_OPTION(bool_Implemented, False, obj_Config, str_Section, str_Option, value_Type)
                    if bool_Option_Exists:
                        self.int_Species_Mating_Scheme = value_Option
                        self.Arg_Species_Mating_Scheme  = value_Option
                    else:
                        self.int_Species_Mating_Scheme = globalsSS.MatingSchemeType.static_Diploid_Sexual_Random_Mating_LS_with_SELFING_with_REPLACEMENT
                        self.Arg_Species_Mating_Scheme  = globalsSS.MatingSchemeType.static_Diploid_Sexual_Random_Mating_LS_with_SELFING_with_REPLACEMENT                        
                    pass
                pass
                bool_Exists = bool_Section_Exists and bool_Option_Exists
                self.bool_int_Species_Mating_Scheme__FOUND = bool_Exists
                if bool_Section_Exists:
                    ''' Specify OPTION to get '''
                    str_Option = obj_Config.static_str_Option__Species_Mating_Scheme_Polygamy_Number_Of_Mates
                    value_Type = 0
                    '''Its NOT OK if the OPTION does not exist'''
                    ''' NOTE !!! This has been set to a defalut value until implemented in next version '''
                    bool_Implemented = False
                    '''Read the OPTION'''
                    bool_Option_Exists = False 
                    bool_Option_Exists, value_Option = obj_Config.func_Read_OPTION(bool_Implemented, False, obj_Config, str_Section, str_Option, value_Type)
                    if bool_Option_Exists:
                        self.int_Species_Mating_Scheme_Polygamy_Number_Of_Mates = value_Option
                        self.Arg_Species_Mating_Scheme_Polygamy_Number_Of_Mates = value_Option
                    else:
                        self.int_Species_Mating_Scheme_Polygamy_Number_Of_Mates = 1
                        self.Arg_Species_Mating_Scheme_Polygamy_Number_Of_Mates = 1                        
                    pass
                pass
                bool_Exists = bool_Section_Exists and bool_Option_Exists
                self.bool_int_Species_Mating_Scheme_Polygamy_Number_Of_Mates__FOUND = bool_Exists
                if bool_Section_Exists:
                    ''' Specify OPTION to get '''
                    str_Option = obj_Config.static_str_Option__Species_Mating_Calendar_Month
                    value_Type = 0
                    '''Its NOT OK if the OPTION does not exist'''
                    ''' NOTE !!! This has been set to a defalut value until implemented in next version '''
                    bool_Implemented = False
                    '''Read the OPTION'''
                    bool_Option_Exists = False 
                    bool_Option_Exists, value_Option = obj_Config.func_Read_OPTION(bool_Implemented, False, obj_Config, str_Section, str_Option, value_Type)
                    if bool_Option_Exists:
                        self.int_Species_Mating_Calendar_Month = value_Option
                        self.Arg_Species_Mating_Calendar_Month = value_Option
                    else:
                        self.int_Species_Mating_Calendar_Month = 8
                        self.Arg_Species_Mating_Calendar_Month = 8                            
                    pass
                pass
                bool_Exists = bool_Section_Exists and bool_Option_Exists
                self.bool_int_Species_Mating_Scheme_Polygamy_Number_Of_Mates__FOUND = bool_Exists

                self.Arg_Replicate_Temporal_Evolution_Months = self.Arg_Species_Mating_Calendar_Month
                
 
                ''' <<<<<<< SECTION: Parturition_Details '''
                bool_Section_Exists = False
                ''' Specify SECTION to get '''
                str_Section = obj_Config.static_str_Section__Species_Parturition_Details
                ''' Check if SECTION exists in config file '''
                ''' NOTE !!! This has been set to a defalut value until implemented in next version '''
                bool_Implemented = False                
                bool_Section_Exists = obj_Config.func_Check_If_Config_File_SECTION_Is_Expected(obj_Config, str_Section, bool_Implemented)
                ''' NOTE !!! This has been set to a defalut value until implemented in next version '''
                bool_Section_Exists = True                
                '''Its NOT OK if the SECTION does not exist, however if the SECTION exists, read the option '''
                if bool_Section_Exists:
                    ''' Specify OPTION to get '''
                    str_Option = obj_Config.static_str_Option__Species_Parturition_Calendar_Month
                    value_Type = 0
                    '''Its NOT OK if the OPTION does not exist'''
                    ''' NOTE !!! This has been set to a defalut value until implemented in next version '''
                    bool_Implemented = False
                    '''Read the OPTION'''
                    bool_Option_Exists = False 
                    bool_Option_Exists, value_Option = obj_Config.func_Read_OPTION(bool_Implemented, False, obj_Config, str_Section, str_Option, value_Type)
                    if bool_Option_Exists:
                        self.int_Species_Parturition_Calendar_Month = value_Option
                        self.Arg_Species_Parturition_Calendar_Month  = value_Option
                    else:
                        self.int_Species_Parturition_Calendar_Month = 1
                        self.Arg_Species_Parturition_Calendar_Month  = 1                        
                    pass
                pass
                bool_Exists = bool_Section_Exists and bool_Option_Exists
                self.bool_int_Species_Parturition_Calendar_Month__FOUND = bool_Exists
                if bool_Section_Exists:
                    ''' Specify OPTION to get '''
                    str_Option = obj_Config.static_str_Option__Species_Parturition_Gestation_Length_In_Months
                    value_Type = 0
                    '''Its NOT OK if the OPTION does not exist'''
                    ''' NOTE !!! This has been set to a defalut value until implemented in next version '''
                    bool_Implemented = False
                    '''Read the OPTION'''
                    bool_Option_Exists = False 
                    bool_Option_Exists, value_Option = obj_Config.func_Read_OPTION(bool_Implemented, False, obj_Config, str_Section, str_Option, value_Type)
                    if bool_Option_Exists:
                        self.int_Species_Parturition_Gestation_Length_In_Months = value_Option
                        self.Arg_Species_Parturition_Gestation_Length_In_Months = value_Option
                    else:
                        self.int_Species_Parturition_Gestation_Length_In_Months = 5
                        self.Arg_Species_Parturition_Gestation_Length_In_Months = 5                        
                    pass
                pass
                bool_Exists = bool_Section_Exists and bool_Option_Exists
                self.bool_int_Species_Parturition_Gestation_Length_In_Months__FOUND = bool_Exists
                if bool_Section_Exists:
                    ''' Specify OPTION to get '''
                    str_Option = obj_Config.static_str_Option__Species_Parturition_Reproductive_Rest_Length_In_Months
                    value_Type = 0
                    '''Its NOT OK if the OPTION does not exist'''
                    ''' NOTE !!! This has been set to a defalut value until implemented in next version '''
                    bool_Implemented = False
                    '''Read the OPTION'''
                    bool_Option_Exists = False 
                    bool_Option_Exists, value_Option = obj_Config.func_Read_OPTION(bool_Implemented, False, obj_Config, str_Section, str_Option, value_Type)
                    if bool_Option_Exists:
                        self.int_Species_Parturition_Reproductive_Rest_Length_In_Months = value_Option
                        self.Arg_Species_Parturition_Reproductive_Rest_Length_In_Months = value_Option
                    else:
                        self.int_Species_Parturition_Reproductive_Rest_Length_In_Months = 1
                        self.Arg_Species_Parturition_Reproductive_Rest_Length_In_Months = 1                            
                    pass
                pass
                bool_Exists = bool_Section_Exists and bool_Option_Exists
                self.bool_int_Species_Parturition_Reproductive_Rest_Length_In_Months__FOUND = bool_Exists
                 
                 
                ''' <<<<<<< SECTION: Offspring_Details '''
                bool_Section_Exists = False
                ''' Specify SECTION to get '''
                str_Section = obj_Config.static_str_Section__Species_Offspring_Details
                ''' Check if SECTION exists in config file '''
                bool_Section_Exists = obj_Config.func_Check_If_Config_File_SECTION_Is_Expected(obj_Config, str_Section, True)
                '''Its NOT OK if the SECTION does not exist, however if the SECTION exists, read the option '''
                if bool_Section_Exists:
                    ''' Specify OPTION to get '''
                    str_Option = obj_Config.static_str_Option__Species_Offspring_Sex_Scheme
                    value_Type = ''
                    '''Its NOT OK if the OPTION does not exist'''
                    ''' NOTE !!! This has been set to a defalut value until implemented in next version '''
                    bool_Implemented = False                    
                    '''Read the OPTION'''
                    bool_Option_Exists = False 
                    bool_Option_Exists, value_Option = obj_Config.func_Read_OPTION(bool_Implemented, False, obj_Config, str_Section, str_Option, value_Type)
                    if bool_Option_Exists:
                        self.str_Species_Offspring_Sex_Scheme = value_Option
                        if self.str_Species_Offspring_Sex_Scheme == obj_Config.static_str_Value__Species_Offspring_Sex_Scheme_PROBABILITY_OF_MALES:
                            str_Option = obj_Config.static_str_Option__Species_Offspring_Sex_Scheme_PROBABILITY_OF_MALES_Prob_of_Males 
                            value_Type = 0.0
                            '''Its NOT OK if the OPTION does not exist'''
                            '''Read the OPTION'''
                            bool_Option_Exists = False 
                            bool_Option_Exists, value_Option = obj_Config.func_Read_OPTION(True, False, obj_Config, str_Section, str_Option, value_Type)
                            if bool_Option_Exists:
                                self.float_Species_Offspring_Sex_Scheme_PROBABILITY_OF_MALES_Prob_of_Males  = value_Option
                                self.Arg_Species_Offspring_Sex_Scheme_PROBABILITY_OF_MALES_Prob_of_Males  = value_Option
                                self.Arg_Species_Offspring_Sex_Scheme  = globalsSS.MatingOffspringSexModeSchemeType.static_int_Mating_Offspring_Sex_Mode_PROB_OF_MALES
                            pass
                        elif self.str_Species_Offspring_Sex_Scheme == obj_Config.static_str_Value__Species_Offspring_Sex_Scheme_EXACT_PARITY_MALES_AND_FEMALES:
                            self.float_Species_Offspring_Sex_Scheme_PROBABILITY_OF_MALES_Prob_of_Males = 0.5
                            self.Arg_Species_Offspring_Sex_Scheme_PROBABILITY_OF_MALES_Prob_of_Males  = 0.5
                            self.Arg_Species_Offspring_Sex_Scheme  = globalsSS.MatingOffspringSexModeSchemeType.static_int_Mating_Offspring_Sex_Mode_PROB_OF_MALES
                            pass
                        else:
                            str_Message_Text = 'Non-existent OPTION: ' + str_Option + ' for SECTION: ' + str_Section + ' in config_parser_Config: obj_Config_Batch_Scenario' 
                            int_Stack_Trace_Level = 2
                            obj_SSErrorOp.func_Error_Handler__Caught_Exceptions(int_Stack_Trace_Level, str_Message_Text, tup_Args = (self.str_App_Arg_Output_Base_Path, self.strUniqueRunID))
                        pass
                    else:
                        self.float_Species_Offspring_Sex_Scheme_PROBABILITY_OF_MALES_Prob_of_Males = 0.5
                        self.Arg_Species_Offspring_Sex_Scheme_PROBABILITY_OF_MALES_Prob_of_Males  = 0.5
                        self.Arg_Species_Offspring_Sex_Scheme  = globalsSS.MatingOffspringSexModeSchemeType.static_int_Mating_Offspring_Sex_Mode_PROB_OF_MALES
                    pass
                pass
                bool_Exists = bool_Section_Exists and bool_Option_Exists
                self.bool_str_Species_Offspring_Sex_Scheme__FOUND = bool_Exists
                '''Its NOT OK if the SECTION does not exist, however if the SECTION exists, read the option '''
                if bool_Section_Exists:
                    ''' Specify OPTION to get '''
                    str_Option = obj_Config.static_str_Option__Species_Offspring_Distribution
                    value_Type = ''
                    '''Its NOT OK if the OPTION does not exist'''
                    '''Read the OPTION'''
                    bool_Option_Exists = False 
                    bool_Option_Exists, value_Option = obj_Config.func_Read_OPTION(True, False, obj_Config, str_Section, str_Option, value_Type)
                    if bool_Option_Exists:
                        self.str_Species_Offspring_Distribution = value_Option
                        self.Arg_Species_Offspring_Distribution = value_Option
                        if self.str_Species_Offspring_Distribution == obj_Config.static_str_Value__Species_Offspring_Distribution_ABSOLUTE:
                            str_Option = obj_Config.static_str_Option__Species_Offspring_Distribution_ABSOLUTE_Offspring_Number 
                            value_Type = 0
                            '''Its NOT OK if the OPTION does not exist'''
                            '''Read the OPTION'''
                            bool_Option_Exists = False 
                            bool_Option_Exists, value_Option = obj_Config.func_Read_OPTION(True, False, obj_Config, str_Section, str_Option, value_Type)
                            if bool_Option_Exists:
                                self.int_Species_Offspring_Distribution_ABSOLUTE_Offspring_Number  = value_Option
                                self.Arg_Species_Offspring_Distribution_ABSOLUTE_Offspring_Number  = value_Option
                            pass
                        elif self.str_Species_Offspring_Distribution == obj_Config.static_str_Value__Species_Offspring_Distribution_POISSON:
                            str_Option = obj_Config.static_str_Option__Species_Offspring_Distribution_POISSON_Offspring_Mean_Number 
                            value_Type = 0.0
                            '''Its NOT OK if the OPTION does not exist'''
                            '''Read the OPTION'''
                            bool_Option_Exists = False 
                            bool_Option_Exists, value_Option = obj_Config.func_Read_OPTION(True, False, obj_Config, str_Section, str_Option, value_Type)
                            if bool_Option_Exists:
                                self.float_Species_Offspring_Distribution_POISSON_Offspring_Mean_Number  = value_Option
                                self.Arg_Species_Offspring_Distribution_POISSON_Offspring_Mean_Number  = value_Option
                            pass
                        elif self.str_Species_Offspring_Distribution == obj_Config.static_str_Value__Species_Offspring_Distribution_BINOMIAL:
                            str_Option = obj_Config.static_str_Option__Species_Offspring_Distribution_BINOMIAL_Offspring_Mean_Number 
                            value_Type = 0.0
                            '''Its NOT OK if the OPTION does not exist'''
                            '''Read the OPTION'''
                            bool_Option_Exists = False 
                            bool_Option_Exists, value_Option = obj_Config.func_Read_OPTION(True, False, obj_Config, str_Section, str_Option, value_Type)
                            if bool_Option_Exists:
                                self.float_Species_Offspring_Distribution_BINOMIAL_Offspring_Mean_Number  = value_Option
                                self.Arg_Species_Offspring_Distribution_BINOMIAL_Offspring_Mean_Number  = value_Option
                            pass
                            str_Option = obj_Config.static_str_Option__Species_Offspring_Distribution_BINOMIAL_Offspring_StdDev 
                            value_Type = 0.0
                            '''Its NOT OK if the OPTION does not exist'''
                            '''Read the OPTION'''
                            bool_Option_Exists = False 
                            bool_Option_Exists, value_Option = obj_Config.func_Read_OPTION(True, False, obj_Config, str_Section, str_Option, value_Type)
                            if bool_Option_Exists:
                                self.float_Species_Offspring_Distribution_BINOMIAL_Offspring_StdDev  = value_Option
                                self.Arg_Species_Offspring_Distribution_BINOMIAL_Offsping_StdDev  = value_Option
                            pass
                        elif self.str_Species_Offspring_Distribution == obj_Config.static_str_Value__Species_Offspring_Distribution_UNIFORM:
                            str_Option = obj_Config.static_str_Option__Species_Offspring_Distribution_UNIFORM_Offspring_Min 
                            value_Type = 0
                            '''Its NOT OK if the OPTION does not exist'''
                            '''Read the OPTION'''
                            bool_Option_Exists = False 
                            bool_Option_Exists, value_Option = obj_Config.func_Read_OPTION(True, False, obj_Config, str_Section, str_Option, value_Type)
                            if bool_Option_Exists:
                                self.int_Species_Offspring_Distribution_UNIFORM_Offspring_Min  = value_Option
                                self.Arg_Species_Offspring_Distribution_UNIFORM_Offsping_Min  = value_Option
                            pass
                            str_Option = obj_Config.static_str_Option__Species_Offspring_Distribution_UNIFORM_Offspring_Max 
                            value_Type = 0
                            '''Its NOT OK if the OPTION does not exist'''
                            '''Read the OPTION'''
                            bool_Option_Exists = False 
                            bool_Option_Exists, value_Option = obj_Config.func_Read_OPTION(True, False, obj_Config, str_Section, str_Option, value_Type)
                            if bool_Option_Exists:
                                self.int_Species_Offspring_Distribution_UNIFORM_Offspring_Max  = value_Option
                                self.Arg_Species_Offspring_Distribution_UNIFORM_Offsping_Max  = value_Option
                            pass
                        elif self.str_Species_Offspring_Distribution == obj_Config.static_str_Value__Species_Offspring_Distribution_GEOMETRIC:
                            str_Option = obj_Config.static_str_Option__Species_Offspring_Distribution_GEOMETRIC_Offspring_Mean 
                            value_Type = 0.0
                            '''Its NOT OK if the OPTION does not exist'''
                            '''Read the OPTION'''
                            bool_Option_Exists = False 
                            bool_Option_Exists, value_Option = obj_Config.func_Read_OPTION(True, False, obj_Config, str_Section, str_Option, value_Type)
                            if bool_Option_Exists:
                                self.float_Species_Offspring_Distribution_GEOMETRIC_Offspring_Mean  = value_Option
                                self.Arg_Species_Offspring_Distribution_GEOMETRIC_Offsping_Probability  = float(1)/float(value_Option)
                            pass
                        else:
                            str_Message_Text = 'Non-existent OPTION: ' + str_Option + ' for SECTION: ' + str_Section + ' in config_parser_Config: obj_Config_Batch_Scenario' 
                            int_Stack_Trace_Level = 2
                            obj_SSErrorOp.func_Error_Handler__Caught_Exceptions(int_Stack_Trace_Level, str_Message_Text, tup_Args = (self.str_App_Arg_Output_Base_Path, self.strUniqueRunID))
                        pass
                    pass
                pass
                bool_Exists = bool_Section_Exists and bool_Option_Exists
                self.bool_str_Species_Offspring_Distribution__FOUND = bool_Exists
            
 
                ''' <<<<<<< SECTION: Natural_Mortality_Details__MALE '''
                bool_Section_Exists = False
                ''' Specify SECTION to get '''
                str_Section = obj_Config.static_str_Section__Species_Demographic_Natural_Mortality_Details__MALE
                ''' NOTE !!! This has been set to a defalut value until implemented in next version '''
                bool_Implemented = False
                ''' Check if SECTION exists in config file '''
                bool_Section_Exists = obj_Config.func_Check_If_Config_File_SECTION_Is_Expected(obj_Config, str_Section, bool_Implemented)
                ''' NOTE !!! This has been set to a defalut value until implemented in next version '''
                bool_Section_Exists = True
                '''Its NOT OK if the SECTION does not exist, however if the SECTION exists, read the option '''
                if bool_Section_Exists:
                    ''' Specify OPTION to get '''
                    str_Option = obj_Config.static_str_Option__Species_Demographic_Natural_Mortality_Model_Annual_Mating_That_Mortality_Starts__MALE
                    value_Type = 0
                    '''Its NOT OK if the OPTION does not exist'''
                    ''' NOTE !!! This has been set to a defalut value until implemented in next version '''
                    bool_Implemented = False                    
                    '''Read the OPTION'''
                    bool_Option_Exists = False 
                    bool_Option_Exists, value_Option = obj_Config.func_Read_OPTION(bool_Implemented, False, obj_Config, str_Section, str_Option, value_Type)
                    if bool_Option_Exists:
                        self.int_Species_Demographic_Natural_Mortality_Model_Annual_Mating_That_Mortality_Starts__MALE = value_Option
                        self.Arg_Natural_Mortality_Model_Annual_Mating_That_Mortality_Starts__MALE  = value_Option
                    else:
                        self.int_Species_Demographic_Natural_Mortality_Model_Annual_Mating_That_Mortality_Starts__MALE = 1
                        self.Arg_Natural_Mortality_Model_Annual_Mating_That_Mortality_Starts__MALE  = 1
                    pass
                pass
                bool_Exists = bool_Section_Exists and bool_Option_Exists
                self.bool_int_Species_Demographic_Natural_Mortality_Model_Annual_Mating_That_Mortality_Starts__MALE__FOUND = bool_Exists
                '''Its NOT OK if the SECTION does not exist, however if the SECTION exists, read the option '''
                if bool_Section_Exists:
                    ''' Specify OPTION to get '''
                    str_Option = obj_Config.static_str_Option__Species_Demographic_Natural_Mortality_Model__MALE
                    value_Type = 0
                    '''Its NOT OK if the OPTION does not exist'''
                    ''' NOTE !!! This has been set to a defalut value until implemented in next version '''
                    bool_Implemented = False
                    '''Read the OPTION'''
                    bool_Option_Exists = False 
                    bool_Option_Exists, value_Option = obj_Config.func_Read_OPTION(bool_Implemented, False, obj_Config, str_Section, str_Option, value_Type)
                    if bool_Option_Exists:
                        self.int_Species_Demographic_Natural_Mortality_Model__MALE = value_Option
                        self.Arg_Natural_Mortality_Model__MALE  = value_Option
                    else:
                        self.int_Species_Demographic_Natural_Mortality_Model__MALE = 3
                        self.Arg_Natural_Mortality_Model__MALE  = 3                        
                    pass
                pass
                bool_Exists = bool_Section_Exists and bool_Option_Exists
                self.bool_int_Species_Demographic_Natural_Mortality_Model__MALE__FOUND = bool_Exists
                '''Its NOT OK if the SECTION does not exist, however if the SECTION exists, read the option '''
                if bool_Section_Exists:
                    ''' Specify OPTION to get '''
                    str_Option = obj_Config.static_str_Option__Species_Demographic_Natural_Mortality_Model_Scaling_Total__MALE
                    value_Type = 0
                    '''Its NOT OK if the OPTION does not exist'''
                    ''' NOTE !!! This has been set to a defalut value until implemented in next version '''
                    bool_Implemented = False
                    '''Read the OPTION'''
                    bool_Option_Exists = False 
                    bool_Option_Exists, value_Option = obj_Config.func_Read_OPTION(bool_Implemented, False, obj_Config, str_Section, str_Option, value_Type)
                    if bool_Option_Exists:
                        self.int_Species_Demographic_Natural_Mortality_Model_Scaling_Total__MALE = value_Option
                        self.Arg_Natural_Mortality_Model_Scaling_Total__MALE  = value_Option
                    else:
                        self.int_Species_Demographic_Natural_Mortality_Model_Scaling_Total__MALE = 1
                        self.Arg_Natural_Mortality_Model_Scaling_Total__MALE  = 1                        
                    pass
                pass
                bool_Exists = bool_Section_Exists and bool_Option_Exists
                self.bool_int_Species_Demographic_Natural_Mortality_Model_Scaling_Total__MALE__FOUND = bool_Exists

                ''' <<<<<<< SECTION: CSV_Age_And_Natural_Mortality_Rate__MALE '''
                bool_Section_Exists = False
                ''' Specify SECTION to get '''
                str_Section = obj_Config.static_str_Section__Species_Demographic_Natural_Mortality_CSV_Age_And_Mortality_Rate__MALE
                ''' Check if SECTION exists in config file '''
                bool_Section_Exists = obj_Config.func_Check_If_Config_File_SECTION_Is_Expected(obj_Config, str_Section, True)
                '''Its NOT OK if the SECTION does not exist, however if the SECTION exists, read the option '''
                if bool_Section_Exists:
                    ''' Specify OPTION to get '''
                    str_Option = str(1) #First Age_In_years option which should always be present
                    value_Type = 0.0
                    '''Its NOT OK if the OPTION does not exist'''
                    '''Read the OPTION'''
                    bool_Option_Exists = False 
                    bool_Option_Exists, dict_Option = obj_Config.func_Read_OPTION(True, True, obj_Config, str_Section, str_Option, value_Type)
                    if bool_Option_Exists:
                        self.dict_Species_Demographic_Natural_Mortality_CSV_Age_And_Mortality_Rate__MALE = OrderedDict([((int(key_str_Age)+1), float(value_str_Rate)) for key_str_Age, value_str_Rate in dict_Option.items()])
                        ''' Convert to Age In Months '''
                        self.Arg_dict_Natural_Mortality_CSV_Age_And_Mortality_Rate__MALE = OrderedDict([((int(key_str_Age)+1)*12, float(value_str_Rate)) for key_str_Age, value_str_Rate in dict_Option.items()])
                    pass
                pass
                bool_Exists = bool_Section_Exists and bool_Option_Exists
                self.bool_dict_Species_Demographic_Natural_Mortality_CSV_Age_And_Mortality_Rate__MALE__FOUND = bool_Exists

                ''' <<<<<<< SECTION: Natural_Mortality_Details__FEMALE '''
                bool_Section_Exists = False
                ''' Specify SECTION to get '''
                str_Section = obj_Config.static_str_Section__Species_Demographic_Natural_Mortality_Details__FEMALE
                ''' Check if SECTION exists in config file '''
                ''' NOTE !!! This has been set to a defalut value until implemented in next version '''
                bool_Implemented = False
                ''' Check if SECTION exists in config file '''
                bool_Section_Exists = obj_Config.func_Check_If_Config_File_SECTION_Is_Expected(obj_Config, str_Section, bool_Implemented)
                ''' NOTE !!! This has been set to a defalut value until implemented in next version '''
                bool_Section_Exists = True
                '''Its NOT OK if the SECTION does not exist, however if the SECTION exists, read the option '''
                if bool_Section_Exists:
                    ''' Specify OPTION to get '''
                    str_Option = obj_Config.static_str_Option__Species_Demographic_Natural_Mortality_Model_Annual_Mating_That_Mortality_Starts__FEMALE
                    value_Type = 0
                    '''Its NOT OK if the OPTION does not exist'''
                    ''' NOTE !!! This has been set to a defalut value until implemented in next version '''
                    bool_Implemented = False                       
                    '''Read the OPTION'''
                    bool_Option_Exists = False 
                    bool_Option_Exists, value_Option = obj_Config.func_Read_OPTION(bool_Implemented, False, obj_Config, str_Section, str_Option, value_Type)
                    if bool_Option_Exists:
                        self.int_Species_Demographic_Natural_Mortality_Model_Annual_Mating_That_Mortality_Starts__FEMALE = value_Option
                        self.Arg_Natural_Mortality_Model_Annual_Mating_That_Mortality_Starts__FEMALE  = value_Option
                    else:
                        self.int_Species_Demographic_Natural_Mortality_Model_Annual_Mating_That_Mortality_Starts__FEMALE = 1
                        self.Arg_Natural_Mortality_Model_Annual_Mating_That_Mortality_Starts__FEMALE  = 1
                    pass
                pass
                bool_Exists = bool_Section_Exists and bool_Option_Exists
                self.bool_int_Species_Demographic_Natural_Mortality_Model_Annual_Mating_That_Mortality_Starts__FEMALE__FOUND = bool_Exists
                '''Its NOT OK if the SECTION does not exist, however if the SECTION exists, read the option '''
                if bool_Section_Exists:
                    ''' Specify OPTION to get '''
                    str_Option = obj_Config.static_str_Option__Species_Demographic_Natural_Mortality_Model__FEMALE
                    value_Type = 0
                    '''Its NOT OK if the OPTION does not exist'''
                    ''' NOTE !!! This has been set to a defalut value until implemented in next version '''
                    bool_Implemented = False                       
                    '''Read the OPTION'''
                    bool_Option_Exists = False 
                    bool_Option_Exists, value_Option = obj_Config.func_Read_OPTION(bool_Implemented, False, obj_Config, str_Section, str_Option, value_Type)
                    if bool_Option_Exists:
                        self.int_Species_Demographic_Natural_Mortality_Model__FEMALE = value_Option
                        self.Arg_Natural_Mortality_Model__FEMALE  = value_Option
                    else:
                        self.int_Species_Demographic_Natural_Mortality_Model__FEMALE = 3
                        self.Arg_Natural_Mortality_Model__FEMALE  = 3                        
                    pass
                pass
                bool_Exists = bool_Section_Exists and bool_Option_Exists
                self.bool_int_Species_Demographic_Natural_Mortality_Model__FEMALE__FOUND = bool_Exists
                '''Its NOT OK if the SECTION does not exist, however if the SECTION exists, read the option '''
                if bool_Section_Exists:
                    ''' Specify OPTION to get '''
                    str_Option = obj_Config.static_str_Option__Species_Demographic_Natural_Mortality_Model_Scaling_Total__FEMALE
                    value_Type = 0
                    '''Its NOT OK if the OPTION does not exist'''
                    ''' NOTE !!! This has been set to a defalut value until implemented in next version '''
                    bool_Implemented = False                       
                    '''Read the OPTION'''
                    bool_Option_Exists = False 
                    bool_Option_Exists, value_Option = obj_Config.func_Read_OPTION(bool_Implemented, False, obj_Config, str_Section, str_Option, value_Type)
                    if bool_Option_Exists:
                        self.int_Species_Demographic_Natural_Mortality_Model_Scaling_Total__FEMALE = value_Option
                        self.Arg_Natural_Mortality_Model_Scaling_Total__FEMALE  = value_Option
                    else:
                        self.int_Species_Demographic_Natural_Mortality_Model_Scaling_Total__FEMALE = 1
                        self.Arg_Natural_Mortality_Model_Scaling_Total__FEMALE  = 1
                    pass
                pass
                bool_Exists = bool_Section_Exists and bool_Option_Exists
                self.bool_int_Species_Demographic_Natural_Mortality_Model_Scaling_Total__FEMALE__FOUND = bool_Exists

                ''' <<<<<<< SECTION: CSV_Age_And_Natural_Mortality_Rate__FEMALE '''
                bool_Section_Exists = False
                ''' Specify SECTION to get '''
                str_Section = obj_Config.static_str_Section__Species_Demographic_Natural_Mortality_CSV_Age_And_Mortality_Rate__FEMALE
                ''' Check if SECTION exists in config file '''
                bool_Section_Exists = obj_Config.func_Check_If_Config_File_SECTION_Is_Expected(obj_Config, str_Section, True)
                '''Its NOT OK if the SECTION does not exist, however if the SECTION exists, read the option '''
                if bool_Section_Exists:
                    ''' Specify OPTION to get '''
                    str_Option = str(1) #First Age_In_years option which should always be present
                    value_Type = 0.0
                    '''Its NOT OK if the OPTION does not exist'''
                    '''Read the OPTION'''
                    bool_Option_Exists = False 
                    bool_Option_Exists, dict_Option = obj_Config.func_Read_OPTION(True, True, obj_Config, str_Section, str_Option, value_Type)
                    if bool_Option_Exists:
                        self.dict_Species_Demographic_Natural_Mortality_CSV_Age_And_Mortality_Rate__FEMALE = OrderedDict([((int(key_str_Age)+1), float(value_str_Rate)) for key_str_Age, value_str_Rate in dict_Option.items()])
                        ''' Convert to Age In Months '''
                        self.Arg_dict_Natural_Mortality_CSV_Age_And_Mortality_Rate__FEMALE = OrderedDict([((int(key_str_Age)+1)*12, float(value_str_Rate)) for key_str_Age, value_str_Rate in dict_Option.items()])
                    pass
                pass
                bool_Exists = bool_Section_Exists and bool_Option_Exists
                self.bool_dict_Species_Demographic_Natural_Mortality_CSV_Age_And_Mortality_Rate__FEMALE__FOUND = bool_Exists


                ''' <<<<<<< SECTION: UnNatural_Mortality_Details__MALE '''
                bool_Section_Exists = False
                ''' Specify SECTION to get '''
                str_Section = obj_Config.static_str_Section__Species_Demographic_UnNatural_Mortality_Details__MALE
                ''' Check if SECTION exists in config file '''
                ''' NOTE !!! This has been set to a defalut value until implemented in next version '''
                bool_Implemented = False
                ''' Check if SECTION exists in config file '''
                bool_Section_Exists = obj_Config.func_Check_If_Config_File_SECTION_Is_Expected(obj_Config, str_Section, bool_Implemented)
                ''' NOTE !!! This has been set to a defalut value until implemented in next version '''
                bool_Section_Exists = True
                '''Its NOT OK if the SECTION does not exist, however if the SECTION exists, read the option '''
                if bool_Section_Exists:
                    ''' Specify OPTION to get '''
                    str_Option = obj_Config.static_str_Option__Species_Demographic_UnNatural_Mortality_Model_Annual_Mating_That_Mortality_Starts__MALE
                    value_Type = 0
                    '''Its NOT OK if the OPTION does not exist'''
                    ''' NOTE !!! This has been set to a defalut value until implemented in next version '''
                    bool_Implemented = False                     
                    '''Read the OPTION'''
                    bool_Option_Exists = False 
                    bool_Option_Exists, value_Option = obj_Config.func_Read_OPTION(bool_Implemented, False, obj_Config, str_Section, str_Option, value_Type)
                    if bool_Option_Exists:
                        self.int_Species_Demographic_UnNatural_Mortality_Model_Annual_Mating_That_Mortality_Starts__MALE = value_Option
                        self.Arg_UnNatural_Mortality_Model_Annual_Mating_That_Mortality_Starts__MALE  = value_Option
                    else:
                        self.int_Species_Demographic_UnNatural_Mortality_Model_Annual_Mating_That_Mortality_Starts__MALE = 1
                        self.Arg_UnNatural_Mortality_Model_Annual_Mating_That_Mortality_Starts__MALE  = 1
                    pass
                pass
                bool_Exists = bool_Section_Exists and bool_Option_Exists
                self.bool_int_Species_Demographic_UnNatural_Mortality_Model_Annual_Mating_That_Mortality_Starts__MALE__FOUND = bool_Exists
                '''Its NOT OK if the SECTION does not exist, however if the SECTION exists, read the option '''
                if bool_Section_Exists:
                    ''' Specify OPTION to get '''
                    str_Option = obj_Config.static_str_Option__Species_Demographic_UnNatural_Mortality_Model__MALE
                    value_Type = 0
                    '''Its NOT OK if the OPTION does not exist'''
                    ''' NOTE !!! This has been set to a defalut value until implemented in next version '''
                    bool_Implemented = False                    
                    '''Read the OPTION'''
                    bool_Option_Exists = False 
                    bool_Option_Exists, value_Option = obj_Config.func_Read_OPTION(bool_Implemented, False, obj_Config, str_Section, str_Option, value_Type)
                    if bool_Option_Exists:
                        self.int_Species_Demographic_UnNatural_Mortality_Model__MALE = value_Option
                        self.Arg_UnNatural_Mortality_Model__MALE  = value_Option
                    else:
                        self.int_Species_Demographic_UnNatural_Mortality_Model__MALE = 3
                        self.Arg_UnNatural_Mortality_Model__MALE  = 3                        
                    pass
                pass
                bool_Exists = bool_Section_Exists and bool_Option_Exists
                self.bool_int_Species_Demographic_UnNatural_Mortality_Model__MALE__FOUND = bool_Exists
                '''Its NOT OK if the SECTION does not exist, however if the SECTION exists, read the option '''
                if bool_Section_Exists:
                    ''' Specify OPTION to get '''
                    str_Option = obj_Config.static_str_Option__Species_Demographic_UnNatural_Mortality_Model_Scaling_Total__MALE
                    value_Type = 0
                    '''Its NOT OK if the OPTION does not exist'''
                    ''' NOTE !!! This has been set to a defalut value until implemented in next version '''
                    bool_Implemented = False                       
                    '''Read the OPTION'''
                    bool_Option_Exists = False 
                    bool_Option_Exists, value_Option = obj_Config.func_Read_OPTION(bool_Implemented, False, obj_Config, str_Section, str_Option, value_Type)
                    if bool_Option_Exists:
                        self.int_Species_Demographic_UnNatural_Mortality_Model_Scaling_Total__MALE = value_Option
                        self.Arg_UnNatural_Mortality_Model_Scaling_Total__MALE  = value_Option
                    else:
                        self.int_Species_Demographic_UnNatural_Mortality_Model_Scaling_Total__MALE = 1
                        self.Arg_UnNatural_Mortality_Model_Scaling_Total__MALE  = 1
                    pass
                pass
                bool_Exists = bool_Section_Exists and bool_Option_Exists
                self.bool_int_Species_Demographic_UnNatural_Mortality_Model_Scaling_Total__MALE__FOUND = bool_Exists


                ''' <<<<<<< SECTION: CSV_Age_And_UnNatural_Mortality_Rate__MALE '''
                bool_Section_Exists = False
                ''' Specify SECTION to get '''
                str_Section = obj_Config.static_str_Section__Species_Demographic_UnNatural_Mortality_CSV_Age_And_Mortality_Rate__MALE
                ''' Check if SECTION exists in config file '''
                ''' NOTE !!! This has been set to a defalut value until implemented in next version '''
                bool_Implemented = False
                ''' Check if SECTION exists in config file '''
                bool_Section_Exists = obj_Config.func_Check_If_Config_File_SECTION_Is_Expected(obj_Config, str_Section, bool_Implemented)
                ''' NOTE !!! This has been set to a defalut value until implemented in next version '''
                bool_Section_Exists = True
                '''Its NOT OK if the SECTION does not exist, however if the SECTION exists, read the option '''
                if bool_Section_Exists:
                    ''' Specify OPTION to get '''
                    str_Option = str(1) #First Age_In_years option which should always be present
                    value_Type = 0.0
                    '''Its NOT OK if the OPTION does not exist'''
                    ''' NOTE !!! This has been set to a defalut value until implemented in next version '''
                    bool_Implemented = False                    
                    '''Read the OPTION'''
                    bool_Option_Exists = False 
                    bool_Option_Exists, dict_Option = obj_Config.func_Read_OPTION(bool_Implemented, True, obj_Config, str_Section, str_Option, value_Type)
                    if bool_Option_Exists:
                        self.dict_Species_Demographic_UnNatural_Mortality_CSV_Age_And_Mortality_Rate__MALE = OrderedDict([((int(key_str_Age)+1), float(value_str_Rate)) for key_str_Age, value_str_Rate in dict_Option.items()])
                        ''' Convert to Age In Months '''
                        self.Arg_dict_UnNatural_Mortality_CSV_Age_And_Mortality_Rate__MALE = OrderedDict([((int(key_str_Age)+1)*12, float(value_str_Rate)) for key_str_Age, value_str_Rate in dict_Option.items()])
                    else:
                        self.dict_Species_Demographic_UnNatural_Mortality_CSV_Age_And_Mortality_Rate__MALE = OrderedDict(self.dict_Species_Demographic_Natural_Mortality_CSV_Age_And_Mortality_Rate__MALE)
                        ''' Convert to Age In Months '''
                        self.Arg_dict_UnNatural_Mortality_CSV_Age_And_Mortality_Rate__MALE = OrderedDict(self.Arg_dict_Natural_Mortality_CSV_Age_And_Mortality_Rate__MALE)
                    pass
                pass
                bool_Exists = bool_Section_Exists and bool_Option_Exists
                self.bool_dict_Species_Demographic_UnNatural_Mortality_CSV_Age_And_Mortality_Rate__MALE__FOUND = bool_Exists


                ''' <<<<<<< SECTION: UnNatural_Mortality_Details__FEMALE '''
                bool_Section_Exists = False
                ''' Specify SECTION to get '''
                str_Section = obj_Config.static_str_Section__Species_Demographic_UnNatural_Mortality_Details__FEMALE
                ''' Check if SECTION exists in config file '''
                ''' NOTE !!! This has been set to a defalut value until implemented in next version '''
                bool_Implemented = False
                ''' Check if SECTION exists in config file '''
                bool_Section_Exists = obj_Config.func_Check_If_Config_File_SECTION_Is_Expected(obj_Config, str_Section, bool_Implemented)
                ''' NOTE !!! This has been set to a defalut value until implemented in next version '''
                bool_Section_Exists = True
                '''Its NOT OK if the SECTION does not exist, however if the SECTION exists, read the option '''
                if bool_Section_Exists:
                    ''' Specify OPTION to get '''
                    str_Option = obj_Config.static_str_Option__Species_Demographic_UnNatural_Mortality_Model_Annual_Mating_That_Mortality_Starts__FEMALE
                    value_Type = 0
                    '''Its NOT OK if the OPTION does not exist'''
                    ''' NOTE !!! This has been set to a defalut value until implemented in next version '''
                    bool_Implemented = False                    
                    '''Read the OPTION'''
                    bool_Option_Exists = False 
                    bool_Option_Exists, value_Option = obj_Config.func_Read_OPTION(bool_Implemented, False, obj_Config, str_Section, str_Option, value_Type)
                    if bool_Option_Exists:
                        self.int_Species_Demographic_UnNatural_Mortality_Model_Annual_Mating_That_Mortality_Starts__FEMALE = value_Option
                        self.Arg_UnNatural_Mortality_Model_Annual_Mating_That_Mortality_Starts__FEMALE  = value_Option
                    else:
                        self.int_Species_Demographic_UnNatural_Mortality_Model_Annual_Mating_That_Mortality_Starts__FEMALE = 1
                        self.Arg_UnNatural_Mortality_Model_Annual_Mating_That_Mortality_Starts__FEMALE  = 1
                    pass
                pass
                bool_Exists = bool_Section_Exists and bool_Option_Exists
                self.bool_int_Species_Demographic_UnNatural_Mortality_Model_Annual_Mating_That_Mortality_Starts__FEMALE__FOUND = bool_Exists
                '''Its NOT OK if the SECTION does not exist, however if the SECTION exists, read the option '''
                if bool_Section_Exists:
                    ''' Specify OPTION to get '''
                    str_Option = obj_Config.static_str_Option__Species_Demographic_UnNatural_Mortality_Model__FEMALE
                    value_Type = 0
                    '''Its NOT OK if the OPTION does not exist'''
                    ''' NOTE !!! This has been set to a defalut value until implemented in next version '''
                    bool_Implemented = False                      
                    '''Read the OPTION'''
                    bool_Option_Exists = False 
                    bool_Option_Exists, value_Option = obj_Config.func_Read_OPTION(bool_Implemented, False, obj_Config, str_Section, str_Option, value_Type)
                    if bool_Option_Exists:
                        self.int_Species_Demographic_UnNatural_Mortality_Model__FEMALE = value_Option
                        self.Arg_UnNatural_Mortality_Model__FEMALE  = value_Option
                    else:
                        self.int_Species_Demographic_UnNatural_Mortality_Model__FEMALE = 3
                        self.Arg_UnNatural_Mortality_Model__FEMALE  = 3                        
                    pass
                pass
                bool_Exists = bool_Section_Exists and bool_Option_Exists
                self.bool_int_Species_Demographic_UnNatural_Mortality_Model__FEMALE__FOUND = bool_Exists
                '''Its NOT OK if the SECTION does not exist, however if the SECTION exists, read the option '''
                if bool_Section_Exists:
                    ''' Specify OPTION to get '''
                    str_Option = obj_Config.static_str_Option__Species_Demographic_UnNatural_Mortality_Model_Scaling_Total__FEMALE
                    value_Type = 0
                    '''Its NOT OK if the OPTION does not exist'''
                    ''' NOTE !!! This has been set to a defalut value until implemented in next version '''
                    bool_Implemented = False                     
                    '''Read the OPTION'''
                    bool_Option_Exists = False 
                    bool_Option_Exists, value_Option = obj_Config.func_Read_OPTION(bool_Implemented, False, obj_Config, str_Section, str_Option, value_Type)
                    if bool_Option_Exists:
                        self.int_Species_Demographic_UnNatural_Mortality_Model_Scaling_Total__FEMALE = value_Option
                        self.Arg_UnNatural_Mortality_Model_Scaling_Total__FEMALE  = value_Option
                    else:
                        self.int_Species_Demographic_UnNatural_Mortality_Model_Scaling_Total__FEMALE = 1
                        self.Arg_UnNatural_Mortality_Model_Scaling_Total__FEMALE  = 1
                    pass
                pass
                bool_Exists = bool_Section_Exists and bool_Option_Exists
                self.bool_int_Species_Demographic_UnNatural_Mortality_Model_Scaling_Total__FEMALE__FOUND = bool_Exists

                 
#                 ''' <<<<<<< SECTION: UnNatural_Mortality_Details__BOTH '''
#                 bool_Section_Exists = False
#                 ''' Specify SECTION to get '''
#                 str_Section = obj_Config.static_str_Section__Species_Demographic_UnNatural_Mortality_Details__BOTH
#                 ''' Check if SECTION exists in config file '''
#                 bool_Section_Exists = obj_Config.func_Check_If_Config_File_SECTION_Is_Expected(obj_Config, str_Section, True)
#                 '''Its NOT OK if the SECTION does not exist, however if the SECTION exists, read the option '''
#                 if bool_Section_Exists:
#                     ''' Specify OPTION to get '''
#                     str_Option = obj_Config.static_str_Option__Species_Demographic_UnNatural_Mortality_Allowed__BOTH
#                     value_Type = False
#                     '''Its NOT OK if the OPTION does not exist'''
#                     '''Read the OPTION'''
#                     bool_Option_Exists = False 
#                     bool_Option_Exists, value_Option = obj_Config.func_Read_OPTION(True, False, obj_Config, str_Section, str_Option, value_Type)
#                     self.Arg_Allow_UnNatural_Mortality = False
#                     if bool_Option_Exists:
#                         self.bool_Species_Demographic_UnNatural_Mortality_Allowed__BOTH = value_Option
#                         self.Arg_Allow_UnNatural_Mortality__BOTH  = value_Option
#                     pass
#                 pass
#                 bool_Exists = bool_Section_Exists and bool_Option_Exists
#                 self.bool_Species_Demographic_UnNatural_Mortality_Allowed__BOTH__FOUND = bool_Exists


                ''' <<<<<<< SECTION: CSV_Age_And_UnNatural_Mortality_Rate__FEMALE '''
                bool_Section_Exists = False
                ''' Specify SECTION to get '''
                str_Section = obj_Config.static_str_Section__Species_Demographic_UnNatural_Mortality_CSV_Age_And_Mortality_Rate__FEMALE
                ''' Check if SECTION exists in config file '''
                ''' NOTE !!! This has been set to a defalut value until implemented in next version '''
                bool_Implemented = False
                ''' Check if SECTION exists in config file '''
                bool_Section_Exists = obj_Config.func_Check_If_Config_File_SECTION_Is_Expected(obj_Config, str_Section, bool_Implemented)
                ''' NOTE !!! This has been set to a defalut value until implemented in next version '''
                bool_Section_Exists = True
                '''Its NOT OK if the SECTION does not exist, however if the SECTION exists, read the option '''
                if bool_Section_Exists:
                    ''' Specify OPTION to get '''
                    str_Option = str(1) #First Age_In_years option which should always be present
                    value_Type = 0.0
                    '''Its NOT OK if the OPTION does not exist'''
                    ''' NOTE !!! This has been set to a defalut value until implemented in next version '''
                    bool_Implemented = False                     
                    '''Read the OPTION'''
                    bool_Option_Exists = False 
                    bool_Option_Exists, dict_Option = obj_Config.func_Read_OPTION(bool_Implemented, True, obj_Config, str_Section, str_Option, value_Type)
                    if bool_Option_Exists:
                        self.dict_Species_Demographic_UnNatural_Mortality_CSV_Age_And_Mortality_Rate__FEMALE = OrderedDict([((int(key_str_Age)+1), float(value_str_Rate)) for key_str_Age, value_str_Rate in dict_Option.items()])
                        ''' Convert to Age In Months '''
                        self.Arg_dict_UnNatural_Mortality_CSV_Age_And_Mortality_Rate__FEMALE = OrderedDict([((int(key_str_Age)+1)*12, float(value_str_Rate)) for key_str_Age, value_str_Rate in dict_Option.items()])
                    else:
                        self.dict_Species_Demographic_UnNatural_Mortality_CSV_Age_And_Mortality_Rate__FEMALE = OrderedDict(self.dict_Species_Demographic_Natural_Mortality_CSV_Age_And_Mortality_Rate__FEMALE)
                        ''' Convert to Age In Months '''
                        self.Arg_dict_UnNatural_Mortality_CSV_Age_And_Mortality_Rate__FEMALE = OrderedDict(self.Arg_dict_Natural_Mortality_CSV_Age_And_Mortality_Rate__FEMALE)
                    pass
                pass
                bool_Exists = bool_Section_Exists and bool_Option_Exists
                self.bool_dict_Species_Demographic_UnNatural_Mortality_CSV_Age_And_Mortality_Rate__FEMALE__FOUND = bool_Exists
                
                return True
            
            def method_Batch_Current_Batch_Parameter_Validate_And_Convert__BATCH_SCENARIO_Config(self): 

                obj_Config = self.obj_Config_Batch_Scenario 
                
                if self.bool_str_Species_Offspring_Distribution__FOUND:
                
                    param_Value = self.str_Species_Offspring_Distribution
                    
                    if param_Value == obj_Config.static_str_Value__Species_Offspring_Distribution_ABSOLUTE:
                        self.int_Species_Offspring_Distribution = globalsSS.Offspring_Number_Distribution_At_Mating.static_Offspring_Number_Distribution_At_Mating__ABSOLUTE_DISTRIBUTION
                        #self.int_Species_Offspring_Distribution_SIMPOP = simu_pop.POISSON_DISTRIBUTION
                        
                        self.Arg_list_Offspring_Production_Parms = [self.int_Species_Offspring_Distribution_ABSOLUTE_Offspring_Number]
                        pass
                    
                    elif param_Value == obj_Config.static_str_Value__Species_Offspring_Distribution_POISSON:
                        self.int_Species_Offspring_Distribution = globalsSS.Offspring_Number_Distribution_At_Mating.static_Offspring_Number_Distribution_At_Mating__POISSON_DISTRIBUTION
                        self.int_Species_Offspring_Distribution_SIMPOP = sim.POISSON_DISTRIBUTION
                        
                        self.Arg_list_Offspring_Production_Parms = [self.int_Species_Offspring_Distribution_SIMPOP, self.float_Species_Offspring_Distribution_POISSON_Offspring_Mean_Number]
                        pass
                    
                    elif param_Value == obj_Config.static_str_Value__Species_Offspring_Distribution_BINOMIAL:
                        self.int_Species_Offspring_Distribution = globalsSS.Offspring_Number_Distribution_At_Mating.static_Offspring_Number_Distribution_At_Mating__BINOMIAL_DISTRIBUTION
                        int_Species_Offspring_Distribution_SIMPOP = sim.BINOMIAL_DISTRIBUTION
                        float_Mean = self.float_Species_Offspring_Distribution_BINOMIAL_Offspring_Mean_Number
                        float_StdDev = self.float_Species_Offspring_Distribution_BINOMIAL_Offspring_StdDev
                        ''' Convert '''
                        float_Num_Offspring_Dist_Probability = -1.0*((float_StdDev/float_Mean)-1.0)              
                        float_Num_Offspring_Dist_Probability = abs(-1.0*((float_StdDev/float_Mean)-1.0))              
                        float_Num_Offspring_Dist_Samples = float_Mean / float_Num_Offspring_Dist_Probability
                        
                        self.Arg_list_Offspring_Production_Parms = [int_Species_Offspring_Distribution_SIMPOP, float_Num_Offspring_Dist_Probability, float_Num_Offspring_Dist_Samples]
                        pass
                    
                    elif param_Value == obj_Config.static_str_Value__Species_Offspring_Distribution_UNIFORM:
                        self.int_Species_Offspring_Distribution = globalsSS.Offspring_Number_Distribution_At_Mating.static_Offspring_Number_Distribution_At_Mating__UNIFORM_DISTRIBUTION
                        self.int_Species_Offspring_Distribution_SIMPOP = sim.UNIFORM_DISTRIBUTION
                        
                        self.Arg_list_Offspring_Production_Parms = [self.int_Species_Offspring_Distribution_SIMPOP, self.int_Species_Offspring_Distribution_UNIFORM_Offspring_Min, self.int_Species_Offspring_Distribution_UNIFORM_Offspring_Max]
                        pass
                    
                    elif param_Value == obj_Config.static_str_Value__Species_Offspring_Distribution_GEOMETRIC:
                        self.int_Species_Offspring_Distribution = globalsSS.Offspring_Number_Distribution_At_Mating.static_Offspring_Number_Distribution_At_Mating__GEOMETRIC_DISTRIBUTION
                        self.int_Species_Offspring_Distribution_SIMPOP = sim.GEOMETRIC_DISTRIBUTION
                        
                        #self.Arg_list_Offspring_Production_Parms = [self.int_Species_Offspring_Distribution_SIMPOP, self.float_Species_Offspring_Distribution_GEOMETRIC_Offspring_Mean]
                        self.Arg_list_Offspring_Production_Parms = [self.int_Species_Offspring_Distribution_SIMPOP, self.Arg_Species_Offspring_Distribution_GEOMETRIC_Offsping_Probability]
                        pass
                    
                    else:
                        ''' CHANGE THIS for each validation '''
                        dict_Valid_Values = vars(globalsSS.Offspring_Number_Distribution_At_Mating)
                        ''' Report the validation error '''
                        dict_Valid_Values = OrderedDict(sorted(dict_Valid_Values.items(), key=lambda x:x[1]))
                        str_Valid_Values = ''
                        for key, value in dict_Valid_Values.items():
                            if not key.startswith('_'):
                                str_Valid_Values += str(key) + ' = ' + str(value) + ', '
                            pass
                        pass
                        str_Valid_Values = '[' + str_Valid_Values[:-2] + ']'
                        str_Message_Text = 'Invalid config option value: ' + str(param_Value) + '; valid values: ' + str_Valid_Values
                        int_Stack_Trace_Level = 2
                        with SSErrorOperation([]) as obj_SSErrorOp:
                            obj_SSErrorOp.func_Error_Handler__Caught_Exceptions(int_Stack_Trace_Level, str_Message_Text, tup_Args = (self.str_App_Arg_Output_Base_Path, self.strUniqueRunID))
                        pass
                    pass                
                pass


                ''' <<<<<<<<<< Natural_Mortality_Details__BOTH '''
                self.Arg_dict_Natural_Mortality_Details__BOTH = OrderedDict()
                self.Arg_dict_Natural_Mortality_Model_Annual_Mating_That_Mortality_Starts__MALE = OrderedDict([(globalsSS.SexConstants.static_stringSexMale, self.Arg_Natural_Mortality_Model_Annual_Mating_That_Mortality_Starts__MALE)])
                self.Arg_dict_Natural_Mortality_Model_Annual_Mating_That_Mortality_Starts__FEMALE = OrderedDict([(globalsSS.SexConstants.static_stringSexFemale, self.Arg_Natural_Mortality_Model_Annual_Mating_That_Mortality_Starts__FEMALE)])
                self.Arg_dict_Natural_Mortality_Model__MALE = OrderedDict([(globalsSS.SexConstants.static_stringSexMale, self.Arg_Natural_Mortality_Model__MALE)])
                self.Arg_dict_Natural_Mortality_Model__FEMALE = OrderedDict([(globalsSS.SexConstants.static_stringSexFemale, self.Arg_Natural_Mortality_Model__FEMALE)])
                self.Arg_dict_Natural_Mortality_Model_Scaling_Total__MALE = OrderedDict([(globalsSS.SexConstants.static_stringSexMale, self.Arg_Natural_Mortality_Model_Scaling_Total__MALE)])
                self.Arg_dict_Natural_Mortality_Model_Scaling_Total__FEMALE = OrderedDict([(globalsSS.SexConstants.static_stringSexFemale, self.Arg_Natural_Mortality_Model_Scaling_Total__FEMALE)])

                self.Arg_Mortality_Application_Specs__Nat = OrderedDict()
                self.Arg_Mortality_Application_Specs__Nat[globalsSS.MortalityApplication.static_str_Mating_Mortlity_Starts__Nat] = self.Arg_dict_Natural_Mortality_Model_Annual_Mating_That_Mortality_Starts__MALE
                self.Arg_Mortality_Application_Specs__Nat[globalsSS.MortalityApplication.static_str_Mating_Mortlity_Starts__Nat].update(self.Arg_dict_Natural_Mortality_Model_Annual_Mating_That_Mortality_Starts__FEMALE)
                self.Arg_Mortality_Application_Specs__Nat[globalsSS.MortalityApplication.static_str_Mortality_Application_Model__Nat] = self.Arg_dict_Natural_Mortality_Model__MALE
                self.Arg_Mortality_Application_Specs__Nat[globalsSS.MortalityApplication.static_str_Mortality_Application_Model__Nat].update(self.Arg_dict_Natural_Mortality_Model__FEMALE)
                self.Arg_Mortality_Application_Specs__Nat[globalsSS.MortalityApplication.static_str_Mortality_Scaling_Total__Nat] = self.Arg_dict_Natural_Mortality_Model_Scaling_Total__MALE
                self.Arg_Mortality_Application_Specs__Nat[globalsSS.MortalityApplication.static_str_Mortality_Scaling_Total__Nat].update(self.Arg_dict_Natural_Mortality_Model_Scaling_Total__FEMALE)
                
                ''' <<<<<<<<<< CSV_Age_And_Natural_Survival_Rate__BOTH '''
                self.Arg_dict_Natural_Survival_CSV_Age_And_Survival_Rate__BOTH = OrderedDict()
                ''' Convert MORTALITY to SURVIVAL '''
                with AnalysisHandler() as obj_AnalysisOp:
                    dict_To_Convert = OrderedDict(self.Arg_dict_Natural_Mortality_CSV_Age_And_Mortality_Rate__MALE)
                    dict_Converted = OrderedDict()
                    for int_Age, float_Value__Orig in dict_To_Convert.items():
                        float_Value__New = obj_AnalysisOp.func_Get_Float_Reciprocal_With_Same_Decimal_Places(float_Value__Orig)
                        dict_Converted[int_Age] = float_Value__New
                    pass
                pass
                self.Arg_dict_Natural_Survival_CSV_Age_And_Survival_Rate__BOTH[globalsSS.SexConstants.static_stringSexMale] = OrderedDict(dict_Converted)
                #self.Arg_dict_Natural_Survival_CSV_Age_And_Survival_Rate__BOTH[globalsSS.SexConstants.static_stringSexMale] = self.Arg_dict_Natural_Mortality_CSV_Age_And_Mortality_Rate__MALE 
                ''' Convert MORTALITY to SURVIVAL '''
                with AnalysisHandler() as obj_AnalysisOp:
                    dict_To_Convert = OrderedDict(self.Arg_dict_Natural_Mortality_CSV_Age_And_Mortality_Rate__FEMALE)
                    dict_Converted = OrderedDict()
                    for int_Age, float_Value__Orig in dict_To_Convert.items():
                        float_Value__New = obj_AnalysisOp.func_Get_Float_Reciprocal_With_Same_Decimal_Places(float_Value__Orig)
                        dict_Converted[int_Age] = float_Value__New
                    pass
                pass
                self.Arg_dict_Natural_Survival_CSV_Age_And_Survival_Rate__BOTH[globalsSS.SexConstants.static_stringSexFemale] =  OrderedDict(dict_Converted) 
                #self.Arg_dict_Natural_Survival_CSV_Age_And_Survival_Rate__BOTH[globalsSS.SexConstants.static_stringSexFemale] = self.Arg_dict_Natural_Mortality_CSV_Age_And_Mortality_Rate__FEMALE 
                self.Arg_Survival_Natural = self.Arg_dict_Natural_Survival_CSV_Age_And_Survival_Rate__BOTH
                

            
                ''' <<<<<<<<<< UnNatural_Mortality_Details__BOTH '''
                self.Arg_dict_UnNatural_Mortality_Details__BOTH = OrderedDict()
                self.Arg_dict_UnNatural_Mortality_Model_Annual_Mating_That_Mortality_Starts__MALE = OrderedDict([(globalsSS.SexConstants.static_stringSexMale, self.Arg_UnNatural_Mortality_Model_Annual_Mating_That_Mortality_Starts__MALE)])
                self.Arg_dict_UnNatural_Mortality_Model_Annual_Mating_That_Mortality_Starts__FEMALE = OrderedDict([(globalsSS.SexConstants.static_stringSexFemale, self.Arg_UnNatural_Mortality_Model_Annual_Mating_That_Mortality_Starts__FEMALE)])
                self.Arg_dict_UnNatural_Mortality_Model__MALE = OrderedDict([(globalsSS.SexConstants.static_stringSexMale, self.Arg_UnNatural_Mortality_Model__MALE)])
                self.Arg_dict_UnNatural_Mortality_Model__FEMALE = OrderedDict([(globalsSS.SexConstants.static_stringSexFemale, self.Arg_UnNatural_Mortality_Model__FEMALE)])
                self.Arg_dict_UnNatural_Mortality_Model_Scaling_Total__MALE = OrderedDict([(globalsSS.SexConstants.static_stringSexMale, self.Arg_UnNatural_Mortality_Model_Scaling_Total__MALE)])
                self.Arg_dict_UnNatural_Mortality_Model_Scaling_Total__FEMALE = OrderedDict([(globalsSS.SexConstants.static_stringSexFemale, self.Arg_UnNatural_Mortality_Model_Scaling_Total__FEMALE)])

                self.Arg_Mortality_Application_Specs__UnNat = OrderedDict()
                self.Arg_Mortality_Application_Specs__UnNat[globalsSS.MortalityApplication.static_str_Mating_Mortlity_Starts__UnNat] = self.Arg_dict_UnNatural_Mortality_Model_Annual_Mating_That_Mortality_Starts__MALE
                self.Arg_Mortality_Application_Specs__UnNat[globalsSS.MortalityApplication.static_str_Mating_Mortlity_Starts__UnNat].update(self.Arg_dict_UnNatural_Mortality_Model_Annual_Mating_That_Mortality_Starts__FEMALE)
                self.Arg_Mortality_Application_Specs__UnNat[globalsSS.MortalityApplication.static_str_Mortality_Application_Model__UnNat] = self.Arg_dict_UnNatural_Mortality_Model__MALE
                self.Arg_Mortality_Application_Specs__UnNat[globalsSS.MortalityApplication.static_str_Mortality_Application_Model__UnNat].update(self.Arg_dict_UnNatural_Mortality_Model__FEMALE)
                self.Arg_Mortality_Application_Specs__UnNat[globalsSS.MortalityApplication.static_str_Mortality_Scaling_Total__UnNat] = self.Arg_dict_UnNatural_Mortality_Model_Scaling_Total__MALE
                self.Arg_Mortality_Application_Specs__UnNat[globalsSS.MortalityApplication.static_str_Mortality_Scaling_Total__UnNat].update(self.Arg_dict_UnNatural_Mortality_Model_Scaling_Total__FEMALE)  
                
                                        
#                 ''' <<<<<<<<<< CSV_Age_And_UnNatural_Survival_Rate__BOTH '''
#                 self.Arg_dict_UnNatural_Survival_CSV_Age_And_Survival_Rate__BOTH = OrderedDict()
#                 ''' Convert MORTALITY to SURVIVAL '''
#                 self.Arg_dict_UnNatural_Survival_CSV_Age_And_Survival_Rate__BOTH[globalsSS.SexConstants.static_stringSexMale] = self.Arg_dict_UnNatural_Mortality_CSV_Age_And_Mortality_Rate__MALE 
#                 self.Arg_dict_UnNatural_Survival_CSV_Age_And_Survival_Rate__BOTH[globalsSS.SexConstants.static_stringSexFemale] = self.Arg_dict_UnNatural_Mortality_CSV_Age_And_Mortality_Rate__FEMALE 
#                 self.Arg_Survival_UnNatural = self.Arg_dict_UnNatural_Survival_CSV_Age_And_Survival_Rate__BOTH
#                 
                ''' <<<<<<<<<< CSV_Age_And_UnNatural_Survival_Rate__BOTH '''
                self.Arg_dict_UnNatural_Survival_CSV_Age_And_Survival_Rate__BOTH = OrderedDict()
                ''' Convert MORTALITY to SURVIVAL '''
                with AnalysisHandler() as obj_AnalysisOp:
                    dict_To_Convert = OrderedDict(self.Arg_dict_UnNatural_Mortality_CSV_Age_And_Mortality_Rate__MALE)
                    dict_Converted = OrderedDict()
                    for int_Age, float_Value__Orig in dict_To_Convert.items():
                        float_Value__New = obj_AnalysisOp.func_Get_Float_Reciprocal_With_Same_Decimal_Places(float_Value__Orig)
                        dict_Converted[int_Age] = float_Value__New
                    pass
                pass
                self.Arg_dict_UnNatural_Survival_CSV_Age_And_Survival_Rate__BOTH[globalsSS.SexConstants.static_stringSexMale] = OrderedDict(dict_Converted)
                #self.Arg_dict_UnNatural_Survival_CSV_Age_And_Survival_Rate__BOTH[globalsSS.SexConstants.static_stringSexMale] = self.Arg_dict_UnNatural_Mortality_CSV_Age_And_Mortality_Rate__MALE 
                ''' Convert MORTALITY to SURVIVAL '''
                with AnalysisHandler() as obj_AnalysisOp:
                    dict_To_Convert = OrderedDict(self.Arg_dict_UnNatural_Mortality_CSV_Age_And_Mortality_Rate__FEMALE)
                    dict_Converted = OrderedDict()
                    for int_Age, float_Value__Orig in dict_To_Convert.items():
                        float_Value__New = obj_AnalysisOp.func_Get_Float_Reciprocal_With_Same_Decimal_Places(float_Value__Orig)
                        dict_Converted[int_Age] = float_Value__New
                    pass
                pass
                self.Arg_dict_UnNatural_Survival_CSV_Age_And_Survival_Rate__BOTH[globalsSS.SexConstants.static_stringSexFemale] =  OrderedDict(dict_Converted) 
                #self.Arg_dict_UnNatural_Survival_CSV_Age_And_Survival_Rate__BOTH[globalsSS.SexConstants.static_stringSexFemale] = self.Arg_dict_UnNatural_Mortality_CSV_Age_And_Mortality_Rate__FEMALE 
                self.Arg_Survival_UnNatural = self.Arg_dict_UnNatural_Survival_CSV_Age_And_Survival_Rate__BOTH                
                
                ''' NOTE !!! This has been set to a defalut value until implemented in next version '''
                bool_Implemented = False
                self.Arg_Allow_UnNatural_Mortality__BOTH = bool_Implemented
                
                return True
                       
            def method_Batch_Current_Batch_Parameter_Import_From_BATCH_SETTINGS_Config(self):
 
                obj_SSErrorOp = SSErrorOperation([])
                
                '''
                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                Args from Batch Settings config
                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                '''

                obj_Config = self.obj_Config_Batch_Settings
                
                if obj_Config == None:
                    str_Message_Text = 'self.obj_Config_Batch_Settings = None'
                    int_Stack_Trace_Level = 2
                    obj_SSErrorOp.func_Error_Handler__Caught_Exceptions(int_Stack_Trace_Level, str_Message_Text, tup_Args = (self.str_App_Arg_Output_Base_Path, self.strUniqueRunID))
                    return False  
                pass         
            
                config_parser_Config = obj_Config.config_parser_Config
            
                if config_parser_Config == None:
                    str_Message_Text = 'obj_Config_Batch_Settings.config_parser_Config = None'
                    int_Stack_Trace_Level = 2
                    obj_SSErrorOp.func_Error_Handler__Caught_Exceptions(int_Stack_Trace_Level, str_Message_Text, tup_Args = (self.str_App_Arg_Output_Base_Path, self.strUniqueRunID))
                    return False
                pass    
         
                        
                ''' <<<<<<< SECTION: Project_Details '''
                bool_Section_Exists = False
                ''' Specify SECTION to get '''
                str_Section = obj_Config.static_str_Section__Batch_Setting_Project_Details
                ''' Check if SECTION exists in config file '''
                bool_Section_Exists = obj_Config.func_Check_If_Config_File_SECTION_Is_Expected(obj_Config, str_Section, True)
                '''Its NOT OK if the SECTION does not exist, however if the SECTION exists, read the option '''
                if bool_Section_Exists:
                    ''' Specify OPTION to get '''
                    str_Option = obj_Config.static_str_Option__Batch_Setting_Details__Project_Name
                    value_Type = ''
                    '''Its NOT OK if the OPTION does not exist'''
                    '''Read the OPTION'''
                    bool_Option_Exists = False 
                    bool_Option_Exists, value_Option = obj_Config.func_Read_OPTION(True, False, obj_Config, str_Section, str_Option, value_Type)
                    if bool_Option_Exists:
                        self.str_Batch_Setting_Details__Project_Name = value_Option
                        self.Arg_Batch_Setting_Details__Project_Name = value_Option
                    pass
                pass
                bool_Exists = bool_Section_Exists and bool_Option_Exists
                self.bool_str_Batch_Setting_Details__Project_Name__FOUND = bool_Exists            
                '''Its NOT OK if the SECTION does not exist, however if the SECTION exists, read the option '''
                if bool_Section_Exists:
                    ''' Specify OPTION to get '''
                    str_Option = obj_Config.static_str_Option__Batch_Setting_Details__Project_UID
                    value_Type = 0
                    '''Its NOT OK if the OPTION does not exist'''
                    '''Read the OPTION'''
                    bool_Option_Exists = False 
                    bool_Option_Exists, value_Option = obj_Config.func_Read_OPTION(True, False, obj_Config, str_Section, str_Option, value_Type)
                    if bool_Option_Exists:
                        self.int_Batch_Setting_Details__Project_UID = value_Option
                        self.Arg_Batch_Setting_Details__Project_UID = value_Option
                    pass
                pass
                bool_Exists = bool_Section_Exists and bool_Option_Exists
                self.bool_int_Batch_Setting_Details__Project_UID__FOUND = bool_Exists  
                '''Its NOT OK if the SECTION does not exist, however if the SECTION exists, read the option '''
                if bool_Section_Exists:
                    ''' Specify OPTION to get '''
                    str_Option = obj_Config.static_str_Option__Batch_Setting_Details__Project_Species_Name
                    value_Type = ''
                    '''Its NOT OK if the OPTION does not exist'''
                    '''Read the OPTION'''
                    bool_Option_Exists = False 
                    bool_Option_Exists, value_Option = obj_Config.func_Read_OPTION(True, False, obj_Config, str_Section, str_Option, value_Type)
                    if bool_Option_Exists:
                        self.str_Batch_Setting_Details__Project_Species_Name = value_Option
                        self.Arg_Batch_Setting_Details__Project_Species_Name = value_Option
                    pass
                pass
                bool_Exists = bool_Section_Exists and bool_Option_Exists
                self.bool_str_Batch_Setting_Details__Project_Species_Name__FOUND = bool_Exists  


                ''' <<<<<<< SECTION: Batch_Setting_Details '''
                bool_Section_Exists = False
                ''' Specify SECTION to get '''
                str_Section = obj_Config.static_str_Section__Batch_Setting_Details
                ''' Check if SECTION exists in config file '''
                bool_Section_Exists = obj_Config.func_Check_If_Config_File_SECTION_Is_Expected(obj_Config, str_Section, True)
                '''Its NOT OK if the SECTION does not exist, however if the SECTION exists, read the option '''
                if bool_Section_Exists:
                    ''' Specify OPTION to get '''
                    str_Option = obj_Config.static_str_Option__Batch_Setting_Details__Scenario_Name
                    value_Type = ''
                    '''Its NOT OK if the OPTION does not exist'''
                    '''Read the OPTION'''
                    bool_Option_Exists = False 
                    bool_Option_Exists, value_Option = obj_Config.func_Read_OPTION(True, False, obj_Config, str_Section, str_Option, value_Type)
                    if bool_Option_Exists:
                        self.str_Batch_Setting_Details__Scenario_Name = value_Option
                        self.Arg_Batch_Setting_Details__Scenario_Name = value_Option
                    pass
                pass
                bool_Exists = bool_Section_Exists and bool_Option_Exists
                self.bool_str_Batch_Setting_Details__Scenario_Name__FOUND = bool_Exists            
                '''Its NOT OK if the SECTION does not exist, however if the SECTION exists, read the option '''
                if bool_Section_Exists:
                    ''' Specify OPTION to get '''
                    str_Option = obj_Config.static_str_Option__Batch_Setting_Details__Scenario_UID
                    value_Type = 0
                    '''Its NOT OK if the OPTION does not exist'''
                    '''Read the OPTION'''
                    bool_Option_Exists = False 
                    bool_Option_Exists, value_Option = obj_Config.func_Read_OPTION(True, False, obj_Config, str_Section, str_Option, value_Type)
                    if bool_Option_Exists:
                        self.int_Batch_Setting_Details__Scenario_UID = value_Option
                        self.Arg_Batch_Setting_Details__Scenario_UID = value_Option
                    pass
                pass
                bool_Exists = bool_Section_Exists and bool_Option_Exists
                self.bool_int_Batch_Setting_Details__Scenario_UID__FOUND = bool_Exists
             
                
                ''' <<<<<<< SECTION: Batch_Scenario '''
                bool_Section_Exists = False
                ''' Specify SECTION to get '''
                str_Section = obj_Config.static_str_Section__Batch_Setting_Batch_Scenario
                ''' Check if SECTION exists in config file '''
                bool_Section_Exists = obj_Config.func_Check_If_Config_File_SECTION_Is_Expected(obj_Config, str_Section, True)
                '''Its NOT OK if the SECTION does not exist, however if the SECTION exists, read the option '''
                if bool_Section_Exists:
                    ''' Specify OPTION to get '''
                    str_Option = obj_Config.static_str_Option__Batch_Setting_Scenario_File
                    value_Type = ''
                    '''Its NOT OK if the OPTION does not exist'''
                    '''Read the OPTION'''
                    bool_Option_Exists = False 
                    bool_Option_Exists, value_Option = obj_Config.func_Read_OPTION(True, False, obj_Config, str_Section, str_Option, value_Type)
                    if bool_Option_Exists:
                        self.str_Batch_Setting_Scenario_File = value_Option
                    pass
                pass
                bool_Exists = bool_Section_Exists and bool_Option_Exists
                self.bool_str_Batch_Setting_Scenario_File__FOUND = bool_Exists        
             
             
                ''' <<<<<<< SECTION: Batch_Setting_Pop_Saving '''
                bool_Section_Exists = False
                ''' Specify SECTION to get '''
                str_Section = obj_Config.static_str_Section__Batch_Setting__Pop_Saving
                ''' Check if SECTION exists in config file '''
                bool_Section_Exists = obj_Config.func_Check_If_Config_File_SECTION_Is_Expected(obj_Config, str_Section, True)
                '''Its NOT OK if the SECTION does not exist, however if the SECTION exists, read the option '''
                if bool_Section_Exists:
                    ''' Specify OPTION to get '''
                    str_Option = obj_Config.static_str_Option__Batch_Setting__Pop_Saving__Replicate_Mating_Count_At_Which_Pop_Saving_Starts
                    value_Type = 0
                    '''Its NOT OK if the OPTION does not exist'''
                    '''Read the OPTION'''
                    bool_Option_Exists = False 
                    bool_Option_Exists, value_Option = obj_Config.func_Read_OPTION(True, False, obj_Config, str_Section, str_Option, value_Type)
                    if bool_Option_Exists:
                        self.int_Batch_Setting__Pop_Saving__Replicate_Mating_Count_At_Which_Pop_Saving_Starts = value_Option
                        self.Arg_Pop_Saving__Replicate_Mating_Count_At_Which_Pop_Saving_Starts = value_Option
                    pass
                pass
                bool_Exists = bool_Section_Exists and bool_Option_Exists
                self.bool_int_Batch_Setting__Pop_Saving__Replicate_Mating_Count_At_Which_Pop_Saving_Starts__FOUND = bool_Exists        
                '''Its NOT OK if the SECTION does not exist, however if the SECTION exists, read the option '''
                if bool_Section_Exists:
                    ''' Specify OPTION to get '''
                    str_Option = obj_Config.static_str_Option__Batch_Setting__Pop_Saving__Save_Pop_Every_Replicate_Mating_Count
                    value_Type = 0
                    '''Its NOT OK if the OPTION does not exist'''
                    ''' NOTE !!! This has been set to a defalut value until implemented in next version '''
                    bool_Implemented = False                    
                    '''Read the OPTION'''
                    bool_Option_Exists = False 
                    bool_Option_Exists, value_Option = obj_Config.func_Read_OPTION(bool_Implemented, False, obj_Config, str_Section, str_Option, value_Type)
                    if bool_Option_Exists:
                        self.int_Batch_Setting__Pop_Saving__Save_Pop_Every_Replicate_Mating_Count = value_Option
                        self.Arg_Pop_Saving__Save_Pop_Every_Replicate_Mating_Count = value_Option
                    else:
                        self.int_Batch_Setting__Pop_Saving__Save_Pop_Every_Replicate_Mating_Count = 1
                        self.Arg_Pop_Saving__Save_Pop_Every_Replicate_Mating_Count = 1 
                    pass
                pass
                bool_Exists = bool_Section_Exists and bool_Option_Exists
                self.bool_int_Batch_Setting__Pop_Saving__Save_Pop_Every_Replicate_Mating_Count__FOUND = bool_Exists        
             
                
                ''' <<<<<<< SECTION: Batch_Setting_Pop_Sampling '''
                bool_Section_Exists = False
                ''' Specify SECTION to get '''
                str_Section = obj_Config.static_str_Section__Batch_Setting__Pop_Sampling
                ''' Check if SECTION exists in config file '''
                bool_Section_Exists = obj_Config.func_Check_If_Config_File_SECTION_Is_Expected(obj_Config, str_Section, True)
                '''Its NOT OK if the SECTION does not exist, however if the SECTION exists, read the option '''
                if bool_Section_Exists:
                    ''' Specify OPTION to get '''
                    str_Option = obj_Config.static_str_Option__Batch_Setting__Pop_Sampling__Sample_Pop_Every_Mating_Count
                    value_Type = 0
                    '''Its NOT OK if the OPTION does not exist'''
                    ''' NOTE !!! This has been set to a defalut value until implemented in next version '''
                    bool_Implemented = False                      
                    '''Read the OPTION'''
                    bool_Option_Exists = False 
                    bool_Option_Exists, value_Option = obj_Config.func_Read_OPTION(bool_Implemented, False, obj_Config, str_Section, str_Option, value_Type)
                    if bool_Option_Exists:
                        self.int_Batch_Setting__Pop_Sampling__Sample_Pop_Every_Mating_Count = value_Option
                        self.Arg_Pop_Sampling__Sample_Pop_Every_Mating_Count = value_Option
                    else:
                        self.int_Batch_Setting__Pop_Sampling__Sample_Pop_Every_Mating_Count = 1
                        self.Arg_Pop_Sampling__Sample_Pop_Every_Mating_Count = 1                        
                    pass
                pass
                bool_Exists = bool_Section_Exists and bool_Option_Exists
                self.bool_int_Batch_Setting__Pop_Sampling__Sample_Pop_Every_Mating_Count__FOUND = bool_Exists        
                '''Its NOT OK if the SECTION does not exist, however if the SECTION exists, read the option '''
                if bool_Section_Exists:
                    ''' Specify OPTION to get '''
                    str_Option = obj_Config.static_str_Option__Batch_Setting__Pop_Sampling__Post_Sim_Pop_Sampling_Start_At_Replicate_Mating_Count
                    value_Type = 0
                    '''Its NOT OK if the OPTION does not exist'''
                    '''Read the OPTION'''
                    bool_Option_Exists = False 
                    bool_Option_Exists, value_Option = obj_Config.func_Read_OPTION(True, False, obj_Config, str_Section, str_Option, value_Type)
                    if bool_Option_Exists:
                        self.int_Batch_Setting__Pop_Sampling__Post_Sim_Pop_Sampling_Start_At_Replicate_Mating_Count = value_Option
                        self.Arg_Pop_Sampling__Post_Sim_Pop_Sampling_Start_At_Replicate_Mating_Count = value_Option
                    pass
                pass
                bool_Exists = bool_Section_Exists and bool_Option_Exists
                self.bool_int_Batch_Setting__Pop_Sampling__Post_Sim_Pop_Sampling_Start_At_Replicate_Mating_Count__FOUND = bool_Exists        
             
                
                ''' <<<<<<< SECTION: Batch_Setting_Genepop_Details '''
                bool_Section_Exists = False
                ''' Specify SECTION to get '''
                str_Section = obj_Config.static_str_Section__Batch_Setting__Genepop_Details
                ''' NOTE !!! This has been set to a defalut value until implemented in next version '''
                bool_Implemented = False                 
                ''' Check if SECTION exists in config file '''
                bool_Section_Exists = obj_Config.func_Check_If_Config_File_SECTION_Is_Expected(obj_Config, str_Section, bool_Implemented)
                ''' NOTE !!! This has been set to a defalut value until implemented in next version '''
                bool_Section_Exists = True
                '''Its NOT OK if the SECTION does not exist, however if the SECTION exists, read the option '''
                if bool_Section_Exists:
                    ''' Specify OPTION to get '''
                    str_Option = obj_Config.static_str_Option__Batch_Setting__Genepop_Details__Export_Genepop_PF_Files
                    value_Type = False
                    '''Its NOT OK if the OPTION does not exist'''
                    ''' NOTE !!! This has been set to a defalut value until implemented in next version '''
                    bool_Implemented = False                    
                    '''Read the OPTION'''
                    bool_Option_Exists = False 
                    bool_Option_Exists, value_Option = obj_Config.func_Read_OPTION(bool_Implemented, False, obj_Config, str_Section, str_Option, value_Type)
                    if bool_Option_Exists:
                        self.bool_Batch_Setting__Genepop_Details__Export_Genepop_PF_Files = value_Option
                        self.Arg_Batch_Setting__Genepop_Details__Export_Genepop_PF_Files = value_Option
                    else:
                        self.bool_Batch_Setting__Genepop_Details__Export_Genepop_PF_Files = False
                        self.Arg_Batch_Setting__Genepop_Details__Export_Genepop_PF_Files = False                        
                    pass
                pass
                bool_Exists = bool_Section_Exists and bool_Option_Exists
                self.bool_bool_Batch_Setting__Genepop_Details__Export_Genepop_PF_Files__FOUND = bool_Exists        
                '''Its NOT OK if the SECTION does not exist, however if the SECTION exists, read the option '''
                if bool_Section_Exists:
                    ''' Specify OPTION to get '''
                    str_Option = obj_Config.static_str_Option__Batch_Setting__Genepop_Details__Export_Genepop_PF_Files_During_BurnIn
                    value_Type = False
                    '''Its NOT OK if the OPTION does not exist'''
                    ''' NOTE !!! This has been set to a defalut value until implemented in next version '''
                    bool_Implemented = False
                    '''Read the OPTION'''
                    bool_Option_Exists = False 
                    bool_Option_Exists, value_Option = obj_Config.func_Read_OPTION(bool_Implemented, False, obj_Config, str_Section, str_Option, value_Type)
                    if bool_Option_Exists:
                        self.bool_Batch_Setting__Genepop_Details__Export_Genepop_PF_Files_During_BurnIn = value_Option
                        self.Arg_Batch_Setting__Genepop_Details__Export_Genepop_PF_Files_During_BurnIn = value_Option
                    else:
                        self.bool_Batch_Setting__Genepop_Details__Export_Genepop_PF_Files_During_BurnIn = False
                        self.Arg_Batch_Setting__Genepop_Details__Export_Genepop_PF_Files_During_BurnIn = False
                    pass
                pass
                bool_Exists = bool_Section_Exists and bool_Option_Exists
                self.bool_bool_Batch_Setting__Genepop_Details__Export_Genepop_PF_Files_During_BurnIn__FOUND = bool_Exists        
                '''Its NOT OK if the SECTION does not exist, however if the SECTION exists, read the option '''
                if bool_Section_Exists:
                    ''' Specify OPTION to get '''
                    str_Option = obj_Config.static_str_Option__Batch_Setting__Genepop_Details__Export_Genepop_PF_Embryo_VSP
                    value_Type = False
                    '''Its NOT OK if the OPTION does not exist'''
                    ''' NOTE !!! This has been set to a defalut value until implemented in next version '''
                    bool_Implemented = False                    
                    '''Read the OPTION'''
                    bool_Option_Exists = False 
                    bool_Option_Exists, value_Option = obj_Config.func_Read_OPTION(bool_Implemented, False, obj_Config, str_Section, str_Option, value_Type)
                    if bool_Option_Exists:
                        self.bool_Batch_Setting__Genepop_Details__Export_Genepop_PF_Embryo_VSP = value_Option
                        self.Arg_Batch_Setting__Genepop_Details__Export_Genepop_PF_Embryo_VSP = value_Option
                    else:
                        self.bool_Batch_Setting__Genepop_Details__Export_Genepop_PF_Embryo_VSP = False
                        self.Arg_Batch_Setting__Genepop_Details__Export_Genepop_PF_Embryo_VSP = False
                    pass
                pass
                bool_Exists = bool_Section_Exists and bool_Option_Exists
                self.bool_bool_Batch_Setting__Genepop_Details__Export_Genepop_PF_Embryo_VSP__FOUND = bool_Exists        
                '''Its NOT OK if the SECTION does not exist, however if the SECTION exists, read the option '''
                if bool_Section_Exists:
                    ''' Specify OPTION to get '''
                    str_Option = obj_Config.static_str_Option__Batch_Setting__Genepop_Details__Export_Genepop_SubSample_Percent_Of_PF_Embryo_VSP
                    value_Type = 0.0
                    '''Its NOT OK if the OPTION does not exist'''
                    ''' NOTE !!! This has been set to a defalut value until implemented in next version '''
                    bool_Implemented = False                    
                    '''Read the OPTION'''
                    bool_Option_Exists = False 
                    bool_Option_Exists, value_Option = obj_Config.func_Read_OPTION(bool_Implemented, False, obj_Config, str_Section, str_Option, value_Type)
                    if bool_Option_Exists:
                        self.float_Batch_Setting__Genepop_Details__Export_Genepop_SubSample_Percent_Of_PF_Embryo_VSP = value_Option
                        self.Arg_Batch_Setting__Genepop_Details__Export_Genepop_SubSample_Percent_Of_PF_Embryo_VSP = value_Option
                    else:
                        self.float_Batch_Setting__Genepop_Details__Export_Genepop_SubSample_Percent_Of_PF_Embryo_VSP = 0
                        self.Arg_Batch_Setting__Genepop_Details__Export_Genepop_SubSample_Percent_Of_PF_Embryo_VSP = 0
                    pass
                pass
                bool_Exists = bool_Section_Exists and bool_Option_Exists
                self.bool_float_Batch_Setting__Genepop_Details__Export_Genepop_SubSample_Percent_Of_PF_Embryo_VSP__FOUND = bool_Exists        
                '''Its NOT OK if the SECTION does not exist, however if the SECTION exists, read the option '''
                if bool_Section_Exists:
                    ''' Specify OPTION to get '''
                    str_Option = obj_Config.static_str_Option__Batch_Setting__Genepop_Details__Export_Genepop_PF_Mature_VSP
                    value_Type = False
                    '''Its NOT OK if the OPTION does not exist'''
                    ''' NOTE !!! This has been set to a defalut value until implemented in next version '''
                    bool_Implemented = False                    
                    '''Read the OPTION'''
                    bool_Option_Exists = False 
                    bool_Option_Exists, value_Option = obj_Config.func_Read_OPTION(bool_Implemented, False, obj_Config, str_Section, str_Option, value_Type)
                    if bool_Option_Exists:
                        self.bool_Batch_Setting__Genepop_Details__Export_Genepop_PF_Mature_VSP = value_Option
                        self.Arg_Batch_Setting__Genepop_Details__Export_Genepop_PF_Mature_VSP = value_Option
                    else:
                        self.bool_Batch_Setting__Genepop_Details__Export_Genepop_PF_Mature_VSP = False
                        self.Arg_Batch_Setting__Genepop_Details__Export_Genepop_PF_Mature_VSP = False
                    pass
                pass
                bool_Exists = bool_Section_Exists and bool_Option_Exists
                self.bool_bool_Batch_Setting__Genepop_Details__Export_Genepop_PF_Mature_VSP__FOUND = bool_Exists        
                '''Its NOT OK if the SECTION does not exist, however if the SECTION exists, read the option '''
                if bool_Section_Exists:
                    ''' Specify OPTION to get '''
                    str_Option = obj_Config.static_str_Option__Batch_Setting__Genepop_Details__Export_Genepop_SubSample_Percent_Of_PF_Mature_VSP
                    value_Type = 0.0
                    '''Its NOT OK if the OPTION does not exist'''
                    ''' NOTE !!! This has been set to a defalut value until implemented in next version '''
                    bool_Implemented = False                     
                    '''Read the OPTION'''
                    bool_Option_Exists = False 
                    bool_Option_Exists, value_Option = obj_Config.func_Read_OPTION(bool_Implemented, False, obj_Config, str_Section, str_Option, value_Type)
                    if bool_Option_Exists:
                        self.float_Batch_Setting__Genepop_Details__Export_Genepop_SubSample_Percent_Of_PF_Mature_VSP = value_Option
                        self.Arg_Batch_Setting__Genepop_Details__Export_Genepop_SubSample_Percent_Of_PF_Mature_VSP = value_Option
                    else:
                        self.float_Batch_Setting__Genepop_Details__Export_Genepop_SubSample_Percent_Of_PF_Mature_VSP = 0
                        self.Arg_Batch_Setting__Genepop_Details__Export_Genepop_SubSample_Percent_Of_PF_Mature_VSP = 0
                    pass
                pass
                bool_Exists = bool_Section_Exists and bool_Option_Exists
                self.bool_float_Batch_Setting__Genepop_Details__Export_Genepop_SubSample_Percent_Of_PF_Mature_VSP__FOUND = bool_Exists        
                '''Its NOT OK if the SECTION does not exist, however if the SECTION exists, read the option '''
                if bool_Section_Exists:
                    ''' Specify OPTION to get '''
                    str_Option = obj_Config.static_str_Option__Batch_Setting__Genepop_Details__Export_Genepop_PF_Full_VSP
                    value_Type = False
                    '''Its NOT OK if the OPTION does not exist'''
                    ''' NOTE !!! This has been set to a defalut value until implemented in next version '''
                    bool_Implemented = False                    
                    '''Read the OPTION'''
                    bool_Option_Exists = False 
                    bool_Option_Exists, value_Option = obj_Config.func_Read_OPTION(bool_Implemented, False, obj_Config, str_Section, str_Option, value_Type)
                    if bool_Option_Exists:
                        self.bool_Batch_Setting__Genepop_Details__Export_Genepop_PF_Full_VSP = value_Option
                        self.Arg_Batch_Setting__Genepop_Details__Export_Genepop_PF_Full_VSP = value_Option
                    else:
                        self.bool_Batch_Setting__Genepop_Details__Export_Genepop_PF_Full_VSP = False
                        self.Arg_Batch_Setting__Genepop_Details__Export_Genepop_PF_Full_VSP = False
                    pass
                pass
                bool_Exists = bool_Section_Exists and bool_Option_Exists
                self.bool_bool_Batch_Setting__Genepop_Details__Export_Genepop_PF_Full_VSP__FOUND = bool_Exists        
                '''Its NOT OK if the SECTION does not exist, however if the SECTION exists, read the option '''
                if bool_Section_Exists:
                    ''' Specify OPTION to get '''
                    str_Option = obj_Config.static_str_Option__Batch_Setting__Genepop_Details__Export_Genepop_SubSample_Percent_Of_PF_Full_VSP
                    value_Type = 0.0
                    '''Its NOT OK if the OPTION does not exist'''
                    ''' NOTE !!! This has been set to a defalut value until implemented in next version '''
                    bool_Implemented = False                     
                    '''Read the OPTION'''
                    bool_Option_Exists = False 
                    bool_Option_Exists, value_Option = obj_Config.func_Read_OPTION(bool_Implemented, False, obj_Config, str_Section, str_Option, value_Type)
                    if bool_Option_Exists:
                        self.float_Batch_Setting__Genepop_Details__Export_Genepop_SubSample_Percent_Of_PF_Full_VSP = value_Option
                        self.Arg_Batch_Setting__Genepop_Details__Export_Genepop_SubSample_Percent_Of_PF_Full_VSP = value_Option
                    else:
                        self.float_Batch_Setting__Genepop_Details__Export_Genepop_SubSample_Percent_Of_PF_Full_VSP = 0
                        self.Arg_Batch_Setting__Genepop_Details__Export_Genepop_SubSample_Percent_Of_PF_Full_VSP = 0
                    pass
                pass
                bool_Exists = bool_Section_Exists and bool_Option_Exists
                self.bool_float_Batch_Setting__Genepop_Details__Export_Genepop_SubSample_Percent_Of_PF_Full_VSP__FOUND = bool_Exists        
                '''Its NOT OK if the SECTION does not exist, however if the SECTION exists, read the option '''
                if bool_Section_Exists:
                    ''' Specify OPTION to get '''
                    str_Option = obj_Config.static_str_Option__Batch_Setting__Genepop_Details__Export_Genepop_PF_Files_Starts_At_Replicate_Mating_Count
                    value_Type = 0
                    '''Its NOT OK if the OPTION does not exist'''
                    ''' NOTE !!! This has been set to a defalut value until implemented in next version '''
                    bool_Implemented = False                    
                    '''Read the OPTION'''
                    bool_Option_Exists = False 
                    bool_Option_Exists, value_Option = obj_Config.func_Read_OPTION(bool_Implemented, False, obj_Config, str_Section, str_Option, value_Type)
                    if bool_Option_Exists:
                        self.int_Batch_Setting__Genepop_Details__Export_Genepop_PF_Files_Starts_At_Replicate_Mating_Count = value_Option
                        self.Arg_Batch_Setting__Genepop_Details__Export_Genepop_PF_Files_Starts_At_Replicate_Mating_Count = value_Option
                    else:
                        self.int_Batch_Setting__Genepop_Details__Export_Genepop_PF_Files_Starts_At_Replicate_Mating_Count = 1
                        self.Arg_Batch_Setting__Genepop_Details__Export_Genepop_PF_Files_Starts_At_Replicate_Mating_Count = 1
                    pass
                pass
                bool_Exists = bool_Section_Exists and bool_Option_Exists
                self.bool_int_Batch_Setting__Genepop_Details__Export_Genepop_PF_Files_Starts_At_Replicate_Mating_Count__FOUND = bool_Exists        
                '''Its NOT OK if the SECTION does not exist, however if the SECTION exists, read the option '''
                if bool_Section_Exists:
                    ''' Specify OPTION to get '''
                    str_Option = obj_Config.static_str_Option__Batch_Setting__Genepop_Details__Export_Genepop_PF_Files_Every_Replicate_Mating_Count
                    value_Type = 0
                    '''Its NOT OK if the OPTION does not exist'''
                    ''' NOTE !!! This has been set to a defalut value until implemented in next version '''
                    bool_Implemented = False                    
                    '''Read the OPTION'''
                    bool_Option_Exists = False 
                    bool_Option_Exists, value_Option = obj_Config.func_Read_OPTION(bool_Implemented, False, obj_Config, str_Section, str_Option, value_Type)
                    if bool_Option_Exists:
                        self.int_Batch_Setting__Genepop_Details__Export_Genepop_PF_Files_Every_Replicate_Mating_Count = value_Option
                        self.Arg_Batch_Setting__Genepop_Details__Export_Genepop_PF_Files_Every_Replicate_Mating_Count = value_Option
                    else:
                        self.int_Batch_Setting__Genepop_Details__Export_Genepop_PF_Files_Every_Replicate_Mating_Count = 1
                        self.Arg_Batch_Setting__Genepop_Details__Export_Genepop_PF_Files_Every_Replicate_Mating_Count = 1
                    pass
                pass
                bool_Exists = bool_Section_Exists and bool_Option_Exists
                self.bool_int_Batch_Setting__Genepop_Details__Export_Genepop_PF_Files_Every_Replicate_Mating_Count__FOUND = bool_Exists        


                return True

           
            def method_Batch_Current_Batch_Parameter_Import_From_Config_Files(self):
 

                '''
                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                Get Args from config files
                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                '''

                self.method_Batch_Current_Batch_Parameter_Import_From_BATCH_SCENARIO_Config()
                self.method_Batch_Current_Batch_Parameter_Validate_And_Convert__BATCH_SCENARIO_Config()
                self.method_Batch_Current_Batch_Parameter_Import_From_BATCH_SETTINGS_Config()
                if globalsSS.Run_Processing_Step.static_int_Run_Processing_Step__SAMP_STRAT in self.list_int_App_Arg_Run_Processing_Steps:
                    self.method_Batch_Current_Batch_Parameter_Import_From_SAMPLING_STRATEGY_Config()
                    self.method_Batch_Current_Batch_Parameter_Validate_And_Convert__SAMPLING_STRATEGY_Config()
                pass
            
                #listReplicateRunParameters = self.method_Assign_Batch_Run_Parameters()
                listReplicateRunParameters = self.method_Assign_Batch_Run_Parameters()
                #self.listBatchRunParameters.append(listReplicateRunParameters)
                self.listBatchRunParameters.append(listReplicateRunParameters)
                
                
                ''' Assign the current batch parameters to the parameter object for processing '''
                #self.listCurrentRunParameters = self.listBatchRunParameters
                self.listCurrentRunParameters = listReplicateRunParameters
                
                ''' Get the number of replicates for this batch '''
                #self.intReplicates = self.listCurrentRunParameters[0] # Replicate number must always be first in the batch list
                self.intReplicates = self.Arg_Population_Replicates
                              
                return True

            def method_Assign_Batch_Run_Parameters(self):

                '''
                ~~~~~~~~~~~~~~~~~~~~
                Replicate Run - Parameter Specification
                ~~~~~~~~~~~~~~~~~~~~
                '''
                
                ''' Adjust NATURAL Survival to accomodate SENESCENCE '''
#                 if self.Arg_Species_Life_History_Allow_Senescence:
#                     self.Arg_Survival_Natural = self.Arg_Survival_Natural_Senescence
#                 else:
#                     self.Arg_Survival_Natural = self.Arg_Survival_Natural_No_Senescence
#                 pass
                self.Arg_Survival_Natural = self.Arg_dict_Natural_Survival_CSV_Age_And_Survival_Rate__BOTH
                        
                ''' 
                --------------------------------------------------
                Allele Frequency specification
                --------------------------------------------------
                ''' 
                self.boolInitGenotypeByLoci = False
                
                
                '''
                Check if Genome is being imported
                '''                
                self.boolObtainAlleleFrequenciesFromFile = self.Arg_bool_Obtain_Allele_Freqs_From_File
                
                if self.boolObtainAlleleFrequenciesFromFile:
                    
                    if self.str_Genome_Allele_Frequency_Distribution == self.obj_Config_Batch_Scenario.static_str_Value__Genome_Allele_Frequency_Distribution_ALL_ALLELE_FREQUENCIES:
                        '''
                        ------------------
                        Alleles per locus scheme: ALL_ALLELE_FREQUENCIES_FILE locus per alleles distribution
                        +                        
                        Allele Freq Scheme
                        1 - Obtain loci number, alleles per locus, and allele freq dist from Arlequin AllAlleleFrequencies file  - ALL_ALLELE_FREQUENCIES_FILE (AAF)
                        ------------------
                        '''       
                        self.int_Allele_Number_Per_Locus_Distribution = globalsSS.Allele_Number_Per_Locus_Distribution.static_int_Allele_Number_Per_Locus_Distribution__ALL_ALLELE_FREQUENCIES_FILE
                        self.intAlleleFrequencyScheme = globalsSS.Allele_Frequency_Distribution.static_int_Allele_Frequency_Distribution_Distribution__ALL_ALLELE_FREQUENCIES_FILE
                        self.Arg_bool_Obtain_Allele_Freqs_From_File = True
                        
                        #DEBUG_ON
                        #str_Input_File_Path = 'C:\\DCB\\MUI\\MUI_Sync_Auto\\MUI_A_Analyses\\Shared_Data\\'
                        #str_Input_File_Name = 'AllAlleleFreqs_Stegostoma Total genotypes 29Sep2014 summary stats_DCB_V2.txt'
                        #DEBUG_OFF
                        
                        str_Input_File_Path, str_Input_File_Name = os__path.split(self.Arg_Genome_Source_FILE)
                        self.method_Simulation_Run_Obtain_Allele_Frequencies_From_ALL_ALLELE_FREQUENCIES_File(str_Input_File_Path, str_Input_File_Name)
                        self.boolInitGenotypeByLoci = True
                        pass
                    elif self.str_Genome_Allele_Frequency_Distribution == self.obj_Config_Batch_Scenario.static_str_Value__Genome_Allele_Frequency_Distribution_GENEPOP:
                        '''
                        ------------------
                        Alleles per locus scheme: GENEPOP file locus per alleles distribution
                        +                        
                        Allele Freq Scheme
                        1 - Obtain loci number, alleles per locus, and allele freq dist from Genepop file  - GENEPOP_FILE (GPF)
                        ------------------
                        '''       
                        self.int_Allele_Number_Per_Locus_Distribution = globalsSS.Allele_Number_Per_Locus_Distribution.static_int_Allele_Number_Per_Locus_Distribution__GENEPOP_FILE
                        self.intAlleleFrequencyScheme = globalsSS.Allele_Frequency_Distribution.static_int_Allele_Frequency_Distribution_Distribution__GENEPOP_FILE
                        self.Arg_bool_Obtain_Allele_Freqs_From_File = True
                        
                        #DEBUG_ON
                        #str_Input_File_Path = 'C:\\DCB\\MUI\\MUI_Sync_Auto\\MUI_A_Analyses\\Shared_Data\\'
                        #str_Input_File_Name = 'AllAlleleFreqs_Stegostoma Total genotypes 29Sep2014 summary stats_DCB_V2.txt'
                        #DEBUG_OFF
                        
                        str_Input_File_Path, str_Input_File_Name = os__path.split(self.Arg_Genome_Source_FILE)
                        bool_Success, str_Message = self.method_Simulation_Run_Obtain_Allele_Frequencies_From_GENEPOP_File(str_Input_File_Path, str_Input_File_Name)
                        
                        if not bool_Success:
                            str_Message_Text = str_Message
                            int_Stack_Trace_Level = 2
                            with SSErrorOperation([]) as obj_SSErrorOp:
                                obj_SSErrorOp.func_Error_Handler__Caught_Exceptions(int_Stack_Trace_Level, str_Message_Text, tup_Args = (self.str_App_Arg_Output_Base_Path, self.strUniqueRunID))
                            pass
                            return False
                        else:    
                            self.boolInitGenotypeByLoci = True
                        pass
                    pass
                else:
                    ''' If genome is not imported - get the number of loci '''
                    self.nLoci = self.Arg_Genome_Locus_Number
                pass

                '''
                if the genome is not imported:
                Do a preliminary error check
                '''
                if not self.boolObtainAlleleFrequenciesFromFile:
                    if self.str_Genome_Alleles_Per_Locus_Distribution == self.obj_Config_Batch_Scenario.static_str_Value__Genome_Alleles_Per_Locus_Distribution_BINOMIAL:
                        '''
                        Allele freq scheme BINOMIAL has been requested - Check if STDDEV is valid
                        '''
                        if self.Arg_Genome_BINOMIAL_StdDev_Alleles_Per_Locus == 0:
                            '''
                            if NOT valid use:
                            ------------------
                            Alleles per locus scheme: UNIFORM locus per alleles distribution
                            ------------------
                            '''
                            self.str_Genome_Alleles_Per_Locus_Distribution = self.obj_Config_Batch_Scenario.static_str_Value__Genome_Alleles_Per_Locus_Distribution_UNIFORM
                            
                            ''' Get UNIFORM allele per locus from BIOMINAL MEAN rounded to integer '''
                            self.Arg_Genome_UNIFORM_Number_Alleles_Per_Locus = int(round(self.Arg_Genome_BINOMIAL_Mean_Number_Alleles_Per_Locus,0))
                        pass
                    pass
                    
                    '''
                    if the genome is not imported:
                    Get the Alleles per locus scheme and the allele frequency scheme
                    '''
                    
                    
                    if self.str_Genome_Alleles_Per_Locus_Distribution == self.obj_Config_Batch_Scenario.static_str_Value__Genome_Alleles_Per_Locus_Distribution_UNIFORM and \
                       self.str_Genome_Allele_Frequency_Distribution == self.obj_Config_Batch_Scenario.static_str_Value__Genome_Allele_Frequency_Distribution_NON_RANDOM:    
                            '''
                            ------------------
                            Alleles per locus scheme: UNIFORM locus per alleles distribution
                            +
                            Allele Freq Scheme: NON-Randomly generated allele frequencies
                            ------------------
                            '''
                            self.int_Allele_Number_Per_Locus_Distribution = globalsSS.Allele_Number_Per_Locus_Distribution.static_int_Allele_Number_Per_Locus_Distribution__UNIFORM       
                            self.intAlleleFrequencyScheme = globalsSS.Allele_Frequency_Distribution.static_int_Allele_Frequency_Distribution_Distribution__NON_RANDOM
     
                            self.int_Genome_UNIFORM_Number_Alleles_Per_Locus = self.Arg_Genome_UNIFORM_Number_Alleles_Per_Locus
                            self.int_Alleles_Per_Locus = self.int_Genome_UNIFORM_Number_Alleles_Per_Locus
                            self.nAllelesPerLoci = self.int_Alleles_Per_Locus #RETIRE self.nAllelesPerLoci at some stage
                                                      
                            pass   
                            
                            pass                        
                    elif self.str_Genome_Alleles_Per_Locus_Distribution == self.obj_Config_Batch_Scenario.static_str_Value__Genome_Alleles_Per_Locus_Distribution_UNIFORM and \
                         self.str_Genome_Allele_Frequency_Distribution == self.obj_Config_Batch_Scenario.static_str_Value__Genome_Allele_Frequency_Distribution_DRICHLET:
                            '''
                            ------------------
                            Alleles per locus scheme: UNIFORM locus per alleles distribution
                            +
                            Allele Freq Scheme: NON-Randomly generated allele frequencies
                            ------------------
                            '''
                            self.int_Allele_Number_Per_Locus_Distribution = globalsSS.Allele_Number_Per_Locus_Distribution.static_int_Allele_Number_Per_Locus_Distribution__UNIFORM       
                            self.intAlleleFrequencyScheme = globalsSS.Allele_Frequency_Distribution.static_int_Allele_Frequency_Distribution_Distribution__DRICHLET

                            self.int_Genome_UNIFORM_Number_Alleles_Per_Locus = self.Arg_Genome_UNIFORM_Number_Alleles_Per_Locus
                            self.int_Alleles_Per_Locus = self.int_Genome_UNIFORM_Number_Alleles_Per_Locus
                            self.nAllelesPerLoci = self.int_Alleles_Per_Locus #RETIRE self.nAllelesPerLoci at some stage
                                                        
                            pass                        
                    elif self.str_Genome_Alleles_Per_Locus_Distribution == self.obj_Config_Batch_Scenario.static_str_Value__Genome_Alleles_Per_Locus_Distribution_BINOMIAL and \
                         self.str_Genome_Allele_Frequency_Distribution == self.obj_Config_Batch_Scenario.static_str_Value__Genome_Allele_Frequency_Distribution_NON_RANDOM:
                            '''
                            ------------------
                            Alleles per locus scheme: BINOMIAL locus per alleles distribution
                            +
                            Allele Freq Scheme: NON-Randomly generated allele frequencies
                            ------------------
                            '''
                            self.int_Allele_Number_Per_Locus_Distribution = globalsSS.Allele_Number_Per_Locus_Distribution.static_int_Allele_Number_Per_Locus_Distribution__BINOMIAL       
                            self.intAlleleFrequencyScheme = globalsSS.Allele_Frequency_Distribution.static_int_Allele_Frequency_Distribution_Distribution__NON_RANDOM

                            self.float_Genome_BINOMIAL_Mean_Number_Alleles_Per_Locus = self.Arg_Genome_BINOMIAL_Mean_Number_Alleles_Per_Locus
                            self.float_Genome_BINOMIAL_StdDev_Alleles_Per_Locus = self.Arg_Genome_BINOMIAL_StdDev_Alleles_Per_Locus
                                                        
                            pass
                    elif self.str_Genome_Alleles_Per_Locus_Distribution == self.obj_Config_Batch_Scenario.static_str_Value__Genome_Alleles_Per_Locus_Distribution_BINOMIAL and \
                         self.str_Genome_Allele_Frequency_Distribution == self.obj_Config_Batch_Scenario.static_str_Value__Genome_Allele_Frequency_Distribution_DRICHLET:
                            '''
                            ------------------
                            Alleles per locus scheme: BINOMIAL locus per alleles distribution
                            +
                            Allele Freq Scheme: DIRICHLET Randomly generated allele frequencies
                            ------------------
                            '''
                            self.int_Allele_Number_Per_Locus_Distribution = globalsSS.Allele_Number_Per_Locus_Distribution.static_int_Allele_Number_Per_Locus_Distribution__BINOMIAL       
                            self.intAlleleFrequencyScheme = globalsSS.Allele_Frequency_Distribution.static_int_Allele_Frequency_Distribution_Distribution__DRICHLET
    
                            self.float_Genome_BINOMIAL_Mean_Number_Alleles_Per_Locus = self.Arg_Genome_BINOMIAL_Mean_Number_Alleles_Per_Locus
                            self.float_Genome_BINOMIAL_StdDev_Alleles_Per_Locus = self.Arg_Genome_BINOMIAL_StdDev_Alleles_Per_Locus
                         
                            pass                        
                    else:
                        '''
                        ------------------
                        Alleles per locus scheme: UNIFORM locus per alleles distribution
                        +
                        Allele Freq Scheme: NON-Randomly generated allele frequencies
                        ------------------
                        '''
                        self.int_Allele_Number_Per_Locus_Distribution = globalsSS.Allele_Number_Per_Locus_Distribution.static_int_Allele_Number_Per_Locus_Distribution__UNIFORM       
                        self.intAlleleFrequencyScheme = globalsSS.Allele_Frequency_Distribution.static_int_Allele_Frequency_Distribution_Distribution__NON_RANDOM
                        
                        self.int_Genome_UNIFORM_Number_Alleles_Per_Locus = self.Arg_Genome_UNIFORM_Number_Alleles_Per_Locus
                        self.int_Alleles_Per_Locus = self.int_Genome_UNIFORM_Number_Alleles_Per_Locus
                        self.nAllelesPerLoci = self.int_Alleles_Per_Locus #RETIRE self.nAllelesPerLoci at some stage                      
                        pass                        
                    pass
                pass
                
                
#                 '''
#                 if self.str_Genome_Alleles_Per_Locus_Distribution == self.obj_Config_Batch_Scenario.static_str_Value__Genome_Alleles_Per_Locus_Distribution_UNIFORM:
#                     '''
#                     ------------------
#                     Allele Per Locus Scheme: Equal starting allele frequencies
#                     ------------------
#                     '''       
#                     if self.str_Genome_Allele_Frequency_Distribution == self.obj_Config_Batch_Scenario.static_str_Value__Genome_Allele_Frequency_Distribution_DRICHLET:
#                         '''
#                         ------------------
#                         Alleles per locus scheme: UNIFORM locus per alleles distribution
#                         +
#                         Allele Freq Scheme: DIRICHLET Randomly generated allele frequencies
#                         ------------------
#                         '''
#                         self.int_Allele_Number_Per_Locus_Distribution = globalsSS.Allele_Number_Per_Locus_Distribution.static_int_Allele_Number_Per_Locus_Distribution__UNIFORM       
#                         self.intAlleleFrequencyScheme = globalsSS.Allele_Frequency_Distribution.static_int_Allele_Frequency_Distribution_Distribution__DRICHLET
#                         pass
#                     elif self.str_Genome_Allele_Frequency_Distribution == self.obj_Config_Batch_Scenario.static_str_Value__Genome_Allele_Frequency_Distribution_NON_RANDOM:    
#                         '''
#                         ------------------
#                         Alleles per locus scheme: UNIFORM locus per alleles distribution
#                         +
#                         Allele Freq Scheme: NON-Randomly generated allele frequencies
#                         ------------------
#                         '''
#                         self.int_Allele_Number_Per_Locus_Distribution = globalsSS.Allele_Number_Per_Locus_Distribution.static_int_Allele_Number_Per_Locus_Distribution__UNIFORM       
#                         self.intAlleleFrequencyScheme = globalsSS.Allele_Frequency_Distribution.static_int_Allele_Frequency_Distribution_Distribution__NON_RANDOM
# 
#                         self.int_Genome_UNIFORM_Number_Alleles_Per_Locus = self.Arg_Genome_UNIFORM_Number_Alleles_Per_Locus
#                         self.nAllelesPerLoci = self.int_Genome_UNIFORM_Number_Alleles_Per_Locus                            
#                         self.listAlleleFreqs = [1 / float(self.nAllelesPerLoci) for x in range(1,self.nAllelesPerLoci+1)]                        
#                         pass                        
#                     else:
#                         ''' Default to UNIFORM locus per alleles distribution + Allele Freq Scheme NON_RANDOM '''
#                         self.int_Allele_Number_Per_Locus_Distribution = globalsSS.Allele_Number_Per_Locus_Distribution.static_int_Allele_Number_Per_Locus_Distribution__UNIFORM       
#                         self.intAlleleFrequencyScheme = globalsSS.Allele_Frequency_Distribution.static_int_Allele_Frequency_Distribution_Distribution__NON_RANDOM
# 
#                         self.int_Genome_UNIFORM_Number_Alleles_Per_Locus = self.Arg_Genome_UNIFORM_Number_Alleles_Per_Locus
#                         self.nAllelesPerLoci = self.int_Genome_UNIFORM_Number_Alleles_Per_Locus                            
#                         self.listAlleleFreqs = [1 / float(self.nAllelesPerLoci) for x in range(1,self.nAllelesPerLoci+1)]                        
#                         pass                        
#                     pass
#                 elif self.str_Genome_Alleles_Per_Locus_Distribution == self.obj_Config_Batch_Scenario.static_str_Value__Genome_Alleles_Per_Locus_Distribution_BINOMIAL:
#                     '''
#                     Allele freq scheme BINOMIAL has been requested - Check if STDDEV is valid
#                     '''
#                     if self.Arg_Genome_BINOMIAL_StdDev_Alleles_Per_Locus == 0:
#                         '''
#                         if NOT valid use:
#                         ------------------
#                         Alleles per locus scheme: UNIFORM locus per alleles distribution
#                         ------------------
#                         '''
# 
#                         ''' Get UNIFORM allele per locus from BIOMINAL MEAN rounded to integer '''
#                         self.Arg_Genome_UNIFORM_Number_Alleles_Per_Locus = int(round(self.Arg_Genome_BINOMIAL_Mean_Number_Alleles_Per_Locus,0))
#                         
#                         if self.str_Genome_Allele_Frequency_Distribution == self.obj_Config_Batch_Scenario.static_str_Value__Genome_Allele_Frequency_Distribution_DRICHLET:
#                             '''
#                             ------------------
#                             Alleles per locus scheme: UNIFORM locus per alleles distribution
#                             +
#                             Allele Freq Scheme: DIRICHLET Randomly generated allele frequencies
#                             ------------------
#                             '''
#                             self.int_Allele_Number_Per_Locus_Distribution = globalsSS.Allele_Number_Per_Locus_Distribution.static_int_Allele_Number_Per_Locus_Distribution__UNIFORM       
#                             self.intAlleleFrequencyScheme = globalsSS.Allele_Frequency_Distribution.static_int_Allele_Frequency_Distribution_Distribution__DRICHLET
#                             
#                             pass
#                         elif self.str_Genome_Allele_Frequency_Distribution == self.obj_Config_Batch_Scenario.static_str_Value__Genome_Allele_Frequency_Distribution_NON_RANDOM:    
#                             '''
#                             ------------------
#                             Alleles per locus scheme: UNIFORM locus per alleles distribution
#                             +
#                             Allele Freq Scheme: NON-Randomly generated allele frequencies
#                             ------------------
#                             '''
#                             self.int_Allele_Number_Per_Locus_Distribution = globalsSS.Allele_Number_Per_Locus_Distribution.static_int_Allele_Number_Per_Locus_Distribution__UNIFORM       
#                             self.intAlleleFrequencyScheme = globalsSS.Allele_Frequency_Distribution.static_int_Allele_Frequency_Distribution_Distribution__NON_RANDOM
#     
#                             self.int_Genome_UNIFORM_Number_Alleles_Per_Locus = self.Arg_Genome_UNIFORM_Number_Alleles_Per_Locus
#                             self.nAllelesPerLoci = self.int_Genome_UNIFORM_Number_Alleles_Per_Locus                            
#                             self.listAlleleFreqs = [1 / float(self.nAllelesPerLoci) for x in range(1,self.nAllelesPerLoci+1)]                        
#                             pass                        
#                         else:
#                             ''' Default to UNIFORM locus per alleles distribution + Allele Freq Scheme NON_RANDOM '''
#                             self.int_Allele_Number_Per_Locus_Distribution = globalsSS.Allele_Number_Per_Locus_Distribution.static_int_Allele_Number_Per_Locus_Distribution__UNIFORM       
#                             self.intAlleleFrequencyScheme = globalsSS.Allele_Frequency_Distribution.static_int_Allele_Frequency_Distribution_Distribution__NON_RANDOM
#     
#                             self.int_Genome_UNIFORM_Number_Alleles_Per_Locus = self.Arg_Genome_UNIFORM_Number_Alleles_Per_Locus
#                             self.nAllelesPerLoci = self.int_Genome_UNIFORM_Number_Alleles_Per_Locus                            
#                             self.listAlleleFreqs = [1 / float(self.nAllelesPerLoci) for x in range(1,self.nAllelesPerLoci+1)]                        
#                             pass                        
#                         pass
#                     else:
#                         ''' BINOMAL allele freq dist is valid - Get MEAN & STDDEV '''
#                         self.float_Genome_BINOMIAL_Mean_Number_Alleles_Per_Locus = self.Arg_Genome_BINOMIAL_Mean_Number_Alleles_Per_Locus
#                         self.float_Genome_BINOMIAL_StdDev_Alleles_Per_Locus = self.Arg_Genome_BINOMIAL_StdDev_Alleles_Per_Locus
#                                                     
#                         if self.str_Genome_Allele_Frequency_Distribution == self.obj_Config_Batch_Scenario.static_str_Value__Genome_Allele_Frequency_Distribution_DRICHLET:
#                             '''
#                             ------------------
#                             Alleles per locus scheme: BINOMIAL locus per alleles distribution
#                             +
#                             Allele Freq Scheme: DIRICHLET Randomly generated allele frequencies
#                             ------------------
#                             '''
#                             self.int_Allele_Number_Per_Locus_Distribution = globalsSS.Allele_Number_Per_Locus_Distribution.static_int_Allele_Number_Per_Locus_Distribution__BINOMIAL       
#                             self.intAlleleFrequencyScheme = globalsSS.Allele_Frequency_Distribution.static_int_Allele_Frequency_Distribution_Distribution__DRICHLET
# 
#                             pass                        
#                         elif self.str_Genome_Allele_Frequency_Distribution == self.obj_Config_Batch_Scenario.static_str_Value__Genome_Allele_Frequency_Distribution_NON_RANDOM:
#                             '''
#                             ------------------
#                             Alleles per locus scheme: BINOMIAL locus per alleles distribution
#                             +
#                             Allele Freq Scheme: NON-Randomly generated allele frequencies
#                             ------------------
#                             '''
#                             self.int_Allele_Number_Per_Locus_Distribution = globalsSS.Allele_Number_Per_Locus_Distribution.static_int_Allele_Number_Per_Locus_Distribution__BINOMIAL       
#                             self.intAlleleFrequencyScheme = globalsSS.Allele_Frequency_Distribution.static_int_Allele_Frequency_Distribution_Distribution__NON_RANDOM
#                             pass
#                         pass
#                     pass
#                 pass                

                                                    
#                     
#                     #self.int_Allele_Number_Per_Locus_Distribution = self.Arg_Genome_Alleles_Per_Locus_Distribution
#                     if self.Arg_Genome_Alleles_Per_Locus_Distribution == self.obj_Config_Batch_Scenario.static_str_Value__Genome_Alleles_Per_Locus_Distribution_UNIFORM:
#                         self.int_Allele_Number_Per_Locus_Distribution = globalsSS.Allele_Number_Per_Locus_Distribution.static_int_Allele_Number_Per_Locus_Distribution__UNIFORM
# 
#                         self.int_Genome_UNIFORM_Number_Alleles_Per_Locus = self.Arg_Genome_UNIFORM_Number_Alleles_Per_Locus
#                         self.nAllelesPerLoci = self.int_Genome_UNIFORM_Number_Alleles_Per_Locus                            
#                         self.listAlleleFreqs = [1 / float(self.nAllelesPerLoci) for x in range(1,self.nAllelesPerLoci+1)]
#                                                     
# #                         if self.Arg_Genome_UNIFORM_Number_Alleles_Per_Locus == 2:
# #                             self.int_Genome_UNIFORM_Number_Alleles_Per_Locus = self.Arg_Genome_UNIFORM_Number_Alleles_Per_Locus
# #                             self.nAllelesPerLoci = self.int_Genome_UNIFORM_Number_Alleles_Per_Locus
# #                             self.listAlleleFreqs = [0.5,0.5]
# #                         elif self.Arg_Genome_UNIFORM_Number_Alleles_Per_Locus == 3:
# #                             self.int_Genome_UNIFORM_Number_Alleles_Per_Locus = self.Arg_Genome_UNIFORM_Number_Alleles_Per_Locus
# #                             self.nAllelesPerLoci = self.int_Genome_UNIFORM_Number_Alleles_Per_Locus                            
# #                             self.listAlleleFreqs = [1 / float(self.nAllelesPerLoci) for x in range(1,self.nAllelesPerLoci+1)]
# #                         else:
# #                             self.int_Genome_UNIFORM_Number_Alleles_Per_Locus = self.Arg_Genome_UNIFORM_Number_Alleles_Per_Locus - 1
# #                             self.nAllelesPerLoci = self.int_Genome_UNIFORM_Number_Alleles_Per_Locus - 1
# #                             
# #                             ''' Generate equal allele frequencies accross all the loci '''
# #                             decimalAlleleFreq = float(1)/self.nAllelesPerLoci
# #                             decimalAlleleFreqLeftover = 1-(float((self.nAllelesPerLoci-1))*decimalAlleleFreq)
# #                             self.listAlleleFreqs=[decimalAlleleFreqLeftover]
# #                             for i in range(self.nAllelesPerLoci-1):
# #                                 self.listAlleleFreqs.append(decimalAlleleFreq)
# #                             pass    
#                                         
#                     elif self.str_Genome_Alleles_Per_Locus_Distribution == self.obj_Config_Batch_Scenario.static_str_Value__Genome_Alleles_Per_Locus_Distribution_BINOMIAL:                    
#                         self.int_Allele_Number_Per_Locus_Distribution = globalsSS.Allele_Number_Per_Locus_Distribution.static_int_Allele_Number_Per_Locus_Distribution__BINOMIAL
#                         self.float_Genome_BINOMIAL_Mean_Number_Alleles_Per_Locus = self.Arg_Genome_BINOMIAL_Mean_Number_Alleles_Per_Locus
#                         self.float_Genome_BINOMIAL_StdDev_Alleles_Per_Locus = self.Arg_Genome_BINOMIAL_StdDev_Alleles_Per_Locus
#                     pass                     
# #                     self.int_Genome_UNIFORM_Number_Alleles_Per_Locus = self.Arg_Genome_UNIFORM_Number_Alleles_Per_Locus - 1
# #                     self.float_Genome_BINOMIAL_Mean_Number_Alleles_Per_Locus = self.Arg_Genome_BINOMIAL_Mean_Number_Alleles_Per_Locus
# #                     self.float_Genome_BINOMIAL_StdDev_Alleles_Per_Locus = self.Arg_Genome_BINOMIAL_StdDev_Alleles_Per_Locus  
#                 pass
            
                ''' AgeNe parameter general control '''
                #Ensure the Manual AgeNe parms match what is specified here for the SIM
                self.boolAgeNeParmMatchManualToSim = True
                self.boolAgeNeParmMatchManual_bx_genertated_in_Sim = False
                
                '''
                TESTING - OVERLAPPING GENERATIONS
                WF Diploid Dioecious Sexual Random Mating  
                '''
                listReplicateRunParameters = [
                 #SIMPLE OVERLAPPING GENS - Mating in Aug (8), Gestation 5 months (Feb,2), Resting 1 months (Mar, 3)
                 self.Arg_Population_Replicates, self.Arg_Species_Mating_Scheme, self.Arg_Species_Mating_Scheme_Polygamy_Number_Of_Mates, [10]    #intReplicates, intMatingSchemeType, intPolygamousMateNumber, listMatingParentSelectionScheme
                 , 3, self.Arg_Population_Size, self.Arg_Replicate_Burn_In_Annual_Matings                  #intPopulationInitialAges, popnSize, intReplicateBurnInLengthInYears
                 , self.Arg_Species_Offspring_Sex_Scheme, self.Arg_Species_Offspring_Sex_Scheme_PROBABILITY_OF_MALES_Prob_of_Males                         #intOffspringSexScheme, floatSexRatioOfMales,
                 , self.Arg_Species_Life_History_Max_Age, self.Arg_Species_Life_History_Max_Mating_Age, self.Arg_Species_Life_History_Min_Mating_Age   #maxAge, maxMatingAge, minMatingAge,
                 , 0, 1, 1.0
                 , self.Arg_list_Offspring_Production_Parms                       #intMinNumOffspring, meanvarnumOffspring, intMaxNumOffspring, listOffspringNumberParameters,
                 , self.nLoci, self.nAllelesPerLoci+1                             #nLoci, nAllelesPerLoci
                 , self.intAlleleFrequencyScheme, self.listAlleleFreqs            #intAlleleFrequencyScheme, listAlleleFreqs
                 , self.Arg_Genome_Mutation_Allowed, self.Arg_Genome_Mutation_Rate, 1                                                  #bool_Allow_Mutation, float_Mutation_Rate, ?????
                 , False, False, [x for x in range(0, self.nLoci)], False, False  #boolReportDemographicNe, boolArg_Species_Life_History_Min_Mating_AgeReportLDNe, listLociToReportNE
                 , self.Arg_Species_Mating_Calendar_Month                             #intMatingCalenderMonth, 
                 , self.Arg_Species_Parturition_Calendar_Month, self.Arg_Species_Parturition_Gestation_Length_In_Months, self.Arg_Species_Parturition_Reproductive_Rest_Length_In_Months+4  #intParturitionCalenderMonth, intGestationLengthInMonths, intReproductiveRestLengthInMonths + 4 (To ensure the correct rest length)
                 , self.Arg_Replicate_Temporal_Evolution_Years, self.Arg_Replicate_Temporal_Evolution_Months            #intTotalYearsToSimulate, intTotalMonthsToSimulate
                 , True                                                            #boolSuppressBurnInOutput
                 , True, self.Arg_Mortality_Application_Specs__Nat  #dict_Mortality_Application_Specs_By_Sex__NATURAL
                 , self.Arg_Survival_Natural
                 , self.Arg_Allow_UnNatural_Mortality__BOTH, self.Arg_Mortality_Application_Specs__UnNat #dict_Mortality_Application_Specs_By_Sex__UnNATURAL
                 , self.Arg_Survival_UnNatural
                 , True
                ]                
                
                self.bool_Export_Genepop_PF_Files = self.Arg_Batch_Setting__Genepop_Details__Export_Genepop_PF_Files
                self.bool_Export_Genepop_PF_Files_During_BurnIn = self.Arg_Batch_Setting__Genepop_Details__Export_Genepop_PF_Files_During_BurnIn
                self.bool_Genepop_Export_PF_Embryo_VSP = self.Arg_Batch_Setting__Genepop_Details__Export_Genepop_PF_Embryo_VSP
                self.float_SubSample_Percent_Of_PF_Embryo_VSP = self.Arg_Batch_Setting__Genepop_Details__Export_Genepop_SubSample_Percent_Of_PF_Embryo_VSP
                self.bool_Genepop_Export_PF_Mature_VSP = self.Arg_Batch_Setting__Genepop_Details__Export_Genepop_PF_Mature_VSP
                self.float_SubSample_Percent_Of_PF_Mature_VSP = self.Arg_Batch_Setting__Genepop_Details__Export_Genepop_SubSample_Percent_Of_PF_Mature_VSP
                self.bool_Genepop_Export_PF_Full_SP = self.Arg_Batch_Setting__Genepop_Details__Export_Genepop_PF_Full_VSP
                self.float_SubSample_Percent_Of_PF_Full_SP = self.Arg_Batch_Setting__Genepop_Details__Export_Genepop_SubSample_Percent_Of_PF_Full_VSP                
                self.int_Genpop_For_BioP_Saving_Starts__Replicate_Mating_Count =  self.Arg_Batch_Setting__Genepop_Details__Export_Genepop_PF_Files_Starts_At_Replicate_Mating_Count
                self.int_Genpop_For_BioP_Save_Every__Replicate_Mating_Count = self.Arg_Batch_Setting__Genepop_Details__Export_Genepop_PF_Files_Every_Replicate_Mating_Count
                
                self.int_SimuPop_Saving_Starts__Replicate_Mating_Count =  self.Arg_Pop_Saving__Replicate_Mating_Count_At_Which_Pop_Saving_Starts
                self.int_SimuPop_Save_Every__Replicate_Mating_Count = self.Arg_Pop_Saving__Save_Pop_Every_Replicate_Mating_Count
                self.int_Post_Sim_Pop_Sampling_Starts_When_Mating_Count_Is = self.Arg_Pop_Sampling__Post_Sim_Pop_Sampling_Start_At_Replicate_Mating_Count
                self.int_Sample_Pop_When_Mating_Count_Divisible_By = self.Arg_Pop_Sampling__Sample_Pop_Every_Mating_Count

                self.Arg_Pop_Batches = 1
                self.int_Total_MatingsToSimulatePerReplicate = self.method_Replicate_Get_Replicate_Total_Matings_NEW(self.Arg_Replicate_Burn_In_Annual_Matings, self.Arg_Replicate_Temporal_Evolution_Years, self.Arg_Replicate_Temporal_Evolution_Months, self.Arg_Species_Mating_Calendar_Month, self.Arg_Pop_Batches, self.Arg_Population_Replicates)
                
                return listReplicateRunParameters
                        
            def method_Batch_Current_Batch_Parameter_Initialization(self):
 
                self.int_MatingCount_Batch_Total = 0
                self.int_MatingCount_Batch_BurnIn = 0
                self.int_MatingCount_Batch_PostBurnIn = 0           
                '''
                Split out each parameter from batch list or parameters
                '''
                intParameterListIndex = 0
                
                self.intReplicates = self.listCurrentRunParameters[intParameterListIndex]
                
#                 intParameterListIndex+=1
#                 self.strRunFolder = self.listCurrentRunParameters[intParameterListIndex]
                intParameterListIndex+=1
                self.intMatingSchemeType = self.listCurrentRunParameters[intParameterListIndex]
                intParameterListIndex+=1
                self.intPolygamousMateNumber = self.listCurrentRunParameters[intParameterListIndex]
                intParameterListIndex+=1
                self.listMatingParentSelectionScheme = self.listCurrentRunParameters[intParameterListIndex]

                # ---- Define population parameters
                intParameterListIndex+=1
                self.intPopulationInitialAges = self.listCurrentRunParameters[intParameterListIndex]
                intParameterListIndex+=1
                self.popnSize = self.listCurrentRunParameters[intParameterListIndex]
                intParameterListIndex+=1
                self.intReplicateBurnInLengthInYears = self.listCurrentRunParameters[intParameterListIndex]

                # ---- Define life history parameters
                intParameterListIndex+=1
                self.intOffspringSexScheme = self.listCurrentRunParameters[intParameterListIndex]
                intParameterListIndex+=1
                self.floatSexRatioOfMales = self.listCurrentRunParameters[intParameterListIndex]
                intParameterListIndex+=1
                self.maxAge = self.listCurrentRunParameters[intParameterListIndex]
                intParameterListIndex+=1
                self.maxMatingAge = self.listCurrentRunParameters[intParameterListIndex]
                intParameterListIndex+=1
                self.minMatingAge = self.listCurrentRunParameters[intParameterListIndex]
                
                # Calculate Overlapping or Non-overlaping gens
                if (self.maxMatingAge - self.minMatingAge) > 1:
                    self.bool_Overlapping_Gens_Simulation = True
                else:  
                    self.bool_Overlapping_Gens_Simulation = False
                pass
            
                intParameterListIndex+=1
                self.intMinNumOffspring = self.listCurrentRunParameters[intParameterListIndex]
                intParameterListIndex+=1
                self.meanvarnumOffspring = self.listCurrentRunParameters[intParameterListIndex]
                intParameterListIndex+=1
                self.intMaxNumOffspring = self.listCurrentRunParameters[intParameterListIndex]
                intParameterListIndex+=1
                self.listOffspringNumberParameters = self.listCurrentRunParameters[intParameterListIndex]
                 
                # ---- Define Loci parameters
                intParameterListIndex+=1
                self.nLoci = self.listCurrentRunParameters[intParameterListIndex]
                intParameterListIndex+=1
                self.nAllelesPerLoci = self.listCurrentRunParameters[intParameterListIndex]

                intParameterListIndex+=1
                self.intAlleleFrequencyScheme = self.listCurrentRunParameters[intParameterListIndex]

                #Auto-calculate allele frequency distribution if specified by intAllelFreqeuncyScheme
                intParameterListIndex+=1
#                 if self.intAlleleFrequencyScheme == 0:
# #                     # Generate equal allele frequencies accross all the loci
# #                     decimalAlleleFreq = float(1)/self.nLoci
# #                     decimalAlleleFreqLeftover = 1-(float((self.nLoci-1))*decimalAlleleFreq)
# #                     self.listAlleleFreqs=[decimalAlleleFreqLeftover]
# #                     for i in range(self.nLoci-1):
# #                         self.listAlleleFreqs.append(float(1)/self.nLoci)
# #                     self.listCurrentRunParameters[intParameterListIndex] = self.listAlleleFreqs
#                     # Generate equal allele frequencies accross all the loci
#                     decimalAlleleFreq = float(1)/self.nAllelesPerLoci
#                     decimalAlleleFreqLeftover = 1-(float((self.nAllelesPerLoci-1))*decimalAlleleFreq)
#                     self.listAlleleFreqs=[decimalAlleleFreqLeftover]
#                     for i in range(self.nAllelesPerLoci-1):
#                         self.listAlleleFreqs.append(decimalAlleleFreq)
#                     self.listCurrentRunParameters[intParameterListIndex] = self.listAlleleFreqs
#                 else:
#                     #Allele frequency distribution has been supplied
#                     pass
                        
                self.listAlleleFreqs = self.listCurrentRunParameters[intParameterListIndex]

                # Generate list of loci names
                with SSOutputHandler() as objSSOutputOperation:
                    self.listLociNames = objSSOutputOperation.AutomaticLociNamesList(self.nLoci)

                intParameterListIndex+=1
                self.bool_Allow_Mutation = self.listCurrentRunParameters[intParameterListIndex]
                intParameterListIndex+=1
                self.float_Mutation_Rate = self.listCurrentRunParameters[intParameterListIndex]

                #NE Reporting
                intParameterListIndex+=1
                intParameterListIndex+=1
                self.boolReportDemographicNe = self.listCurrentRunParameters[intParameterListIndex]
                intParameterListIndex+=1
                self.boolReportLDNe = self.listCurrentRunParameters[intParameterListIndex]
                intParameterListIndex+=1
                self.listLociToReportNE = self.listCurrentRunParameters[intParameterListIndex]
                intParameterListIndex+=1
                self.boolReportTemporalFS_P1_Ne = self.listCurrentRunParameters[intParameterListIndex]
                intParameterListIndex+=1
                self.boolReportTemporalFS_P2_Ne = self.listCurrentRunParameters[intParameterListIndex]
                
                intParameterListIndex+=1
                self.intMatingCalenderMonth = self.listCurrentRunParameters[intParameterListIndex]
                intParameterListIndex+=1
                self.intParturitionCalenderMonth = self.listCurrentRunParameters[intParameterListIndex]
                intParameterListIndex+=1
                self.intGestationLengthInMonths = self.listCurrentRunParameters[intParameterListIndex]
                intParameterListIndex+=1
                self.intReproductiveRestLengthInMonths = self.listCurrentRunParameters[intParameterListIndex]
                intParameterListIndex+=1
                self.intTotalYearsToSimulate = self.listCurrentRunParameters[intParameterListIndex]
                intParameterListIndex+=1
                self.intTotalMonthsToSimulate = self.listCurrentRunParameters[intParameterListIndex]
                
                intParameterListIndex+=1
                self.boolSuppressBurnInOutput = self.listCurrentRunParameters[intParameterListIndex]
                #Mortality
                intParameterListIndex+=1
                self.boolAllowNATURALMortality = self.listCurrentRunParameters[intParameterListIndex]
                intParameterListIndex+=1
                self.dict_Mortality_Application_Specs_By_Sex__NATURAL = self.listCurrentRunParameters[intParameterListIndex]

                intParameterListIndex+=1
                self.dictProbabilityDistribution_P_SurvivalNATURALBySexByAge = self.listCurrentRunParameters[intParameterListIndex]
                intParameterListIndex+=1
                self.boolAllowUnNATURALMortality = self.listCurrentRunParameters[intParameterListIndex]
                intParameterListIndex+=1
                self.dict_Mortality_Application_Specs_By_Sex__UnNATURAL = self.listCurrentRunParameters[intParameterListIndex]
                intParameterListIndex+=1
                self.dictProbabilityDistribution_P_SurvivalUnNATURALBySexByAge = self.listCurrentRunParameters[intParameterListIndex]
                intParameterListIndex+=1
                self.boolReportSimAgeNe = self.listCurrentRunParameters[intParameterListIndex]

               
                '''
                Init some other parms
                '''
                self.intGrandTotalMonthsToSimulate = (self.intTotalYearsToSimulate*12) + self.intTotalMonthsToSimulate
                #                 if self.intGestationLengthInMonths > 0:
                #                     self.intOffspringPotentialFertilisationsToSimulate = (self.intGrandTotalMonthsToSimulate)//12
                #                 else:
                self.intOffspringPotentialFertilisationsToSimulate = self.intGrandTotalMonthsToSimulate//12
                 
                self.intReplicateBurnInLengthInMonths = self.intReplicateBurnInLengthInYears*12
                 
                return True

            def method_Batch_Embedded_Field_Filename_Generation(self):
                
                # Embed parameters into output filename for FileBridge to use
                # eg. {1_11_11_0_50} = 1 pop, 11 loci, 11 Alleles per loci, Mating scheme (0=Hetro,1=Homo,2=Polyandry)
                nPop = 1

                self.intPredictedBreedingPopulationSize = int((self.popnSize / self.maxAge) * (self.maxMatingAge - self.minMatingAge))

                self.strFilenameEmbeddedFields = '{'+ str(nPop) + '_'                                      \
                                                    + str(self.nLoci) + '_'                                \
                                                    + str(self.nAllelesPerLoci) + '_'                      \
                                                    + str(self.intMatingSchemeType) + '_'                 \
                                                    + str(self.intTotalYearsToSimulate) + '.'              \
                                                    + str(self.intTotalMonthsToSimulate) + '_'             \
                                                    + str(self.popnSize) + '_'                             \
                                                    + str(self.intAlleleFrequencyScheme) + '_'             \
                                                    + str(self.intReplicates) + '_'                        \
                                                    + str(self.maxAge) + '_'                               \
                                                    + str(self.maxMatingAge) + '_'                         \
                                                    + str(self.minMatingAge) + '_'                         \
                                                    + str( self.intPredictedBreedingPopulationSize) +'}'     
                #TO_DO
                # Remove pop
                # Add Burn-in
                # Add 
                pass

            def method_Batch_Mortality_Parameter_Assignment(self):

                if globalsSS.Logger_Debug_Timing.bool_Debug_Timing:
                    t2 = Timer2(True)
                    t2.Start()
                pass
             
                '''
                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                Natural Mortality
                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                '''                                    
                #odictSurvivalRatesByAge = OrderedDict()

                
                for strSex in self.listSexes:
                    if self.boolAllowNATURALMortality == False:
                        for intAgeInMonths in self.dictProbabilityDistribution_P_SurvivalNATURALBySexByAge[strSex].keys():
                            #self.dictProbabilityDistribution_P_SurvivalNATURALBySexByAge[strSex][intAgeInMonths] = 1    #1 = All survive
                            if strSex in self.odictRates_Of_Survival_NATURAL_BySex_ByAge:
                                self.odictRates_Of_Survival_NATURAL_BySex_ByAge[strSex].update(OrderedDict([(intAgeInMonths, 1)]))    #1 = All survive
                            else:
                                self.odictRates_Of_Survival_NATURAL_BySex_ByAge[strSex] = OrderedDict([(intAgeInMonths, 1)])    #1 = All survive
                            pass
                        pass
                    else:
                        self.odictRates_Of_Survival_NATURAL_BySex_ByAge[strSex] = OrderedDict(sorted(self.dictProbabilityDistribution_P_SurvivalNATURALBySexByAge[strSex].items()))
                    pass
                pass
                pass
                #self.odictRates_Of_Survival_NATURAL_BySex_ByAge = odictSurvivalRatesByAge
                       
                '''
                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                UnNatural Mortality
                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                '''
                #odictUnNATURALSurvivalRatesByAge = OrderedDict()
                    
                # if mortality is not allowed then populate mortality rate distribution with 0
                dictNewValues = AutoVivificationHandler()
                
                
                for strSex in self.listSexes:
                    if self.boolAllowUnNATURALMortality == False:
                        for intAgeInMonths in self.dictProbabilityDistribution_P_SurvivalUnNATURALBySexByAge[strSex].keys():
                            #self.dictProbabilityDistribution_P_SurvivalUnNATURALBySexByAge[strSex][intAgeInMonths] = 1    #1 = All survive
                            if strSex in self.odictRates_Of_Survival_UnNATURAL_BySex_ByAge:
                                self.odictRates_Of_Survival_UnNATURAL_BySex_ByAge[strSex].update(OrderedDict([(intAgeInMonths, 1)]))    #1 = All survive
                            else:
                                self.odictRates_Of_Survival_UnNATURAL_BySex_ByAge[strSex] = OrderedDict([(intAgeInMonths, 1)])    #1 = All survive
                            pass
                        pass
                    else:
                        self.odictRates_Of_Survival_UnNATURAL_BySex_ByAge[strSex] = OrderedDict(sorted(self.dictProbabilityDistribution_P_SurvivalUnNATURALBySexByAge[strSex].items()))
                    pass
                pass
                
#                 for strSex in self.listSexes:
#                     odictUnNATURALSurvivalRatesByAge[strSex] = OrderedDict(sorted(self.dictProbabilityDistribution_P_SurvivalUnNATURALBySexByAge[strSex].items()))
#                 pass
                #self.odictRates_Of_Survival_NATURAL_BySex_ByAge = odictUnNATURALSurvivalRatesByAge

                '''
                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                COMBINED Mortality - Used for performing mortality
                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                '''
                self.odictRates_Of_Survival_COMBINED_BySex_ByAge = OrderedDict()
                
                for key_str_Sex, value_Dict in self.odictRates_Of_Survival_NATURAL_BySex_ByAge.items():
                    self.odictRates_Of_Survival_COMBINED_BySex_ByAge[key_str_Sex] = OrderedDict([(key,valuelist) for key,valuelist in value_Dict.iteritems()])
                pass

                if self.boolAllowUnNATURALMortality:
                    for strSex, dictValues in self.odictRates_Of_Survival_UnNATURAL_BySex_ByAge.items():
                        for intAgeInMonths, float_UnNatural_Survival in dictValues.iteritems():

                            if intAgeInMonths in self.odictRates_Of_Survival_COMBINED_BySex_ByAge[strSex]:
                                float_Natural_Survival = self.odictRates_Of_Survival_COMBINED_BySex_ByAge[strSex][intAgeInMonths]
                                float_Overall_Survival_sx = float_Natural_Survival* float_UnNatural_Survival
                                dictNewValues = {intAgeInMonths:float_Overall_Survival_sx}
                                self.odictRates_Of_Survival_COMBINED_BySex_ByAge[strSex].update(dictNewValues)
                            else:
                                self.obj_Log_Debug.error('Ages in month in UnNatural Survival: ' + intAgeInMonths + '; missing from odictRates_Of_Survival_COMBINED_BySex_ByAge')
                                self.obj_Log_Debug.error('>>> Survival Stat: odictRates_Of_Survival_COMBINED_BySex_ByAge')
                                for str_Sex, value in self.odictRates_Of_Survival_COMBINED_BySex_ByAge.iteritems():
                                    self.obj_Log_Debug.error('Sex: ' + str_Sex + ' ; Total: ' + str(round(sum(collections__Counter(value).values()),2)) + ' ; Values: ' + str(value)) 
                                pass    
                                self.obj_Log_Debug.error('>>> Survival Stat: odictRates_Of_Survival_NATURAL_BySex_ByAge')
                                for str_Sex, value in self.odictRates_Of_Survival_NATURAL_BySex_ByAge.iteritems():
                                    self.obj_Log_Debug.error('Sex: ' + str_Sex + ' ; Total: ' + str(round(sum(collections__Counter(value).values()),2)) + ' ; Values: ' + str(value)) 
                                pass    
                                self.obj_Log_Debug.error('>>> Survival Stat: odictRates_Of_Survival_UnNATURAL_BySex_ByAge')
                                for str_Sex, value in self.odictRates_Of_Survival_UnNATURAL_BySex_ByAge.iteritems():
                                    self.obj_Log_Debug.error('Sex: ' + str_Sex + ' ; Total: ' + str(round(sum(collections__Counter(value).values()),2)) + ' ; Values: ' + str(value)) 
                                pass 
                            pass   
                        pass
                    pass
                pass

                #DEBUG_ON
                if globalsSS.Logger_Debug_AgeNe.bool_Debug_AgeNe:

                    self.obj_Log_Debug_AgeNe.debug('>>> Survival Stat: odictRates_Of_Survival_NATURAL_BySex_ByAge')
                    for str_Sex, value in self.odictRates_Of_Survival_NATURAL_BySex_ByAge.iteritems():
                        self.obj_Log_Debug_AgeNe.debug('Sex: ' + str_Sex + ' ; Total: ' + str(round(sum(collections__Counter(value).values()),2)) + ' ; Values: ' + str(value)) 
                    pass    
                    self.obj_Log_Debug_AgeNe.debug('>>> Survival Stat: odictRates_Of_Survival_UnNATURAL_BySex_ByAge')
                    for str_Sex, value in self.odictRates_Of_Survival_UnNATURAL_BySex_ByAge.iteritems():
                        self.obj_Log_Debug_AgeNe.debug('Sex: ' + str_Sex + ' ; Total: ' + str(round(sum(collections__Counter(value).values()),2)) + ' ; Values: ' + str(value)) 
                    pass 
                    self.obj_Log_Debug_AgeNe.debug('>>> Survival Stat: odictRates_Of_Survival_COMBINED_BySex_ByAge')
                    for str_Sex, value in self.odictRates_Of_Survival_COMBINED_BySex_ByAge.iteritems():
                        self.obj_Log_Debug_AgeNe.debug('Sex: ' + str_Sex + ' ; Total: ' + str(round(sum(collections__Counter(value).values()),2)) + ' ; Values: ' + str(value)) 
                    pass
                    #with globalsSS.Pause_Console() as obj_Pause:
                    #    obj_Pause.method_Pause_Console()
                pass
                            
                if globalsSS.Logger_Debug_Timing.bool_Debug_Timing:
                    t2.Stop(self.obj_Log_Debug_Timing, str_Message='', bool_Pause_Run=globalsSS.Logger_Debug_Timing.bool_Debug_Timing__Pause)
                    #if globalsSS.Logger_Debug_Timing.bool_Debug_Timing:
                    #    t2 = Timer2(True)
                    #    t2.Start()
                    #pass                    
                pass 
                #DEBUG_OFF
                           
                return True
            
            def method_Batch_Mortality_Parameter_Assignment_OLD(self):

                '''
                Natural Mortality
                '''        
                    
                odictNaturalSurvivalRatesByAge = OrderedDict()
                
                # if mortality is not allowed then populate mortality rate distribution with 0
                dictNewValues = AutoVivificationHandler()
                
                for strSex in self.listSexes:
                    if self.boolAllowNATURALMortality == False:
                        for intAgeInMonths in self.dictProbabilityDistribution_P_SurvivalNATURALBySexByAge[strSex].keys():
                            self.dictProbabilityDistribution_P_SurvivalNATURALBySexByAge[strSex][intAgeInMonths] = 1    #1 = All survive
                        pass
                    pass
                    odictNaturalSurvivalRatesByAge[strSex] = OrderedDict(sorted(self.dictProbabilityDistribution_P_SurvivalNATURALBySexByAge[strSex].items()))
                pass
                
                #odictNaturalSurvivalRatesByAge_AGENE_SIM = deepcopy(odictNaturalSurvivalRatesByAge)
                
                for strSex in self.listSexes:
                    #Survival rates - Used for performing mortality
                    self.odictRates_Of_Survival_NATURAL_BySex_ByAge[strSex] = odictNaturalSurvivalRatesByAge[strSex]
                            
                    #Survival rates - Used for reporting mortality directly after FERTILIZATION
                    odictNaturalSurvivalRatesByAge_REPORTING_ONLY = OrderedDict()
                    for intAgeInMonths, floatSurvivalRate in odictNaturalSurvivalRatesByAge[strSex].items():
                        odictNaturalSurvivalRatesByAge_REPORTING_ONLY[intAgeInMonths-12] = floatSurvivalRate
                    pass
                    self.odictRates_Of_Survival_NATURAL_BySex_ByAge_REPORTING_ONLY[strSex] = odictNaturalSurvivalRatesByAge_REPORTING_ONLY
                    #Survival rates - Used for AgeNE calculations
                    #odictNaturalSurvivalRatesByAge_AGENE_SIM[strSex][(self.maxAge*12)+12] = 0.0
                    odictNaturalSurvivalRatesByAge_AGENE_SIM=None
                    self.odictRates_Of_Survival_NATURAL_BySex_ByAge_AGENE_SIM = odictNaturalSurvivalRatesByAge_AGENE_SIM
                pass
                        
                '''
                Un-Natural Mortality
                '''

                odictUnNATURALSurvivalRatesByAge = OrderedDict()
                    
                # if mortality is not allowed then populate mortality rate distribution with 0
                dictNewValues = AutoVivificationHandler()
                
                for strSex in self.listSexes:
                    if self.boolAllowNATURALMortality == False:
                        for intAgeInMonths in self.dictProbabilityDistribution_P_SurvivalNATURALBySexByAge[strSex].keys():
                            self.dictProbabilityDistribution_P_SurvivalNATURALBySexByAge[strSex][intAgeInMonths] = 0
                        pass
                    pass
                    odictNaturalSurvivalRatesByAge[strSex] = OrderedDict(sorted(self.dictProbabilityDistribution_P_SurvivalNATURALBySexByAge[strSex].items()))
                pass
                
                for strSex in self.listSexes:
                    odictUnNATURALSurvivalRatesByAge[strSex] = OrderedDict(sorted(self.dictProbabilityDistribution_P_SurvivalUnNATURALBySexByAge[strSex].items()))
                pass

                #odictUnNATURALSurvivalRatesByAge_AGENE_SIM = deepcopy(odictUnNATURALSurvivalRatesByAge)
                
                for strSex in self.listSexes:
                    #Survival rates - Used for performing mortality
                    self.odictRates_Of_Survival_UnNATURAL_BySex_ByAge[strSex] = odictUnNATURALSurvivalRatesByAge[strSex]
                    #Survival rates - Used for reporting mortality directly after FERTILIZATION
                    odictUnNATURALSurvivalRatesByAge_REPORTING_ONLY = OrderedDict()
                    for intAgeInMonths, floatSurvivalRate in odictUnNATURALSurvivalRatesByAge[strSex].items():
                        odictUnNATURALSurvivalRatesByAge_REPORTING_ONLY[intAgeInMonths-12] = floatSurvivalRate
                    pass
                    self.odictRates_Of_Survival_UnNATURAL_BySex_ByAge_REPORTING_ONLY[strSex] = odictUnNATURALSurvivalRatesByAge_REPORTING_ONLY
                    #Survival rates - Used for AgeNE calculations
                    #odictUnNATURALSurvivalRatesByAge_AGENE_SIM[strSex][(self.maxAge*12)+12] = 0.0
                    odictUnNATURALSurvivalRatesByAge_AGENE_SIM=None
                    self.odictRates_Of_Survival_UnNATURAL_BySex_ByAge_AGENE_SIM = odictUnNATURALSurvivalRatesByAge_AGENE_SIM
                
                pass
            
                return True
            
            def method_Batch_AgeNe_Sim_Parameters(self):

                if globalsSS.Logger_Debug_Timing.bool_Debug_Timing:
                    t2 = Timer2(True)
                    t2.Start()
                pass  
            
                '''
                ~~~~~~~~~~~~~~~~~
                intAgeNe_Sim_Max_Age
                NOTE: This controls the AgeNe MaxAge (intAgeNe_Sim_Max_Age) & the number of detail lines output (intAgeNe_Sim_Max_Age +1)for the AgeNe calculation
                ~~~~~~~~~~~~~~~~~
                '''                
                self.intAgeNe_Sim_Max_Age = self.maxAge
                
                '''
                ~~~~~~~~~~~~~~~~~
                intAgeNe_Data_Collection_Start__Replicate_Mating_Count
                NOTE: This controls when AGeNe stats start to be collected.  
                Requires 1 lifespan of data collection before AgeNe caclulation can occur.
                ~~~~~~~~~~~~~~~~~
                '''                  
                #self.intAgeNe_Data_Collection_Start__Replicate_Mating_Count = self.intReplicateBurnInLengthInYears - self.maxAge + 1  #I.E Mating 0 of new lifespan
                self.intAgeNe_Data_Collection_Start__Replicate_Mating_Count = self.intReplicateBurnInLengthInYears - self.maxAge   #I.E Last BurnIn mating
                #self.intAgeNe_Data_Collection_Start__Replicate_Mating_Count = self.int_SimuPop_Saving_Starts__Replicate_Mating_Count - self.maxAge  #I.E Last BurnIn mating
                
                '''
                ~~~~~~~~~~~~~~~~~
                Other parameters
                ~~~~~~~~~~~~~~~~~
                '''                     
                self.intAgeNe_Sim_Min_Mating_Age = self.minMatingAge
                self.intAgeNe_Sim_Max_Mating_Age = self.maxMatingAge
                self.listAgeNe_Sim_ListSexes = self.listSexes
                self.intAgeNe_Sim_N1_Newborns_Per_Age = self.intAgeNe_Sim_N1_Newborns_PREDICTED
                self.intAgeNe_Sim_N1_Newborns_By_Sex = self.intAgeNe_Sim_N1_Newborns_PREDICTED / 2

                ''' Create a template that can be used to cycle through the ages in years '''
                self.odictSimAgeValuesInYears = OrderedDict()
                for strSex in self.listSexes:
                    odictNewValues = OrderedDict()
                    for intAge in range(1, self.intAgeNe_Sim_Max_Age+1):
                        odictNewValues[intAge] = 0 
                    pass
                    self.odictSimAgeValuesInYears[strSex] = odictNewValues
                pass
                ''' Create a template that can be used to cycle through the ages in months '''  
                self.odictSimAgeValuesInMonths = OrderedDict()     
                for strSex in self.listSexes:
                    odictNewValues = OrderedDict()
                    for intAge in range(1, self.intAgeNe_Sim_Max_Age+1):
                        intAgeInMonths = intAge * 12
                        odictNewValues[intAgeInMonths] = 0 
                    pass
                    self.odictSimAgeValuesInMonths[strSex] = odictNewValues
                pass       
                      
                #Supply AgeNe DemographicTables values
                #N1 newborns per sex per age.
                dictAgeValues = AutoVivificationHandler()
                odictAgeValues = OrderedDict()
                #for intAge in range(1, self.intAgeNe_Sim_Max_Age+1):
                for intAge in range(1, self.intAgeNe_Sim_Max_Age+2):
                    dictAgeValues[intAge] = self.intAgeNe_Sim_N1_Newborns_By_Sex
                pass
                for strSex in self.listSexes:
                    odictAgeValues[strSex] = OrderedDict(sorted(dictAgeValues.items()))
                pass
                self.odictAgeNe_Sim_N1_Newborns_Per_Sex_Per_Year = odictAgeValues
                
                #Survival rates
                for strSex, dictValues in self.odictRates_Of_Survival_COMBINED_BySex_ByAge.items():
                    for intAgeInMonths, value in dictValues.iteritems():
                        intAgeinYears = int(intAgeInMonths/12)
                        
                        dictNewValues = {intAgeinYears:value}
                        
                        if strSex in self.odictAgeNe_Sim_Age_Values_Survival_Rates:
                            self.odictAgeNe_Sim_Age_Values_Survival_Rates[strSex].update(dictNewValues)
                        else:
                            self.odictAgeNe_Sim_Age_Values_Survival_Rates[strSex] = dictNewValues
                    pass
                pass
              
                #Birth rates
                odictAgeValues = OrderedDict()
                #dictAgeValuesMale = {1:0.0, 2:2.0, 3:2.0, 4:2.0, 5:2.0, 6:2.0, 7:0.0}
                #dictAgeValuesFemale = {1:0.0, 2:2.0, 3:2.0, 4:2.0, 5:2.0, 6:2.0, 7:0.0}
                dictAgeValuesMale = {12:0.0, 24:4.0, 36:4.0, 48:4.0, 60:4.0, 72:4.0, 84:4.0, 96:4.0, 108:4.0, 120:4.0, 132:4.0, 144:4.0, 156:4.0, 168:4.0, 180:4.0, 192:4.0, 204:4.0, 216:4.0, 228:4.0, 240:4.0, 252:4.0, 264:4.0, 276:4.0, 288:4.0, 300:4.0, 312:4.0, 324:4.0, 336:4.0, 348:4.0, 360:4.0, 372:4.0, 384:4.0, 396:4.0}
                #Providing a (maxAge + 1) value to the SIM AgeNe calcs is required as the sim starts at 0 and so Age 0-1 represents Age 1 in AgeNe and maxAge to maxAge+1 is maxAge
                dictAgeValuesMale[(self.maxAge*12)+12] = 0.0
                dictAgeValuesFemale = {12:0.0, 24:4.0, 36:4.0, 48:4.0, 60:4.0, 72:4.0, 84:4.0, 96:4.0, 108:4.0, 120:4.0, 132:4.0, 144:4.0, 156:4.0, 168:4.0, 180:4.0, 192:4.0, 204:4.0, 216:4.0, 228:4.0, 240:4.0, 252:4.0, 264:4.0, 276:4.0, 288:4.0, 300:4.0, 312:4.0, 324:4.0, 336:4.0, 348:4.0, 360:4.0, 372:4.0, 384:4.0, 396:4.0}
                #Providing a (maxAge + 1) value to the SIM AgeNe calcs is required as the sim starts at 0 and so Age 0-1 represents Age 1 in AgeNe and maxAge to maxAge+1 is maxAge
                dictAgeValuesFemale[(self.maxAge*12)+12] = 0.0
                with SSAnalysisHandler() as objSSAnalysisOperation:
                    dictAgeValuesMale = objSSAnalysisOperation.method_Convert_AgeInMonths_To_AgeInYears(dictAgeValuesMale)
                with SSAnalysisHandler() as objSSAnalysisOperation:
                    dictAgeValuesFemale = objSSAnalysisOperation.method_Convert_AgeInMonths_To_AgeInYears(dictAgeValuesFemale)
                    
                odictAgeValues[globalsSS.SexConstants.static_stringSexMale] = OrderedDict(sorted(dictAgeValuesMale.items()))
                odictAgeValues[globalsSS.SexConstants.static_stringSexFemale] = OrderedDict(sorted(dictAgeValuesFemale.items()))
                self.odictAgeNe_Sim_Age_Values_Birth_Rates = odictAgeValues
                
                ''' Supply AgeNe DemographicTables values '''
                odictAgeValues = OrderedDict()

                ''' 
                Providing a (maxAge + 1) value to the SIM AgeNe calcs is required 
                as the sim starts at 0 and so Age 0-1 represents Age 1 in AgeNe
                 and maxAge to maxAge+1 is maxAge
                '''                
                #dictAgeValuesMale = {12:1.0, 24:1.0, 36:1.0, 48:1.0, 60:1.0, 72:1.0, 84:1.0, 96:1.0, 108:1.0, 120:1.0, 132:1.0, 144:1.0, 156:1.0, 168:1.0, 180:1.0, 192:1.0, 204:1.0, 216:1.0, 228:1.0, 240:1.0, 252:1.0, 264:1.0, 276:1.0, 288:1.0, 300:1.0, 312:1.0, 324:1.0, 336:1.0, 348:1.0, 360:1.0, 372:1.0, 384:1.0, 396:1.0, 408:1.0, 420:1.0, 432:1.0, 444:1.0}
                #dictAgeValuesMale[(self.maxAge*12)+12] = 1.0
                #dictAgeValuesFemale = {12:1.0, 24:1.0, 36:1.0, 48:1.0, 60:1.0, 72:1.0, 84:1.0, 96:1.0, 108:1.0, 120:1.0, 132:1.0, 144:1.0, 156:1.0, 168:1.0, 180:1.0, 192:1.0, 204:1.0, 216:1.0, 228:1.0, 240:1.0, 252:1.0, 264:1.0, 276:1.0, 288:1.0, 300:1.0, 312:1.0, 324:1.0, 336:1.0, 348:1.0, 360:1.0, 372:1.0, 384:1.0, 396:1.0, 408:1.0, 420:1.0, 432:1.0, 444:1.0}
                #dictAgeValuesFemale[(self.maxAge*12)+12] = 1.0
                                
                int_AgeNe_Poisson_Scaling_Factor = 1.0
                dictAgeValuesMale = OrderedDict([int_Age*12, int_AgeNe_Poisson_Scaling_Factor] for int_Age in range(1, self.maxAge + 2))
                dictAgeValuesFemale = OrderedDict([int_Age*12, int_AgeNe_Poisson_Scaling_Factor] for int_Age in range(1, self.maxAge + 2))
                
                with SSAnalysisHandler() as objSSAnalysisOperation:
                    dictAgeValuesMale = objSSAnalysisOperation.method_Convert_AgeInMonths_To_AgeInYears(dictAgeValuesMale)
                with SSAnalysisHandler() as objSSAnalysisOperation:
                    dictAgeValuesFemale = objSSAnalysisOperation.method_Convert_AgeInMonths_To_AgeInYears(dictAgeValuesFemale)

                odictAgeValues[globalsSS.SexConstants.static_stringSexMale] = OrderedDict(sorted(dictAgeValuesMale.items()))
                odictAgeValues[globalsSS.SexConstants.static_stringSexFemale] = OrderedDict(sorted(dictAgeValuesFemale.items()))
                self.odictAgeNe_Sim_Alpha_Value_Scaling_Poisson_Variance_In_Reproductive_Success = odictAgeValues
                
                self.floatAgeNe_Sim_Initial_Male_Sex_Ratio = self.floatSexRatioOfMales
                self.floatAgeNe_Sim_N1_Male_Sex_Ratio = self.floatSexRatioOfMales

                #DEBUG_ON
                if globalsSS.Logger_Debug_AgeNe.bool_Debug_AgeNe:

#                     for str_Sex, value in self.odictRates_Of_Survival_NATURAL_BySex_ByAge_AGENE_SIM.iteritems():
#                         self.obj_Log_Debug_AgeNe.debug('Sex: ' + str_Sex + ' ; Total: ' + str(round(sum(collections__Counter(value).values()),2)) + ' ; Values: ' + str(value)) 
#                     pass    
#                     self.obj_Log_Debug_AgeNe.debug('>>> Survival Stat: odictRates_Of_Survival_UnNATURAL_BySex_ByAge_AGENE_SIM')
#                     for str_Sex, value in self.odictRates_Of_Survival_UnNATURAL_BySex_ByAge_AGENE_SIM.iteritems():
#                         self.obj_Log_Debug_AgeNe.debug('Sex: ' + str_Sex + ' ; Total: ' + str(round(sum(collections__Counter(value).values()),2)) + ' ; Values: ' + str(value)) 
#                     pass    
                    self.obj_Log_Debug_AgeNe.debug('>>> Survival Stat: odictAgeNe_Sim_Age_Values_Survival_Rates')
                    for str_Sex, value in self.odictAgeNe_Sim_Age_Values_Survival_Rates.iteritems():
                        self.obj_Log_Debug_AgeNe.debug('Sex: ' + str_Sex + ' ; Total: ' + str(round(sum(collections__Counter(value).values()),2)) + ' ; Values: ' + str(value)) 
                    pass                     
                    #with globalsSS.Pause_Console() as obj_Pause:
                    #    obj_Pause.method_Pause_Console()
                pass
                            
                if globalsSS.Logger_Debug_Timing.bool_Debug_Timing:
                    t2.Stop(self.obj_Log_Debug_Timing, str_Message='', bool_Pause_Run=globalsSS.Logger_Debug_Timing.bool_Debug_Timing__Pause)
                    #if globalsSS.Logger_Debug_Timing.bool_Debug_Timing:
                    #    t2 = Timer2(True)
                    #    t2.Start()
                    #pass                    
                pass 
                #DEBUG_OFF
                
                return True

            def method_Batch_AgeNe_Manual_Parameters(self):
 
                if self.boolAgeNeParmMatchManualToSim:
                    odictAgeValuesInYears = OrderedDict([])
                    
                    '''
                    ~~~~~~~~~~~~~~~~~
                    intAgeNe_Manual_Max_Age
                    NOTE: This controls the AgeNe MaxAge (intAgeNe_Manual_Max_Age) & the number of detail lines output (intAgeNe_Manual_Max_Age +1)for the AgeNe calculation
                    ~~~~~~~~~~~~~~~~~
                    '''
                    self.intAgeNe_Manual_Max_Age = self.maxAge
                    
                    self.intAgeNe_Manual_Min_Mating_Age = self.minMatingAge
                    self.intAgeNe_Manual_Max_Mating_Age = self.maxMatingAge

#                     for strSex in self.listSexes:
#                         odictNewValues = OrderedDict()
#                         for intAge in range(1, self.intAgeNe_Manual_Max_Age+1):
#                             odictNewValues[intAge] = 0 
#                         pass
#                         self.odictSimAgeValuesInYears[strSex] = odictNewValues
#                     pass                    

                    
                    
                    
                    self.listAgeNe_Manual_ListSexes = [globalsSS.SexConstants.static_stringSexMale, globalsSS.SexConstants.static_stringSexFemale]
                    #self.intAgeNe_Manual_N1_Newborns = self.intAgeNe_Manual_N1_Newborns_PREDICTED
                    #intAgeNe_Manual_N1_Newborns_By_Sex = self.intAgeNe_Manual_N1_Newborns_PREDICTED / 2


                    #Supply AgeNe DemographicTables values
                    #Dummy up a list of N1 newborns per age. This is for DISPLAY PURPOSES ONLY
#                     for strSex in self.listSexes:
#                         odictNewValues = OrderedDict()
#                         for intAge in range(1, self.intAgeNe_Manual_Max_Age+1):
#                             odictNewValues[intAge] = intAgeNe_Manual_N1_Newborns_By_Sex 
#                         pass
#                         self.odictAgeNe_Manual_N1_Newborns_Per_Sex_Per_Year[strSex] = odictNewValues
#                     pass
                     
                    #Survival rates
                    #odictValues = OrderedDict()
                    for strSex, odictValues in self.odictAgeNe_Sim_Age_Values_Survival_Rates.items():
                        odictNewValues = OrderedDict()
                        for intAge in range(1, self.intAgeNe_Manual_Max_Age+1):
                            odictNewValues[intAge] = odictValues[intAge] 
                        pass
                        self.odictAgeNe_Manual_Age_Values_Survival_Rates[strSex] = odictNewValues
                    pass
                
                    #self.odictAgeNe_Manual_Age_Values_Survival_Rates = self.odictAgeNe_Sim_Age_Values_Survival_Rates
                    
                    ''' Determine a proxy value for birth rate '''
                    if self.int_Species_Offspring_Distribution == globalsSS.Offspring_Number_Distribution_At_Mating.static_Offspring_Number_Distribution_At_Mating__ABSOLUTE_DISTRIBUTION:
                        
                        self.intMaxNumOffspring = self.int_Species_Offspring_Distribution_ABSOLUTE_Offspring_Number
                    
                    elif self.int_Species_Offspring_Distribution == globalsSS.Offspring_Number_Distribution_At_Mating.static_Offspring_Number_Distribution_At_Mating__POISSON_DISTRIBUTION:
                        
                        self.intMaxNumOffspring = self.float_Species_Offspring_Distribution_POISSON_Offspring_Mean_Number
                    
                    elif self.int_Species_Offspring_Distribution == globalsSS.Offspring_Number_Distribution_At_Mating.static_Offspring_Number_Distribution_At_Mating__BINOMIAL_DISTRIBUTION:
                        
                        self.intMaxNumOffspring = self.float_Species_Offspring_Distribution_BINOMIAL_Offspring_Mean_Number
                    
                    elif self.int_Species_Offspring_Distribution == globalsSS.Offspring_Number_Distribution_At_Mating.static_Offspring_Number_Distribution_At_Mating__UNIFORM_DISTRIBUTION:
                        ''' Work out the mean of the min and max '''
                        self.intMaxNumOffspring = (self.int_Species_Offspring_Distribution_UNIFORM_Offspring_Min + self.int_Species_Offspring_Distribution_UNIFORM_Offspring_Max) / 2.0
                    
                    elif self.int_Species_Offspring_Distribution == globalsSS.Offspring_Number_Distribution_At_Mating.static_Offspring_Number_Distribution_At_Mating__GEOMETRIC_DISTRIBUTION:

                        self.intMaxNumOffspring = self.Arg_Species_Offspring_Distribution_GEOMETRIC_Offsping_Probability
                    pass

               
                    #Birth rates
                    for strSex, odictValues in self.odictAgeNe_Sim_Age_Values_Survival_Rates.items():
                        odictNewValues = OrderedDict()
                        for intAge in range(1, self.intAgeNe_Manual_Max_Age+1):
                            if (intAge > self.minMatingAge) and (intAge <= self.maxMatingAge):
                                odictNewValues[intAge] = self.intMaxNumOffspring
                            else:
                                odictNewValues[intAge] = 0
                        pass
                        self.odictAgeNe_Manual_Age_Values_Birth_Rates[strSex] = odictNewValues
                    pass

                    #self.odictAgeNe_Manual_Age_Values_Birth_Rates = self.odictAgeNe_Sim_Age_Values_Birth_Rates
                    
                    #Supply AgeNe DemographicTables values
                    for strSex, odictValues in self.odictAgeNe_Sim_Alpha_Value_Scaling_Poisson_Variance_In_Reproductive_Success.items():
                        odictNewValues = OrderedDict()
                        for intAge in range(1, self.intAgeNe_Manual_Max_Age+1):
                            #DEBUG_ON
                            #if intAge == 38:
                            #    print('intAge: ' + str(int_Age))
                            #pass
                            #DEBUG_OFF
                            odictNewValues[intAge] = odictValues[intAge] 
                        pass
                        self.odictAgeNe_Manual_Alpha_Value_Scaling_Poisson_Variance_In_Reproductive_Success[strSex] = odictNewValues
                    pass

                    #self.odictAgeNe_Manual_Alpha_Value_Scaling_Poisson_Variance_In_Reproductive_Success = self.odictAgeNe_Sim_Alpha_Value_Scaling_Poisson_Variance_In_Reproductive_Success
                    
                    self.floatAgeNe_Manual_Initial_Male_Sex_Ratio = self.floatSexRatioOfMales
                    self.floatAgeNe_Manual_N1_Male_Sex_Ratio = self.floatSexRatioOfMales

                    pass               
                else:
                    self.intAgeNe_Manual_Max_Age = 6
                    self.listAgeNe_Manual_ListSexes = [globalsSS.SexConstants.static_stringSexMale, globalsSS.SexConstants.static_stringSexFemale]
                    self.intAgeNe_Manual_N1_Newborns = 60
                    intAgeNe_Manual_N1_Newborns_By_Sex = self.intAgeNe_Manual_N1_Newborns / 2
                    
                    #Supply AgeNe DemographicTables values
                    #Dummy up a list of N1 newborns per age. This is for DISPLAY PURPOSES ONLY
                    dictAgeValues = AutoVivificationHandler()
                    odictAgeValues = OrderedDict()
                    for intAge in range(1, self.intAgeNe_Manual_Max_Age+1):
                        dictAgeValues[intAge] = intAgeNe_Manual_N1_Newborns_By_Sex
                    pass
                    for strSex in self.listSexes:
                        odictAgeValues[strSex] = OrderedDict(sorted(dictAgeValues.items()))
                    pass
                    self.odictAgeNe_Manual_N1_Newborns_Per_Sex_Per_Year = odictAgeValues
    
#                     #Survival rates
#                     odictAgeValues = OrderedDict()
#     #                 dictAgeValuesMale = {1:0.180, 2:0.528, 3:0.537, 4:0.529, 5:0.519, 6:1}
#     #                 dictAgeValuesFemale = {1:0.180, 2:0.528, 3:0.537, 4:0.529, 5:0.519, 6:1}
#                     dictAgeValuesMale = {1:0.999, 2:0.999, 3:0.999, 4:0.999, 5:0.999, 6:1}
#                     dictAgeValuesFemale = {1:0.999, 2:0.999, 3:0.999, 4:0.999, 5:0.999, 6:1}
#                     odictAgeValues[globalsSS.SexConstants.static_stringSexMale] = OrderedDict(sorted(dictAgeValuesMale.items()))
#                     odictAgeValues[globalsSS.SexConstants.static_stringSexFemale] = OrderedDict(sorted(dictAgeValuesFemale.items()))
#                     self.odictAgeNe_Manual_Age_Values_Survival_Rates = odictAgeValues
#                     
#                     #Birth rates
#                     odictAgeValues = OrderedDict()
#                     dictAgeValuesMale = {1:0.0, 2:2.0, 3:2.0, 4:2.0, 5:2.0, 6:0.0}
#                     dictAgeValuesFemale = {1:0.0, 2:2.0, 3:2.0, 4:2.0, 5:2.0, 6:0.0}
#                     odictAgeValues[globalsSS.SexConstants.static_stringSexMale] = OrderedDict(sorted(dictAgeValuesMale.items()))
#                     odictAgeValues[globalsSS.SexConstants.static_stringSexFemale] = OrderedDict(sorted(dictAgeValuesFemale.items()))
#                     self.odictAgeNe_Manual_Age_Values_Birth_Rates = odictAgeValues
#                     
#                     #Supply AgeNe DemographicTables values
#                     odictAgeValues = OrderedDict()
#                     dictAgeValuesMale = {1:1, 2:1, 3:1, 4:1, 5:1, 6:1}
#                     dictAgeValuesFemale = {1:1, 2:1, 3:1, 4:1, 5:1, 6:1}
#                     odictAgeValues[globalsSS.SexConstants.static_stringSexMale] = OrderedDict(sorted(dictAgeValuesMale.items()))
#                     odictAgeValues[globalsSS.SexConstants.static_stringSexFemale] = OrderedDict(sorted(dictAgeValuesFemale.items()))
#                     self.odictAgeNe_Manual_Alpha_Value_Scaling_Poisson_Variance_In_Reproductive_Success = odictAgeValues
#                     
#                     self.floatAgeNe_Manual_Initial_Male_Sex_Ratio = 0.5
                
                return True
            
            def method_Batch_Predict_Sim_N1_Newborns_Per_Year(self):
                
                odictSurvivalRates = OrderedDict([])
                odictPredict = OrderedDict([])
                odictPopSizePerAgeCohortDiedTotal = OrderedDict([])
                  
                odictSurvivalRates = self.odictRates_Of_Survival_NATURAL_BySex_ByAge
                #odictSurvivalRates = OrderedDict(sorted(self.dictProbabilityDistribution_P_SurvivalNATURALBySexByAge.items()))
                 
                #Initialze the ages.  Spread them evenly in 12 month cohorts from BIRTH age to MAX_AGE
                if self.intPopulationInitialAges == globalsSS.InitialAgeDistribution.static_SameAgeAndEvenSpreadAcrossLifeStages_1CohortPer12Months:
                    listAgesInMonths = []
                    #for intAgeInMonths in range(self.intGestationLengthInMonths, (self.maxAge*12), 12):
                    for intAgeInMonths in range(12, ((self.maxAge+1)*12), 12):
                        listAgesInMonths.append(intAgeInMonths)
                    pass
                elif self.intPopulationInitialAges == globalsSS.InitialAgeDistribution.static_Embryo_And_Mature_Only_1CohortPer12Months:
                    listAgesInMonths = [0, self.minMatingAge*12, 0, 0]
                pass
            
                #Assign an equal proportion of the total population size to each age cohort
                floatPopSizePerAge = 0
                floatPopSizePerSexPerAgeCohort = 0
                if self.intPopulationInitialAges == globalsSS.InitialAgeDistribution.static_SameAgeAndEvenSpreadAcrossLifeStages_1CohortPer12Months:
                    floatPopSizePerAge = float(self.popnSize) / float(self.maxAge) 
                    floatPopSizePerSexPerAgeCohort = float(floatPopSizePerAge) / float(len(self.listSexes))
                elif self.intPopulationInitialAges == globalsSS.InitialAgeDistribution.static_Embryo_And_Mature_Only_1CohortPer12Months:
                    floatPopSizePerAge = float(self.popnSize) / float(2) 
                    floatPopSizePerSexPerAgeCohort = float(floatPopSizePerAge) / float(len(self.listSexes))
                pass
                 
                for strSex in self.listSexes:
                    for intAge in listAgesInMonths:
#                         intCheck = self.intGestationLengthInMonths + self.intMatingCalenderMonth
#                         if intCheck > 12:
#                             #Take the Absolute difference betwen getstation length and mating month
#                             intAge = intAge + abs(self.intGestationLengthInMonths - self.intMatingCalenderMonth)
#                         else:
#                             intAge = intAge + self.intGestationLengthInMonths + self.intMatingCalenderMonth
                        #dictNewValues = {intAge:floatPopSizePerSexPerAgeCohort}
                        odictNewValues = OrderedDict([(intAge,floatPopSizePerSexPerAgeCohort)])
                        if strSex in odictPredict:
                            odictPredict[strSex].update(odictNewValues)
                        else:
                            odictPredict[strSex] = odictNewValues
                    pass
                pass
             
                #Apply mortality by sex to each of the age cohorts.
                for strSex, dictAgeCohortSize in odictPredict.items():
                    intPopSizePerAgeCohortDiedTotal =  0
                    for intAge, floatSurvivalRate in odictSurvivalRates[strSex].iteritems():
                        intPopSizePerAgeCohortSurvived = 0
                        intPopSizePerAgeCohortDied = 0
                        if intAge in dictAgeCohortSize:
                            intPopSizePerAgeCohort = dictAgeCohortSize[intAge]
                        else:
                            intPopSizePerAgeCohort = 0
                        #floatMortailityRate = 1-floatSurvivalRate
                        intPopSizePerAgeCohortSurvived  = round((intPopSizePerAgeCohort*floatSurvivalRate),0)
                        dictAgeCohortSize[intAge] = intPopSizePerAgeCohortSurvived
                        intPopSizePerAgeCohortDied = intPopSizePerAgeCohort - intPopSizePerAgeCohortSurvived
 
                        intPopSizePerAgeCohortDiedTotal += intPopSizePerAgeCohortDied  
                    pass
                    odictPopSizePerAgeCohortDiedTotal[strSex] = intPopSizePerAgeCohortDiedTotal
                pass
                
                #Count the total dead and add them to the maxAge cohort. This is how many offsring (embryos) will be produced
                intOffspringRequiredTotal = 0
                for strSex, dictAgeCohortSize in odictPredict.items():
                    intOffspringRequiredTotal += odictPopSizePerAgeCohortDiedTotal[strSex]
                pass
                
                
                self.intAgeNe_Sim_BurnIn_N1_Newborns_PREDICTED = floatPopSizePerAge
                self.intAgeNe_Sim_N1_Newborns_PREDICTED = intOffspringRequiredTotal
                
                self.intAgeNe_Manual_N1_Newborns_PREDICTED = self.intAgeNe_Sim_BurnIn_N1_Newborns_PREDICTED
                self.dict_AgeNe_Manual_N1_Newborns_By_Sex_PREDICTED = OrderedDict()
                self.int_AgeNe_Manual_N1_Newborns_By_Sex__MALE_PREDICTED = self.intAgeNe_Manual_N1_Newborns_PREDICTED * self.floatSexRatioOfMales 
                self.int_AgeNe_Manual_N1_Newborns_By_Sex__FEMALE_PREDICTED = self.intAgeNe_Manual_N1_Newborns_PREDICTED - self.int_AgeNe_Manual_N1_Newborns_By_Sex__MALE_PREDICTED 
                self.dict_AgeNe_Manual_N1_Newborns_By_Sex_PREDICTED[globalsSS.SexConstants.static_stringSexMale] = self.int_AgeNe_Manual_N1_Newborns_By_Sex__MALE_PREDICTED 
                self.dict_AgeNe_Manual_N1_Newborns_By_Sex_PREDICTED[globalsSS.SexConstants.static_stringSexFemale] = self.int_AgeNe_Manual_N1_Newborns_By_Sex__FEMALE_PREDICTED 
                
                return True
            
            def method_Batch_Check_Population_Size_Validity(self, floatPredicted_N1_Newborns_During_BurnIn, floatPredicted_N1_Newborns_During_Simulation):
                
                if not floatPredicted_N1_Newborns_During_BurnIn.is_integer():
                    strResult = '> Predicted N1 is a NOT a whole number.  Pop size invalid.\n'
                    boolPopulationSizeIsValid = False
                else:
                    intPredicted_N1_Newborns_During_BurnIn = int(floatPredicted_N1_Newborns_During_BurnIn)
                    strResult = '> Predicted N1 is a whole number.  Pop size OK.  Burn-in will proceed.\n'
                    boolPopulationSizeIsValid = True

                    if not floatPredicted_N1_Newborns_During_Simulation.is_integer():
                        strResult = '> Predicted SIM N1 is a NOT a whole number.  Pop size invalid.\n'
                        boolPopulationSizeIsValid = False
                    else:
                        intPredicted_N1_Newborns_During_Simulation = int(floatPredicted_N1_Newborns_During_Simulation)
                        strResult = '> Predicted SIM N1 is a whole number.  Pop size OK.  Burn-in will proceed.\n'
                        boolPopulationSizeIsValid = True

                        #Check if predictions are odd or even                
                        intOdd = intPredicted_N1_Newborns_During_BurnIn & 0x1
                        if intOdd == 1:
                            #Odd
                            boolIsEven_intPredicted_N1_Newborns_During_BurnIn = False
                        else:
                            #Even
                            boolIsEven_intPredicted_N1_Newborns_During_BurnIn = True
        
                        intOdd = intPredicted_N1_Newborns_During_Simulation & 0x1
                        if intOdd == 1:
                            #Odd
                            boolIsEven_intPredicted_N1_Newborns_During_Simulation = False
                        else:
                            #Even
                            boolIsEven_intPredicted_N1_Newborns_During_Simulation = True
                            
                        if boolIsEven_intPredicted_N1_Newborns_During_BurnIn and boolIsEven_intPredicted_N1_Newborns_During_Simulation:
                            strResult = '> Both are even.  Pop size OK.  Burn-in will proceed.\n'
                            boolPopulationSizeIsValid = True
                        else:
                            strResult = '> One or both are odd.  Pop size invalid\n'
                            boolPopulationSizeIsValid = False
                        pass

                with SSOutputHandler() as SSOutputOperation:
                    listOutputDestinations = ['console', self.outputFileNameSummaryLogAllBatches]
                    #
                    #SSOutputOperation.methodOutput_SimGeneralMessageHeader(listOutputDestinations, '')
                    #
                    stringMessage = '> Population Size: ' + str(self.popnSize)
                    boolNewline=True
                    SSOutputOperation.methodOutput_SimGeneralMessageWithoutHeaderAndFooter(listOutputDestinations, stringMessage, boolNewline)
                    stringMessage = '> Predicted burn-in N1: ' + str(floatPredicted_N1_Newborns_During_BurnIn)
                    boolNewline=True
                    SSOutputOperation.methodOutput_SimGeneralMessageWithoutHeaderAndFooter(listOutputDestinations, stringMessage, boolNewline)
                    stringMessage = '> Predicted SIM N1: ' + str(floatPredicted_N1_Newborns_During_Simulation)
                    boolNewline=True
                    SSOutputOperation.methodOutput_SimGeneralMessageWithoutHeaderAndFooter(listOutputDestinations, stringMessage, boolNewline)
                    stringMessage = strResult
                    boolNewline=True
                    SSOutputOperation.methodOutput_SimGeneralMessageWithoutHeaderAndFooter(listOutputDestinations, stringMessage, boolNewline)
                
                #DEBUG_ON
                #raw_input('Check')
                #DEBUG_OFF
                return boolPopulationSizeIsValid

            def method_Batch_Folder_File_Initialization(self):

                #---------< Input files
                
                #File containing initial population if required
                self.inputFileNameInitialPopulation = self.outfilePath + self.strFileNameProgramPrefix + 'initial_population.pop'
                
                #---------< Output files
                str_Output_Path = self.str_Current_Run_Path__Logs
                
                strFileNameSuffix =  self.strSimDateTimeStamp + '_' + self.strFilenameEmbeddedFields + '_batch_' + str(self.intCurrentBatch).zfill(3)
                #Batch Summary Log File
                self.outputFileNameSummaryLogAllReps = str_Output_Path + '\\' + self.strFileNameProgramPrefix + 'summary_log_' + strFileNameSuffix + '.b_sl_ssim'
                with FileHandler() as objectFileHandler:        
                    boolFileExists = objectFileHandler.fileExists(self.outputFileNameSummaryLogAllReps)
                    if boolFileExists:
                        objectFileHandler.fileDelete(self.outputFileNameSummaryLogAllReps)

                #Batch Individuals Log File for all replicates
                self.outputFileNameIndividualLogAllReps = str_Output_Path + '\\' + self.strFileNameProgramPrefix + 'individ_log_full_' + strFileNameSuffix + '.b_il_ssim'
                #Only purge file if on the first replicate
                with FileHandler() as objectFileHandler:        
                    boolFileExists = objectFileHandler.fileExists(self.outputFileNameIndividualLogAllReps)
                    if boolFileExists:
                        objectFileHandler.fileDelete(self.outputFileNameIndividualLogAllReps)


                strFileNameSuffix =  self.strSimDateTimeStamp + '_' + str(self.popnSize) + '_batch_' + str(self.intCurrentBatch).zfill(3)
                
                #Sim Individuals Log File for Custom 1 Reporting batches
                outputFileNameCustom1ReportingExperimentDumpForDelete = str_Output_Path + '\\'  + self.strFileNameProgramPrefix + 'exp_log_Cust_1_*' + strFileNameSuffix + '.b_c1_ssim'
                self.outputFileNameCustom1ReportingExperimentDump = str_Output_Path + '\\' + self.strFileNameProgramPrefix + 'exp_log_Cust_1_' + strFileNameSuffix + '.b_c1_ssim'
                # Purge by Wildcard
                boolPurgeThisFile4 = False
                if boolPurgeThisFile4:
                    with FileHandler() as objectFileHandler:        
                        objectFileHandler.methodDelete_MultipleFilesByWildcard(outputFileNameCustom1ReportingExperimentDumpForDelete) 
           
                #Sim Individuals Log File for Custom 2 Reporting batches
                outputFileNameCustom2ReportingExperimentDumpForDelete = str_Output_Path + '\\'  + self.strFileNameProgramPrefix + 'exp_log_Cust_2_*' + strFileNameSuffix + '.b_c2_ssim'
                self.outputFileNameCustom2ReportingExperimentDump = str_Output_Path + '\\' + self.strFileNameProgramPrefix + 'exp_log_Cust_2_' + strFileNameSuffix + '.b_c2_ssim'
                # Purge by Wildcard
                boolPurgeThisFile4 = False
                if boolPurgeThisFile4:
                    with FileHandler() as objectFileHandler:        
                        objectFileHandler.methodDelete_MultipleFilesByWildcard(outputFileNameCustom2ReportingExperimentDumpForDelete) 

                #Sim Individuals Log File for Custom 3 Reporting batches
                outputFileNameCustom3ReportingExperimentDumpForDelete = str_Output_Path + '\\'  + self.strFileNameProgramPrefix + 'exp_log_Cust_3_*' + strFileNameSuffix + '.b_c3_ssim'
                self.outputFileNameCustom3ReportingExperimentDump = str_Output_Path + '\\' + self.strFileNameProgramPrefix + 'exp_log_Cust_3_' + strFileNameSuffix + '.b_c3_ssim'
                # Purge by Wildcard
                boolPurgeThisFile4 = False
                if boolPurgeThisFile4:
                    with FileHandler() as objectFileHandler:        
                        objectFileHandler.methodDelete_MultipleFilesByWildcard(outputFileNameCustom3ReportingExperimentDumpForDelete) 

                #Sim Individuals Log File for Custom 4 Reporting batches
                outputFileNameCustom4ReportingExperimentDumpForDelete = str_Output_Path + '\\'  + self.strFileNameProgramPrefix + 'exp_log_Cust_4_*' + strFileNameSuffix + '.b_c4_ssim'
                self.outputFileNameCustom4ReportingExperimentDump = str_Output_Path + '\\' + self.strFileNameProgramPrefix + 'exp_log_Cust_4_' + strFileNameSuffix + '.b_c4_ssim'
                # Purge by Wildcard
                boolPurgeThisFile4 = False
                if boolPurgeThisFile4:
                    with FileHandler() as objectFileHandler:        
                        objectFileHandler.methodDelete_MultipleFilesByWildcard(outputFileNameCustom4ReportingExperimentDumpForDelete) 

                #Sim Individuals Log File for Custom 5 Reporting batches
                outputFileName_Custom_5_ReportingExperimentDumpForDelete = str_Output_Path + '\\'  + self.strFileNameProgramPrefix + 'exp_log_Cust_5_*' + strFileNameSuffix + '.b_c5_ssim'
                self.outputFileName_Custom_5_ReportingExperimentDump = str_Output_Path + '\\' + self.strFileNameProgramPrefix + 'exp_log_Cust_5_' + strFileNameSuffix + '.b_c5_ssim'
                # Purge by Wildcard
                boolPurgeThisFile4 = False
                if boolPurgeThisFile4:
                    with FileHandler() as objectFileHandler:        
                        objectFileHandler.methodDelete_MultipleFilesByWildcard(outputFileName_Custom_5_ReportingExperimentDumpForDelete) 

                pass

            
            def method_Batch_Run_Parameters__Overlapping_GENS__C_Plumbeus_1_WITH_GESTATION(self):

                self.boolObtainAlleleFrequenciesFromFile = False
                if self.boolObtainAlleleFrequenciesFromFile:
                    self.method_Simulation_Run_Obtain_Allele_Frequencies_From_File()
                    self.intAlleleFrequencyScheme = globalsSS.Allele_Frequency_Distribution.static_int_Allele_Frequency_Distribution_Distribution__ALL_ALLELE_FREQUENCIES_FILE
                else:
                    self.nLoci = 20
                    self.nAllelesPerLoci = 10-1
                    #self.intAlleleFrequencyScheme = 3
                    #self.intAlleleFrequencyScheme = 0 # Equal starting allele frequencies
                    #CODE HAS CHANGED. THIS IS PROB THE Alele_Per_LOcus_Distribution --> self.intAlleleFrequencyScheme = 1 # Randomly generated allele frequencies
                
                #Ensure the Manual AgeNe parms match what is specified here for the SIM
                self.boolAgeNeParmMatchManualToSim = True
                self.boolAgeNeParmMatchManual_bx_genertated_in_Sim = False

                '''
                PRODUCTION - WF diploid dioecious sexual OVERLAPPING gens
                Sandbar shark - Carcharhinus plumbeus
                    Maximum age              : 33
                    Maximal mating age       : 30
                    Minimal mating age       : 15
                    sx(fm)                   : 0.86   
                    bx(fm)                   : 2.7   (8 offspring every 3 years = 8/3 = 2.7)
                    Genetic data source      : Empirical - NSW - FRDC 
                    #Loci                    : 19
                    Allele Freqs             : Imported
                     
                Natural survival {strSexMale:{12:0.86, 24:0.86, 36:0.86, 48:0.86, 60:0.86, 72:0.86, 84:0.86, 96:0.86, 108:0.86, 120:0.86, 132:0.86, 144:0.86, 156:0.86, 168:0.86, 180:0.86, 192:0.86, 204:0.86, 216:0.86, 228:0.86, 240:0.86, 252:0.86, 264:0.86, 276:0.86, 288:0.86, 300:0.86, 312:0.86, 324:0.86, 336:0.86, 348:0.86, 360:0.86, 372:1} #Max Age must be 1.0 (100% Survival) for UnNatural mortality to work.  These animals will all die at mating anyway. 
                Fishing survival {strSexMale:{12:0.96, 24:0.96, 36:0.96, 48:0.98, 60:0.99, 72:0.99, 84:1.00, 96:0.99, 108:0.98, 120:0.97, 132:0.93, 144:0.95, 156:0.88, 168:0.90, 180:0.86, 192:0.90, 204:0.94, 216:0.95, 228:0.97, 240:0.96, 252:0.98, 264:0.99, 276:1.00, 288:1.00, 300:1.00, 312:1.00, 324:1.00, 336:1.00, 348:1.00, 360:1.00, 372:1.00}
                
                '''
                listReplicateRunParameters = [
                 #CAPL OVERLAPPING GENS - Mating in Aug (8), Gestation 5 months (Feb,2), Resting 1 months (Mar, 3)
                 1, 21, [10]                                                      #intReplicates, intMatingSchemeType, listMatingParentSelectionScheme
                 , 3, 1000, 62                                                   #intPopulationInitialAges, popnSize, intReplicateBurnInLengthInYears
                 , 0, 0.5                                                         #intOffspringSexScheme, floatSexRatioOfMales,
                 , 31, 30, 15                                                        #maxAge, maxMatingAge, minMatingAge,
                 , 1, 1, 2.5, [1] #[sim.POISSON_DISTRIBUTION,0.5]                        #intMinNumOffspring, meanvarnumOffspring, intMaxNumOffspring, listOffspringNumberParameters,
                 , self.nLoci, self.nAllelesPerLoci+1                             #nLoci, nAllelesPerLoci
                 , self.intAlleleFrequencyScheme, self.listAlleleFreqs            #intAlleleFrequencyScheme, listAlleleFreqs
                 , True, 5e-4, 1                                                  #bool_Allow_Mutation, float_Mutation_Rate, ?????
                 , False, False, [x for x in range(0, self.nLoci)], False, False  #boolReportDemographicNe
                 , 8                                                                ##intMatingCalenderMonth, 
                 , 2, 6, 1+4                                                        #intParturitionCalenderMonth, intGestationLengthInMonths, intReproductiveRestLengthInMonths + 4 (To ensure the correct rest length)
                 #, 2, 18, 1+4                                                        #intParturitionCalenderMonth, intGestationLengthInMonths, intReproductiveRestLengthInMonths + 4 (To ensure the correct rest length)
                 #, 2, 18, 24+4                                                        #intParturitionCalenderMonth, intGestationLengthInMonths, intReproductiveRestLengthInMonths + 4 (To ensure the correct rest length)
                 , 31, 8                                                            #intTotalYearsToSimulate, intTotalMonthsToSimulate
                 , True                                                            #boolSuppressBurnInOutput
                 , True, {self.strSexMale: 3, self.strSexFemale: 3}, {self.strSexMale:{12:0.86, 24:0.86, 36:0.86, 48:0.86, 60:0.86, 72:0.86, 84:0.86, 96:0.86, 108:0.86, 120:0.86, 132:0.86, 144:0.86, 156:0.86, 168:0.86, 180:0.86, 192:0.86, 204:0.86, 216:0.86, 228:0.86, 240:0.86, 252:0.86, 264:0.86, 276:0.86, 288:0.86, 300:0.86, 312:0.86, 324:0.86, 336:0.86, 348:0.86, 360:0.86, 372:1.0}, self.strSexFemale:{12:0.86, 24:0.86, 36:0.86, 48:0.86, 60:0.86, 72:0.86, 84:0.86, 96:0.86, 108:0.86, 120:0.86, 132:0.86, 144:0.86, 156:0.86, 168:0.86, 180:0.86, 192:0.86, 204:0.86, 216:0.86, 228:0.86, 240:0.86, 252:0.86, 264:0.86, 276:0.86, 288:0.86, 300:0.86, 312:0.86, 324:0.86, 336:0.86, 348:0.86, 360:0.86, 372:1.0}}
                 , True, {self.strSexMale: 3, self.strSexFemale: 3}, {self.strSexMale:{12:0.96, 24:0.96, 36:0.96, 48:0.98, 60:0.99, 72:0.99, 84:1.00, 96:0.99, 108:0.98, 120:0.97, 132:0.93, 144:0.95, 156:0.88, 168:0.90, 180:0.86, 192:0.90, 204:0.94, 216:0.95, 228:0.97, 240:0.96, 252:0.98, 264:0.99, 276:1.00, 288:1.00, 300:1.00, 312:1.00, 324:1.00, 336:1.00, 348:1.00, 360:1.0, 372:1.0}, self.strSexFemale:{12:0.96, 24:0.96, 36:0.96, 48:0.98, 60:0.99, 72:0.99, 84:1.00, 96:0.99, 108:0.98, 120:0.97, 132:0.93, 144:0.95, 156:0.88, 168:0.90, 180:0.86, 192:0.90, 204:0.94, 216:0.95, 228:0.97, 240:0.96, 252:0.98, 264:0.99, 276:1.00, 288:1.00, 300:1.00, 312:1.00, 324:1.00, 336:1.00, 348:1.00, 360:1.0, 372:1.0}}
                 , True
                ]                
                
                return listReplicateRunParameters
            
            def method_Batch_Run_Parameters__Overlapping_GENS__C_Plumbeus_1(self):

                ''' Specify string constangs to make parameter specification easier '''
                str_Mating_Mortality_Starts__Nat = globalsSS.MortalityApplication.static_str_Mating_Mortlity_Starts__Nat
                str_Mating_Mortality_Starts__UnNat = globalsSS.MortalityApplication.static_str_Mating_Mortlity_Starts__UnNat
                
                str_Mortality_Application_Model__Nat = globalsSS.MortalityApplication.static_str_Mortality_Application_Model__Nat 
                str_Mortality_Application_Model__UnNat = globalsSS.MortalityApplication.static_str_Mortality_Application_Model__UnNat
                
                ''' Allele Frequency specification ''' 
                self.boolObtainAlleleFrequenciesFromFile = False
                if self.boolObtainAlleleFrequenciesFromFile:
                    self.method_Simulation_Run_Obtain_Allele_Frequencies_From_File()
                    self.intAlleleFrequencyScheme = globalsSS.Allele_Frequency_Distribution.static_int_Allele_Frequency_Distribution_Distribution__ALL_ALLELE_FREQUENCIES_FILE
                else:
                    self.nLoci = 20
                    self.nAllelesPerLoci = 10-1
                    #self.intAlleleFrequencyScheme = 3
                    #self.intAlleleFrequencyScheme = 0 # Equal starting allele frequencies
                    #CODE HAS CHANGED. THIS IS PROB THE Alele_Per_LOcus_Distribution --> self.intAlleleFrequencyScheme = 1 # Randomly generated allele frequencies
                
                ''' AgeNe parameter general control '''
                #Ensure the Manual AgeNe parms match what is specified here for the SIM
                self.boolAgeNeParmMatchManualToSim = True
                self.boolAgeNeParmMatchManual_bx_genertated_in_Sim = False

                '''
                ~~~~~~~~~~~~~~~~~~~~
                Replicate Run - Parameter Specification
                ~~~~~~~~~~~~~~~~~~~~
                '''
                '''
                PRODUCTION - WF diploid dioecious sexual OVERLAPPING gens
                Sandbar shark - Carcharhinus plumbeus
                    Maximum age              : 33
                    Maximal mating age       : 30
                    Minimal mating age       : 15
                    sx(fm)                   : 0.86   
                    bx(fm)                   : 2.7   (8 offspring every 3 years = 8/3 = 2.7)
                    Genetic data source      : Empirical - NSW - FRDC 
                    #Loci                    : 19
                    Allele Freqs             : Imported
                    NOTE: For Nat Survival Prob Dist #Max Age must be 1.0 (100% Survival) for UnNatural mortality to work.  These animals will all die at mating anyway.
                     
                Natural survival {strSexMale:{12:0.86, 24:0.86, 36:0.86, 48:0.86, 60:0.86, 72:0.86, 84:0.86, 96:0.86, 108:0.86, 120:0.86, 132:0.86, 144:0.86, 156:0.86, 168:0.86, 180:0.86, 192:0.86, 204:0.86, 216:0.86, 228:0.86, 240:0.86, 252:0.86, 264:0.86, 276:0.86, 288:0.86, 300:0.86, 312:0.86, 324:0.86, 336:0.86, 348:0.86, 360:0.86, 372:1} #Max Age must be 1.0 (100% Survival) for UnNatural mortality to work.  These animals will all die at mating anyway. 
                Fishing survival {strSexMale:{12:0.96, 24:0.96, 36:0.96, 48:0.98, 60:0.99, 72:0.99, 84:1.00, 96:0.99, 108:0.98, 120:0.97, 132:0.93, 144:0.95, 156:0.88, 168:0.90, 180:0.86, 192:0.90, 204:0.94, 216:0.95, 228:0.97, 240:0.96, 252:0.98, 264:0.99, 276:1.00, 288:1.00, 300:1.00, 312:1.00, 324:1.00, 336:1.00, 348:1.00, 360:1.00, 372:1.00}
                
                '''
                listReplicateRunParameters = [
                 #CAPL OVERLAPPING GENS - Mating in Aug (8), Gestation 5 months (Feb,2), Resting 1 months (Mar, 3)
                 3, 21, [10]                                                       #intReplicates, intMatingSchemeType, listMatingParentSelectionScheme
                 , 3, 10000, 93                                                   #intPopulationInitialAges, popnSize, intReplicateBurnInLengthInYears
                 , 0, 0.5                                                         #intOffspringSexScheme, floatSexRatioOfMales,
                 , 32, 31, 14                                                        #maxAge, maxMatingAge, minMatingAge,
                 , 1, 1, 2.5, [1] #[sim.POISSON_DISTRIBUTION,0.5]                        #intMinNumOffspring, meanvarnumOffspring, intMaxNumOffspring, listOffspringNumberParameters,
                 , self.nLoci, self.nAllelesPerLoci+1                             #nLoci, nAllelesPerLoci
                 , self.intAlleleFrequencyScheme, self.listAlleleFreqs            #intAlleleFrequencyScheme, listAlleleFreqs
                 , True, 5e-4, 1                                                  #bool_Allow_Mutation, float_Mutation_Rate, ?????
                 , False, False, [x for x in range(0, self.nLoci)], False, False  #boolReportDemographicNe
                 , 8                                                                ##intMatingCalenderMonth, 
                 , 2, 6, 1+4                                                        #intParturitionCalenderMonth, intGestationLengthInMonths, intReproductiveRestLengthInMonths + 4 (To ensure the correct rest length)
                 #, 2, 18, 1+4                                                        #intParturitionCalenderMonth, intGestationLengthInMonths, intReproductiveRestLengthInMonths + 4 (To ensure the correct rest length)
                 , 62, 8                                                            #intTotalYearsToSimulate, intTotalMonthsToSimulate
                 , True                                                            #boolSuppressBurnInOutput
                 , True, {str_Mating_Mortality_Starts__Nat:{self.strSexMale: 1, self.strSexFemale: 1}, str_Mortality_Application_Model__Nat:{self.strSexMale: 3, self.strSexFemale: 3}}  #dict_Mortality_Application_Specs_By_Sex__NATURAL
                 , {self.strSexMale:{12:0.86, 24:0.86, 36:0.86, 48:0.86, 60:0.86, 72:0.86, 84:0.86, 96:0.86, 108:0.86, 120:0.86, 132:0.86, 144:0.86, 156:0.86, 168:0.86, 180:0.86, 192:0.86, 204:0.86, 216:0.86, 228:0.86, 240:0.86, 252:0.86, 264:0.86, 276:0.86, 288:0.86, 300:0.86, 312:0.86, 324:0.86, 336:0.86, 348:0.86, 360:0.86, 372:1.0}, self.strSexFemale:{12:0.86, 24:0.86, 36:0.86, 48:0.86, 60:0.86, 72:0.86, 84:0.86, 96:0.86, 108:0.86, 120:0.86, 132:0.86, 144:0.86, 156:0.86, 168:0.86, 180:0.86, 192:0.86, 204:0.86, 216:0.86, 228:0.86, 240:0.86, 252:0.86, 264:0.86, 276:0.86, 288:0.86, 300:0.86, 312:0.86, 324:0.86, 336:0.86, 348:0.86, 360:0.86, 372:1.0}}
                 , True, {str_Mating_Mortality_Starts__UnNat:{self.strSexMale: 94, self.strSexFemale: 94}, str_Mortality_Application_Model__UnNat:{self.strSexMale: 3, self.strSexFemale: 3}} #dict_Mortality_Application_Specs_By_Sex__UnNATURAL
                 , {self.strSexMale:{12:0.96, 24:0.96, 36:0.96, 48:0.98, 60:0.99, 72:0.99, 84:1.00, 96:0.99, 108:0.98, 120:0.97, 132:0.93, 144:0.95, 156:0.88, 168:0.90, 180:0.86, 192:0.90, 204:0.94, 216:0.95, 228:0.97, 240:0.96, 252:0.98, 264:0.99, 276:1.00, 288:1.00, 300:1.00, 312:1.00, 324:1.00, 336:1.00, 348:1.00, 360:1.0, 372:1.0}, self.strSexFemale:{12:0.96, 24:0.96, 36:0.96, 48:0.98, 60:0.99, 72:0.99, 84:1.00, 96:0.99, 108:0.98, 120:0.97, 132:0.93, 144:0.95, 156:0.88, 168:0.90, 180:0.86, 192:0.90, 204:0.94, 216:0.95, 228:0.97, 240:0.96, 252:0.98, 264:0.99, 276:1.00, 288:1.00, 300:1.00, 312:1.00, 324:1.00, 336:1.00, 348:1.00, 360:1.0, 372:1.0}}
                 , True
                ]                
                
                return listReplicateRunParameters


            '''
            Carcharhinus plumbeus V1
            '''                                     
            def method_Batch_Run_Parameters__PROD_C_Plumbeus_V1(self):
                
                ''' Adjust NATURAL Survival to accomodate SENESCENCE '''
                if self.Arg_Allow_Senescence:
                    self.Arg_Survival_Natural = self.Arg_Survival_Natural_Senescence
                else:
                    self.Arg_Survival_Natural = self.Arg_Survival_Natural_No_Senescence
                pass
                
                ''' Allele Frequency specification ''' 
                self.boolInitGenotypeByLoci = False
                self.boolObtainAlleleFrequenciesFromFile = True
                if self.boolObtainAlleleFrequenciesFromFile:
                    str_Input_File_Path = 'C:\\DCB\\MUI\\MUI_Sync_Auto\\MUI_A_Analyses\\Shared_Data\\'
                    #str_Input_File_Name = 'AllAlleleFreqs_GSc__GP_2014_08_02_14_32_CAPL_ALL_LOCI_Region_Wo_SNPs_NSW_ONLY.txt'
                    str_Input_File_Name = 'AllAlleleFreqs_GSc__GP_2014_08_02_14_32_CAPL_ALL_LOCI_Region_Wo_SNPs_AS_NSW.txt'
                    self.method_Simulation_Run_Obtain_Allele_Frequencies_From_File(str_Input_File_Path, str_Input_File_Name)
                    self.boolInitGenotypeByLoci = True
                    self.intAlleleFrequencyScheme = globalsSS.Allele_Frequency_Distribution.static_int_Allele_Frequency_Distribution_Distribution__ALL_ALLELE_FREQUENCIES_FILE
                else:
                    self.nLoci = 19
                    self.nAllelesPerLoci = 10-1
                    #self.intAlleleFrequencyScheme = 3
                    #self.intAlleleFrequencyScheme = 0 # Equal starting allele frequencies
                    self.intAlleleFrequencyScheme = 1 # Randomly generated allele frequencies
                
                ''' AgeNe parameter general control '''
                #Ensure the Manual AgeNe parms match what is specified here for the SIM
                self.boolAgeNeParmMatchManualToSim = True
                self.boolAgeNeParmMatchManual_bx_genertated_in_Sim = False

                '''
                ~~~~~~~~~~~~~~~~~~~~
                Replicate Run - Parameter Specification
                ~~~~~~~~~~~~~~~~~~~~
                '''
                '''
                LIFE HIST DATA - Geraghty 2014 - Using FEMALE Ages only - CONSERVATIVE
                Sandbar shark - Carcharhinus plumbeus
                    >> Life History Params
                    Maximum age              : 28 (f) <-- This is Geraghty MaxAge + 1  
                    Maximal mating age       : 27 (f) 32(m) <-- This is Geraghty MaxAge
                    Minimal mating age (m)   : 7 (7.0) <-- Age at which 50% are mature
                    Minimal mating age (fm)  : 10 (9.5) <-- Age at which 50% are mature
                        OR
                    Minimal mating age (m)   : 7 (7.1) <-- Age at which 95% are mature
                    Minimal mating age (fm)  : 15 (14.9) <-- Age at which 95% are mature
                    Litter sex ratio (fm:m)  : 1:1
                    Litter size(fm)          : 8 (7.8 Mean, S.E: 0.5, Range: 3- 12) PG - Fecundity did not increase with age
                    Gestation          (G)   : 12 <-- PG: ~24, WA: =< 12, NT: =<12, NWA: >12
                    Reproductive Cycle (R)   : 2  <-- PG: -, WA: 2, NT: 2, NWA: ~2
                    >> Survival Params
                    Natural survival         : 0.88 Age independent (mean of 5 estimates in McAuley, Simpfendorfer & Hall (2007) from (Pauly (1980), Hoenig (1983) method (i), Hoenig (1983) method (ii), Hoenig (1983) method (iii), Jensen (1996))
                    NOTE: For Nat Survival Prob Dist #Max Age must be 1.0 (100% Survival) for UnNatural mortality to work.  These animals will all die at mating anyway. 
                    Fishing survival         : As per 2008 Observer Catch by Sex
                    >> AgeNe Params
                    bx(fm)                   : 2.6   (7.8 offspring every 3 years = 7.8/3 = 2.6)
                    sx(fm)                   : 0.88 Age independent
                    >> Genetic Params
                    Genetic data source      : Empirical - NSW - FRDC 
                    #Loci                    :19 (Average of 10 alleles per locus) <-- From empirical CAPL Genetic data
                    Allele Freqs             : Random Drichlet
                    Polyandry                : 2 <-- 2.3 Male mates per litter (range 2-5 min. male mates, n = 20 litters) Portnoy 2007
                    '''
                listReplicateRunParameters = [
                 self.Arg_Pop_Replicates, self.Arg_Mating_Scheme, self.Arg_Mating_Scheme_Polygamy_Num_Mates, [10]                                                   #intReplicates, intMatingSchemeType, intPolygamousMateNumber, listMatingParentSelectionScheme
                 , 3, self.Arg_Pop_Size, 57                                                   #intPopulationInitialAges, popnSize, intReplicateBurnInLengthInYears
                 , 0, 0.5                                                         #intOffspringSexScheme, floatSexRatioOfMales,
                 , self.Arg_Max_Age, self.Arg_Max_Mating_Age, self.Arg_Min_Mating_Age                                                     #maxAge, maxMatingAge, minMatingAge,
                 , 1, 1, 2.6                                                       #intMinNumOffspring, meanvarnumOffspring, intMaxNumOffspring,
                 #, [sim.POISSON_DISTRIBUTION, self.Arg_Num_Offspring_Per_Mate]    # listOffspringNumberParameters,
                 , [sim.UNIFORM_DISTRIBUTION, self.Arg_Min_Num_Offspring_Per_Mate, self.Arg_Max_Num_Offspring_Per_Mate]    # listOffspringNumberParameters,
                 , self.nLoci, self.nAllelesPerLoci+1                             #nLoci, nAllelesPerLoci
                 , self.intAlleleFrequencyScheme, self.listAlleleFreqs            #intAlleleFrequencyScheme, listAlleleFreqs
                 , True, 5e-4, 1                                                  #bool_Allow_Mutation, float_Mutation_Rate, ?????
                 , False, False, [x for x in range(0, self.nLoci)], False, False  #boolReportDemographicNe, boolReportLDNe, listLociToReportNE
                 , 8                                                                ##intMatingCalenderMonth, 
                 , self.Arg_Parturition_Month, self.Arg_Gestation_Length_In_Months, self.Arg_Reproductive_Rest_Length_In_Months+4                                                        #intParturitionCalenderMonth, intGestationLengthInMonths, intReproductiveRestLengthInMonths + 4 (To ensure the correct rest length)
                 , 56, 8                                                            #intTotalYearsToSimulate, intTotalMonthsToSimulate
                 , True                                                            #boolSuppressBurnInOutput
                 , True, self.Arg_Mortality_Application_Specs__Nat  #dict_Mortality_Application_Specs_By_Sex__NATURAL
                 , self.Arg_Survival_Natural
                 , self.Arg_Allow_UnNatural_Mortality, self.Arg_Mortality_Application_Specs__UnNat #dict_Mortality_Application_Specs_By_Sex__UnNATURAL
                 , self.Arg_Survival_UnNatural
                 , True
                ]                
                
                self.bool_Export_Genepop_PF_Files = False
                self.bool_Export_Genepop_PF_Files_During_BurnIn = True
                self.int_Genpop_For_BioP_Saving_Starts__Replicate_Mating_Count =  1
                self.int_Genpop_For_BioP_Save_Every__Replicate_Mating_Count = 3
                
                self.int_SimuPop_Saving_Starts__Replicate_Mating_Count =  1 #self.intReplicateBurnInLengthInYears - self.maxAge + 1 #I.E Mating 0 of new lifespan
                self.int_SimuPop_Save_Every__Replicate_Mating_Count = 1
                self.int_Post_Sim_Pop_Sampling_Starts_When_Mating_Count_Is = 57
                self.int_Sample_Pop_When_Mating_Count_Divisible_By = self.arg_int_Sample_Pop_When_Mating_Count_Divisible_By
                
                return listReplicateRunParameters
                                
            def method_Batch_Run_Parameters__TEST_C_Plumbeus_V1(self):
                
                ''' Specify string constangs to make parameter specification easier '''
                str_Mating_Mortality_Starts__Nat = globalsSS.MortalityApplication.static_str_Mating_Mortlity_Starts__Nat
                str_Mating_Mortality_Starts__UnNat = globalsSS.MortalityApplication.static_str_Mating_Mortlity_Starts__UnNat
                
                str_Mortality_Application_Model__Nat = globalsSS.MortalityApplication.static_str_Mortality_Application_Model__Nat 
                str_Mortality_Application_Model__UnNat = globalsSS.MortalityApplication.static_str_Mortality_Application_Model__UnNat
                
                ''' Allele Frequency specification ''' 
                self.boolInitGenotypeByLoci = False
                self.boolObtainAlleleFrequenciesFromFile = True
                if self.boolObtainAlleleFrequenciesFromFile:
                    str_Input_File_Path = 'C:\\DCB\\MUI\\MUI_Sync_Auto\\MUI_A_Analyses\\Shared_Data\\'
                    #str_Input_File_Name = 'AllAlleleFreqs_GSc__GP_2014_08_02_14_32_CAPL_ALL_LOCI_Region_Wo_SNPs_NSW_ONLY.txt'
                    str_Input_File_Name = 'AllAlleleFreqs_GSc__GP_2014_08_02_14_32_CAPL_ALL_LOCI_Region_Wo_SNPs_AS_NSW.txt'
                    self.method_Simulation_Run_Obtain_Allele_Frequencies_From_File(str_Input_File_Path, str_Input_File_Name)
                    self.boolInitGenotypeByLoci = True
                    self.intAlleleFrequencyScheme = globalsSS.Allele_Frequency_Distribution.static_int_Allele_Frequency_Distribution_Distribution__ALL_ALLELE_FREQUENCIES_FILE
                else:
                    self.nLoci = 19
                    self.nAllelesPerLoci = 10-1
                    #self.intAlleleFrequencyScheme = 3
                    #self.intAlleleFrequencyScheme = 0 # Equal starting allele frequencies
                    self.intAlleleFrequencyScheme = 1 # Randomly generated allele frequencies
                
                ''' AgeNe parameter general control '''
                #Ensure the Manual AgeNe parms match what is specified here for the SIM
                self.boolAgeNeParmMatchManualToSim = True
                self.boolAgeNeParmMatchManual_bx_genertated_in_Sim = False

                '''
                ~~~~~~~~~~~~~~~~~~~~
                Replicate Run - Parameter Specification
                ~~~~~~~~~~~~~~~~~~~~
                '''
                '''
                LIFE HIST DATA - Geraghty 2014 - Using FEMALE Ages only - CONSERVATIVE
                Sandbar shark - Carcharhinus plumbeus
                    >> Life History Params
                    Maximum age              : 28 (f) <-- This is Geraghty MaxAge + 1  
                    Maximal mating age       : 27 (f) 32(m) <-- This is Geraghty MaxAge
                    Minimal mating age (m)   : 7 (7.0) <-- Age at which 50% are mature
                    Minimal mating age (fm)  : 10 (9.5) <-- Age at which 50% are mature
                        OR
                    Minimal mating age (m)   : 7 (7.1) <-- Age at which 95% are mature
                    Minimal mating age (fm)  : 15 (14.9) <-- Age at which 95% are mature
                    Litter sex ratio (fm:m)  : 1:1
                    Litter size(fm)          : 8 (7.8 Mean, S.E: 0.5, Range: 3- 12) PG - Fecundity did not increase with age
                    Gestation          (G)   : 12 <-- PG: ~24, WA: =< 12, NT: =<12, NWA: >12
                    Reproductive Cycle (R)   : 2  <-- PG: -, WA: 2, NT: 2, NWA: ~2
                    >> Survival Params
                    Natural survival         : 0.88 Age independent (mean of 5 estimates in McAuley, Simpfendorfer & Hall (2007) from (Pauly (1980), Hoenig (1983) method (i), Hoenig (1983) method (ii), Hoenig (1983) method (iii), Jensen (1996))
                    NOTE: For Nat Survival Prob Dist #Max Age must be 1.0 (100% Survival) for UnNatural mortality to work.  These animals will all die at mating anyway. 
                    Fishing survival         : As per 2008 Observer Catch by Sex
                    >> AgeNe Params
                    bx(fm)                   : 2.6   (7.8 offspring every 3 years = 7.8/3 = 2.6)
                    sx(fm)                   : 0.88 Age independent
                    >> Genetic Params
                    Genetic data source      : Empirical - NSW - FRDC 
                    #Loci                    :19 (Average of 10 alleles per locus) <-- From empirical CAPL Genetic data
                    Allele Freqs             : Random Drichlet
                    Polyandry                : 2 <-- 2.3 Male mates per litter (range 2-5 min. male mates, n = 20 litters) Portnoy 2007
                    '''
                listReplicateRunParameters = [
                 #CAPL OVERLAPPING GENS - Mating in Aug (8), Gestation 5 months (Feb,2), Resting 1 months (Mar, 3)
                 1, 21, 2, [10]                                                   #intReplicates, intMatingSchemeType, intPolygamousMateNumber, listMatingParentSelectionScheme
                 , 3, 230000, 57                                                   #intPopulationInitialAges, popnSize, intReplicateBurnInLengthInYears
                 , 0, 0.5                                                         #intOffspringSexScheme, floatSexRatioOfMales,
                 , 28, 27, 10                                                     #maxAge, maxMatingAge, minMatingAge,
                 , 1, 1, 2.6, [sim.POISSON_DISTRIBUTION, 8]                        #intMinNumOffspring, meanvarnumOffspring, intMaxNumOffspring, listOffspringNumberParameters,
                 , self.nLoci, self.nAllelesPerLoci+1                             #nLoci, nAllelesPerLoci
                 , self.intAlleleFrequencyScheme, self.listAlleleFreqs            #intAlleleFrequencyScheme, listAlleleFreqs
                 , True, 5e-4, 1                                                  #bool_Allow_Mutation, float_Mutation_Rate, ?????
                 , False, False, [x for x in range(0, self.nLoci)], False, False  #boolReportDemographicNe, boolReportLDNe, listLociToReportNE
                 , 8                                                                ##intMatingCalenderMonth, 
                 , 2, 6, 1+4                                                        #intParturitionCalenderMonth, intGestationLengthInMonths, intReproductiveRestLengthInMonths + 4 (To ensure the correct rest length)
                 #, 7, 11, 12+4                                                        #intParturitionCalenderMonth, intGestationLengthInMonths, intReproductiveRestLengthInMonths + 4 (To ensure the correct rest length)
                 #, 2, 18, 1+4                                                        #intParturitionCalenderMonth, intGestationLengthInMonths, intReproductiveRestLengthInMonths + 4 (To ensure the correct rest length)
                 , 56, 8                                                            #intTotalYearsToSimulate, intTotalMonthsToSimulate
                 , True                                                            #boolSuppressBurnInOutput
                 , True, {str_Mating_Mortality_Starts__Nat:{self.strSexMale: 1, self.strSexFemale: 1}, str_Mortality_Application_Model__Nat:{self.strSexMale: 3, self.strSexFemale: 3}}  #dict_Mortality_Application_Specs_By_Sex__NATURAL
                 , {self.strSexMale:{12:0.88, 24:0.88, 36:0.88, 48:0.88, 60:0.88, 72:0.88, 84:0.88, 96:0.88, 108:0.88, 120:0.88, 132:0.88, 144:0.88, 156:0.88, 168:0.88, 180:0.88, 192:0.88, 204:0.88, 216:0.88, 228:0.88, 240:0.88, 252:0.88, 264:0.88, 276:0.88, 288:0.88,300:0.88,312:0.88,324:0.88,336:1.0}
                   ,self.strSexFemale:{12:0.88, 24:0.88, 36:0.88, 48:0.88, 60:0.88, 72:0.88, 84:0.88, 96:0.88, 108:0.88, 120:0.88, 132:0.88, 144:0.88, 156:0.88, 168:0.88, 180:0.88, 192:0.88, 204:0.88, 216:0.88, 228:0.88, 240:0.88, 252:0.88, 264:0.88, 276:0.88, 288:0.88,300:0.88,312:0.88,324:0.88,336:1.0}}
                 , False, {str_Mating_Mortality_Starts__UnNat:{self.strSexMale: 58, self.strSexFemale: 58}, str_Mortality_Application_Model__UnNat:{self.strSexMale: 3, self.strSexFemale: 3}} #dict_Mortality_Application_Specs_By_Sex__UnNATURAL
                 , {self.strSexMale:{12:0.981,24:0.966,36:0.973,48:0.973,60:0.989,72:0.996,84:0.996,96:1.000,108:0.973,120:0.954,132:0.947,144:0.905,156:0.924,168:0.851,180:0.882,192:0.870,204:0.931,216:0.962,228:0.977,240:0.989,252:0.977,264:0.992,276:0.992,288:1.000,300:1.000,312:1.000,324:1.000,336:1.000}
                   ,self.strSexFemale:{12:0.994,24:0.958,36:0.958,48:0.958,60:0.982,72:0.988,84:0.994,96:1.000,108:0.994,120:1.000,132:0.982,144:0.988,156:0.994,168:0.952,180:0.934,192:0.855,204:0.880,216:0.892,228:0.904,240:0.934,252:0.928,264:0.976,276:0.982,288:1.000,300:1.000,312:0.988,324:0.994,336:0.994}}
                 , True
                ]                
                
                self.bool_Export_Genepop_PF_Files = False
                self.bool_Export_Genepop_PF_Files_During_BurnIn = True
                self.int_Genpop_For_BioP_Saving_Starts__Replicate_Mating_Count =  1
                self.int_Genpop_For_BioP_Save_Every__Replicate_Mating_Count = 3
                
                self.int_SimuPop_Saving_Starts__Replicate_Mating_Count =  1 #self.intReplicateBurnInLengthInYears - self.maxAge + 1 #I.E Mating 0 of new lifespan
                self.int_SimuPop_Save_Every__Replicate_Mating_Count = 1
                self.int_Post_Sim_Pop_Sampling_Starts_When_Mating_Count_Is = 57
                self.int_Sample_Pop_When_Mating_Count_Divisible_By = 3
                
                return listReplicateRunParameters

            '''
            Carcharhinus obscurus V1
            '''                                     
            def method_Batch_Run_Parameters__PROD_C_Obscurus_V1(self):
                
                ''' Adjust NATURAL Survival to accomodate SENESCENCE '''
                if self.Arg_Allow_Senescence:
                    self.Arg_Survival_Natural = self.Arg_Survival_Natural_Senescence
                else:
                    self.Arg_Survival_Natural = self.Arg_Survival_Natural_No_Senescence
                pass
            
                ''' Allele Frequency specification ''' 
                self.boolInitGenotypeByLoci = False
                self.boolObtainAlleleFrequenciesFromFile = True
                if self.boolObtainAlleleFrequenciesFromFile:
                    str_Input_File_Path = 'C:\\DCB\\MUI\\MUI_Sync_Auto\\MUI_A_Analyses\\Shared_Data\\'
                    #str_Input_File_Name = 'GsPy_GP_2014_11_08_17_14_AGL_B2_CAOB_X_14_43_49_Clean_V1_All_Pops_AllAlleleFreqs.txt'
                    str_Input_File_Name = 'AllAlleleFreqs_GsPy_GP_2014_11_08_17_14_AGL_B2_CAOB_X_14_43_49_Clean_AS_V1_All_Pops.txt'
                    self.method_Simulation_Run_Obtain_Allele_Frequencies_From_File(str_Input_File_Path, str_Input_File_Name)
                    self.boolInitGenotypeByLoci = True
                    self.intAlleleFrequencyScheme = globalsSS.Allele_Frequency_Distribution.static_int_Allele_Frequency_Distribution_Distribution__ALL_ALLELE_FREQUENCIES_FILE
                else:
                    self.nLoci = 21 #21 CAOB Loci
                    self.nAllelesPerLoci = 10-1  #Average for 21 CAOB loci
                    #self.intAlleleFrequencyScheme = 3
                    #self.intAlleleFrequencyScheme = 0 # Equal starting allele frequencies
                    #CODE HAS CHANGED. THIS IS PROB THE Alele_Per_LOcus_Distribution --> self.intAlleleFrequencyScheme = 1 # Randomly generated allele frequencies
                
                ''' AgeNe parameter general control '''
                #Ensure the Manual AgeNe parms match what is specified here for the SIM
                self.boolAgeNeParmMatchManualToSim = True
                self.boolAgeNeParmMatchManual_bx_genertated_in_Sim = False

                '''
                ~~~~~~~~~~~~~~~~~~~~
                Replicate Run - Parameter Specification
                ~~~~~~~~~~~~~~~~~~~~
                '''
                '''
                LIFE HIST DATA - Geraghty 2014 - Using FEMALE Ages only - CONSERVATIVE
                Dusky shark - Carcharhinus obscurus
                    >> Life History Params
                    Maximum age              : 34 (f) <-- This is Geraghty MaxAge + 1  
                    Maximal mating age       : 33 (f) 32(m) <-- This is Geraghty MaxAge
                    Minimal mating age (m)   : 15 (14.6) <-- Age at which 50% are mature
                    Minimal mating age (fm)  : 16 (15.5) <-- Age at which 50% are mature
                        OR
                    Minimal mating age (m)   : 20 (20.2) <-- Age at which 95% are mature
                    Minimal mating age (fm)  : 25 (24.7) <-- Age at which 95% are mature
                    Litter sex ratio (fm:m)  : 1:1
                    Litter size(fm)          : 10 (9.6 Mean, S.E: 0.8, Range: 5- 12) PG - Fecundity did not increase with age
                    Gestation          (G)   : PG: ~22, WA: =< 24, SA: =<24, NWA: >20
                    Reproductive Cycle (R)   : PG: -, WA: 2-3, SA: 3, NWA: 3
                    >> Survival Params
                    Natural survival         : 0.913 Age independent (mean of 5 estimates in McAuley, Simpfendorfer & Hall (2007) from (Pauly (1980), Hoenig (1983) method (i), Hoenig (1983) method (ii), Hoenig (1983) method (iii), Jensen (1996))
                    NOTE: For Nat Survival Prob Dist #Max Age must be 1.0 (100% Survival) for UnNatural mortality to work.  These animals will all die at mating anyway. 
                    Fishing survival         : As per 2008 Observer Catch by Sex
                    >> AgeNe Params
                    bx(fm)                   : 3.3   (9.6 offspring every 3 years = 10/3 = 3.3)
                    sx(fm)                   : 0.913 Age independent
                    >> Genetic Params
                    Genetic data source      : Empirical - NSW - FRDC 
                    #Loci                    : 21 (Average of 10 alleles per locus) <-- From empirical CAOB Genetic data
                    Allele Freqs             : Random Drichlet


                    #CAOB OVERLAPPING GENS - Mating in Aug (8), Gestation 5 months (Feb,2), Resting 1 months (Mar, 3)
                '''
                listReplicateRunParameters = [
                 self.Arg_Pop_Replicates, self.Arg_Mating_Scheme, self.Arg_Mating_Scheme_Polygamy_Num_Mates, [10]                                                   #intReplicates, intMatingSchemeType, intPolygamousMateNumber, listMatingParentSelectionScheme
                 , 3, self.Arg_Pop_Size, 69                                                   #intPopulationInitialAges, popnSize, intReplicateBurnInLengthInYears
                 , 0, 0.5                                                         #intOffspringSexScheme, floatSexRatioOfMales,
                 , self.Arg_Max_Age, self.Arg_Max_Mating_Age, self.Arg_Min_Mating_Age                                                     #maxAge, maxMatingAge, minMatingAge,
                 , 1, 1, 3.3                                                       #intMinNumOffspring, meanvarnumOffspring, intMaxNumOffspring,
                 #, [sim.POISSON_DISTRIBUTION, self.Arg_Num_Offspring_Per_Mate]    # listOffspringNumberParameters,
                 , [sim.UNIFORM_DISTRIBUTION, self.Arg_Min_Num_Offspring_Per_Mate, self.Arg_Max_Num_Offspring_Per_Mate]    # listOffspringNumberParameters,
                 , self.nLoci, self.nAllelesPerLoci+1                             #nLoci, nAllelesPerLoci
                 , self.intAlleleFrequencyScheme, self.listAlleleFreqs            #intAlleleFrequencyScheme, listAlleleFreqs
                 , True, 5e-4, 1                                                  #bool_Allow_Mutation, float_Mutation_Rate, ?????
                 , False, False, [x for x in range(0, self.nLoci)], False, False  #boolReportDemographicNe, boolReportLDNe, listLociToReportNE
                 , 8                                                                ##intMatingCalenderMonth, 
                 , self.Arg_Parturition_Month, self.Arg_Gestation_Length_In_Months, self.Arg_Reproductive_Rest_Length_In_Months+4                                                        #intParturitionCalenderMonth, intGestationLengthInMonths, intReproductiveRestLengthInMonths + 4 (To ensure the correct rest length)
                 , 68, 8                                                            #intTotalYearsToSimulate, intTotalMonthsToSimulate
                 , True                                                            #boolSuppressBurnInOutput
                 , True, self.Arg_Mortality_Application_Specs__Nat  #dict_Mortality_Application_Specs_By_Sex__NATURAL
                 , self.Arg_Survival_Natural
                 , self.Arg_Allow_UnNatural_Mortality, self.Arg_Mortality_Application_Specs__UnNat #dict_Mortality_Application_Specs_By_Sex__UnNATURAL
                 , self.Arg_Survival_UnNatural
                 , True
                ]                
                
                self.bool_Export_Genepop_PF_Files = False
                self.bool_Export_Genepop_PF_Files_During_BurnIn = True
                self.int_Genpop_For_BioP_Saving_Starts__Replicate_Mating_Count =  1
                self.int_Genpop_For_BioP_Save_Every__Replicate_Mating_Count = 3
                
                self.int_SimuPop_Saving_Starts__Replicate_Mating_Count =  1 #self.intReplicateBurnInLengthInYears - self.maxAge + 1 #I.E Mating 0 of new lifespan
                self.int_SimuPop_Save_Every__Replicate_Mating_Count = 1
                self.int_Post_Sim_Pop_Sampling_Starts_When_Mating_Count_Is = 69
                self.int_Sample_Pop_When_Mating_Count_Divisible_By = self.arg_int_Sample_Pop_When_Mating_Count_Divisible_By
                                
                return listReplicateRunParameters

                         
            def method_Batch_Run_Parameters__TEST_C_Obscurus_V1(self):
                
                ''' Specify string constangs to make parameter specification easier '''
                str_Mating_Mortality_Starts__Nat = globalsSS.MortalityApplication.static_str_Mating_Mortlity_Starts__Nat
                str_Mating_Mortality_Starts__UnNat = globalsSS.MortalityApplication.static_str_Mating_Mortlity_Starts__UnNat
                
                str_Mortality_Application_Model__Nat = globalsSS.MortalityApplication.static_str_Mortality_Application_Model__Nat 
                str_Mortality_Application_Model__UnNat = globalsSS.MortalityApplication.static_str_Mortality_Application_Model__UnNat
                
                ''' Allele Frequency specification ''' 
                self.boolInitGenotypeByLoci = False
                self.boolObtainAlleleFrequenciesFromFile = True
                if self.boolObtainAlleleFrequenciesFromFile:
                    str_Input_File_Path = 'C:\\DCB\\MUI\\MUI_Sync_Auto\\MUI_A_Analyses\\Shared_Data\\'
                    #str_Input_File_Name = 'GsPy_GP_2014_11_08_17_14_AGL_B2_CAOB_X_14_43_49_Clean_V1_All_Pops_AllAlleleFreqs.txt'
                    str_Input_File_Name = 'AllAlleleFreqs_GsPy_GP_2014_11_08_17_14_AGL_B2_CAOB_X_14_43_49_Clean_AS_V1_All_Pops.txt'
                    self.method_Simulation_Run_Obtain_Allele_Frequencies_From_File(str_Input_File_Path, str_Input_File_Name)
                    self.boolInitGenotypeByLoci = True
                    self.intAlleleFrequencyScheme = globalsSS.Allele_Frequency_Distribution.static_int_Allele_Frequency_Distribution_Distribution__ALL_ALLELE_FREQUENCIES_FILE
                else:
                    self.nLoci = 21 #21 CAOB Loci
                    self.nAllelesPerLoci = 10-1  #Average for 21 CAOB loci
                    #self.intAlleleFrequencyScheme = 3
                    #self.intAlleleFrequencyScheme = 0 # Equal starting allele frequencies
                    #CODE HAS CHANGED. THIS IS PROB THE Alele_Per_LOcus_Distribution --> self.intAlleleFrequencyScheme = 1 # Randomly generated allele frequencies
                
                ''' AgeNe parameter general control '''
                #Ensure the Manual AgeNe parms match what is specified here for the SIM
                self.boolAgeNeParmMatchManualToSim = True
                self.boolAgeNeParmMatchManual_bx_genertated_in_Sim = False

                '''
                ~~~~~~~~~~~~~~~~~~~~
                Replicate Run - Parameter Specification
                ~~~~~~~~~~~~~~~~~~~~
                '''
                '''
                LIFE HIST DATA - Geraghty 2014 - Using FEMALE Ages only - CONSERVATIVE
                Dusky shark - Carcharhinus obscurus
                    >> Life History Params
                    Maximum age              : 34 (f) <-- This is Geraghty MaxAge + 1  
                    Maximal mating age       : 33 (f) 32(m) <-- This is Geraghty MaxAge
                    Minimal mating age (m)   : 15 (14.6) <-- Age at which 50% are mature
                    Minimal mating age (fm)  : 16 (15.5) <-- Age at which 50% are mature
                        OR
                    Minimal mating age (m)   : 20 (20.2) <-- Age at which 95% are mature
                    Minimal mating age (fm)  : 25 (24.7) <-- Age at which 95% are mature
                    Litter sex ratio (fm:m)  : 1:1
                    Litter size(fm)          : 10 (9.6 Mean, S.E: 0.8, Range: 5- 12) PG - Fecundity did not increase with age
                    Gestation          (G)   : PG: ~22, WA: =< 24, SA: =<24, NWA: >20
                    Reproductive Cycle (R)   : PG: -, WA: 2-3, SA: 3, NWA: 3
                    >> Survival Params
                    Natural survival         : 0.913 Age independent (mean of 5 estimates in McAuley, Simpfendorfer & Hall (2007) from (Pauly (1980), Hoenig (1983) method (i), Hoenig (1983) method (ii), Hoenig (1983) method (iii), Jensen (1996))
                    NOTE: For Nat Survival Prob Dist #Max Age must be 1.0 (100% Survival) for UnNatural mortality to work.  These animals will all die at mating anyway. 
                    Fishing survival         : As per 2008 Observer Catch by Sex
                    >> AgeNe Params
                    bx(fm)                   : 3.3   (9.6 offspring every 3 years = 10/3 = 3.3)
                    sx(fm)                   : 0.913 Age independent
                    >> Genetic Params
                    Genetic data source      : Empirical - NSW - FRDC 
                    #Loci                    : 21 (Average of 10 alleles per locus) <-- From empirical CAOB Genetic data
                    Allele Freqs             : Random Drichlet


                    #CAOB OVERLAPPING GENS - Mating in Aug (8), Gestation 5 months (Feb,2), Resting 1 months (Mar, 3)
                '''
                listReplicateRunParameters = [
                 1, 21, 2, [10]                                                   #intReplicates, intMatingSchemeType, intPolygamousMateNumber, listMatingParentSelectionScheme
                 , 3, 1000, 69                                                   #intPopulationInitialAges, popnSize, intReplicateBurnInLengthInYears
                 , 0, 0.5                                                         #intOffspringSexScheme, floatSexRatioOfMales,
                 , 34, 33, 16                                                     #maxAge, maxMatingAge, minMatingAge,
                 , 1, 1, 3.3, [sim.POISSON_DISTRIBUTION, 10]                        #intMinNumOffspring, meanvarnumOffspring, intMaxNumOffspring, listOffspringNumberParameters,
                 , self.nLoci, self.nAllelesPerLoci+1                             #nLoci, nAllelesPerLoci
                 , self.intAlleleFrequencyScheme, self.listAlleleFreqs            #intAlleleFrequencyScheme, listAlleleFreqs
                 , True, 5e-4, 1                                                  #bool_Allow_Mutation, float_Mutation_Rate, ?????
                 , False, False, [x for x in range(0, self.nLoci)], False, False  #boolReportDemographicNe, boolReportLDNe, listLociToReportNE
                 , 8                                                                ##intMatingCalenderMonth, 
                 , 2, 6, 1+4                                                        #intParturitionCalenderMonth, intGestationLengthInMonths, intReproductiveRestLengthInMonths + 4 (To ensure the correct rest length)
                 #, 2, 18, 24+4                                                        #intParturitionCalenderMonth, intGestationLengthInMonths, intReproductiveRestLengthInMonths + 4 (To ensure the correct rest length)
                 , 68, 8                                                            #intTotalYearsToSimulate, intTotalMonthsToSimulate
                 , True                                                            #boolSuppressBurnInOutput
                 , True, {str_Mating_Mortality_Starts__Nat:{self.strSexMale: 1, self.strSexFemale: 1}, str_Mortality_Application_Model__Nat:{self.strSexMale: 3, self.strSexFemale: 3}}  #dict_Mortality_Application_Specs_By_Sex__NATURAL
                 , {self.strSexMale:{12:0.913,24:0.913,36:0.913,48:0.913,60:0.913,72:0.913,84:0.913,96:0.913,108:0.913,120:0.913,132:0.913,144:0.913,156:0.913,168:0.913,180:0.913,192:0.913,204:0.913,216:0.913,228:0.913,240:0.913,252:0.913,264:0.913,276:0.913,288:0.913,300:0.913,312:0.913,324:0.913,336:0.913,348:0.913,360:0.913,372:0.913,384:0.913,396:0.913,408:1.0}
                 ,  self.strSexFemale:{12:0.913,24:0.913,36:0.913,48:0.913,60:0.913,72:0.913,84:0.913,96:0.913,108:0.913,120:0.913,132:0.913,144:0.913,156:0.913,168:0.913,180:0.913,192:0.913,204:0.913,216:0.913,228:0.913,240:0.913,252:0.913,264:0.913,276:0.913,288:0.913,300:0.913,312:0.913,324:0.913,336:0.913,348:0.913,360:0.913,372:0.913,384:0.913,396:0.913,408:1.0}}
                 , False, {str_Mating_Mortality_Starts__UnNat:{self.strSexMale: 70, self.strSexFemale: 70}, str_Mortality_Application_Model__UnNat:{self.strSexMale: 3, self.strSexFemale: 3}} #dict_Mortality_Application_Specs_By_Sex__UnNATURAL
                 , {self.strSexMale:{12:0.950,24:0.971,36:0.971,48:0.986,60:1.000,72:0.979,84:0.986,96:0.986,108:1.000,120:1.000,132:0.993,144:0.993,156:1.000,168:1.000,180:1.000,192:1.000,204:1.000,216:0.964,228:0.957,240:0.957,252:0.957,264:0.921,276:0.921,288:0.907,300:0.871,312:0.907,324:0.921,336:0.971,348:0.964,360:0.986,372:1.000,384:1.000,396:0.979,408:1.000}
                 ,  self.strSexFemale:{12:0.963,24:0.985,36:0.956,48:0.978,60:0.948,72:0.978,84:0.970,96:0.963,108:0.963,120:0.993,132:0.993,144:0.985,156:0.993,168:0.978,180:1.000,192:0.993,204:0.993,216:0.985,228:0.978,240:0.970,252:0.993,264:0.985,276:0.956,288:0.963,300:0.926,312:0.956,324:0.867,336:0.933,348:0.963,360:0.970,372:0.978,384:0.978,396:0.985,408:0.985}}
                 , True
                ]                
                
                self.bool_Export_Genepop_PF_Files = False
                self.bool_Export_Genepop_PF_Files_During_BurnIn = True
                self.int_Genpop_For_BioP_Saving_Starts__Replicate_Mating_Count =  1
                self.int_Genpop_For_BioP_Save_Every__Replicate_Mating_Count = 3
                
                self.int_SimuPop_Saving_Starts__Replicate_Mating_Count =  1 #self.intReplicateBurnInLengthInYears - self.maxAge + 1 #I.E Mating 0 of new lifespan
                self.int_SimuPop_Save_Every__Replicate_Mating_Count = 1
                self.int_Post_Sim_Pop_Sampling_Starts_When_Mating_Count_Is = 69
                self.int_Sample_Pop_When_Mating_Count_Divisible_By = 3
                                
                return listReplicateRunParameters

            '''
            Stegostoma_fasciatum_V1
            '''
            def method_Batch_Run_Parameters__PROD_Stegostoma_fasciatum_V1_OLD(self):
                
                ''' Adjust NATURAL Survival to accomodate SENESCENCE '''
                if self.Arg_Allow_Senescence:
                    self.Arg_Survival_Natural = self.Arg_Survival_Natural_Senescence
                else:
                    self.Arg_Survival_Natural = self.Arg_Survival_Natural_No_Senescence
                pass
            
                ''' Allele Frequency specification ''' 
                self.boolInitGenotypeByLoci = False
                self.boolObtainAlleleFrequenciesFromFile = True
                if self.boolObtainAlleleFrequenciesFromFile:
                    str_Input_File_Path = 'C:\\DCB\\MUI\\MUI_Sync_Auto\\MUI_A_Analyses\\Shared_Data\\'
                    str_Input_File_Name = 'AllAlleleFreqs_Stegostoma Total genotypes 29Sep2014 summary stats_DCB_V2.txt'
                    self.method_Simulation_Run_Obtain_Allele_Frequencies_From_File(str_Input_File_Path, str_Input_File_Name)
                    self.boolInitGenotypeByLoci = True
                    self.intAlleleFrequencyScheme = globalsSS.Allele_Frequency_Distribution.static_int_Allele_Frequency_Distribution_Distribution__ALL_ALLELE_FREQUENCIES_FILE
                else:
                    self.nLoci = 14
                    self.nAllelesPerLoci = 14-1  #Average for 21 CAOB loci
                    #self.intAlleleFrequencyScheme = 3
                    #self.intAlleleFrequencyScheme = 0 # Equal starting allele frequencies
                    #CODE HAS CHANGED. THIS IS PROB THE Alele_Per_LOcus_Distribution --> self.intAlleleFrequencyScheme = 1 # Randomly generated allele frequencies
                
                ''' AgeNe parameter general control '''
                #Ensure the Manual AgeNe parms match what is specified here for the SIM
                self.boolAgeNeParmMatchManualToSim = True
                self.boolAgeNeParmMatchManual_bx_genertated_in_Sim = False

                '''
                ~~~~~~~~~~~~~~~~~~~~
                Replicate Run - Parameter Specification
                ~~~~~~~~~~~~~~~~~~~~
                '''
                '''
                LIFE HIST DATA - Using FEMALE Ages only
                Zebra/Leopard shark - Stegostoma fasciatum
                    >> Life History Params
                    Maximum age              : 29 (f) <-- This is Geraghty MaxAge + 1  
                    Maximal mating age       : 28 (f) 32(m) <-- This is Geraghty MaxAge
                    Minimal mating age (m)   : ? (?) <-- Age at which 50% are mature
                    Minimal mating age (fm)  : 6 (6) <-- Age at which 50% are mature
                        OR
                    Minimal mating age (m)   : ? (?) <-- Age at which 95% are mature
                    Minimal mating age (fm)  : 8 (8) <-- Age at which 95% are mature
                    Litter sex ratio (fm:m)  : 1:1
                    Litter size(fm)          : 3 - 10 (Mean: 5, S.E: ?, Range: 3 - 10) PG - Fecundity did not increase with age
                    Gestation          (G)   : 5 months
                    Reproductive Cycle (R)   : 1 months
                    >> Survival Params
                    Natural survival         : 0.913 Age independent (mean of 5 estimates in McAuley, Simpfendorfer & Hall (2007) from (Pauly (1980), Hoenig (1983) method (i), Hoenig (1983) method (ii), Hoenig (1983) method (iii), Jensen (1996))
                    NOTE: For Nat Survival Prob Dist #Max Age must be 1.0 (100% Survival) for UnNatural mortality to work.  These animals will all die at mating anyway. 
                    Fishing survival         : As per 2008 Observer Catch by Sex
                    >> AgeNe Params
                    bx(fm)                   : 3.3   (9.6 offspring every 3 years = 10/3 = 3.3)
                    sx(fm)                   : Age dependent - see notural mortality distribution
                    >> Genetic Params
                    Genetic data source      : Empirical - Christine Dudgeon - SE QLD population 
                    #Loci                    : 14 (Average of 14 alleles per locus) <-- From empirical CAOB Genetic data
                    Allele Freqs             : Empirical or Random Drichlet


                    #STFA OVERLAPPING GENS - Mating in Aug (8), Gestation 5 months (Feb,2), Resting 1 months (Mar, 3)
                '''
                listReplicateRunParameters = [
                 self.Arg_Pop_Replicates, self.Arg_Mating_Scheme, self.Arg_Mating_Scheme_Polygamy_Num_Mates, [10]                                                   #intReplicates, intMatingSchemeType, intPolygamousMateNumber, listMatingParentSelectionScheme
                 , 3, self.Arg_Pop_Size, 58                                                   #intPopulationInitialAges, popnSize, intReplicateBurnInLengthInYears
                 , 0, 0.5                                                         #intOffspringSexScheme, floatSexRatioOfMales,
                 , self.Arg_Max_Age, self.Arg_Max_Mating_Age, self.Arg_Min_Mating_Age                                                     #maxAge, maxMatingAge, minMatingAge,
                 , 1, 1, 2.6                                                       #intMinNumOffspring, meanvarnumOffspring, intMaxNumOffspring,
                 #, [sim.POISSON_DISTRIBUTION, self.Arg_Num_Offspring_Per_Mate]    # listOffspringNumberParameters,
                 , [sim.UNIFORM_DISTRIBUTION, self.Arg_Min_Num_Offspring_Per_Mate, self.Arg_Max_Num_Offspring_Per_Mate]    # listOffspringNumberParameters,
                 , self.nLoci, self.nAllelesPerLoci+1                             #nLoci, nAllelesPerLoci
                 , self.intAlleleFrequencyScheme, self.listAlleleFreqs            #intAlleleFrequencyScheme, listAlleleFreqs
                 , True, 5e-4, 1                                                  #bool_Allow_Mutation, float_Mutation_Rate, ?????
                 , False, False, [x for x in range(0, self.nLoci)], False, False  #boolReportDemographicNe, boolReportLDNe, listLociToReportNE
                 , 8                                                                ##intMatingCalenderMonth, 
                 , self.Arg_Parturition_Month, self.Arg_Gestation_Length_In_Months, self.Arg_Reproductive_Rest_Length_In_Months+4                                                        #intParturitionCalenderMonth, intGestationLengthInMonths, intReproductiveRestLengthInMonths + 4 (To ensure the correct rest length)
                 , 57, 8                                                            #intTotalYearsToSimulate, intTotalMonthsToSimulate
                 , True                                                            #boolSuppressBurnInOutput
                 , True, self.Arg_Mortality_Application_Specs__Nat  #dict_Mortality_Application_Specs_By_Sex__NATURAL
                 , self.Arg_Survival_Natural
                 , self.Arg_Allow_UnNatural_Mortality, self.Arg_Mortality_Application_Specs__UnNat #dict_Mortality_Application_Specs_By_Sex__UnNATURAL
                 , self.Arg_Survival_UnNatural
                 , True
                ]                
                
                self.bool_Export_Genepop_PF_Files = False
                self.bool_Export_Genepop_PF_Files_During_BurnIn = True
                self.int_Genpop_For_BioP_Saving_Starts__Replicate_Mating_Count =  1
                self.int_Genpop_For_BioP_Save_Every__Replicate_Mating_Count = 3
                
                self.int_SimuPop_Saving_Starts__Replicate_Mating_Count =  1 #self.intReplicateBurnInLengthInYears - self.maxAge + 1 #I.E Mating 0 of new lifespan
                self.int_SimuPop_Save_Every__Replicate_Mating_Count = 1
                self.int_Post_Sim_Pop_Sampling_Starts_When_Mating_Count_Is = 58
                self.int_Sample_Pop_When_Mating_Count_Divisible_By = self.arg_int_Sample_Pop_When_Mating_Count_Divisible_By
                
                return listReplicateRunParameters
                                
            '''
            Stegostoma_fasciatum_V1
            '''
            def method_Batch_Run_Parameters__PROD_Stegostoma_fasciatum_V1(self):

                '''
                ~~~~~~~~~~~~~~~~~~~~
                Replicate Run - Parameter Specification
                ~~~~~~~~~~~~~~~~~~~~
                '''
                '''
                LIFE HIST DATA - Using FEMALE Ages only
                Zebra/Leopard shark - Stegostoma fasciatum
                    >> Life History Params
                    Maximum age              : 29 (f) <-- This is Geraghty MaxAge + 1  
                    Maximal mating age       : 28 (f) 32(m) <-- This is Geraghty MaxAge
                    Minimal mating age (m)   : ? (?) <-- Age at which 50% are mature
                    Minimal mating age (fm)  : 6 (6) <-- Age at which 50% are mature
                        OR
                    Minimal mating age (m)   : ? (?) <-- Age at which 95% are mature
                    Minimal mating age (fm)  : 8 (8) <-- Age at which 95% are mature
                    Litter sex ratio (fm:m)  : 1:1
                    Litter size(fm)          : 3 - 10 (Mean: 5, S.E: ?, Range: 3 - 10) PG - Fecundity did not increase with age
                    Gestation          (G)   : 5 months
                    Reproductive Cycle (R)   : 1 months
                    >> Survival Params
                    Natural survival         : 0.913 Age independent (mean of 5 estimates in McAuley, Simpfendorfer & Hall (2007) from (Pauly (1980), Hoenig (1983) method (i), Hoenig (1983) method (ii), Hoenig (1983) method (iii), Jensen (1996))
                    NOTE: For Nat Survival Prob Dist #Max Age must be 1.0 (100% Survival) for UnNatural mortality to work.  These animals will all die at mating anyway. 
                    Fishing survival         : As per 2008 Observer Catch by Sex
                    >> AgeNe Params
                    bx(fm)                   : 3.3   (9.6 offspring every 3 years = 10/3 = 3.3)
                    sx(fm)                   : Age dependent - see notural mortality distribution
                    >> Genetic Params
                    Genetic data source      : Empirical - Christine Dudgeon - SE QLD population 
                    #Loci                    : 14 (Average of 14 alleles per locus) <-- From empirical CAOB Genetic data
                    Allele Freqs             : Empirical or Random Drichlet


                    #STFA OVERLAPPING GENS - Mating in Aug (8), Gestation 5 months (Feb,2), Resting 1 months (Mar, 3)
                '''
                
                ''' Adjust NATURAL Survival to accomodate SENESCENCE '''
                if self.Arg_Allow_Senescence:
                    self.Arg_Survival_Natural = self.Arg_Survival_Natural_Senescence
                else:
                    self.Arg_Survival_Natural = self.Arg_Survival_Natural_No_Senescence
                pass
            
                ''' Allele Frequency specification ''' 
                self.boolInitGenotypeByLoci = False
                self.boolObtainAlleleFrequenciesFromFile = self.Arg_bool_Obtain_Allele_Freqs_From_File
                if self.boolObtainAlleleFrequenciesFromFile:
                    str_Input_File_Path = 'C:\\DCB\\MUI\\MUI_Sync_Auto\\MUI_A_Analyses\\Shared_Data\\'
                    str_Input_File_Name = 'AllAlleleFreqs_Stegostoma Total genotypes 29Sep2014 summary stats_DCB_V2.txt'
                    self.method_Simulation_Run_Obtain_Allele_Frequencies_From_File(str_Input_File_Path, str_Input_File_Name)
                    self.boolInitGenotypeByLoci = True
                    self.intAlleleFrequencyScheme = globalsSS.Allele_Frequency_Distribution.static_int_Allele_Frequency_Distribution_Distribution__ALL_ALLELE_FREQUENCIES_FILE
                else:
                    #self.nLoci = 20
                    self.nLoci = self.Arg_Num_Loci
                    #self.nAllelesPerLoci = 10-1  #Average for 21 CAOB loci
                    self.nAllelesPerLoci = self.Arg_int_Alleles_Per_Locus - 1  
                    '''
                    ------------------
                    Allele Freq Scheme
                    0 - Equal starting allele frequencies - MAXIMAL DIVERSITY (MAF)
                    1 - Randomly generated allele frequencies - RANDOM DRICHLET DIVERSITY (DAF)
                    ------------------
                    '''
                    self.intAlleleFrequencyScheme = self.Arg_int_Allele_Freq_Scheme 
                pass
            
                ''' AgeNe parameter general control '''
                #Ensure the Manual AgeNe parms match what is specified here for the SIM
                self.boolAgeNeParmMatchManualToSim = True
                self.boolAgeNeParmMatchManual_bx_genertated_in_Sim = False
                
                '''
                TESTING - OVERLAPPING GENERATIONS
                WF Diploid Dioecious Sexual Random Mating  
                '''
                listReplicateRunParameters = [
                 #SIMPLE OVERLAPPING GENS - Mating in Aug (8), Gestation 5 months (Feb,2), Resting 1 months (Mar, 3)
                 self.Arg_Pop_Replicates, self.Arg_Mating_Scheme, self.Arg_Mating_Scheme_Polygamy_Num_Mates, [10]    #intReplicates, intMatingSchemeType, intPolygamousMateNumber, listMatingParentSelectionScheme
                 , 3, self.Arg_Pop_Size, self.Arg_BurnIn_Matings                  #intPopulationInitialAges, popnSize, intReplicateBurnInLengthInYears
                 , self.Arg_int_Offspring_Sex_Scheme, 0.5                         #intOffspringSexScheme, floatSexRatioOfMales,
                 , self.Arg_Max_Age, self.Arg_Max_Mating_Age, self.Arg_Min_Mating_Age   #maxAge, maxMatingAge, minMatingAge,
                 , 0, 1, 1.0
                 , self.Arg_list_Offspring_Production_Parms                       #intMinNumOffspring, meanvarnumOffspring, intMaxNumOffspring, listOffspringNumberParameters,
                 , self.nLoci, self.nAllelesPerLoci+1                             #nLoci, nAllelesPerLoci
                 , self.intAlleleFrequencyScheme, self.listAlleleFreqs            #intAlleleFrequencyScheme, listAlleleFreqs
                 , self.Arg_bool_Allow_Mutation, 5e-4, 1                                                  #bool_Allow_Mutation, float_Mutation_Rate, ?????
                 , False, False, [x for x in range(0, self.nLoci)], False, False  #boolReportDemographicNe, boolReportLDNe, listLociToReportNE
                 , self.Arg_int_Mating_Calender_Month                             #intMatingCalenderMonth, 
                 , self.Arg_Parturition_Month, self.Arg_Gestation_Length_In_Months, self.Arg_Reproductive_Rest_Length_In_Months+4  #intParturitionCalenderMonth, intGestationLengthInMonths, intReproductiveRestLengthInMonths + 4 (To ensure the correct rest length)
                 , self.Arg_Evolution_Years, self.Arg_Evolution_Months            #intTotalYearsToSimulate, intTotalMonthsToSimulate
                 , True                                                            #boolSuppressBurnInOutput
                 , True, self.Arg_Mortality_Application_Specs__Nat  #dict_Mortality_Application_Specs_By_Sex__NATURAL
                 , self.Arg_Survival_Natural
                 , self.Arg_Allow_UnNatural_Mortality, self.Arg_Mortality_Application_Specs__UnNat #dict_Mortality_Application_Specs_By_Sex__UnNATURAL
                 , self.Arg_Survival_UnNatural
                 , True
                ]                
                
                self.bool_Export_Genepop_PF_Files = True
                self.bool_Export_Genepop_PF_Files_During_BurnIn = True
                self.bool_Genepop_Export_PF_Embryo_VSP = False
                self.float_SubSample_Percent_Of_PF_Embryo_VSP = 0
                self.bool_Genepop_Export_PF_Mature_VSP = True
                self.float_SubSample_Percent_Of_PF_Mature_VSP = 0.20
                self.bool_Genepop_Export_PF_Full_SP = False
                self.float_SubSample_Percent_Of_PF_Full_SP = 0                
                self.int_Genpop_For_BioP_Saving_Starts__Replicate_Mating_Count =  1
                self.int_Genpop_For_BioP_Save_Every__Replicate_Mating_Count = 1 #3
                
                self.int_SimuPop_Saving_Starts__Replicate_Mating_Count =  1 #self.intReplicateBurnInLengthInYears - self.maxAge + 1 #I.E Mating 0 of new lifespan
                self.int_SimuPop_Save_Every__Replicate_Mating_Count = 1
                self.int_Post_Sim_Pop_Sampling_Starts_When_Mating_Count_Is = self.Arg_int_Post_Sim_Pop_Sampling_Starts_When_Mating_Count_Is
                self.int_Sample_Pop_When_Mating_Count_Divisible_By = self.arg_int_Sample_Pop_When_Mating_Count_Divisible_By

                return listReplicateRunParameters

            '''
            SSOG_V1
            '''
            def method_Batch_Run_Parameters__PROD_SSOG_V1(self):

                '''
                ~~~~~~~~~~~~~~~~~~~~
                Replicate Run - Parameter Specification
                ~~~~~~~~~~~~~~~~~~~~
                '''
                '''
                LIFE HIST DATA - Using FEMALE Ages only
                Simple Overlapping Generations Model 1
                    >> Life History Params
                    Maximum age              : 4
                    Maximal mating age       : 3
                    Minimal mating age (m)   : 1
                    Minimal mating age (fm)  : 1
                    Litter sex ratio (fm:m)  : 1:1
                    Litter size(fm)          : 1
                    Gestation          (G)   : 6 months
                    Reproductive Cycle (R)   : 1 months
                    >> Survival Params
                    Natural survival         : 0.85 Age independent
                    NOTE: For Nat Survival Prob Dist #Max Age must be 1.0 (100% Survival) for UnNatural mortality to work.  These animals will all die at mating anyway. 
                    Fishing survival         : 0.95 Age independent
                    >> AgeNe Params
                    bx(fm)                   : 0.33 (1 offspring every 3 years = 1/3 = 0.33)
                    sx(fm)                   : Age independent - see natural mortality distribution
                    >> Genetic Params
                    Genetic data source      : Simulated 
                    #Loci                    : 20 (Average of 10 alleles per locus)
                    Allele Freqs             : Calculated (Maximal diversity or Random Drichlet)


                    #SSOG OVERLAPPING GENS - Mating in Aug (8), Gestation 6 months (Feb,2), Resting 1 months (Mar, 3)
                '''
                
                ''' Adjust NATURAL Survival to accomodate SENESCENCE '''
                if self.Arg_Allow_Senescence:
                    self.Arg_Survival_Natural = self.Arg_Survival_Natural_Senescence
                else:
                    self.Arg_Survival_Natural = self.Arg_Survival_Natural_No_Senescence
                pass
            
                ''' Allele Frequency specification ''' 
                self.boolInitGenotypeByLoci = False
                self.boolObtainAlleleFrequenciesFromFile = self.Arg_bool_Obtain_Allele_Freqs_From_File
                if self.boolObtainAlleleFrequenciesFromFile:
                    str_Input_File_Path = 'C:\\DCB\\MUI\\MUI_Sync_Auto\\MUI_A_Analyses\\Shared_Data\\'
                    str_Input_File_Name = 'AllAlleleFreqs_Stegostoma Total genotypes 29Sep2014 summary stats_DCB_V2.txt'
                    self.method_Simulation_Run_Obtain_Allele_Frequencies_From_File(str_Input_File_Path, str_Input_File_Name)
                    self.boolInitGenotypeByLoci = True
                    self.intAlleleFrequencyScheme = globalsSS.Allele_Frequency_Distribution.static_int_Allele_Frequency_Distribution_Distribution__ALL_ALLELE_FREQUENCIES_FILE
                else:
                    #self.nLoci = 20
                    self.nLoci = self.Arg_Num_Loci
                    #self.nAllelesPerLoci = 10-1  #Average for 21 CAOB loci
                    self.nAllelesPerLoci = self.Arg_int_Alleles_Per_Locus - 1  
                    '''
                    ------------------
                    Allele Freq Scheme
                    0 - Equal starting allele frequencies - MAXIMAL DIVERSITY (MAF)
                    1 - Randomly generated allele frequencies - RANDOM DRICHLET DIVERSITY (DAF)
                    ------------------
                    '''
                    self.intAlleleFrequencyScheme = self.Arg_int_Allele_Freq_Scheme 
                pass
            
                ''' AgeNe parameter general control '''
                #Ensure the Manual AgeNe parms match what is specified here for the SIM
                self.boolAgeNeParmMatchManualToSim = True
                self.boolAgeNeParmMatchManual_bx_genertated_in_Sim = False
                
                '''
                TESTING - OVERLAPPING GENERATIONS
                WF Diploid Dioecious Sexual Random Mating  
                '''
                listReplicateRunParameters = [
                 #SIMPLE OVERLAPPING GENS - Mating in Aug (8), Gestation 5 months (Feb,2), Resting 1 months (Mar, 3)
                 self.Arg_Pop_Replicates, self.Arg_Mating_Scheme, self.Arg_Mating_Scheme_Polygamy_Num_Mates, [10]    #intReplicates, intMatingSchemeType, intPolygamousMateNumber, listMatingParentSelectionScheme
                 , 3, self.Arg_Pop_Size, self.Arg_BurnIn_Matings                  #intPopulationInitialAges, popnSize, intReplicateBurnInLengthInYears
                 , self.Arg_int_Offspring_Sex_Scheme, 0.5                         #intOffspringSexScheme, floatSexRatioOfMales,
                 , self.Arg_Max_Age, self.Arg_Max_Mating_Age, self.Arg_Min_Mating_Age   #maxAge, maxMatingAge, minMatingAge,
                 , 0, 1, 1.0
                 , self.Arg_list_Offspring_Production_Parms                       #intMinNumOffspring, meanvarnumOffspring, intMaxNumOffspring, listOffspringNumberParameters,
                 , self.nLoci, self.nAllelesPerLoci+1                             #nLoci, nAllelesPerLoci
                 , self.intAlleleFrequencyScheme, self.listAlleleFreqs            #intAlleleFrequencyScheme, listAlleleFreqs
                 , self.Arg_bool_Allow_Mutation, 5e-4, 1                                                  #bool_Allow_Mutation, float_Mutation_Rate, ?????
                 , False, False, [x for x in range(0, self.nLoci)], False, False  #boolReportDemographicNe, boolReportLDNe, listLociToReportNE
                 , self.Arg_int_Mating_Calender_Month                             #intMatingCalenderMonth, 
                 , self.Arg_Parturition_Month, self.Arg_Gestation_Length_In_Months, self.Arg_Reproductive_Rest_Length_In_Months+4  #intParturitionCalenderMonth, intGestationLengthInMonths, intReproductiveRestLengthInMonths + 4 (To ensure the correct rest length)
                 , self.Arg_Evolution_Years, self.Arg_Evolution_Months            #intTotalYearsToSimulate, intTotalMonthsToSimulate
                 , True                                                            #boolSuppressBurnInOutput
                 , True, self.Arg_Mortality_Application_Specs__Nat  #dict_Mortality_Application_Specs_By_Sex__NATURAL
                 , self.Arg_Survival_Natural
                 , self.Arg_Allow_UnNatural_Mortality, self.Arg_Mortality_Application_Specs__UnNat #dict_Mortality_Application_Specs_By_Sex__UnNATURAL
                 , self.Arg_Survival_UnNatural
                 , True
                ]                
                
                self.bool_Export_Genepop_PF_Files = True
                self.bool_Export_Genepop_PF_Files_During_BurnIn = True
                self.int_Genpop_For_BioP_Saving_Starts__Replicate_Mating_Count =  1
                self.int_Genpop_For_BioP_Save_Every__Replicate_Mating_Count = 1 #3
                
                self.int_SimuPop_Saving_Starts__Replicate_Mating_Count =  1 #self.intReplicateBurnInLengthInYears - self.maxAge + 1 #I.E Mating 0 of new lifespan
                self.int_SimuPop_Save_Every__Replicate_Mating_Count = 1
                self.int_Post_Sim_Pop_Sampling_Starts_When_Mating_Count_Is = self.Arg_int_Post_Sim_Pop_Sampling_Starts_When_Mating_Count_Is
                self.int_Sample_Pop_When_Mating_Count_Divisible_By = self.arg_int_Sample_Pop_When_Mating_Count_Divisible_By

                return listReplicateRunParameters

            '''
            SMOG_V1
            '''
            def method_Batch_Run_Parameters__PROD_SMOG_V1(self):

                '''
                ~~~~~~~~~~~~~~~~~~~~
                Replicate Run - Parameter Specification
                ~~~~~~~~~~~~~~~~~~~~
                '''

                ''' Adjust NATURAL Survival to accomodate SENESCENCE '''
                if self.Arg_Allow_Senescence:
                    self.Arg_Survival_Natural = self.Arg_Survival_Natural_Senescence
                else:
                    self.Arg_Survival_Natural = self.Arg_Survival_Natural_No_Senescence
                pass
            
                ''' Allele Frequency specification ''' 
                self.boolInitGenotypeByLoci = False
                self.boolObtainAlleleFrequenciesFromFile = self.Arg_bool_Obtain_Allele_Freqs_From_File
                if self.boolObtainAlleleFrequenciesFromFile:
                    str_Input_File_Path = 'C:\\DCB\\MUI\\MUI_Sync_Auto\\MUI_A_Analyses\\Shared_Data\\'
                    str_Input_File_Name = 'AllAlleleFreqs_Stegostoma Total genotypes 29Sep2014 summary stats_DCB_V2.txt'
                    self.method_Simulation_Run_Obtain_Allele_Frequencies_From_File(str_Input_File_Path, str_Input_File_Name)
                    self.boolInitGenotypeByLoci = True
                    self.intAlleleFrequencyScheme = globalsSS.Allele_Frequency_Distribution.static_int_Allele_Frequency_Distribution_Distribution__ALL_ALLELE_FREQUENCIES_FILE
                else:
                    #self.nLoci = 20
                    self.nLoci = self.Arg_Num_Loci
                    #self.nAllelesPerLoci = 10-1  #Average for 21 CAOB loci
                    self.nAllelesPerLoci = self.Arg_int_Alleles_Per_Locus - 1  
                    '''
                    ------------------
                    Allele Freq Scheme
                    0 - Equal starting allele frequencies - MAXIMAL DIVERSITY (MAF)
                    1 - Randomly generated allele frequencies - RANDOM DRICHLET DIVERSITY (DAF)
                    ------------------
                    '''
                    self.intAlleleFrequencyScheme = self.Arg_int_Allele_Freq_Scheme 
                pass
            
                ''' AgeNe parameter general control '''
                #Ensure the Manual AgeNe parms match what is specified here for the SIM
                self.boolAgeNeParmMatchManualToSim = True
                self.boolAgeNeParmMatchManual_bx_genertated_in_Sim = False
                
                '''
                TESTING - OVERLAPPING GENERATIONS
                WF Diploid Dioecious Sexual Random Mating  
                '''
                listReplicateRunParameters = [
                 #SIMPLE OVERLAPPING GENS - Mating in Aug (8), Gestation 5 months (Feb,2), Resting 1 months (Mar, 3)
                 self.Arg_Pop_Replicates, self.Arg_Mating_Scheme, self.Arg_Mating_Scheme_Polygamy_Num_Mates, [10]    #intReplicates, intMatingSchemeType, intPolygamousMateNumber, listMatingParentSelectionScheme
                 , 3, self.Arg_Pop_Size, self.Arg_BurnIn_Matings                  #intPopulationInitialAges, popnSize, intReplicateBurnInLengthInYears
                 , self.Arg_int_Offspring_Sex_Scheme, 0.5                         #intOffspringSexScheme, floatSexRatioOfMales,
                 , self.Arg_Max_Age, self.Arg_Max_Mating_Age, self.Arg_Min_Mating_Age   #maxAge, maxMatingAge, minMatingAge,
                 , 0, 1, 1.0
                 , self.Arg_list_Offspring_Production_Parms                       #intMinNumOffspring, meanvarnumOffspring, intMaxNumOffspring, listOffspringNumberParameters,
                 , self.nLoci, self.nAllelesPerLoci+1                             #nLoci, nAllelesPerLoci
                 , self.intAlleleFrequencyScheme, self.listAlleleFreqs            #intAlleleFrequencyScheme, listAlleleFreqs
                 , self.Arg_bool_Allow_Mutation, 5e-4, 1                                                  #bool_Allow_Mutation, float_Mutation_Rate, ?????
                 , False, False, [x for x in range(0, self.nLoci)], False, False  #boolReportDemographicNe, boolReportLDNe, listLociToReportNE
                 , self.Arg_int_Mating_Calender_Month                             #intMatingCalenderMonth, 
                 , self.Arg_Parturition_Month, self.Arg_Gestation_Length_In_Months, self.Arg_Reproductive_Rest_Length_In_Months+4  #intParturitionCalenderMonth, intGestationLengthInMonths, intReproductiveRestLengthInMonths + 4 (To ensure the correct rest length)
                 , self.Arg_Evolution_Years, self.Arg_Evolution_Months            #intTotalYearsToSimulate, intTotalMonthsToSimulate
                 , True                                                            #boolSuppressBurnInOutput
                 , True, self.Arg_Mortality_Application_Specs__Nat  #dict_Mortality_Application_Specs_By_Sex__NATURAL
                 , self.Arg_Survival_Natural
                 , self.Arg_Allow_UnNatural_Mortality, self.Arg_Mortality_Application_Specs__UnNat #dict_Mortality_Application_Specs_By_Sex__UnNATURAL
                 , self.Arg_Survival_UnNatural
                 , True
                ]                
                
                self.bool_Export_Genepop_PF_Files = True
                self.bool_Export_Genepop_PF_Files_During_BurnIn = True
                self.int_Genpop_For_BioP_Saving_Starts__Replicate_Mating_Count =  1
                self.int_Genpop_For_BioP_Save_Every__Replicate_Mating_Count = 1 #3
                
                self.int_SimuPop_Saving_Starts__Replicate_Mating_Count =  1 #self.intReplicateBurnInLengthInYears - self.maxAge + 1 #I.E Mating 0 of new lifespan
                self.int_SimuPop_Save_Every__Replicate_Mating_Count = 1
                self.int_Post_Sim_Pop_Sampling_Starts_When_Mating_Count_Is = self.int_Total_MatingsToSimulatePerReplicate - self.maxAge * 2 #29
                self.int_Sample_Pop_When_Mating_Count_Divisible_By = self.arg_int_Sample_Pop_When_Mating_Count_Divisible_By

                return listReplicateRunParameters

            
            '''
            TUTR_V1
            '''
            def method_Batch_Run_Parameters__PROD_TUTR_V1(self):

                '''
                ~~~~~~~~~~~~~~~~~~~~
                Replicate Run - Parameter Specification
                ~~~~~~~~~~~~~~~~~~~~
                '''

                ''' Adjust NATURAL Survival to accomodate SENESCENCE '''
                if self.Arg_Allow_Senescence:
                    self.Arg_Survival_Natural = self.Arg_Survival_Natural_Senescence
                else:
                    self.Arg_Survival_Natural = self.Arg_Survival_Natural_No_Senescence
                pass
            
                ''' Allele Frequency specification ''' 
                self.boolInitGenotypeByLoci = False
                self.boolObtainAlleleFrequenciesFromFile = self.Arg_bool_Obtain_Allele_Freqs_From_File
                if self.boolObtainAlleleFrequenciesFromFile:
                    str_Input_File_Path = 'C:\\DCB\\MUI\\MUI_Sync_Auto\\MUI_A_Analyses\\Shared_Data\\'
                    str_Input_File_Name = 'AllAlleleFreqs_Stegostoma Total genotypes 29Sep2014 summary stats_DCB_V2.txt'
                    self.method_Simulation_Run_Obtain_Allele_Frequencies_From_File(str_Input_File_Path, str_Input_File_Name)
                    self.boolInitGenotypeByLoci = True
                    self.intAlleleFrequencyScheme = globalsSS.Allele_Frequency_Distribution.static_int_Allele_Frequency_Distribution_Distribution__ALL_ALLELE_FREQUENCIES_FILE
                else:
                    #self.nLoci = 20
                    self.nLoci = self.Arg_Num_Loci
                    #self.nAllelesPerLoci = 10-1  #Average for 21 CAOB loci
                    self.nAllelesPerLoci = self.Arg_int_Alleles_Per_Locus - 1  
                    '''
                    ------------------
                    Allele Freq Scheme
                    0 - Equal starting allele frequencies - MAXIMAL DIVERSITY (MAF)
                    1 - Randomly generated allele frequencies - RANDOM DRICHLET DIVERSITY (DAF)
                    ------------------
                    '''
                    self.intAlleleFrequencyScheme = self.Arg_int_Allele_Freq_Scheme 
                pass
            
                ''' AgeNe parameter general control '''
                #Ensure the Manual AgeNe parms match what is specified here for the SIM
                self.boolAgeNeParmMatchManualToSim = True
                self.boolAgeNeParmMatchManual_bx_genertated_in_Sim = False
                
                '''
                TESTING - OVERLAPPING GENERATIONS
                WF Diploid Dioecious Sexual Random Mating  
                '''
                listReplicateRunParameters = [
                 #SIMPLE OVERLAPPING GENS - Mating in Aug (8), Gestation 5 months (Feb,2), Resting 1 months (Mar, 3)
                 self.Arg_Pop_Replicates, self.Arg_Mating_Scheme, self.Arg_Mating_Scheme_Polygamy_Num_Mates, [10]    #intReplicates, intMatingSchemeType, intPolygamousMateNumber, listMatingParentSelectionScheme
                 , 3, self.Arg_Pop_Size, self.Arg_BurnIn_Matings                  #intPopulationInitialAges, popnSize, intReplicateBurnInLengthInYears
                 , self.Arg_int_Offspring_Sex_Scheme, 0.5                         #intOffspringSexScheme, floatSexRatioOfMales,
                 , self.Arg_Max_Age, self.Arg_Max_Mating_Age, self.Arg_Min_Mating_Age   #maxAge, maxMatingAge, minMatingAge,
                 , 0, 1, 1.0
                 , self.Arg_list_Offspring_Production_Parms                       #intMinNumOffspring, meanvarnumOffspring, intMaxNumOffspring, listOffspringNumberParameters,
                 , self.nLoci, self.nAllelesPerLoci+1                             #nLoci, nAllelesPerLoci
                 , self.intAlleleFrequencyScheme, self.listAlleleFreqs            #intAlleleFrequencyScheme, listAlleleFreqs
                 , self.Arg_bool_Allow_Mutation, 5e-4, 1                                                  #bool_Allow_Mutation, float_Mutation_Rate, ?????
                 , False, False, [x for x in range(0, self.nLoci)], False, False  #boolReportDemographicNe, boolReportLDNe, listLociToReportNE
                 , self.Arg_int_Mating_Calender_Month                             #intMatingCalenderMonth, 
                 , self.Arg_Parturition_Month, self.Arg_Gestation_Length_In_Months, self.Arg_Reproductive_Rest_Length_In_Months+4  #intParturitionCalenderMonth, intGestationLengthInMonths, intReproductiveRestLengthInMonths + 4 (To ensure the correct rest length)
                 , self.Arg_Evolution_Years, self.Arg_Evolution_Months            #intTotalYearsToSimulate, intTotalMonthsToSimulate
                 , True                                                            #boolSuppressBurnInOutput
                 , True, self.Arg_Mortality_Application_Specs__Nat  #dict_Mortality_Application_Specs_By_Sex__NATURAL
                 , self.Arg_Survival_Natural
                 , self.Arg_Allow_UnNatural_Mortality, self.Arg_Mortality_Application_Specs__UnNat #dict_Mortality_Application_Specs_By_Sex__UnNATURAL
                 , self.Arg_Survival_UnNatural
                 , True
                ]                
                
                self.bool_Export_Genepop_PF_Files = False
                self.bool_Export_Genepop_PF_Files_During_BurnIn = True
                self.int_Genpop_For_BioP_Saving_Starts__Replicate_Mating_Count =  1
                self.int_Genpop_For_BioP_Save_Every__Replicate_Mating_Count = 1 #3
                
                self.int_SimuPop_Saving_Starts__Replicate_Mating_Count =  1 #self.intReplicateBurnInLengthInYears - self.maxAge + 1 #I.E Mating 0 of new lifespan
                self.int_SimuPop_Save_Every__Replicate_Mating_Count = 1
                self.int_Post_Sim_Pop_Sampling_Starts_When_Mating_Count_Is = self.Arg_int_Post_Sim_Pop_Sampling_Starts_When_Mating_Count_Is
                #self.int_Post_Sim_Pop_Sampling_Starts_When_Mating_Count_Is = self.int_Total_MatingsToSimulatePerReplicate - self.maxAge * 2 #29
                self.int_Sample_Pop_When_Mating_Count_Divisible_By = self.arg_int_Sample_Pop_When_Mating_Count_Divisible_By

                return listReplicateRunParameters

            
            '''
            TUTR_V3
            '''
            def method_Batch_Run_Parameters__PROD_TUTR_V2(self):

                '''
                ~~~~~~~~~~~~~~~~~~~~
                Replicate Run - Parameter Specification
                ~~~~~~~~~~~~~~~~~~~~
                '''

                ''' Adjust NATURAL Survival to accomodate SENESCENCE '''
                if self.Arg_Allow_Senescence:
                    self.Arg_Survival_Natural = self.Arg_Survival_Natural_Senescence
                else:
                    self.Arg_Survival_Natural = self.Arg_Survival_Natural_No_Senescence
                pass
            
                ''' Allele Frequency specification ''' 
                self.boolInitGenotypeByLoci = False
                self.boolObtainAlleleFrequenciesFromFile = self.Arg_bool_Obtain_Allele_Freqs_From_File
                if self.boolObtainAlleleFrequenciesFromFile:
                    str_Input_File_Path = 'C:\\DCB\\MUI\\MUI_Sync_Auto\\MUI_A_Analyses\\Shared_Data\\'
                    str_Input_File_Name = 'AllAlleleFreqs_Stegostoma Total genotypes 29Sep2014 summary stats_DCB_V2.txt'
                    self.method_Simulation_Run_Obtain_Allele_Frequencies_From_File(str_Input_File_Path, str_Input_File_Name)
                    self.boolInitGenotypeByLoci = True
                    self.intAlleleFrequencyScheme = globalsSS.Allele_Frequency_Distribution.static_int_Allele_Frequency_Distribution_Distribution__ALL_ALLELE_FREQUENCIES_FILE
                else:
                    #self.nLoci = 20
                    self.nLoci = self.Arg_Num_Loci
                    #self.nAllelesPerLoci = 10-1  #Average for 21 CAOB loci
                    self.nAllelesPerLoci = self.Arg_int_Alleles_Per_Locus - 1  
                    '''
                    ------------------
                    Allele Freq Scheme
                    0 - Equal starting allele frequencies - MAXIMAL DIVERSITY (MAF)
                    1 - Randomly generated allele frequencies - RANDOM DRICHLET DIVERSITY (DAF)
                    ------------------
                    '''
                    self.intAlleleFrequencyScheme = self.Arg_int_Allele_Freq_Scheme 
                pass
            
                ''' AgeNe parameter general control '''
                #Ensure the Manual AgeNe parms match what is specified here for the SIM
                self.boolAgeNeParmMatchManualToSim = True
                self.boolAgeNeParmMatchManual_bx_genertated_in_Sim = False
                
                '''
                TESTING - OVERLAPPING GENERATIONS
                WF Diploid Dioecious Sexual Random Mating  
                '''
                listReplicateRunParameters = [
                 #SIMPLE OVERLAPPING GENS - Mating in Aug (8), Gestation 5 months (Feb,2), Resting 1 months (Mar, 3)
                 self.Arg_Pop_Replicates, self.Arg_Mating_Scheme, self.Arg_Mating_Scheme_Polygamy_Num_Mates, [10]    #intReplicates, intMatingSchemeType, intPolygamousMateNumber, listMatingParentSelectionScheme
                 , 3, self.Arg_Pop_Size, self.Arg_BurnIn_Matings                  #intPopulationInitialAges, popnSize, intReplicateBurnInLengthInYears
                 , self.Arg_int_Offspring_Sex_Scheme, 0.5                         #intOffspringSexScheme, floatSexRatioOfMales,
                 , self.Arg_Max_Age, self.Arg_Max_Mating_Age, self.Arg_Min_Mating_Age   #maxAge, maxMatingAge, minMatingAge,
                 , 0, 1, 1.0
                 , self.Arg_list_Offspring_Production_Parms                       #intMinNumOffspring, meanvarnumOffspring, intMaxNumOffspring, listOffspringNumberParameters,
                 , self.nLoci, self.nAllelesPerLoci+1                             #nLoci, nAllelesPerLoci
                 , self.intAlleleFrequencyScheme, self.listAlleleFreqs            #intAlleleFrequencyScheme, listAlleleFreqs
                 , self.Arg_bool_Allow_Mutation, 5e-4, 1                                                  #bool_Allow_Mutation, float_Mutation_Rate, ?????
                 , False, False, [x for x in range(0, self.nLoci)], False, False  #boolReportDemographicNe, boolReportLDNe, listLociToReportNE
                 , self.Arg_int_Mating_Calender_Month                             #intMatingCalenderMonth, 
                 , self.Arg_Parturition_Month, self.Arg_Gestation_Length_In_Months, self.Arg_Reproductive_Rest_Length_In_Months+4  #intParturitionCalenderMonth, intGestationLengthInMonths, intReproductiveRestLengthInMonths + 4 (To ensure the correct rest length)
                 , self.Arg_Evolution_Years, self.Arg_Evolution_Months            #intTotalYearsToSimulate, intTotalMonthsToSimulate
                 , True                                                            #boolSuppressBurnInOutput
                 , True, self.Arg_Mortality_Application_Specs__Nat  #dict_Mortality_Application_Specs_By_Sex__NATURAL
                 , self.Arg_Survival_Natural
                 , self.Arg_Allow_UnNatural_Mortality, self.Arg_Mortality_Application_Specs__UnNat #dict_Mortality_Application_Specs_By_Sex__UnNATURAL
                 , self.Arg_Survival_UnNatural
                 , True
                ]                
                
                self.bool_Export_Genepop_PF_Files = False
                self.bool_Export_Genepop_PF_Files_During_BurnIn = True
                self.int_Genpop_For_BioP_Saving_Starts__Replicate_Mating_Count =  1
                self.int_Genpop_For_BioP_Save_Every__Replicate_Mating_Count = 1 #3
                
                self.int_SimuPop_Saving_Starts__Replicate_Mating_Count =  1 #self.intReplicateBurnInLengthInYears - self.maxAge + 1 #I.E Mating 0 of new lifespan
                self.int_SimuPop_Save_Every__Replicate_Mating_Count = 1
                self.int_Post_Sim_Pop_Sampling_Starts_When_Mating_Count_Is = self.Arg_int_Post_Sim_Pop_Sampling_Starts_When_Mating_Count_Is
                #self.int_Post_Sim_Pop_Sampling_Starts_When_Mating_Count_Is = self.int_Total_MatingsToSimulatePerReplicate - self.maxAge * 2 #29
                self.int_Sample_Pop_When_Mating_Count_Divisible_By = self.arg_int_Sample_Pop_When_Mating_Count_Divisible_By

                return listReplicateRunParameters

            '''
            GAMO_V1
            '''
            def method_Batch_Run_Parameters__PROD_GAMO_V1(self):

                '''
                ~~~~~~~~~~~~~~~~~~~~
                Replicate Run - Parameter Specification
                ~~~~~~~~~~~~~~~~~~~~
                '''

                ''' Adjust NATURAL Survival to accomodate SENESCENCE '''
                if self.Arg_Allow_Senescence:
                    self.Arg_Survival_Natural = self.Arg_Survival_Natural_Senescence
                else:
                    self.Arg_Survival_Natural = self.Arg_Survival_Natural_No_Senescence
                pass
            
                ''' Allele Frequency specification ''' 
                self.boolInitGenotypeByLoci = False
                self.boolObtainAlleleFrequenciesFromFile = self.Arg_bool_Obtain_Allele_Freqs_From_File
                if self.boolObtainAlleleFrequenciesFromFile:
                    str_Input_File_Path = 'C:\\DCB\\MUI\\MUI_Sync_Auto\\MUI_A_Analyses\\Shared_Data\\'
                    str_Input_File_Name = 'AllAlleleFreqs_Stegostoma Total genotypes 29Sep2014 summary stats_DCB_V2.txt'
                    self.method_Simulation_Run_Obtain_Allele_Frequencies_From_File(str_Input_File_Path, str_Input_File_Name)
                    self.boolInitGenotypeByLoci = True
                    self.intAlleleFrequencyScheme = globalsSS.Allele_Frequency_Distribution.static_int_Allele_Frequency_Distribution_Distribution__ALL_ALLELE_FREQUENCIES_FILE
                else:
                    #self.nLoci = 20
                    self.nLoci = self.Arg_Num_Loci
                    #self.nAllelesPerLoci = 10-1  #Average for 21 CAOB loci
                    self.nAllelesPerLoci = self.Arg_int_Alleles_Per_Locus - 1  
                    '''
                    ------------------
                    Allele Freq Scheme
                    0 - Equal starting allele frequencies - MAXIMAL DIVERSITY (MAF)
                    1 - Randomly generated allele frequencies - RANDOM DRICHLET DIVERSITY (DAF)
                    ------------------
                    '''
                    self.intAlleleFrequencyScheme = self.Arg_int_Allele_Freq_Scheme 
                pass
            
                ''' AgeNe parameter general control '''
                #Ensure the Manual AgeNe parms match what is specified here for the SIM
                self.boolAgeNeParmMatchManualToSim = True
                self.boolAgeNeParmMatchManual_bx_genertated_in_Sim = False
                
                '''
                TESTING - OVERLAPPING GENERATIONS
                WF Diploid Dioecious Sexual Random Mating  
                '''
                listReplicateRunParameters = [
                 #SIMPLE OVERLAPPING GENS - Mating in Aug (8), Gestation 5 months (Feb,2), Resting 1 months (Mar, 3)
                 self.Arg_Pop_Replicates, self.Arg_Mating_Scheme, self.Arg_Mating_Scheme_Polygamy_Num_Mates, [10]    #intReplicates, intMatingSchemeType, intPolygamousMateNumber, listMatingParentSelectionScheme
                 , 3, self.Arg_Pop_Size, self.Arg_BurnIn_Matings                  #intPopulationInitialAges, popnSize, intReplicateBurnInLengthInYears
                 , self.Arg_int_Offspring_Sex_Scheme, 0.5                         #intOffspringSexScheme, floatSexRatioOfMales,
                 , self.Arg_Max_Age, self.Arg_Max_Mating_Age, self.Arg_Min_Mating_Age   #maxAge, maxMatingAge, minMatingAge,
                 , 0, 1, 1.0
                 , self.Arg_list_Offspring_Production_Parms                       #intMinNumOffspring, meanvarnumOffspring, intMaxNumOffspring, listOffspringNumberParameters,
                 , self.nLoci, self.nAllelesPerLoci+1                             #nLoci, nAllelesPerLoci
                 , self.intAlleleFrequencyScheme, self.listAlleleFreqs            #intAlleleFrequencyScheme, listAlleleFreqs
                 , self.Arg_bool_Allow_Mutation, 5e-4, 1                                                  #bool_Allow_Mutation, float_Mutation_Rate, ?????
                 , False, False, [x for x in range(0, self.nLoci)], False, False  #boolReportDemographicNe, boolReportLDNe, listLociToReportNE
                 , self.Arg_int_Mating_Calender_Month                             #intMatingCalenderMonth, 
                 , self.Arg_Parturition_Month, self.Arg_Gestation_Length_In_Months, self.Arg_Reproductive_Rest_Length_In_Months+4  #intParturitionCalenderMonth, intGestationLengthInMonths, intReproductiveRestLengthInMonths + 4 (To ensure the correct rest length)
                 , self.Arg_Evolution_Years, self.Arg_Evolution_Months            #intTotalYearsToSimulate, intTotalMonthsToSimulate
                 , True                                                            #boolSuppressBurnInOutput
                 , True, self.Arg_Mortality_Application_Specs__Nat  #dict_Mortality_Application_Specs_By_Sex__NATURAL
                 , self.Arg_Survival_Natural
                 , self.Arg_Allow_UnNatural_Mortality, self.Arg_Mortality_Application_Specs__UnNat #dict_Mortality_Application_Specs_By_Sex__UnNATURAL
                 , self.Arg_Survival_UnNatural
                 , True
                ]                
                
                self.bool_Export_Genepop_PF_Files = False
                self.bool_Export_Genepop_PF_Files_During_BurnIn = True
                self.int_Genpop_For_BioP_Saving_Starts__Replicate_Mating_Count =  1
                self.int_Genpop_For_BioP_Save_Every__Replicate_Mating_Count = 1 #3
                
                self.int_SimuPop_Saving_Starts__Replicate_Mating_Count =  1 #self.intReplicateBurnInLengthInYears - self.maxAge + 1 #I.E Mating 0 of new lifespan
                self.int_SimuPop_Save_Every__Replicate_Mating_Count = 1
                self.int_Post_Sim_Pop_Sampling_Starts_When_Mating_Count_Is = self.Arg_int_Post_Sim_Pop_Sampling_Starts_When_Mating_Count_Is
                #self.int_Post_Sim_Pop_Sampling_Starts_When_Mating_Count_Is = self.int_Total_MatingsToSimulatePerReplicate - self.maxAge * 2 #29
                self.int_Sample_Pop_When_Mating_Count_Divisible_By = self.arg_int_Sample_Pop_When_Mating_Count_Divisible_By

                return listReplicateRunParameters

                        
            def method_Batch_Run_Parameters__Overlapping_GENS_WF_Diploid_Dioecious_Sexual_Random_Mating_SOG_V1(self):

                ''' Specify string constangs to make parameter specification easier '''
                str_Mating_Mortality_Starts__Nat = globalsSS.MortalityApplication.static_str_Mating_Mortlity_Starts__Nat
                str_Mating_Mortality_Starts__UnNat = globalsSS.MortalityApplication.static_str_Mating_Mortlity_Starts__UnNat
                
                str_Mortality_Application_Model__Nat = globalsSS.MortalityApplication.static_str_Mortality_Application_Model__Nat 
                str_Mortality_Application_Model__UnNat = globalsSS.MortalityApplication.static_str_Mortality_Application_Model__UnNat
                
                ''' Allele Frequency specification ''' 
                self.boolObtainAlleleFrequenciesFromFile = False
                if self.boolObtainAlleleFrequenciesFromFile:
                    str_Input_File_Path = 'C:\\DCB\\MUI\\MUI_Sync_Auto\\MUI_A_Analyses\\Shared_Data\\'
                    str_Input_File_Name = 'GsPy_GP_2014_11_08_17_14_AGL_B2_CAOB_X_14_43_49_Clean_V1_All_Pops_AllAlleleFreqs.txt'
                    self.method_Simulation_Run_Obtain_Allele_Frequencies_From_File(str_Input_File_Path, str_Input_File_Name)
                    self.intAlleleFrequencyScheme = globalsSS.Allele_Frequency_Distribution.static_int_Allele_Frequency_Distribution_Distribution__ALL_ALLELE_FREQUENCIES_FILE
                else:
                    self.nLoci = 20
                    self.nAllelesPerLoci = 10-1
                    #self.intAlleleFrequencyScheme = 3
                    #CODE HAS CHANGED. THIS IS PROB THE Alele_Per_LOcus_Distribution --> self.intAlleleFrequencyScheme = 0 # Equal starting allele frequencies
                    #self.intAlleleFrequencyScheme = 1 # Randomly generated allele frequencies
                
                ''' AgeNe parameter general control '''
                #Ensure the Manual AgeNe parms match what is specified here for the SIM
                self.boolAgeNeParmMatchManualToSim = True
                self.boolAgeNeParmMatchManual_bx_genertated_in_Sim = False
                
                '''
                TESTING - OVERLAPPING GENERATIONS
                WF Diploid Dioecious Sexual Random Mating  
                '''
                listReplicateRunParameters = [
                 #SIMPLE OVERLAPPING GENS - Mating in Aug (8), Gestation 5 months (Feb,2), Resting 1 months (Mar, 3)
                 1000, 21, 3, [10]                                                   #intReplicates, intMatingSchemeType, intPolygamousMateNumber, listMatingParentSelectionScheme
                 , 3, 2000, 127                                                   #intPopulationInitialAges, popnSize, intReplicateBurnInLengthInYears
                 , 1, 0.5                                                         #intOffspringSexScheme, floatSexRatioOfMales,
                 , 4, 3, 1                                                        #maxAge, maxMatingAge, minMatingAge,
                 , 1, 1, 1.0, [1] #[sim.POISSON_DISTRIBUTION,0.5]                        #intMinNumOffspring, meanvarnumOffspring, intMaxNumOffspring, listOffspringNumberParameters,
                 , self.nLoci, self.nAllelesPerLoci+1                             #nLoci, nAllelesPerLoci
                 , self.intAlleleFrequencyScheme, self.listAlleleFreqs            #intAlleleFrequencyScheme, listAlleleFreqs
                 , True, 5e-4, 1                                                  #bool_Allow_Mutation, float_Mutation_Rate, ?????
                 , False, False, [x for x in range(0, self.nLoci)], False, False  #boolReportDemographicNe, boolReportLDNe, listLociToReportNE
                 , 8                                                                ##intMatingCalenderMonth, 
                 , 2, 6, 1+4                                                        #intParturitionCalenderMonth, intGestationLengthInMonths, intReproductiveRestLengthInMonths + 4 (To ensure the correct rest length)
                 #, 9, 13, 4+4                                                        #intParturitionCalenderMonth, intGestationLengthInMonths, intReproductiveRestLengthInMonths + 4 (To ensure the correct rest length)
                 , 0, 8                                                            #intTotalYearsToSimulate, intTotalMonthsToSimulate
                 , True                                                            #boolSuppressBurnInOutput
                 , True, {str_Mating_Mortality_Starts__Nat:{self.strSexMale: 1, self.strSexFemale: 1}, str_Mortality_Application_Model__Nat:{self.strSexMale: 3, self.strSexFemale: 3}}  #dict_Mortality_Application_Specs_By_Sex__NATURAL
                 , {self.strSexMale:{12:0.85, 24:0.85, 36:0.0, 48:0.0}
                 ,  self.strSexFemale:{12:0.85, 24:0.85, 36:0.0, 48:0.0}}
#                 , {self.strSexMale:{12:0.85, 24:0.85, 36:0.85, 48:0.0}
#                 ,  self.strSexFemale:{12:0.85, 24:0.85, 36:0.85, 48:0.0}}
                 , False, {str_Mating_Mortality_Starts__UnNat:{self.strSexMale: 19, self.strSexFemale: 19}, str_Mortality_Application_Model__UnNat:{self.strSexMale: 3, self.strSexFemale: 3}} #dict_Mortality_Application_Specs_By_Sex__UnNATURAL
                 , {self.strSexMale:{12:0.95, 24:0.95, 36:0.95, 48:0.0}
                 ,  self.strSexFemale:{12:0.95, 24:0.95, 36:0.95, 48:0.0}}
                 , True
                ]    
                
                self.bool_Export_Genepop_PF_Files = True
                self.bool_Export_Genepop_PF_Files_During_BurnIn = True
                self.int_Genpop_For_BioP_Saving_Starts__Replicate_Mating_Count =  1
                self.int_Genpop_For_BioP_Save_Every__Replicate_Mating_Count = 16
                
                self.int_SimuPop_Saving_Starts__Replicate_Mating_Count =  1 #self.intReplicateBurnInLengthInYears - self.maxAge + 1 #I.E Mating 0 of new lifespan
                self.int_SimuPop_Save_Every__Replicate_Mating_Count = 1
                self.int_Post_Sim_Pop_Sampling_Starts_When_Mating_Count_Is = 16
                self.int_Sample_Pop_When_Mating_Count_Divisible_By = 3                    
                return listReplicateRunParameters
            
            def method_Batch_Run_Parameters__Overlapping_GENS_WF_Diploid_Dioecious_Sexual_Random_Mating_SOG_V2(self):

                ''' Specify string constangs to make parameter specification easier '''
                str_Mating_Mortality_Starts__Nat = globalsSS.MortalityApplication.static_str_Mating_Mortlity_Starts__Nat
                str_Mating_Mortality_Starts__UnNat = globalsSS.MortalityApplication.static_str_Mating_Mortlity_Starts__UnNat
                
                str_Mortality_Application_Model__Nat = globalsSS.MortalityApplication.static_str_Mortality_Application_Model__Nat 
                str_Mortality_Application_Model__UnNat = globalsSS.MortalityApplication.static_str_Mortality_Application_Model__UnNat
                
                ''' Allele Frequency specification ''' 
                self.boolObtainAlleleFrequenciesFromFile = False
                if self.boolObtainAlleleFrequenciesFromFile:
                    str_Input_File_Path = 'C:\\DCB\\MUI\\MUI_Sync_Auto\\MUI_A_Analyses\\Shared_Data\\'
                    str_Input_File_Name = 'GsPy_GP_2014_11_08_17_14_AGL_B2_CAOB_X_14_43_49_Clean_V1_All_Pops_AllAlleleFreqs.txt'
                    self.method_Simulation_Run_Obtain_Allele_Frequencies_From_File(str_Input_File_Path, str_Input_File_Name)
                    self.intAlleleFrequencyScheme = globalsSS.Allele_Frequency_Distribution.static_int_Allele_Frequency_Distribution_Distribution__ALL_ALLELE_FREQUENCIES_FILE
                else:
                    self.nLoci = 20
                    self.nAllelesPerLoci = 10-1
                    #self.intAlleleFrequencyScheme = 3
                    #CODE HAS CHANGED. THIS IS PROB THE Alele_Per_LOcus_Distribution --> self.intAlleleFrequencyScheme = 0 # Equal starting allele frequencies
                    #self.intAlleleFrequencyScheme = 1 # Randomly generated allele frequencies
                
                ''' AgeNe parameter general control '''
                #Ensure the Manual AgeNe parms match what is specified here for the SIM
                self.boolAgeNeParmMatchManualToSim = True
                self.boolAgeNeParmMatchManual_bx_genertated_in_Sim = False
                
                '''
                TESTING - OVERLAPPING GENERATIONS
                WF Diploid Dioecious Sexual Random Mating  
                '''
                listReplicateRunParameters = [
                 #SIMPLE OVERLAPPING GENS - Mating in Aug (8), Gestation 5 months (Feb,2), Resting 1 months (Mar, 3)
                 1, 21, 3, [10]                                                   #intReplicates, intMatingSchemeType, intPolygamousMateNumber, listMatingParentSelectionScheme
                 , 3, 5000, 12                                                   #intPopulationInitialAges, popnSize, intReplicateBurnInLengthInYears
                 , 1, 0.5                                                         #intOffspringSexScheme, floatSexRatioOfMales,
                 , 4, 3, 1                                                        #maxAge, maxMatingAge, minMatingAge,
                 , 1, 1, 1.0, [1] #[sim.POISSON_DISTRIBUTION,0.5]                        #intMinNumOffspring, meanvarnumOffspring, intMaxNumOffspring, listOffspringNumberParameters,
                 , self.nLoci, self.nAllelesPerLoci+1                             #nLoci, nAllelesPerLoci
                 , self.intAlleleFrequencyScheme, self.listAlleleFreqs            #intAlleleFrequencyScheme, listAlleleFreqs
                 , True, 5e-4, 1                                                  #bool_Allow_Mutation, float_Mutation_Rate, ?????
                 , False, False, [x for x in range(0, self.nLoci)], False, False  #boolReportDemographicNe, boolReportLDNe, listLociToReportNE
                 , 8                                                                ##intMatingCalenderMonth, 
                 , 2, 6, 1+4                                                        #intParturitionCalenderMonth, intGestationLengthInMonths, intReproductiveRestLengthInMonths + 4 (To ensure the correct rest length)
                 #, 9, 13, 4+4                                                        #intParturitionCalenderMonth, intGestationLengthInMonths, intReproductiveRestLengthInMonths + 4 (To ensure the correct rest length)
                 , 0, 8                                                            #intTotalYearsToSimulate, intTotalMonthsToSimulate
                 , True                                                            #boolSuppressBurnInOutput
                 , True, {str_Mating_Mortality_Starts__Nat:{self.strSexMale: 1, self.strSexFemale: 1}, str_Mortality_Application_Model__Nat:{self.strSexMale: 3, self.strSexFemale: 3}}  #dict_Mortality_Application_Specs_By_Sex__NATURAL
                 , {self.strSexMale:{12:0.85, 24:0.85, 36:0.85, 48:0.0, 60:0.0}
                 ,  self.strSexFemale:{12:0.85, 24:0.85, 36:0.85, 48:0.0, 60:0.0}}
#                 , {self.strSexMale:{12:0.85, 24:0.85, 36:0.85, 48:0.0}
#                 ,  self.strSexFemale:{12:0.85, 24:0.85, 36:0.85, 48:0.0}}
                 #, False, {str_Mating_Mortality_Starts__UnNat:{self.strSexMale: 19, self.strSexFemale: 19}, str_Mortality_Application_Model__UnNat:{self.strSexMale: 3, self.strSexFemale: 3}} #dict_Mortality_Application_Specs_By_Sex__UnNATURAL
                 , True, {globalsSS.MortalityApplication.static_str_Mating_Mortlity_Starts__UnNat:{self.strSexMale: 6, self.strSexFemale: 6}, globalsSS.MortalityApplication.static_str_Mortality_Application_Model__UnNat:{self.strSexMale: 3, self.strSexFemale: 3}, globalsSS.MortalityApplication.static_str_Mortality_Scaling_Total__UnNat:{self.strSexMale: 140, self.strSexFemale: 135}} #dict_Mortality_Application_Specs_By_Sex__UnNATURAL     
                 , {self.strSexMale:{12:0.95, 24:0.95, 36:0.85, 48:0.95, 60:0.95}
                 ,  self.strSexFemale:{12:0.95, 24:0.95, 36:0.85, 48:0.95, 60:0.95}}
                 , True
                ]    
                
                self.Arg_Survival_UnNatural = {self.strSexMale:{12:0.95, 24:0.95, 36:0.85, 48:0.95}
                 ,  self.strSexFemale:{12:0.95, 24:0.95, 36:0.85, 48:0.95, 60:0.95}}
                self.bool_Export_Genepop_PF_Files = True
                self.bool_Export_Genepop_PF_Files_During_BurnIn = True
                self.int_Genpop_For_BioP_Saving_Starts__Replicate_Mating_Count =  1
                self.int_Genpop_For_BioP_Save_Every__Replicate_Mating_Count = 16
                
                self.int_SimuPop_Saving_Starts__Replicate_Mating_Count =  1 #self.intReplicateBurnInLengthInYears - self.maxAge + 1 #I.E Mating 0 of new lifespan
                self.int_SimuPop_Save_Every__Replicate_Mating_Count = 1
                self.int_Post_Sim_Pop_Sampling_Starts_When_Mating_Count_Is = 16
                self.int_Sample_Pop_When_Mating_Count_Divisible_By = 3                    
                return listReplicateRunParameters


            '''
            SDG_V1
            '''
            def method_Batch_Run_Parameters__DISCRETE_GENS_WF_Diploid_Dioecious_Sexual_Random_Mating(self):

                ''' Specify string constangs to make parameter specification easier '''
                str_Mating_Mortality_Starts__Nat = globalsSS.MortalityApplication.static_str_Mating_Mortlity_Starts__Nat
                str_Mating_Mortality_Starts__UnNat = globalsSS.MortalityApplication.static_str_Mating_Mortlity_Starts__UnNat
                
                str_Mortality_Application_Model__Nat = globalsSS.MortalityApplication.static_str_Mortality_Application_Model__Nat 
                str_Mortality_Application_Model__UnNat = globalsSS.MortalityApplication.static_str_Mortality_Application_Model__UnNat
                
                ''' Allele Frequency specification ''' 
                self.boolInitGenotypeByLoci = False
                self.boolObtainAlleleFrequenciesFromFile = False
                if self.boolObtainAlleleFrequenciesFromFile:
                    self.method_Simulation_Run_Obtain_Allele_Frequencies_From_File()
                    self.intAlleleFrequencyScheme = globalsSS.Allele_Frequency_Distribution.static_int_Allele_Frequency_Distribution_Distribution__ALL_ALLELE_FREQUENCIES_FILE
                else:
                    self.nLoci = 20
                    self.nAllelesPerLoci = 10-1
                    #self.intAlleleFrequencyScheme = 3
                    #CODE HAS CHANGED. THIS IS PROB THE Alele_Per_LOcus_Distribution --> self.intAlleleFrequencyScheme = 0 # Equal starting allele frequencies
                    #self.intAlleleFrequencyScheme = 1 # Randomly generated allele frequencies
                
                #Ensure the Manual AgeNe parms match what is specified here for the SIM
                self.boolAgeNeParmMatchManualToSim = True
                self.boolAgeNeParmMatchManual_bx_genertated_in_Sim = False
                                  
                '''
                DISCRETE GENERATIONS
                WF Diploid Dioecious Sexual Random Mating  
                '''
                listReplicateRunParameters = [
                  #WRIGHT-FISHER GENS - Mating in Aug (8), Gestation 5 months (Feb,2), Resting 1 months (Mar, 3)
                  1000, 21, 3, [10]                                                   #intReplicates, intMatingSchemeType, intPolygamousMateNumber, listMatingParentSelectionScheme
                  , 4, 1000, 127                                                   #intPopulationInitialAges, popnSize, intReplicateBurnInLengthInYears
                  , 0, 0.5                                                         #intOffspringSexScheme, floatSexRatioOfMales,
                  , 3, 2, 1                                                        #maxAge, maxMatingAge, minMatingAge,
                  , 1, 1, 1, [1] #[sim.POISSON_DISTRIBUTION,0.5] [sim.GEOMETRIC_DISTRIBUTION, 0.99] #                        #intMinNumOffspring, meanvarnumOffspring, intMaxNumOffspring, listOffspringNumberParameters,
                  , self.nLoci, self.nAllelesPerLoci+1                             #nLoci, nAllelesPerLoci
                  , self.intAlleleFrequencyScheme, self.listAlleleFreqs            #intAlleleFrequencyScheme, listAlleleFreqs
                  , True, 5e-4, 1                                                  #bool_Allow_Mutation, float_Mutation_Rate, ?????
                  , False, False, [x for x in range(0, self.nLoci)], False, False   #boolReportDemographicNe, self.boolReportLDNe,
                  , 8                                                                ##intMatingCalenderMonth, 
                  #, 9, 1, 0                                                        #intParturitionCalenderMonth, intGestationLengthInMonths, intReproductiveRestLengthInMonths + 4 (To ensure the correct rest length)
                  , 2, 6, 1+4                                                        #intParturitionCalenderMonth, intGestationLengthInMonths, intReproductiveRestLengthInMonths + 4 (To ensure the correct rest length)
                  #, 9, 13, 4+4                                                        #intParturitionCalenderMonth, intGestationLengthInMonths, intReproductiveRestLengthInMonths
                  , 0, 8                                                            #intTotalYearsToSimulate, intTotalMonthsToSimulate
                  , True                                                            #boolSuppressBurnInOutput
                  , True, {str_Mating_Mortality_Starts__Nat:{self.strSexMale: 1, self.strSexFemale: 1}, str_Mortality_Application_Model__Nat:{self.strSexMale: 3, self.strSexFemale: 3}}  #dict_Mortality_Application_Specs_By_Sex__NATURAL
                  , {self.strSexMale:{12:1.0, 24:0.0, 36:0.0}
                  , self.strSexFemale:{12:1.0, 24:0.0, 36:0.0}}
                  , False, {str_Mating_Mortality_Starts__UnNat:{self.strSexMale:493, self.strSexFemale: 493}, str_Mortality_Application_Model__UnNat:{self.strSexMale: 3, self.strSexFemale: 3}} #dict_Mortality_Application_Specs_By_Sex__UnNATURAL
                  , {self.strSexMale:{12:1.0, 24:0.0, 36:0.0}
                  , self.strSexFemale:{12:1.0, 24:0.0, 36:0.0}}
                  , True
                ]                
                
                self.bool_Export_Genepop_PF_Files = True
                self.bool_Export_Genepop_PF_Files_During_BurnIn = True
                self.int_Genpop_For_BioP_Saving_Starts__Replicate_Mating_Count =  1
                self.int_Genpop_For_BioP_Save_Every__Replicate_Mating_Count = 16
                
                self.int_SimuPop_Saving_Starts__Replicate_Mating_Count =  1 #self.intReplicateBurnInLengthInYears - self.maxAge + 1 #I.E Mating 0 of new lifespan
                self.int_SimuPop_Save_Every__Replicate_Mating_Count = 16
                self.int_Post_Sim_Pop_Sampling_Starts_When_Mating_Count_Is = 494
                self.int_Sample_Pop_When_Mating_Count_Divisible_By = 3               
                
                return listReplicateRunParameters
 

            def method_Single_Run_Simulation_Parameters(self):

                self.method_Initialise_Single_Run_Simulation_Parameters()
                

                #listRunParameters = []
                self.listBatchRunParameters.append([
                                            #--> # Replicates - This must always be the first parameter in the list        
                                            self.intReplicates,
                                            #<--    
                                            self.intMatingSchemeType,
                                            self.listMatingParentSelectionScheme,
                                            self.intPopulationInitialAges,
                                            self.popnSize,
                                            self.intReplicateBurnInLengthInYears,
                                            self.floatSexRatioOfMales,
                                            self.maxAge,
                                            self.maxMatingAge,
                                            self.minMatingAge,
                                            self.intMinNumOffspring,
                                            self.meanvarnumOffspring,
                                            self.intMaxNumOffspring,
                                            self.listOffspringNumberParameters,
                                            self.nLoci,
                                            self.nAllelesPerLoci,
                                            self.intAlleleFrequencyScheme,
                                            self.listAlleleFreqs,
                                            
                                            #Reporting vars
                                            self.boolReportDemographicNe,
                                            self.boolReportLDNe,
                                            self.listLociToReportNE,
                                            self.boolReportTemporalFS_P1_Ne,
                                            self.boolReportTemporalFS_P2_Ne,
                                            self.intMatingCalenderMonth,
                                            self.intParturitionCalenderMonth,
                                            self.intGestationLengthInMonths,
                                            self.intReproductiveRestLengthInMonths,
                                            self.intTotalYearsToSimulate,
                                            self.intTotalMonthsToSimulate,
                                            self.boolSuppressBurnInOutput,
                                            #mortality vars
                                            self.boolAllowNATURALMortality,
                                            self.dictProbabilityDistribution_P_SurvivalNATURALBySexByAge,
                                            self.boolAllowUnNATURALMortality,
                                            self.dictProbabilityDistribution_P_SurvivalUnNATURALBySexByAge,
                                            self.boolReportSimAgeNe
                                            ])
            
                return True
            
            def method_Batch_Current_Batch_Experiment_Parameter_Initialization(self):
            
                intLargeSample = int(round(0.1*self.popnSize,0))
                intSmallSample = 500
                intLargeReplicates = 10
                intSmallReplicates = 1
                
                listLociToReport = range(0, self.nLoci)
                #listLociToReport = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]
                
                self.boolReport_Custom_1 = False
                self.intLDNe_Experiments_Custom_1_Sample_Size = intLargeSample
                self.listLDNe_Experiments_Custom_1_Loci_To_Report = listLociToReport
                self.intLDNe_Experiments_Custom_1_Replicates = 1
                
                self.boolReport_Custom_2 = False
                self.listLDNe_Experiments_Custom_2_VSP_List_To_Sample = [(0,2)]
                #self.listLDNe_Experiments_Custom_2_VSP_List_To_Sample = [(0,1)]
                self.intLDNe_Experiments_Custom_2_Sample_Size = intLargeSample
                self.listLDNe_Experiments_Custom_2_Loci_To_Report = listLociToReport
                self.intLDNe_Experiments_Custom_2_Replicates = intLargeReplicates
                
                self.boolReport_Custom_4 = False
                self.listLDNe_Experiments_Custom_4_VSP_List_To_Sample = [0]
                self.intLDNe_Experiments_Custom_4_Sample_Size =  intSmallSample
                self.listLDNe_Experiments_Custom_4_Loci_To_Report = listLociToReport
                self.intLDNe_Experiments_Custom_4_Replicates = intLargeReplicates
                #self.listReport_Custom_4_Sim_Year_Sample_Required = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32]
                #self.odictAgeCohortSampleNumbers = OrderedDict([(0,7),(12,19),(24,17),(36,17),(48,7),(60,4),(72,2),(96,4),(108,11),(120,16),(132,32),(144,25),(156,56),(168,50),(180,67),(192,46),(204,29),(216,22),(228,13),(240,17),(252,7),(264,6),(276,0),(288,0),(300,1),(312,0),(324,1),(336,0),(348,0),(360,0)])
                self.odictAgeCohortSampleNumbers = OrderedDict([(0,10),(12,10),(24,10),(36,10)])
                self.listReport_Custom_4_Sim_Year_Sample_Required = [0,1,2,3,4]
                #self.listReport_Custom_4_Sim_Year_Sample_Required = [31]
                
                self.boolReport_Custom_5 = False
                self.listLDNe_Experiments_Custom_5_VSP_List_To_Sample = [0]
                self.intLDNe_Experiments_Custom_5_Sample_Size = intLargeSample
                self.listLDNe_Experiments_Custom_5_Loci_To_Report = listLociToReport
                self.intLDNe_Experiments_Custom_5_Replicates = intLargeReplicates
                self.listReport_Custom_5_Sim_Year_Sample_Required = [4]
                #self.listReport_Custom_5_Sim_Year_Sample_Required = [6]
                    
                
                pass
            
          
            def method_Batch_Custom_1_Output_Reporting_Detail(self):
                '''
                e.g. self.dictOutputReportingDetail ={object1: {Dict_Of_Object_Properties_Not_Suppressed: dictOfObjectPropertiesNotSuppressed},{Dict_Of_Object_Properties_To_Report: dictOfObjectPropertiesToReport}}
                
                '''

                ''' Keep this as a template'''
#                 self.dictPropertiesNotSuppressed = {
#                                     'objCustom_1_Reporting':
#                                         [
#                                          {globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Data_Section_Note[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed}
#                                         ,{globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Sub_Pop_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed}
#                                         ,{globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Sub_Pop_Size_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed}
#                                         ,{globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_demographic_ne_loci_1_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed}
#                                         ,{globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_temporal_JR_P1_ne_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput}
#                                         ,{globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_temporal_JR_P1_ne_2_5_CI_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput}
#                                         ,{globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_temporal_JR_P1_ne_97_5_CI_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput}
#                                         ,{globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_temporal_JR_P2_ne_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput}
#                                         ,{globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_temporal_JR_P2_ne_2_5_CI_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput}
#                                         ,{globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_temporal_JR_P2_ne_97_5_CI_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput}
#                                         ,{globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput}
#                                         ,{globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_lwr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput}
#                                         ,{globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_upr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput}
#                                         ,{globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_05_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput}
#                                         ,{globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_05_lwr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput}
#                                         ,{globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_05_upr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput}
#                                         ,{globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_02_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput}
#                                         ,{globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_02_lwr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput}
#                                         ,{globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_02_upr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput}
#                                         ,{globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_01_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput}
#                                         ,{globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_01_lwr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput}
#                                         ,{globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_01_upr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput}
#                                         ,{globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Loci_Allele_Totals_Per_Locus_List_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput}
#                                         ,{globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Loci_Allele_Instance_Count_List_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput}
#                                         ,{globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Loci_Allele_Frequencies_List_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput}
#                                         ,{globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Num_Sire_Parent[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed}
#                                         ,{globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Mean_Offspring_Per_Sire_Parent[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed}
#                                         ,{globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Mean_Variance_Offspring_Per_Sire_Parent[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed}
#                                         ,{globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Num_Male_Potential_Parent[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed}
#                                         ,{globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Mean_Offspring_Per_Male_Potential_Parent[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed}
#                                         ,{globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Variance_Offspring_Per_Male_Potential_Parent[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed}
#                                         ,{globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Ne_Demographic_From_Known_Offspring_Given_Male_Potential_Parents[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed}
#                                         ,{globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Num_Dame_Parent[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed}
#                                         ,{globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Mean_Offspring_Per_Dame_Parent[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed}
#                                         ,{globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Mean_Variance_Offspring_Per_Dame_Parent[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed}
#                                         ,{globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Num_Female_Potential_Parent[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed}
#                                         ,{globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Mean_Offspring_Per_Female_Potential_Parent[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed}
#                                         ,{globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Variance_Offspring_Per_Female_Potential_Parent[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed}
#                                         ,{globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Ne_Demographic_From_Known_Offspring_Given_Female_Potential_Parents[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed}
#                                         ,{globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Num_Actual_Parent[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed}
#                                         ,{globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Mean_Offspring_Per_Actual_Parent[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed}
#                                         ,{globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Mean_Variance_Offspring_Per_Actual_Parent[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed}
#                                         ,{globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Num_Actual_Potential_Parent[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed}
#                                         ,{globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Mean_Offspring_Per_Actual_Potential_Parent[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed}
#                                         ,{globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Variance_Offspring_Per_Actual_Potential_Parent[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed}
#                                         ,{globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Ne_Demographic_From_Known_Offspring_Given_Actual_Potential_Parents[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed}
#                                         ,{globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Ne_Demographic_From_Known_Offspring_Given_Both_Sexes_Potential_Parents_Ne_Rato_Nc_Potential_Parents[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed}
#                                         ],
#                                     'objCustom_1_Reporting_Experiment_0':
#                                         [
#                                          {globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Sub_Pop_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed}
#                                         ,{globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Sub_Pop_Size_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed}
#                                         ,{globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput}
#                                         ,{globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_lwr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput}
#                                         ,{globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_upr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput}
#                                         ,{globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_05_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput}
#                                         ,{globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_05_lwr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput}
#                                         ,{globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_05_upr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput}
#                                         ,{globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_02_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput}
#                                         ,{globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_02_lwr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput}
#                                         ,{globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_02_upr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput}
#                                         ,{globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_01_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput}
#                                         ,{globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_01_lwr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput}
#                                         ,{globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_01_upr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput}
#                                         ]
#                                     }

                self.dictCustom_1_PropertiesNotSuppressed = {
                                    'objCustom_1_Reporting':
                                         {globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Data_Section_Note[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Sub_Pop_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Sub_Pop_Size_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_demographic_ne_loci_1_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_temporal_JR_P1_ne_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_temporal_JR_P1_ne_2_5_CI_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_temporal_JR_P1_ne_97_5_CI_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_temporal_JR_P2_ne_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_temporal_JR_P2_ne_2_5_CI_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_temporal_JR_P2_ne_97_5_CI_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_lwr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_upr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_05_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_05_lwr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_05_upr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_02_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_02_lwr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_02_upr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_01_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_01_lwr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_01_upr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Loci_Allele_Totals_Per_Locus_List_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Loci_Allele_Instance_Count_List_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Loci_Allele_Frequencies_List_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Num_Sire_Parent[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Mean_Offspring_Per_Sire_Parent[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Mean_Variance_Offspring_Per_Sire_Parent[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Num_Male_Potential_Parent[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Mean_Offspring_Per_Male_Potential_Parent[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Variance_Offspring_Per_Male_Potential_Parent[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Ne_Demographic_From_Known_Offspring_Given_Male_Potential_Parents[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Num_Dame_Parent[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Mean_Offspring_Per_Dame_Parent[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Mean_Variance_Offspring_Per_Dame_Parent[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Num_Female_Potential_Parent[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Mean_Offspring_Per_Female_Potential_Parent[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Variance_Offspring_Per_Female_Potential_Parent[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Ne_Demographic_From_Known_Offspring_Given_Female_Potential_Parents[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Num_Actual_Parent[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Mean_Offspring_Per_Actual_Parent[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Mean_Variance_Offspring_Per_Actual_Parent[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Num_Actual_Potential_Parent[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Mean_Offspring_Per_Actual_Potential_Parent[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Variance_Offspring_Per_Actual_Potential_Parent[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Ne_Demographic_From_Known_Offspring_Given_Actual_Potential_Parents[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Ne_Demographic_From_Known_Offspring_Given_Both_Sexes_Potential_Parents_Ne_Rato_Nc_Potential_Parents[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        },
                                    'objCustom_1_Reporting_Experiment_0':
                                        {
                                         globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Sub_Pop_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Sub_Pop_Size_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_lwr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_upr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_05_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_05_lwr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_05_upr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_02_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_02_lwr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_02_upr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_01_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_01_lwr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_01_upr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
#                                         },
#                                     'objCustom_1_Reporting_Experiment_1':
#                                         {
#                                          globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Sub_Pop_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Sub_Pop_Size_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_lwr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_upr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_05_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_05_lwr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_05_upr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_02_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_02_lwr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_02_upr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_01_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_01_lwr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_01_upr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        }
                                    }

                self.dictCustom_1_OfObjectPropertiesToReport = {'0':
                                   {'objCustom_1_Reporting':
                                        [
                                        #globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Data_Section_Note[0]
                                        globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_01_upr_ci_VSP[0]
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Loci_Allele_Totals_Per_Locus_List_VSP[0]
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Loci_Allele_Instance_Count_List_VSP[0]
#
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Sub_Pop_VSP[0]
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Sub_Pop_Size_VSP[0]
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_demographic_ne_loci_1_VSP[0]
                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Num_Sire_Parent[0]
                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Mean_Offspring_Per_Sire_Parent[0]
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Mean_Variance_Offspring_Per_Sire_Parent[0]
                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Num_Male_Potential_Parent[0]
                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Mean_Offspring_Per_Male_Potential_Parent[0]
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Variance_Offspring_Per_Male_Potential_Parent[0]
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Ne_Demographic_From_Known_Offspring_Given_Male_Potential_Parents[0]
                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Num_Dame_Parent[0]
                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Mean_Offspring_Per_Dame_Parent[0]
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Mean_Variance_Offspring_Per_Dame_Parent[0]
                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Num_Female_Potential_Parent[0]
                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Mean_Offspring_Per_Female_Potential_Parent[0]
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Variance_Offspring_Per_Female_Potential_Parent[0]
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Ne_Demographic_From_Known_Offspring_Given_Female_Potential_Parents[0]
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Num_Actual_Parent[0]
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Mean_Offspring_Per_Actual_Parent[0]
                                        #,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Mean_Variance_Offspring_Per_Actual_Parent[0]
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Num_Actual_Potential_Parent[0]
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Mean_Offspring_Per_Actual_Potential_Parent[0]
                                        #,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Variance_Offspring_Per_Actual_Potential_Parent[0]
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Ne_Demographic_From_Known_Offspring_Given_Actual_Potential_Parents[0]
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Ne_Demographic_From_Known_Offspring_Given_Both_Sexes_Potential_Parents_Ne_Rato_Nc_Potential_Parents[0]
                                        
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_AgeNe_Manual_CalculatedTotals_listProperties_1[0]
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_AgeNe_Manual_CalculatedTotals_listProperties_2[0]
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_AgeNe_Manual_CalculatedTotals_listProperties_3[0]
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_AgeNe_Manual_CalculatedTotals_listProperties_4[0]
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_AgeNe_Manual_CalculatedTotals_listProperties_5[0]
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_AgeNe_Manual_CalculatedTotals_listProperties_6[0]
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_AgeNe_Manual_CalculatedTotals_listProperties_7[0]
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_AgeNe_Manual_CalculatedTotals_listProperties_8[0]
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_AgeNe_Manual_CalculatedTotals_listProperties_9[0]
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_AgeNe_Manual_CalculatedTotals_listProperties_10[0]
                                        
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_AgeNe_Sim_CalculatedTotals_listProperties_1[0]
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_AgeNe_Sim_CalculatedTotals_listProperties_2[0]
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_AgeNe_Sim_CalculatedTotals_listProperties_3[0]
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_AgeNe_Sim_CalculatedTotals_listProperties_4[0]
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_AgeNe_Sim_CalculatedTotals_listProperties_5[0]
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_AgeNe_Sim_CalculatedTotals_listProperties_6[0]
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_AgeNe_Sim_CalculatedTotals_listProperties_7[0]
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_AgeNe_Sim_CalculatedTotals_listProperties_8[0]
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_AgeNe_Sim_CalculatedTotals_listProperties_9[0]
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_AgeNe_Sim_CalculatedTotals_listProperties_10[0]

                                    ]},
                                    '1':                   
                                    {'objCustom_1_Reporting_Experiment_0':
                                         [
                                             globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Sub_Pop_VSP[0]
                                            ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Sub_Pop_Size_VSP[0]
                                            ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_VSP[0]
                                            ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_lwr_ci_VSP[0]
                                            ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_upr_ci_VSP[0]
                                            ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_05_VSP[0]
                                            ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_05_lwr_ci_VSP[0]
                                            ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_05_upr_ci_VSP[0]
                                            ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_02_VSP[0]
                                            ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_02_lwr_ci_VSP[0]
                                            ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_02_upr_ci_VSP[0]
                                            ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_01_VSP[0]
                                            ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_01_lwr_ci_VSP[0]
                                            ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_01_upr_ci_VSP[0]
#                                          ]},
#                                     '2':                   
#                                     {'objCustom_1_Reporting_Experiment_1':
#                                          [
#                                           globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Sub_Pop_VSP[0]
#                                          ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Sub_Pop_Size_VSP[0]
#                                          ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_VSP[0]
#                                          ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_lwr_ci_VSP[0]
#                                          ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_upr_ci_VSP[0]
#                                          ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_05_VSP[0]
#                                          ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_05_lwr_ci_VSP[0]
#                                          ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_05_upr_ci_VSP[0]
#                                          ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_02_VSP[0]
#                                          ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_02_lwr_ci_VSP[0]
#                                          ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_02_upr_ci_VSP[0]
#                                          ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_01_VSP[0]
#                                          ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_01_lwr_ci_VSP[0]
#                                          ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_01_upr_ci_VSP[0]
                                         ]}
                                    }
                self.dictCustom_1_OutputReportingDetail['obj_SSParams']['Dict_Of_Object_Properties_Not_Suppressed'] = self.dictCustom_1_PropertiesNotSuppressed
                self.dictCustom_1_OutputReportingDetail['obj_SSParams']['Dict_Of_Object_Properties_To_Report'] = self.dictCustom_1_OfObjectPropertiesToReport
                
                pass
            
            def method_Batch_Custom_2_Output_Reporting_Detail(self):
                '''
                e.g. self.dictOutputReportingDetail ={object1: {Dict_Of_Object_Properties_Not_Suppressed: dictOfObjectPropertiesNotSuppressed},{Dict_Of_Object_Properties_To_Report: dictOfObjectPropertiesToReport}}
                
                '''
                self.dictCustom_2_PropertiesNotSuppressed = {
                                     'objSSSimulation':
                                         {
                                        globalsSS.ObjectReportingPropertyLabels.static_SSSimulation_listProperties_1[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput
                                        ,globalsSS.ObjectReportingPropertyLabels.static_SSSimulation_listProperties_2[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectReportingPropertyLabels.static_SSSimulation_listProperties_3[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectReportingPropertyLabels.static_SSSimulation_listProperties_4[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectReportingPropertyLabels.static_SSSimulation_listProperties_5[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectReportingPropertyLabels.static_SSSimulation_listProperties_6[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput
                                        ,globalsSS.ObjectReportingPropertyLabels.static_SSSimulation_listProperties_7[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput
                                        ,globalsSS.ObjectReportingPropertyLabels.static_SSSimulation_listProperties_8[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput
                                        ,globalsSS.ObjectReportingPropertyLabels.static_SSSimulation_listProperties_9[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        },
                                    'objCustom_2_Reporting':
                                         {globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Data_Section_Note[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Sub_Pop_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Sub_Pop_Size_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_demographic_ne_loci_1_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_temporal_JR_P1_ne_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_temporal_JR_P1_ne_2_5_CI_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_temporal_JR_P1_ne_97_5_CI_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_temporal_JR_P2_ne_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_temporal_JR_P2_ne_2_5_CI_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_temporal_JR_P2_ne_97_5_CI_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_lwr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_upr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_05_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_05_lwr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_05_upr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_02_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_02_lwr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_02_upr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_01_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_01_lwr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_01_upr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Loci_Allele_Totals_Per_Locus_List_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Loci_Allele_Instance_Count_List_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Loci_Allele_Frequencies_List_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Num_Sire_Parent[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Mean_Offspring_Per_Sire_Parent[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Mean_Variance_Offspring_Per_Sire_Parent[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Num_Male_Potential_Parent[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Mean_Offspring_Per_Male_Potential_Parent[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Variance_Offspring_Per_Male_Potential_Parent[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Ne_Demographic_From_Known_Offspring_Given_Male_Potential_Parents[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Num_Dame_Parent[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Mean_Offspring_Per_Dame_Parent[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Mean_Variance_Offspring_Per_Dame_Parent[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Num_Female_Potential_Parent[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Mean_Offspring_Per_Female_Potential_Parent[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Variance_Offspring_Per_Female_Potential_Parent[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Ne_Demographic_From_Known_Offspring_Given_Female_Potential_Parents[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Num_Actual_Parent[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Mean_Offspring_Per_Actual_Parent[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Mean_Variance_Offspring_Per_Actual_Parent[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Num_Actual_Potential_Parent[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Mean_Offspring_Per_Actual_Potential_Parent[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Variance_Offspring_Per_Actual_Potential_Parent[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Ne_Demographic_From_Known_Offspring_Given_Actual_Potential_Parents[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Ne_Demographic_From_Known_Offspring_Given_Both_Sexes_Potential_Parents_Ne_Rato_Nc_Potential_Parents[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        },
                                    'objCustom_2_Reporting_Experiment_0':
                                        {
                                         globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Sub_Pop_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Sub_Pop_Size_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_lwr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_upr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_05_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_05_lwr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_05_upr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_02_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_02_lwr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_02_upr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_01_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_01_lwr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_01_upr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
#                                         },
#                                     'objCustom_1_Reporting_Experiment_1':
#                                         {
#                                          globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Sub_Pop_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Sub_Pop_Size_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_lwr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_upr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_05_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_05_lwr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_05_upr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_02_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_02_lwr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_02_upr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_01_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_01_lwr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_01_upr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        }
                                    }

                self.dictCustom_2_OfObjectPropertiesToReport = {
                                    '0':
                                   {'objSSSimulation':
                                        [
                                         globalsSS.ObjectReportingPropertyLabels.static_SSSimulation_listProperties_1[0]
                                        ,globalsSS.ObjectReportingPropertyLabels.static_SSSimulation_listProperties_2[0]
                                        ,globalsSS.ObjectReportingPropertyLabels.static_SSSimulation_listProperties_3[0]
                                        ,globalsSS.ObjectReportingPropertyLabels.static_SSSimulation_listProperties_4[0]
                                        ,globalsSS.ObjectReportingPropertyLabels.static_SSSimulation_listProperties_5[0]
                                        ,globalsSS.ObjectReportingPropertyLabels.static_SSSimulation_listProperties_6[0]
                                        ,globalsSS.ObjectReportingPropertyLabels.static_SSSimulation_listProperties_7[0]
                                        ,globalsSS.ObjectReportingPropertyLabels.static_SSSimulation_listProperties_8[0]
                                        ,globalsSS.ObjectReportingPropertyLabels.static_SSSimulation_listProperties_9[0]
                                    ]},
                                    '1':
                                   {'objCustom_2_Reporting':
                                        [
                                        #globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Data_Section_Note[0]
                                        globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Sub_Pop_VSP[0]
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Sub_Pop_Size_VSP[0]
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_demographic_ne_loci_1_VSP[0]
                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Num_Sire_Parent[0]
                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Mean_Offspring_Per_Sire_Parent[0]
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Mean_Variance_Offspring_Per_Sire_Parent[0]
                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Num_Male_Potential_Parent[0]
                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Mean_Offspring_Per_Male_Potential_Parent[0]
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Variance_Offspring_Per_Male_Potential_Parent[0]
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Ne_Demographic_From_Known_Offspring_Given_Male_Potential_Parents[0]
                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Num_Dame_Parent[0]
                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Mean_Offspring_Per_Dame_Parent[0]
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Mean_Variance_Offspring_Per_Dame_Parent[0]
                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Num_Female_Potential_Parent[0]
                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Mean_Offspring_Per_Female_Potential_Parent[0]
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Variance_Offspring_Per_Female_Potential_Parent[0]
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Ne_Demographic_From_Known_Offspring_Given_Female_Potential_Parents[0]
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Num_Actual_Parent[0]
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Mean_Offspring_Per_Actual_Parent[0]
                                        #,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Mean_Variance_Offspring_Per_Actual_Parent[0]
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Num_Actual_Potential_Parent[0]
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Mean_Offspring_Per_Actual_Potential_Parent[0]
                                        #,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Variance_Offspring_Per_Actual_Potential_Parent[0]
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Ne_Demographic_From_Known_Offspring_Given_Actual_Potential_Parents[0]
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Ne_Demographic_From_Known_Offspring_Given_Both_Sexes_Potential_Parents_Ne_Rato_Nc_Potential_Parents[0]
                                        
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_AgeNe_Manual_CalculatedTotals_listProperties_1[0]
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_AgeNe_Manual_CalculatedTotals_listProperties_2[0]
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_AgeNe_Manual_CalculatedTotals_listProperties_3[0]
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_AgeNe_Manual_CalculatedTotals_listProperties_4[0]
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_AgeNe_Manual_CalculatedTotals_listProperties_5[0]
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_AgeNe_Manual_CalculatedTotals_listProperties_6[0]
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_AgeNe_Manual_CalculatedTotals_listProperties_7[0]
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_AgeNe_Manual_CalculatedTotals_listProperties_8[0]
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_AgeNe_Manual_CalculatedTotals_listProperties_9[0]
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_AgeNe_Manual_CalculatedTotals_listProperties_10[0]
                                        
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_AgeNe_Sim_CalculatedTotals_listProperties_1[0]
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_AgeNe_Sim_CalculatedTotals_listProperties_2[0]
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_AgeNe_Sim_CalculatedTotals_listProperties_3[0]
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_AgeNe_Sim_CalculatedTotals_listProperties_4[0]
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_AgeNe_Sim_CalculatedTotals_listProperties_5[0]
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_AgeNe_Sim_CalculatedTotals_listProperties_6[0]
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_AgeNe_Sim_CalculatedTotals_listProperties_7[0]
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_AgeNe_Sim_CalculatedTotals_listProperties_8[0]
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_AgeNe_Sim_CalculatedTotals_listProperties_9[0]
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_AgeNe_Sim_CalculatedTotals_listProperties_10[0]

                                    ]},
                                     '2':                   
                                    {'objCustom_2_Reporting_Experiment_0':
                                         [
                                             globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Sub_Pop_VSP[0]
                                            ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Sub_Pop_Size_VSP[0]
                                            ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_VSP[0]
                                            ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_lwr_ci_VSP[0]
                                            ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_upr_ci_VSP[0]
                                            ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_05_VSP[0]
                                            ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_05_lwr_ci_VSP[0]
                                            ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_05_upr_ci_VSP[0]
                                            ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_02_VSP[0]
                                            ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_02_lwr_ci_VSP[0]
                                            ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_02_upr_ci_VSP[0]
                                            ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_01_VSP[0]
                                            ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_01_lwr_ci_VSP[0]
                                            ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_01_upr_ci_VSP[0]
#                                          ]},
#                                     '2':                   
#                                     {'objCustom_2_Reporting_Experiment_1':
#                                          [
#                                           globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Sub_Pop_VSP[0]
#                                          ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Sub_Pop_Size_VSP[0]
#                                          ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_VSP[0]
#                                          ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_lwr_ci_VSP[0]
#                                          ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_upr_ci_VSP[0]
#                                          ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_05_VSP[0]
#                                          ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_05_lwr_ci_VSP[0]
#                                          ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_05_upr_ci_VSP[0]
#                                          ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_02_VSP[0]
#                                          ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_02_lwr_ci_VSP[0]
#                                          ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_02_upr_ci_VSP[0]
#                                          ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_01_VSP[0]
#                                          ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_01_lwr_ci_VSP[0]
#                                          ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_01_upr_ci_VSP[0]
                                         ]}
                                    }
                self.dictCustom_2_OutputReportingDetail['obj_SSParams']['Dict_Of_Object_Properties_Not_Suppressed'] = self.dictCustom_2_PropertiesNotSuppressed
                self.dictCustom_2_OutputReportingDetail['obj_SSParams']['Dict_Of_Object_Properties_To_Report'] = self.dictCustom_2_OfObjectPropertiesToReport
                
                pass

            def method_Batch_Custom_3_Output_Reporting_Detail(self):
                '''
                e.g. self.dictOutputReportingDetail ={object1: {Dict_Of_Object_Properties_Not_Suppressed: dictOfObjectPropertiesNotSuppressed},{Dict_Of_Object_Properties_To_Report: dictOfObjectPropertiesToReport}}
                
                '''
                self.dictCustom_3_PropertiesNotSuppressed = {
                                     'objSSSimulation':
                                         {
                                        globalsSS.ObjectReportingPropertyLabels.static_SSSimulation_listProperties_1[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput
                                        ,globalsSS.ObjectReportingPropertyLabels.static_SSSimulation_listProperties_2[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectReportingPropertyLabels.static_SSSimulation_listProperties_3[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectReportingPropertyLabels.static_SSSimulation_listProperties_4[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectReportingPropertyLabels.static_SSSimulation_listProperties_5[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectReportingPropertyLabels.static_SSSimulation_listProperties_6[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectReportingPropertyLabels.static_SSSimulation_listProperties_7[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectReportingPropertyLabels.static_SSSimulation_listProperties_8[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectReportingPropertyLabels.static_SSSimulation_listProperties_9[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        },
                                    'objSSPopulation':
                                         {
                                        globalsSS.ObjectReportingPropertyLabels.static_SSPopulation_listProperties_1[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput
                                        ,globalsSS.ObjectReportingPropertyLabels.static_SSPopulation_listProperties_2[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectReportingPropertyLabels.static_SSPopulation_listProperties_3[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        }}

                self.dictCustom_3_OfObjectPropertiesToReport = {
                                    '0':
                                   {'objSSSimulation':
                                        [
                                         globalsSS.ObjectReportingPropertyLabels.static_SSSimulation_listProperties_1[0]
                                        ,globalsSS.ObjectReportingPropertyLabels.static_SSSimulation_listProperties_2[0]
                                        ,globalsSS.ObjectReportingPropertyLabels.static_SSSimulation_listProperties_3[0]
                                        ,globalsSS.ObjectReportingPropertyLabels.static_SSSimulation_listProperties_4[0]
                                        ,globalsSS.ObjectReportingPropertyLabels.static_SSSimulation_listProperties_5[0]
                                        ,globalsSS.ObjectReportingPropertyLabels.static_SSSimulation_listProperties_6[0]
                                        ,globalsSS.ObjectReportingPropertyLabels.static_SSSimulation_listProperties_7[0]
                                        ,globalsSS.ObjectReportingPropertyLabels.static_SSSimulation_listProperties_8[0]
                                        ,globalsSS.ObjectReportingPropertyLabels.static_SSSimulation_listProperties_9[0]
                                    ]},
                                    '1':
                                   {'objSSPopulation':
                                        [
                                         globalsSS.ObjectReportingPropertyLabels.static_SSPopulation_listProperties_1[0]
                                        ,globalsSS.ObjectReportingPropertyLabels.static_SSPopulation_listProperties_2[0]
                                        ,globalsSS.ObjectReportingPropertyLabels.static_SSPopulation_listProperties_3[0]
                                    ]}}

                self.dictCustom_3_OutputReportingDetail['obj_SSParams']['Dict_Of_Object_Properties_Not_Suppressed'] = self.dictCustom_3_PropertiesNotSuppressed
                self.dictCustom_3_OutputReportingDetail['obj_SSParams']['Dict_Of_Object_Properties_To_Report'] = self.dictCustom_3_OfObjectPropertiesToReport
                
                pass

            def method_Batch_Custom_4_Output_Reporting_Detail(self):
                '''
                e.g. self.dictOutputReportingDetail ={object1: {Dict_Of_Object_Properties_Not_Suppressed: dictOfObjectPropertiesNotSuppressed},{Dict_Of_Object_Properties_To_Report: dictOfObjectPropertiesToReport}}
                
                '''
                self.dictCustom_4_PropertiesNotSuppressed = {
                                     'objSSSimulation':
                                         {
                                        globalsSS.ObjectReportingPropertyLabels.static_SSSimulation_listProperties_1[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput
                                        ,globalsSS.ObjectReportingPropertyLabels.static_SSSimulation_listProperties_2[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectReportingPropertyLabels.static_SSSimulation_listProperties_3[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectReportingPropertyLabels.static_SSSimulation_listProperties_4[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectReportingPropertyLabels.static_SSSimulation_listProperties_5[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectReportingPropertyLabels.static_SSSimulation_listProperties_6[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectReportingPropertyLabels.static_SSSimulation_listProperties_7[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectReportingPropertyLabels.static_SSSimulation_listProperties_8[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectReportingPropertyLabels.static_SSSimulation_listProperties_9[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        },
                                    'objSSPopulation':
                                         {
                                        globalsSS.ObjectReportingPropertyLabels.static_SSPopulation_listProperties_1[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput
                                        ,globalsSS.ObjectReportingPropertyLabels.static_SSPopulation_listProperties_2[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectReportingPropertyLabels.static_SSPopulation_listProperties_3[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        },
                                    'objCustom_4_Reporting':
                                         {globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Data_Section_Note[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Sub_Pop_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Sub_Pop_Size_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_demographic_ne_loci_1_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_temporal_JR_P1_ne_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_temporal_JR_P1_ne_2_5_CI_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_temporal_JR_P1_ne_97_5_CI_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_temporal_JR_P2_ne_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_temporal_JR_P2_ne_2_5_CI_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_temporal_JR_P2_ne_97_5_CI_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_lwr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_upr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_05_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_05_lwr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_05_upr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_02_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_02_lwr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_02_upr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_01_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_01_lwr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_01_upr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Loci_Allele_Totals_Per_Locus_List_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Loci_Allele_Instance_Count_List_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Loci_Allele_Frequencies_List_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Num_Sire_Parent[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Mean_Offspring_Per_Sire_Parent[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Mean_Variance_Offspring_Per_Sire_Parent[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Num_Male_Potential_Parent[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Mean_Offspring_Per_Male_Potential_Parent[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Variance_Offspring_Per_Male_Potential_Parent[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Ne_Demographic_From_Known_Offspring_Given_Male_Potential_Parents[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Num_Dame_Parent[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Mean_Offspring_Per_Dame_Parent[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Mean_Variance_Offspring_Per_Dame_Parent[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Num_Female_Potential_Parent[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Mean_Offspring_Per_Female_Potential_Parent[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Variance_Offspring_Per_Female_Potential_Parent[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Ne_Demographic_From_Known_Offspring_Given_Female_Potential_Parents[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Num_Actual_Parent[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Mean_Offspring_Per_Actual_Parent[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Mean_Variance_Offspring_Per_Actual_Parent[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Num_Actual_Potential_Parent[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Mean_Offspring_Per_Actual_Potential_Parent[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Variance_Offspring_Per_Actual_Potential_Parent[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Ne_Demographic_From_Known_Offspring_Given_Actual_Potential_Parents[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Ne_Demographic_From_Known_Offspring_Given_Both_Sexes_Potential_Parents_Ne_Rato_Nc_Potential_Parents[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        },
                                    'objCustom_4_Reporting_Experiment_0':
                                        {
                                         globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Sub_Pop_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Sub_Pop_Size_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_lwr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_upr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_05_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_05_lwr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_05_upr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_02_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_02_lwr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_02_upr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_01_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_01_lwr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_01_upr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
#                                         },
#                                     'objCustom_1_Reporting_Experiment_1':
#                                         {
#                                          globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Sub_Pop_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Sub_Pop_Size_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_lwr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_upr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_05_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_05_lwr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_05_upr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_02_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_02_lwr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_02_upr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_01_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_01_lwr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_01_upr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        }
                                    }

                self.dictCustom_4_OfObjectPropertiesToReport = {
                                    '0':
                                   {'objSSSimulation':
                                        [
                                         globalsSS.ObjectReportingPropertyLabels.static_SSSimulation_listProperties_1[0]
                                        ,globalsSS.ObjectReportingPropertyLabels.static_SSSimulation_listProperties_2[0]
                                        ,globalsSS.ObjectReportingPropertyLabels.static_SSSimulation_listProperties_3[0]
                                        ,globalsSS.ObjectReportingPropertyLabels.static_SSSimulation_listProperties_4[0]
                                        ,globalsSS.ObjectReportingPropertyLabels.static_SSSimulation_listProperties_5[0]
                                        ,globalsSS.ObjectReportingPropertyLabels.static_SSSimulation_listProperties_6[0]
                                        ,globalsSS.ObjectReportingPropertyLabels.static_SSSimulation_listProperties_7[0]
                                        ,globalsSS.ObjectReportingPropertyLabels.static_SSSimulation_listProperties_8[0]
                                        ,globalsSS.ObjectReportingPropertyLabels.static_SSSimulation_listProperties_9[0]
                                    ]},
                                    '1':
                                   {'objSSPopulation':
                                        [
                                         globalsSS.ObjectReportingPropertyLabels.static_SSPopulation_listProperties_1[0]
                                        ,globalsSS.ObjectReportingPropertyLabels.static_SSPopulation_listProperties_2[0]
                                        ,globalsSS.ObjectReportingPropertyLabels.static_SSPopulation_listProperties_3[0]
                                    ]},
                                    '2':
                                   {'objCustom_4_Reporting':
                                        [
                                        #globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Data_Section_Note[0]
                                        globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Sub_Pop_VSP[0]
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Sub_Pop_Size_VSP[0]
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_demographic_ne_loci_1_VSP[0]
                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Num_Sire_Parent[0]
                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Mean_Offspring_Per_Sire_Parent[0]
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Mean_Variance_Offspring_Per_Sire_Parent[0]
                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Num_Male_Potential_Parent[0]
                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Mean_Offspring_Per_Male_Potential_Parent[0]
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Variance_Offspring_Per_Male_Potential_Parent[0]
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Ne_Demographic_From_Known_Offspring_Given_Male_Potential_Parents[0]
                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Num_Dame_Parent[0]
                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Mean_Offspring_Per_Dame_Parent[0]
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Mean_Variance_Offspring_Per_Dame_Parent[0]
                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Num_Female_Potential_Parent[0]
                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Mean_Offspring_Per_Female_Potential_Parent[0]
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Variance_Offspring_Per_Female_Potential_Parent[0]
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Ne_Demographic_From_Known_Offspring_Given_Female_Potential_Parents[0]
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Num_Actual_Parent[0]
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Mean_Offspring_Per_Actual_Parent[0]
                                        #,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Mean_Variance_Offspring_Per_Actual_Parent[0]
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Num_Actual_Potential_Parent[0]
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Mean_Offspring_Per_Actual_Potential_Parent[0]
                                        #,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Variance_Offspring_Per_Actual_Potential_Parent[0]
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Ne_Demographic_From_Known_Offspring_Given_Actual_Potential_Parents[0]
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Ne_Demographic_From_Known_Offspring_Given_Both_Sexes_Potential_Parents_Ne_Rato_Nc_Potential_Parents[0]
                                        
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_AgeNe_Manual_CalculatedTotals_listProperties_1[0]
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_AgeNe_Manual_CalculatedTotals_listProperties_2[0]
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_AgeNe_Manual_CalculatedTotals_listProperties_3[0]
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_AgeNe_Manual_CalculatedTotals_listProperties_4[0]
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_AgeNe_Manual_CalculatedTotals_listProperties_5[0]
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_AgeNe_Manual_CalculatedTotals_listProperties_6[0]
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_AgeNe_Manual_CalculatedTotals_listProperties_7[0]
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_AgeNe_Manual_CalculatedTotals_listProperties_8[0]
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_AgeNe_Manual_CalculatedTotals_listProperties_9[0]
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_AgeNe_Manual_CalculatedTotals_listProperties_10[0]
#                                         
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_AgeNe_Sim_CalculatedTotals_listProperties_1[0]
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_AgeNe_Sim_CalculatedTotals_listProperties_2[0]
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_AgeNe_Sim_CalculatedTotals_listProperties_3[0]
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_AgeNe_Sim_CalculatedTotals_listProperties_4[0]
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_AgeNe_Sim_CalculatedTotals_listProperties_5[0]
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_AgeNe_Sim_CalculatedTotals_listProperties_6[0]
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_AgeNe_Sim_CalculatedTotals_listProperties_7[0]
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_AgeNe_Sim_CalculatedTotals_listProperties_8[0]
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_AgeNe_Sim_CalculatedTotals_listProperties_9[0]
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_AgeNe_Sim_CalculatedTotals_listProperties_10[0]

                                    ]},
                                     '2':                   
                                    {'objCustom_4_Reporting_Experiment_0':
                                         [
                                             globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Sub_Pop_VSP[0]
                                            ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Sub_Pop_Size_VSP[0]
                                            ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_VSP[0]
                                            ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_lwr_ci_VSP[0]
                                            ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_upr_ci_VSP[0]
                                            ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_05_VSP[0]
                                            ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_05_lwr_ci_VSP[0]
                                            ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_05_upr_ci_VSP[0]
                                            ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_02_VSP[0]
                                            ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_02_lwr_ci_VSP[0]
                                            ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_02_upr_ci_VSP[0]
                                            ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_01_VSP[0]
                                            ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_01_lwr_ci_VSP[0]
                                            ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_01_upr_ci_VSP[0]
#                                          ]},
#                                     '2':                   
#                                     {'objCustom_4_Reporting_Experiment_1':
#                                          [
#                                           globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Sub_Pop_VSP[0]
#                                          ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Sub_Pop_Size_VSP[0]
#                                          ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_VSP[0]
#                                          ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_lwr_ci_VSP[0]
#                                          ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_upr_ci_VSP[0]
#                                          ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_05_VSP[0]
#                                          ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_05_lwr_ci_VSP[0]
#                                          ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_05_upr_ci_VSP[0]
#                                          ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_02_VSP[0]
#                                          ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_02_lwr_ci_VSP[0]
#                                          ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_02_upr_ci_VSP[0]
#                                          ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_01_VSP[0]
#                                          ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_01_lwr_ci_VSP[0]
#                                          ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_01_upr_ci_VSP[0]
                                         ]}
                                    }
                self.dictCustom_4_OutputReportingDetail['obj_SSParams']['Dict_Of_Object_Properties_Not_Suppressed'] = self.dictCustom_4_PropertiesNotSuppressed
                self.dictCustom_4_OutputReportingDetail['obj_SSParams']['Dict_Of_Object_Properties_To_Report'] = self.dictCustom_4_OfObjectPropertiesToReport
                
                pass


            def method_Batch_Custom_5_Output_Reporting_Detail(self):
                '''
                e.g. self.dictOutputReportingDetail ={object1: {Dict_Of_Object_Properties_Not_Suppressed: dictOfObjectPropertiesNotSuppressed},{Dict_Of_Object_Properties_To_Report: dictOfObjectPropertiesToReport}}
                
                '''
                self.dictCustom_5_PropertiesNotSuppressed = {
                                     'objSSSimulation':
                                         {
                                        globalsSS.ObjectReportingPropertyLabels.static_SSSimulation_listProperties_1[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput
                                        ,globalsSS.ObjectReportingPropertyLabels.static_SSSimulation_listProperties_2[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectReportingPropertyLabels.static_SSSimulation_listProperties_3[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectReportingPropertyLabels.static_SSSimulation_listProperties_4[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectReportingPropertyLabels.static_SSSimulation_listProperties_5[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectReportingPropertyLabels.static_SSSimulation_listProperties_6[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectReportingPropertyLabels.static_SSSimulation_listProperties_7[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectReportingPropertyLabels.static_SSSimulation_listProperties_8[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectReportingPropertyLabels.static_SSSimulation_listProperties_9[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        },
                                    'objSSPopulation':
                                         {
                                        globalsSS.ObjectReportingPropertyLabels.static_SSPopulation_listProperties_1[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput
                                        ,globalsSS.ObjectReportingPropertyLabels.static_SSPopulation_listProperties_2[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectReportingPropertyLabels.static_SSPopulation_listProperties_3[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        },
                                    'objCustom_5_Reporting':
                                         {globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Data_Section_Note[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Sub_Pop_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Sub_Pop_Size_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_demographic_ne_loci_1_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_temporal_JR_P1_ne_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_temporal_JR_P1_ne_2_5_CI_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_temporal_JR_P1_ne_97_5_CI_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_temporal_JR_P2_ne_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_temporal_JR_P2_ne_2_5_CI_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_temporal_JR_P2_ne_97_5_CI_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_lwr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_upr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_05_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_05_lwr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_05_upr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_02_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_02_lwr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_02_upr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_01_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_01_lwr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_01_upr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Loci_Allele_Totals_Per_Locus_List_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Loci_Allele_Instance_Count_List_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Loci_Allele_Frequencies_List_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Num_Sire_Parent[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Mean_Offspring_Per_Sire_Parent[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Mean_Variance_Offspring_Per_Sire_Parent[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Num_Male_Potential_Parent[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Mean_Offspring_Per_Male_Potential_Parent[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Variance_Offspring_Per_Male_Potential_Parent[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Ne_Demographic_From_Known_Offspring_Given_Male_Potential_Parents[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Num_Dame_Parent[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Mean_Offspring_Per_Dame_Parent[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Mean_Variance_Offspring_Per_Dame_Parent[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Num_Female_Potential_Parent[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Mean_Offspring_Per_Female_Potential_Parent[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Variance_Offspring_Per_Female_Potential_Parent[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Ne_Demographic_From_Known_Offspring_Given_Female_Potential_Parents[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Num_Actual_Parent[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Mean_Offspring_Per_Actual_Parent[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Mean_Variance_Offspring_Per_Actual_Parent[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Num_Actual_Potential_Parent[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Mean_Offspring_Per_Actual_Potential_Parent[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Variance_Offspring_Per_Actual_Potential_Parent[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Ne_Demographic_From_Known_Offspring_Given_Actual_Potential_Parents[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Ne_Demographic_From_Known_Offspring_Given_Both_Sexes_Potential_Parents_Ne_Rato_Nc_Potential_Parents[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        },
                                    'objCustom_5_Reporting_Experiment_0':
                                        {
                                         globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Sub_Pop_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Sub_Pop_Size_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_lwr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_upr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_05_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_05_lwr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_05_upr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_02_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_02_lwr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_02_upr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_01_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_01_lwr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_01_upr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
#                                         },
#                                     'objCustom_1_Reporting_Experiment_1':
#                                         {
#                                          globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Sub_Pop_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Sub_Pop_Size_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_lwr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_upr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_05_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_05_lwr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_05_upr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_02_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_02_lwr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_02_upr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_01_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_01_lwr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_01_upr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        }
                                    }

                self.dictCustom_5_OfObjectPropertiesToReport = {
                                    '0':
                                   {'objSSSimulation':
                                        [
                                         globalsSS.ObjectReportingPropertyLabels.static_SSSimulation_listProperties_1[0]
                                        ,globalsSS.ObjectReportingPropertyLabels.static_SSSimulation_listProperties_2[0]
                                        ,globalsSS.ObjectReportingPropertyLabels.static_SSSimulation_listProperties_3[0]
                                        ,globalsSS.ObjectReportingPropertyLabels.static_SSSimulation_listProperties_4[0]
                                        ,globalsSS.ObjectReportingPropertyLabels.static_SSSimulation_listProperties_5[0]
                                        ,globalsSS.ObjectReportingPropertyLabels.static_SSSimulation_listProperties_6[0]
                                        ,globalsSS.ObjectReportingPropertyLabels.static_SSSimulation_listProperties_7[0]
                                        ,globalsSS.ObjectReportingPropertyLabels.static_SSSimulation_listProperties_8[0]
                                        ,globalsSS.ObjectReportingPropertyLabels.static_SSSimulation_listProperties_9[0]
                                    ]},
                                    '1':
                                   {'objSSPopulation':
                                        [
                                         globalsSS.ObjectReportingPropertyLabels.static_SSPopulation_listProperties_1[0]
                                        ,globalsSS.ObjectReportingPropertyLabels.static_SSPopulation_listProperties_2[0]
                                        ,globalsSS.ObjectReportingPropertyLabels.static_SSPopulation_listProperties_3[0]
                                    ]},
                                    '2':
                                   {'objCustom_5_Reporting':
                                        [
                                        #globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Data_Section_Note[0]
                                        globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Sub_Pop_VSP[0]
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Sub_Pop_Size_VSP[0]
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_demographic_ne_loci_1_VSP[0]
                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Num_Sire_Parent[0]
                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Mean_Offspring_Per_Sire_Parent[0]
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Mean_Variance_Offspring_Per_Sire_Parent[0]
                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Num_Male_Potential_Parent[0]
                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Mean_Offspring_Per_Male_Potential_Parent[0]
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Variance_Offspring_Per_Male_Potential_Parent[0]
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Ne_Demographic_From_Known_Offspring_Given_Male_Potential_Parents[0]
                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Num_Dame_Parent[0]
                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Mean_Offspring_Per_Dame_Parent[0]
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Mean_Variance_Offspring_Per_Dame_Parent[0]
                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Num_Female_Potential_Parent[0]
                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Mean_Offspring_Per_Female_Potential_Parent[0]
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Variance_Offspring_Per_Female_Potential_Parent[0]
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Ne_Demographic_From_Known_Offspring_Given_Female_Potential_Parents[0]
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Num_Actual_Parent[0]
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Mean_Offspring_Per_Actual_Parent[0]
                                        #,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Mean_Variance_Offspring_Per_Actual_Parent[0]
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Num_Actual_Potential_Parent[0]
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Mean_Offspring_Per_Actual_Potential_Parent[0]
                                        #,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Variance_Offspring_Per_Actual_Potential_Parent[0]
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Ne_Demographic_From_Known_Offspring_Given_Actual_Potential_Parents[0]
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Ne_Demographic_From_Known_Offspring_Given_Both_Sexes_Potential_Parents_Ne_Rato_Nc_Potential_Parents[0]
                                        
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_AgeNe_Manual_CalculatedTotals_listProperties_1[0]
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_AgeNe_Manual_CalculatedTotals_listProperties_2[0]
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_AgeNe_Manual_CalculatedTotals_listProperties_3[0]
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_AgeNe_Manual_CalculatedTotals_listProperties_4[0]
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_AgeNe_Manual_CalculatedTotals_listProperties_5[0]
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_AgeNe_Manual_CalculatedTotals_listProperties_6[0]
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_AgeNe_Manual_CalculatedTotals_listProperties_7[0]
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_AgeNe_Manual_CalculatedTotals_listProperties_8[0]
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_AgeNe_Manual_CalculatedTotals_listProperties_9[0]
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_AgeNe_Manual_CalculatedTotals_listProperties_10[0]
#                                         
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_AgeNe_Sim_CalculatedTotals_listProperties_1[0]
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_AgeNe_Sim_CalculatedTotals_listProperties_2[0]
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_AgeNe_Sim_CalculatedTotals_listProperties_3[0]
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_AgeNe_Sim_CalculatedTotals_listProperties_4[0]
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_AgeNe_Sim_CalculatedTotals_listProperties_5[0]
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_AgeNe_Sim_CalculatedTotals_listProperties_6[0]
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_AgeNe_Sim_CalculatedTotals_listProperties_7[0]
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_AgeNe_Sim_CalculatedTotals_listProperties_8[0]
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_AgeNe_Sim_CalculatedTotals_listProperties_9[0]
#                                         ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_AgeNe_Sim_CalculatedTotals_listProperties_10[0]

                                    ]},
                                     '2':                   
                                    {'objCustom_5_Reporting_Experiment_0':
                                         [
                                             globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Sub_Pop_VSP[0]
                                            ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Sub_Pop_Size_VSP[0]
                                            ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_VSP[0]
                                            ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_lwr_ci_VSP[0]
                                            ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_upr_ci_VSP[0]
                                            ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_05_VSP[0]
                                            ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_05_lwr_ci_VSP[0]
                                            ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_05_upr_ci_VSP[0]
                                            ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_02_VSP[0]
                                            ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_02_lwr_ci_VSP[0]
                                            ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_02_upr_ci_VSP[0]
                                            ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_01_VSP[0]
                                            ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_01_lwr_ci_VSP[0]
                                            ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_01_upr_ci_VSP[0]
#                                          ]},
#                                     '2':                   
#                                     {'objCustom_5_Reporting_Experiment_1':
#                                          [
#                                           globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Sub_Pop_VSP[0]
#                                          ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Sub_Pop_Size_VSP[0]
#                                          ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_VSP[0]
#                                          ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_lwr_ci_VSP[0]
#                                          ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_upr_ci_VSP[0]
#                                          ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_05_VSP[0]
#                                          ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_05_lwr_ci_VSP[0]
#                                          ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_05_upr_ci_VSP[0]
#                                          ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_02_VSP[0]
#                                          ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_02_lwr_ci_VSP[0]
#                                          ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_02_upr_ci_VSP[0]
#                                          ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_01_VSP[0]
#                                          ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_01_lwr_ci_VSP[0]
#                                          ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_01_upr_ci_VSP[0]
                                         ]}
                                    }
                self.dictCustom_5_OutputReportingDetail['obj_SSParams']['Dict_Of_Object_Properties_Not_Suppressed'] = self.dictCustom_5_PropertiesNotSuppressed
                self.dictCustom_5_OutputReportingDetail['obj_SSParams']['Dict_Of_Object_Properties_To_Report'] = self.dictCustom_5_OfObjectPropertiesToReport
                
                pass


            def method_Batch_Custom_LDNE_1_Output_Reporting_Detail(self):
                '''
                e.g. self.dictOutputReportingDetail ={object1: {Dict_Of_Object_Properties_Not_Suppressed: dictOfObjectPropertiesNotSuppressed},{Dict_Of_Object_Properties_To_Report: dictOfObjectPropertiesToReport}}
                
                '''
                self.dictCustom_LDNE_1_PropertiesNotSuppressed = {
                                     'objSSSimulation':
                                         {
                                        globalsSS.ObjectReportingPropertyLabels.static_SSSimulation_listProperties_1[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput
                                        ,globalsSS.ObjectReportingPropertyLabels.static_SSSimulation_listProperties_2[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput
                                        ,globalsSS.ObjectReportingPropertyLabels.static_SSSimulation_listProperties_3[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput
                                        ,globalsSS.ObjectReportingPropertyLabels.static_SSSimulation_listProperties_4[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput
                                        ,globalsSS.ObjectReportingPropertyLabels.static_SSSimulation_listProperties_5[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput
                                        ,globalsSS.ObjectReportingPropertyLabels.static_SSSimulation_listProperties_6[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput
                                        ,globalsSS.ObjectReportingPropertyLabels.static_SSSimulation_listProperties_7[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput
                                        ,globalsSS.ObjectReportingPropertyLabels.static_SSSimulation_listProperties_8[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput
                                        ,globalsSS.ObjectReportingPropertyLabels.static_SSSimulation_listProperties_9[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput
                                        },
                                    'objCustom_LDNE_Reporting_1':
                                         {globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Data_Section_Note[0] : globalsSS.ILFOutputSuppressionFlags.static_stringSuppressedAndNotOutput
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_05_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_05_lwr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_05_upr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_02_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_02_lwr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_02_upr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_01_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_01_lwr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_01_upr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_lwr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_upr_ci_VSP[0] : globalsSS.ILFOutputSuppressionFlags.static_stringNotSuppressed
                                        }
                                    }

                self.dictCustom_LDNE_1_OfObjectPropertiesToReport = {
                                    '0':
                                   {'objSSSimulation':
                                        [
                                         globalsSS.ObjectReportingPropertyLabels.static_SSSimulation_listProperties_1[0]
                                        ,globalsSS.ObjectReportingPropertyLabels.static_SSSimulation_listProperties_2[0]
                                        ,globalsSS.ObjectReportingPropertyLabels.static_SSSimulation_listProperties_3[0]
                                        ,globalsSS.ObjectReportingPropertyLabels.static_SSSimulation_listProperties_4[0]
                                        ,globalsSS.ObjectReportingPropertyLabels.static_SSSimulation_listProperties_5[0]
                                        ,globalsSS.ObjectReportingPropertyLabels.static_SSSimulation_listProperties_6[0]
                                        ,globalsSS.ObjectReportingPropertyLabels.static_SSSimulation_listProperties_7[0]
                                        ,globalsSS.ObjectReportingPropertyLabels.static_SSSimulation_listProperties_8[0]
                                        ,globalsSS.ObjectReportingPropertyLabels.static_SSSimulation_listProperties_9[0]
                                    ]},
                                    '1':
                                   {'objCustom_LDNE_Reporting_1':
                                        [
                                         globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Sub_Pop_VSP[0]
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_Sub_Pop_Size_VSP[0]
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_05_VSP[0]
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_05_lwr_ci_VSP[0]
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_05_upr_ci_VSP[0]
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_02_VSP[0]
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_02_lwr_ci_VSP[0]
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_02_upr_ci_VSP[0]
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_01_VSP[0]
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_01_lwr_ci_VSP[0]
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_01_upr_ci_VSP[0]
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_VSP[0]
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_lwr_ci_VSP[0]
                                        ,globalsSS.ObjectCustom1ReportingPropertyLabels.static_listProperties_ld_ne_pcrit_0_upr_ci_VSP[0]
                                    ]}
                                    }
                self.dictCustom_LDNE_1_OutputReportingDetail['obj_SSParams']['Dict_Of_Object_Properties_Not_Suppressed'] = self.dictCustom_LDNE_1_PropertiesNotSuppressed
                self.dictCustom_LDNE_1_OutputReportingDetail['obj_SSParams']['Dict_Of_Object_Properties_To_Report'] = self.dictCustom_LDNE_1_OfObjectPropertiesToReport
                
                pass


            
            ''' Replicate processing '''            
            def method_Replicate_Pre_Processing(self):

                '''
                Replicate parameter initialization
                '''
                self.method_Replicate_Current_Replicate_Parameter_Initialization()

                '''
                Replicate folder & file initialization
                '''
                self.method_Replicate_Folder_File_Initialization()
                
                '''
                General Reporting
                '''
                self.method_Reporting_Destinations()


                pass
           
            def method_Replicate_Current_Replicate_Parameter_Initialization(self):
 
                self.int_MatingCount_LifeSpan = 0
                self.int_MatingCount_Replicate_Total = 0
                self.int_MatingCount_Replicate_BurnIn = 0
                self.int_MatingCount_Replicate_PostBurnIn = 0 
                
                ''' Get the total mating count for the replicate'''
                self.int_Total_MatingsToSimulatePerReplicate = self.method_Replicate_Get_Replicate_Total_Matings(self.intReplicateBurnInLengthInYears, self.intTotalYearsToSimulate, self.intTotalMonthsToSimulate, self.intMatingCalenderMonth)
                
                self.int_Sim_Total_MatingsToSimulate =  self.int_Total_MatingsToSimulatePerReplicate*self.intReplicates*self.intBatches                

                return True
            
            def method_Replicate_Get_Replicate_Total_Matings(self, intReplicateBurnInLengthInYears, intTotalYearsToSimulate, intTotalMonthsToSimulate, intMatingCalenderMonth):
                
                int_Total_Years_From_Months = intTotalMonthsToSimulate//12
                if int_Total_Years_From_Months > 0:
                    int_Total_Matings_From_Months = int_Total_Years_From_Months
                    pass
                else:
                    int_Total_Years_From_Months = intTotalMonthsToSimulate//intMatingCalenderMonth
                    if int_Total_Years_From_Months > 0:
                        int_Total_Matings_From_Months = int_Total_Years_From_Months
                    pass
                pass
                
                #self.int_Total_MatingsToSimulatePerReplicate =  self.intReplicateBurnInLengthInYears + (self.intTotalYearsToSimulate) + (self.intTotalMonthsToSimulate//self.intMatingCalenderMonth)                
                self.int_Total_MatingsToSimulatePerReplicate =  intReplicateBurnInLengthInYears + (intTotalYearsToSimulate) + int_Total_Matings_From_Months                

                return self.int_Total_MatingsToSimulatePerReplicate
            
            def method_Replicate_Get_Replicate_Total_Matings_NEW(self, intReplicateBurnInLengthInYears, intTotalYearsToSimulate, intTotalMonthsToSimulate, intMatingCalenderMonth, int_Pop_Batches, int_Pop_Replicates):
                
                int_Total_Years_From_Months = intTotalMonthsToSimulate//12
                if int_Total_Years_From_Months > 0:
                    int_Total_Matings_From_Months = int_Total_Years_From_Months
                    pass
                else:
                    int_Total_Years_From_Months = intTotalMonthsToSimulate//intMatingCalenderMonth
                    if int_Total_Years_From_Months > 0:
                        int_Total_Matings_From_Months = int_Total_Years_From_Months
                    pass
                pass
                
                #self.int_Total_MatingsToSimulatePerReplicate =  self.intReplicateBurnInLengthInYears + (self.intTotalYearsToSimulate) + (self.intTotalMonthsToSimulate//self.intMatingCalenderMonth)                
                self.int_Total_MatingsToSimulatePerReplicate =  intReplicateBurnInLengthInYears + (intTotalYearsToSimulate) + int_Total_Matings_From_Months                

                #self.int_Sim_Total_MatingsToSimulate =  self.int_Total_MatingsToSimulatePerReplicate*self.intReplicates*self.intBatches
                self.int_Sim_Total_MatingsToSimulate =  self.int_Total_MatingsToSimulatePerReplicate*int_Pop_Replicates*int_Pop_Batches
                
                return self.int_Total_MatingsToSimulatePerReplicate
            
            def method_Replicate_Folder_File_Initialization(self):

                                
                # Set batch & replicate identifiers
                str_Batch = str(self.intCurrentBatch)
                str_Batch_Out = str_Batch.zfill(len(str_Batch))
                str_Replicate = str(self.intCurrentReplicate)
                str_Replicate_Out = str_Replicate.zfill(len(str_Replicate))
                
                self.str_Sim_Batch_Replicate_Identifier_Short = 'B' + str_Batch_Out + '_R' + str_Replicate_Out

                #---------< Input files
                
                # Put them here if any
                
                #---------< Output files
                str_Output_Path = self.str_Current_Run_Path__Logs
                
                strFilenameSuffix = self.strSimDateTimeStamp + '_' + self.strFilenameEmbeddedFields + '_rep_' + str(self.intCurrentReplicate).zfill(3)
                # Replicate Summary Log
                self.outputFileNameSummaryLogPerReplicate = str_Output_Path + '\\' + self.strFileNameProgramPrefix + 'summary_log_' + strFilenameSuffix + '.r_sl_ssim'
                with FileHandler() as objectFileHandler:        
                    boolFileExists = objectFileHandler.fileExists(self.outputFileNameSummaryLogPerReplicate)
                    if boolFileExists:
                        objectFileHandler.fileDelete(self.outputFileNameSummaryLogPerReplicate)
        
                #Replicate Individuals Log
                self.outputFileNameIndividualLogPerReplicate = str_Output_Path + '\\' + self.strFileNameProgramPrefix + 'ILF_individ_log_full_' + strFilenameSuffix + '.r_ilf_ssim'
                with FileHandler() as objectFileHandler:        
                    boolFileExists = objectFileHandler.fileExists(self.outputFileNameIndividualLogPerReplicate)
                    if boolFileExists:
                        objectFileHandler.fileDelete(self.outputFileNameIndividualLogPerReplicate)
                
                #Replicate Individuals Log Per Fertilization Event        
                self.outputFileNameIndividualLogByGen = str_Output_Path + '\\' + self.strFileNameProgramPrefix + 'ILF_individ_log_GEN_*' + strFilenameSuffix + '.r_ilfg_ssim'
                with FileHandler() as objectFileHandler:        
                    #boolFileExists = objectFileHandler.fileExists(self.outputFileNameIndividualLogByGen)
                    #if boolFileExists:
                        #objectFileHandler.fileDelete(self.outputFileNameIndividualLogByGen)
                        
                        #Delete all individuals log file for single gens
                        objectFileHandler.methodDelete_MultipleFilesByWildcard(self.outputFileNameIndividualLogByGen) 
                
                self.outputFileNameIndividualPedigreeLogInitialGen = str_Output_Path + '\\' + self.strFileNameProgramPrefix + 'simupop_pedigree_initial_' + strFilenameSuffix + '.r_fp_ssim'

                #Replicate Initial Pedigree Log
                self.outputFileNameIndividualPedigreeOutputInitialGen = str_Output_Path + '\\' + self.strFileNameProgramPrefix + 'pedigree_initial_' + strFilenameSuffix + '.r_fp_ssim.ped'
                with FileHandler() as objectFileHandler:        
                    boolFileExists = objectFileHandler.fileExists(self.outputFileNameIndividualPedigreeOutputInitialGen)
                    if boolFileExists:
                        objectFileHandler.fileDelete(self.outputFileNameIndividualPedigreeOutputInitialGen)

                #Replicate Pedigree Log
                self.outputFileNameIndividualPedigreeOutputAllGens = str_Output_Path + '\\' + self.strFileNameProgramPrefix + 'pedigree_full_' + strFilenameSuffix + '.r_fp_ssim.ped'
                with FileHandler() as objectFileHandler:        
                    boolFileExists = objectFileHandler.fileExists(self.outputFileNameIndividualPedigreeOutputAllGens)
                    if boolFileExists:
                        objectFileHandler.fileDelete(self.outputFileNameIndividualPedigreeOutputAllGens)

                #Replicate SimuPOP Population
                #self.outputFileNamePopOutputAllGens = str_Output_Path + '\\' + self.strFileNameProgramPrefix + 'pop_full_' + strFilenameSuffix + globalsSS.SS_Replicate_Details.static_Output_File_Suffix__SimuPOP_Pop_EOR
                self.outputFileNamePopOutputAllGens = str_Output_Path + '\\' + self.strFileNameProgramPrefix + 'pop_full_' + self.strSimDateTimeStamp + '_rep_' + str(self.intCurrentReplicate).zfill(3) + globalsSS.SS_Replicate_Details.static_Output_File_Suffix__SimuPOP_Pop_EOR
                with FileHandler() as objectFileHandler:        
                    boolFileExists = objectFileHandler.fileExists(self.outputFileNamePopOutputAllGens)
                    if boolFileExists:
                        objectFileHandler.fileDelete(self.outputFileNamePopOutputAllGens)

                pass
            
                #Log File for recording data
                self.strOutputFileName_LocusCombos = str_Output_Path + '\\' + self.strFileNameProgramPrefix + 'locus_combo_log_' + strFilenameSuffix + '.r_st_lc_ssim'
                with FileHandler() as objectFileHandler:        
                    boolFileExists = objectFileHandler.fileExists(self.outputFileNamePopOutputAllGens)
                    if boolFileExists:
                        objectFileHandler.fileDelete(self.outputFileNamePopOutputAllGens)

                pass

            def method_Reporting_Destinations(self):

                listOutputDestinations_List_1 = [
                # 1
                []
                # 2
                ,['console']
                # 3
                ,['console', self.outputFileNameSummaryLogAllBatches]
                # 4
                ,['console', self.outputFileNameSummaryLogAllReps]
                # 5
                ,['console', self.outputFileNameSummaryLogAllBatches, self.outputFileNameSummaryLogAllReps]
                # 6
                ,[self.outputFileNameSummaryLogAllBatches]
                # 7
                ,[self.outputFileNameSummaryLogAllReps]
                # 8
                ,[self.outputFileNameSummaryLogAllBatches, self.outputFileNameSummaryLogAllReps]
                # 9
                ,[self.outputFileNameSummaryLogPerReplicate]
                # 10
                ,['console', self.outputFileNameSummaryLogAllBatches, self.outputFileNameSummaryLogAllReps, self.outputFileNameSummaryLogPerReplicate]
                ]
                
                intSelection = 3 #10
                self.listOutputDestinations_SimSummaryInfo = listOutputDestinations_List_1[intSelection-1]
                intSelection = 1 #3 #10
                self.listOutputDestinations_PopulationTemporalProcessingSummaryInfo = listOutputDestinations_List_1[intSelection-1]
                intSelection = 1 #3 #10
                self.listOutputDestinations_PopulationLifeStageTotals = listOutputDestinations_List_1[intSelection-1]
                intSelection = 1 #3 #10
                self.listOutputDestinations_PopulationAgeClassTotals = listOutputDestinations_List_1[intSelection-1]
                intSelection = 1 #9 #4
                self.listOutputDestinations_PopulationOffspringTotalsByParent = listOutputDestinations_List_1[intSelection-1]
                intSelection = 1 #9
                self.listOutputDestinations_PopulationAlleleStatistics = listOutputDestinations_List_1[intSelection-1]
                intSelection = 1 #10 #9
                self.listOutputDestinations_PopulationDump = listOutputDestinations_List_1[intSelection-1]
                intSelection = 1
                self.listOutputDestinations_PopulationNEStatistics = listOutputDestinations_List_1[intSelection-1]
                intSelection = 1
                self.listOutputDestinations_AgeNe_Reporting = listOutputDestinations_List_1[intSelection-1]


                ############ Specified replicates & gens & VSPs will be accumulated to this (ILF) Individual Log Full file
                #----------------------- Specify Output Files
                #self.listOutputDestinations_ILF_PopulationIndividualsDump=[self.outputFileNameIndividualLogPerReplicate]
                #self.listOutputDestinations_ILF_PopulationIndividualsDump=[] #Use an empty list to stop all output
                #self.listOutputDestinations_ILF_PopulationIndividualsDump=['console']
                #self.listOutputDestinations_ILF_PopulationIndividualsDump=[self.outputFileNameIndividualLogAllBatches, self.outputFileNameIndividualLogAllReps, self.outputFileNameIndividualLogPerReplicate]
                #self.listOutputDestinations_ILF_PopulationIndividualsDump=[self.outputFileNameIndividualLogAllBatches]

                #----------------------- Specify the Replicates to output
                self.listOutputReplicates_ILF_PopulationIndividualsDump=[] #Specify replicates to output. NONE ASSUMES ALL
                #self.listOutputReplicates_ILF_PopulationIndividualsDump=[self.intReplicates] #Specify replicates to output. NONE ASSUMES ALL

                #----------------------- Specify the Generations to output NOTE: WILL STOP OUTPUT TO CENTRAL ILF FILE and write to individual gen files
                self.listOutputGenerations_ILF_PopulationIndividualsDump=[] #Specify offspring gens to output. NONE ASSUMES ALL
                #self.listOutputGenerations_ILF_PopulationIndividualsDump=[self.intOffspringPotentialFertilisationsToSimulate] #Specify offspring gens to output. NONE ASSUMES ALL
                #self.listOutputGenerations_ILF_PopulationIndividualsDump=[6] #Specify offspring gens to output. NONE ASSUMES ALL
                #self.listOutputGenerations_ILF_PopulationIndividualsDump=[1, self.gen] #Specify gens to output. NONE ASSUMES ALL
                
                #----------------------- Specify the VSPs to output
                self.listOutputVSPs_ILF_PopulationIndividualsDump=[(0,0)] #Specify VSPs to output. NONE ASSUMES ALL
                #self.listOutputVSPs_ILF_PopulationIndividualsDump=[(0,0), (0,1), (0,2)] #Specify VSPs to output. NONE ASSUMES ALL

                '''
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                LEVEL Specific Reporting
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                '''

                ''' SIM LEVEL Reporting '''
                #----------------------- Specify Output Files
                #self.listOutputDestinations_Sim_Level_SLF = [] #Use an empty list to stop all output
                #self.listOutputDestinations_Sim_Level_SLF = ['console']
                self.listOutputDestinations_Sim_Level_SLF = [self.outputFileName_Sim_Level_SLF]

                ''' BATCH LEVEL Reporting '''
                #----------------------- Specify Output Files
                #self.listOutputDestinations_Batch_Level_BLF = [] #Use an empty list to stop all output
                #self.listOutputDestinations_Batch_Level_BLF = ['console']
                self.listOutputDestinations_Batch_Level_BLF = [self.outputFileName_Batch_Level_BLF]

                ''' REPLICATE LEVEL Reporting '''
                #----------------------- Specify Output Files
                #self.listOutputDestinations_Replicate_Level_RLF_End_Of_Replicate = [] #Use an empty list to stop all output
                #self.listOutputDestinations_Replicate_Level_RLF_End_Of_Replicate = ['console']
                self.listOutputDestinations_Replicate_Level_RLF_End_Of_Replicate = [self.outputFileName_Replicate_Level_RLF_End_Of_Replicate]

                #self.listOutputDestinations_Replicate_Level_RLF_Post_Fertilization = [] #Use an empty list to stop all output
                #self.listOutputDestinations_Replicate_Level_RLF_Post_Fertilization = ['console']
                self.listOutputDestinations_Replicate_Level_RLF_Post_Fertilization = [self.outputFileName_Replicate_Level_RLF_Post_Fertilization]

                ''' VSP LEVEL Reporting '''
                #----------------------- Specify Output Files
                #self.listOutputDestinations_VSP_Level_Age_Class_VLF_EOR = [] #Use an empty list to stop all output
                #self.listOutputDestinations_VSP_Level_Age_Class_VLF_EOR = ['console']
                self.listOutputDestinations_VSP_Level_Age_Class_VLF_EOR = [self.outputFileName_VSP_Level_Age_Class_VLF_EOR]

                #----------------------- Specify Output Files
                #self.listOutputDestinations_VSP_Level_Age_Class_VLF_PF = [] #Use an empty list to stop all output
                #self.listOutputDestinations_VSP_Level_Age_Class_VLF_PF = ['console']
                self.listOutputDestinations_VSP_Level_Age_Class_VLF_PF = [self.outputFileName_VSP_Level_Age_Class_VLF_PF]

                #----------------------- Specify Output Files
                #self.listOutputDestinations_VSP_Level_Life_Stage_VLF_EOR = [] #Use an empty list to stop all output
                #self.listOutputDestinations_VSP_Level_Life_Stage_VLF_EOR = ['console']
                self.listOutputDestinations_VSP_Level_Life_Stage_VLF_EOR = [self.outputFileName_VSP_Level_Life_Stage_VLF_EOR]

                #----------------------- Specify Output Files
                #self.listOutputDestinations_VSP_Level_Life_Stage_VLF_PF = [] #Use an empty list to stop all output
                #self.listOutputDestinations_VSP_Level_Life_Stage_VLF_PF = ['console']
                self.listOutputDestinations_VSP_Level_Life_Stage_VLF_PF = [self.outputFileName_VSP_Level_Life_Stage_VLF_PF]

                '''
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                CUSTOM reporting
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                '''                
             
                #----------------------- Specify Output Files
                #self.listOutputDestinations_Custom_1_Reporting_Experiment_Dump=[] #Use an empty list to stop all output
                #self.listOutputDestinations_Custom_1_Reporting_Experiment_Dump=['console']
                self.listOutputDestinations_Custom_1_Reporting_Experiment_Dump=['console', self.outputFileNameCustom1ReportingExperimentDump]
                #self.listOutputDestinations_Custom_1_Reporting_Experiment_Dump=[self.outputFileNameCustom1ReportingExperimentDump]

                #----------------------- Specify Output Files
                #self.listOutputDestinations_Custom_2_Reporting_Experiment_Dump=[] #Use an empty list to stop all output
                #self.listOutputDestinations_Custom_2_Reporting_Experiment_Dump=['console']
                #self.listOutputDestinations_Custom_2_Reporting_Experiment_Dump=['console', self.outputFileNameCustom2ReportingExperimentDump]
                self.listOutputDestinations_Custom_2_Reporting_Experiment_Dump=[self.outputFileNameCustom2ReportingExperimentDump]

                #----------------------- Specify Output Files
                #self.listOutputDestinations_Custom_3_Reporting_Experiment_Dump=[] #Use an empty list to stop all output
                #self.listOutputDestinations_Custom_3_Reporting_Experiment_Dump=['console']
                self.listOutputDestinations_Custom_3_Reporting_Experiment_Dump=['console', self.outputFileNameCustom3ReportingExperimentDump]
                #self.listOutputDestinations_Custom_3_Reporting_Experiment_Dump=[self.outputFileNameCustom3ReportingExperimentDump]

                #----------------------- Specify Output Files
                #self.listOutputDestinations_Custom_4_Reporting_Experiment_Dump=[] #Use an empty list to stop all output
                #self.listOutputDestinations_Custom_4_Reporting_Experiment_Dump=['console']
                #self.listOutputDestinations_Custom_4_Reporting_Experiment_Dump=['console', self.outputFileNameCustom4ReportingExperimentDump]
                self.listOutputDestinations_Custom_4_Reporting_Experiment_Dump=[self.outputFileNameCustom4ReportingExperimentDump]

                #----------------------- Specify Output Files
                #self.listOutputDestinations_Custom_5_Reporting_Experiment_Dump=[] #Use an empty list to stop all output
                #self.listOutputDestinations_Custom_5_Reporting_Experiment_Dump=['console']
                #self.listOutputDestinations_Custom_5_Reporting_Experiment_Dump=['console', self.outputFileName_Custom_5_ReportingExperimentDump]
                self.listOutputDestinations_Custom_5_Reporting_Experiment_Dump=[self.outputFileName_Custom_5_ReportingExperimentDump]

                #----------------------- Specify Output Files
                #self.listOutputDestinations_Custom_LDNE_1_Reporting_Experiment_Dump=[] #Use an empty list to stop all output
                #self.listOutputDestinations_Custom_LDNE_1_Reporting_Experiment_Dump=['console']
                #self.listOutputDestinations_Custom_LDNE_1_Reporting_Experiment_Dump=['console', self.outputFileNameCustomReportingLDNE1Dump]
                self.listOutputDestinations_Custom_LDNE_1_Reporting_Experiment_Dump=[self.outputFileNameCustomReportingLDNE1Dump]

                #----------------------- Specify Output Files
                #self.listOutputDestinations_Custom_LDNE_1_Reporting_Selective_Locus_Combo_Jackknife=[] #Use an empty list to stop all output
                #self.listOutputDestinations_Custom_LDNE_1_Reporting_Selective_Locus_Combo_Jackknife=['console']
                #self.listOutputDestinations_Custom_LDNE_1_Reporting_Selective_Locus_Combo_Jackknife=['console', self.outputFileNameCustomReportingLDNE1Dump]
                self.listOutputDestinations_Custom_LDNE_1_Reporting_Selective_Locus_Combo_Jackknife=[self.outputFileNameCustomReportingLDNE1Dump]

                #----------------------- Specify Output Files
                #self.listOutputDestinations_Custom_LDNE_Reporting_SelectiveLocusJackknife_L1=[] #Use an empty list to stop all output
                #self.listOutputDestinations_Custom_LDNE_Reporting_SelectiveLocusJackknife_L1=['console']
                #self.listOutputDestinations_Custom_LDNE_Reporting_SelectiveLocusJackknife_L1=['console', self.outputFileNameCustomReportingLDNE_SelectiveLocusJackknife_L1]
                self.listOutputDestinations_Custom_LDNE_Reporting_SelectiveLocusJackknife_L1=[self.outputFileNameCustomReportingLDNE_SelectiveLocusJackknife_L1]

                #----------------------- Specify Output Files
                #self.listOutputDestinations_Custom_LDNE_Reporting_SelectiveLocusJackknife_L2=[] #Use an empty list to stop all output
                #self.listOutputDestinations_Custom_LDNE_Reporting_SelectiveLocusJackknife_L2=['console']
                #self.listOutputDestinations_Custom_LDNE_Reporting_SelectiveLocusJackknife_L2=['console', self.outputFileNameCustomReportingLDNE_SelectiveLocusJackknife_L2]
                self.listOutputDestinations_Custom_LDNE_Reporting_SelectiveLocusJackknife_L2=[self.outputFileNameCustomReportingLDNE_SelectiveLocusJackknife_L2]

                #----------------------- Specify Output Files
                #self.listOutputDestinations_Custom_LDNE_Reporting_SelectiveLocusJackknife_L3=[] #Use an empty list to stop all output
                #self.listOutputDestinations_Custom_LDNE_Reporting_SelectiveLocusJackknife_L3=['console']
                #self.listOutputDestinations_Custom_LDNE_Reporting_SelectiveLocusJackknife_L3=['console', self.outputFileNameCustomReportingLDNE_SelectiveLocusJackknife_L3]
                self.listOutputDestinations_Custom_LDNE_Reporting_SelectiveLocusJackknife_L3=[self.outputFileNameCustomReportingLDNE_SelectiveLocusJackknife_L3]

                #----------------------- Specify Output Files
                #self.listOutputDestinations_Custom_LDNE_Reporting_SelectiveLocusJackknife_L4=[] #Use an empty list to stop all output
                #self.listOutputDestinations_Custom_LDNE_Reporting_SelectiveLocusJackknife_L4=['console']
                #self.listOutputDestinations_Custom_LDNE_Reporting_SelectiveLocusJackknife_L4=['console', self.outputFileNameCustomReportingLDNE_SelectiveLocusJackknife_L4]
                self.listOutputDestinations_Custom_LDNE_Reporting_SelectiveLocusJackknife_L4=[self.outputFileNameCustomReportingLDNE_SelectiveLocusJackknife_L4]

                #----------------------- Specify the VSPs to output
                self.listOutputVSPs_Custom_1_Reporting_Experiment_Dump=[(0,0)] #Specify VSPs to output. NONE ASSUMES ALL
                #self.listOutputVSPs_Custom_1_Reporting_Experiment_Dump=[(0,0), (0,1), (0,2)] #Specify VSPs to output. NONE ASSUMES ALL

                #----------------------- Specify the VSPs to output
                self.listOutputVSPs_Custom_2_Reporting_Experiment_Dump=[(0,0)] #Specify VSPs to output. NONE ASSUMES ALL
                #self.listOutputVSPs_Custom_2_Reporting_Experiment_Dump=[(0,0), (0,1), (0,2)] #Specify VSPs to output. NONE ASSUMES ALL

                #----------------------- Specify the VSPs to output
                self.listOutputVSPs_AgeNe_Reporting=[(0,0)] #Specify VSPs to output. NONE ASSUMES ALL
                #self.listOutputVSPs_AgeNe_Reporting=[(0,0), (0,1), (0,2)] #Specify VSPs to output. NONE ASSUMES ALL

                #self.listOutputDestinations_ILF_PopulationNEStatistics=[] #Use an empty list to stop all output
                self.listOutputDestinations_ILF_PopulationNEStatistics=['console']
                #self.listOutputDestinations_ILF_PopulationNEStatistics=[self.outputFileNameIndividualLogNEStatisticsRepBatches]
                #self.listOutputDestinations_ILF_PopulationNEStatistics=['console', self.outputFileNameIndividualLogAllBatches]

#                 #self.listOutputDestinations_ILF_PopulationNEStatistics=[] #Use an empty list to stop all output
#                 self.listOutputDestinations_ILF_PopulationNEStatistics=['console']
#                 #self.listOutputDestinations_ILF_PopulationNEStatistics=[self.outputFileNameIndividualLogNEStatisticsRepBatches]
#                 #self.listOutputDestinations_ILF_PopulationNEStatistics=['console', self.outputFileNameIndividualLogAllBatches]


                #self.listOutputDestinations_AgeNe_ILF_Reporting=[] #Use an empty list to stop all output
                #self.listOutputDestinations_AgeNe_ILF_Reporting=['console']
                #self.listOutputDestinations_AgeNe_ILF_Reporting=[self.outputFileNameIndividualLogAgeNeStatisticsAllRepBatches]
                self.listOutputDestinations_AgeNe_ILF_Reporting=['console', self.outputFileNameIndividualLogAgeNeStatisticsAllRepBatches]

                self.listOutputDestinations_PopulationIndividualsInitialPedigree = []
                #self.listOutputDestinations_PopulationIndividualsInitialPedigree = [self.outputFileNameIndividualPedigreeOutputInitialGen]
                
                self.listOutputDestinations_PopulationIndividualsPedigree = []
                #self.listOutputDestinations_PopulationIndividualsPedigree = [self.outputFileNameIndividualPedigreeOutputAllGens]

                #############List of parameters to specify output to separate Individual Log files (named by generation)
                self.listOutputGenerations_PopulationIndividualsDump=[] #Use an empty list to stop all output
                #self.listOutputGenerations_PopulationIndividualsDump=[0, 1, self.gen] #specify 'gen' for last generation
                
                ############List of parameters to specify output to separate GENEPOP_FSTATS files (named by generation)
                self.listOutputReplicates_PopulationGENEPOP_FSTAT_Pop_Dump=[] #Use an empty list to stop all output
                #self.listOutputReplicates_PopulationGENEPOP_FSTAT_Pop_Dump=[self.intReplicates] #Specify replicates to output
                #self.listOutputGenerations_PopulationGENEPOP_FSTAT_Pop_Dump=[] #Use an empty list to stop all output
                #self.listOutputGenerations_PopulationGENEPOP_FSTAT_Pop_Dump=[0, 1, self.gen] #Specify gens to output
                self.listOutputGenerations_PopulationGENEPOP_FSTAT_Pop_Dump=[1, self.intOffspringPotentialFertilisationsToSimulate] #Specify offspring gens to output
                #self.listOutputVSPs_PopulationGENEPOP_FSTAT_Pop_Dump=[] #Specify VSPs to output
                self.listOutputVSPs_PopulationGENEPOP_FSTAT_Pop_Dump=[0, 1, 2] #Specify VSPs to output
                boolGenepopFormat = True #True: Write in GENEPOP format or FALSE: Write in FSTAT format
                boolSaveAsOnePop = True #True:Define as one pop in output file i.e. write POP header only once or False: Define each as a seprate poip in output file i.e. write POP header for each VSP 
                intAlleleLengthFormat = 3 #Number: Max length of alleles required for output file header
                #boolOutputVSPs = False  #True: Output list of specific VSPs or False: Output all VSPs (Entire population for that generation)
                self.listOutputParams_PopulationGENEPOP_FSTAT_Pop_Dump=[boolGenepopFormat, boolSaveAsOnePop, intAlleleLengthFormat]

                #List of parameters to specify output to separate GENEPOP_FSTATS files (named by generation)
                #self.listOutputReplicates_PopulationGENEPOP_FSTAT_Pop_Dump_Per_Replicate=[] #Use an empty list to stop all output
                #self.listOutputReplicates_PopulationGENEPOP_FSTAT_Pop_Dump_Per_Replicate=[self.intReplicates] #Specify replicates to output
                #self.listOutputReplicates_PopulationGENEPOP_FSTAT_Pop_Dump_Per_Replicate=[] #Specify replicates to output
                self.listOutputReplicates_PopulationGENEPOP_FSTAT_Pop_Dump_Per_Replicate=['SS_ALL_AVAIL'] #Specify replicates to output
                if self.listOutputReplicates_PopulationGENEPOP_FSTAT_Pop_Dump_Per_Replicate == ['SS_ALL_AVAIL']: 
                #Construct list of replicates to output
                    self.listOutputReplicates_PopulationGENEPOP_FSTAT_Pop_Dump_Per_Replicate=[]
                    for intReplicate in range(1, self.intReplicates+1):
                        self.listOutputReplicates_PopulationGENEPOP_FSTAT_Pop_Dump_Per_Replicate.append(intReplicate)
                        pass

                self.listOutputGenerations_PopulationGENEPOP_FSTAT_Pop_Dump_Per_Replicate=[0] #Specify gens to output
                #self.listOutputGenerations_PopulationGENEPOP_FSTAT_Pop_Dump_Per_Replicate=[0, 1, 2] #Specify gens to output
                boolGenepopFormat = True
                boolSaveAsOnePop = True
                intAlleleLengthFormat = 3
                #boolOutputVSPs = True
                self.listOutputParams_PopulationGENEPOP_FSTAT_Pop_Dump_Per_Replicate=[boolGenepopFormat, boolSaveAsOnePop, intAlleleLengthFormat]

                pass
            

            def temp_Old_Batch_Runs(self):
                pass
    #                      #listRunParameters = []
    #                     self.listBatchRunParameters.append([
    #                                                 #--> # Replicates - This must always be the first parameter in the list        
    #                                                 self.intReplicates,
    #                                                 #<--    
    #                                                 self.intMatingSchemeType,                #global MatingSchemeType
    #                                                 self.listMatingParentSelectionScheme,
    #                                                 self.intPopulationInitialAges,           #global InitialAgeDistribution
    #                                                 self.popnSize,
    #                                                  #---------------------------------5 params
    #                                                 self.intReplicateBurnInLengthInYears,
    #                                                 self.floatSexRatioOfMales,
    #                                                 self.maxAge,
    #                                                 self.maxMatingAge,
    #                                                 self.minMatingAge,
    
    #                                                  #---------------------------------5 params
    #                                                 self.intMinNumOffspring,
    #                                                 self.meanvarnumOffspring,
    #                                                 self.intMaxNumOffspring,
    #                                                 self.listOffspringNumberParameters,
    #                                                 self.nLoci,
    #                                                  #---------------------------------5 params
    #                                                 self.nAllelesPerLoci,
    #                                                 self.intAlleleFrequencyScheme,
    #                                                 self.listAlleleFreqs,
    #                                                  #---------------------------------3 params
    #                                                 
    #                                                 #Reporting vars
    #                                                 self.boolReportDemographicNe,
    #                                                 self.boolReportLDNe,
    #                                                 self.listLociToReportNE,
    #                                                 self.boolReportTemporalFS_P1_Ne,
    #                                                 self.boolReportTemporalFS_P2_Ne,
    #                                                  #--------------------------------- 5 params
    
    #                                                 self.intMatingCalenderMonth,
    #                                                 self.intParturitionCalenderMonth,
    
    #                                                 self.intGestationLengthInMonths,
    #                                                 self.intReproductiveRestLengthInMonths,
    #                                                  #--------------------------------- 4 params
    
    #                                                 self.intTotalYearsToSimulate,
    #                                                 self.intTotalMonthsToSimulate,
    #                                                  #--------------------------------- 2 params
    #                                                 self.boolSuppressBurnInOutput,
    
    
    #                                                 #mortality vars
    #                                                 self.boolAllowNATURALMortality,
    #                                                 self.dictProbabilityDistribution_P_SurvivalNATURALBySexByAge,
    #                                                  #--------------------------------- 2 params
    #                                                 self.boolAllowUnNATURALMortality,
    #                                                 self.dictProbabilityDistribution_P_SurvivalUnNATURALBySexByAge,
    #                                                  #--------------------------------- 2 params
    #                                                 self.boolReportSimAgeNe
    #                                                 ])
    
    
        
                                   
                        
                                               
                                               
    #                     '''
    #                     TESTING - WF diploid dioecious sexual OVERLAPPING gens
    #                     '''
    #                     self.listBatchRunParameters = [
    #                     [1,10,[10],3,1000 ,0,0.5, 6,5,1, 1,1,1,[1],self.nLoci,self.nAllelesPerLoci+1,self.intAlleleFrequencyScheme,self.listAlleleFreqs,1, False, False, self.listLDNe_Experiments_Custom_2_Loci_To_Report, False, False, 8, 10, 14, 9, 6, 8, True, 
    #                     True,  {strSexMale: 3, strSexFemale: 3}, {strSexMale:{12:0.6, 24:0.6, 36:0.6, 48:0.6, 60:0.6, 72:0}, strSexFemale:{12:0.6, 24:0.6, 36:0.6, 48:0.6, 60:0.6, 72:0}}, False, {strSexMale: 3, strSexFemale: 3}, {strSexMale:{12:0.6, 24:0.6, 36:0.6, 48:0.6, 60:0.6, 72:0}, strSexFemale:{12:0.6, 24:0.6, 36:0.6, 48:0.6, 60:0.6, 72:0}}, True]  #100 = 50
    #                     ]        
    # 
    #                     '''
    #                     PRODUCTION - WF diploid dioecious sexual OVERLAPPING gens
    #                     Sandbar shark - Carcharhinus plumbeus
    #                         Maximum age              : 33
    #                         Maximal mating age       : 30
    #                         Minimal mating age       : 15
    #                         sx(fm)                   : 0.86   #self.odictRates_Of_Survival_NATURAL_BySex_ByAge = {12:0.86, 24:0.86, 36:0.86, 48:0.86, 60:0.86, 72:0.86, 84:0.86, 96:0.86, 108:0.86, 120:0.86, 132:0.86, 144:0.86, 156:0.86, 168:0.86, 180:0.86, 192:0.86, 204:0.86, 216:0.86, 228:0.86, 240:0.86, 252:0.86, 264:0.86, 276:0.86, 288:0.86, 300:0.86, 312:0.86, 324:0.86, 336:0.86, 348:0.86, 360:0.86, 372:0.86, 384:0.86, 396:0.86,10:0.86, 22:0.86, 34:0.86, 46:0.86, 58:0.86, 70:0.86, 82:0.86, 94:0.86, 106:0.86, 118:0.86, 130:0.86, 142:0.86, 154:0.86, 166:0.86, 178:0.86, 190:0.86, 202:0.86, 214:0.86, 226:0.86, 238:0.86, 250:0.86, 262:0.86, 274:0.86, 286:0.86, 298:0.86, 310:0.86, 322:0.86, 334:0.86, 346:0.86, 358:0.86, 370:0.86, 382:0.86, 394:0.86}
    #                         bx(fm)                   : 2.7   (8 offspring every 3 years = 8/3 = 2.7)
    #                         Genetic data source      : Empirical - NSW - FRDC 
    #                         #Loci                    : 19
    #                         Allele Freqs             : Imported
    #                         
    #                     Naturan survival {strSexMale:{12:0.86, 24:0.86, 36:0.86, 48:0.86, 60:0.86, 72:0.86, 84:0.86, 96:0.86, 108:0.86, 120:0.86, 132:0.86, 144:0.86, 156:0.86, 168:0.86, 180:0.86, 192:0.86, 204:0.86, 216:0.86, 228:0.86, 240:0.86, 252:0.86, 264:0.86, 276:0.86, 288:0.86, 300:0.86, 312:0.86, 324:0.86, 336:0.86, 348:0.86, 360:0.86, 372:0.86, 384:0.86, 396:0.86}
    #                     Fishing survival {strSexMale:{12:0.96, 24:0.96, 36:0.96, 48:0.98, 60:0.99, 72:0.99, 84:1.00, 96:0.99, 108:0.98, 120:0.97, 132:0.93, 144:0.95, 156:0.88, 168:0.90, 180:0.86, 192:0.90, 204:0.94, 216:0.95, 228:0.97, 240:0.96, 252:0.98, 264:0.99, 276:1.00, 288:1.00, 300:1.00, 312:1.00, 324:1.00, 336:1.00, 348:1.00, 360:1.00, 372:1.00, 384:1.00, 396:1.00}
    # 
    # 
    # 
    #                     '''
    #                     self.listBatchRunParameters = [
    #                     [ #CAPL OVERLAPPING GENS - Mating in Aug (8), Gestation 5 months (Feb,2), Resting 1 months (Mar, 3)
    #                      1, 10, [1], 3, 10000
    #                      , 31, 0.5, 31, 30, 16
    #                      , 1, 1, 1, [1], self.nLoci
    #                      , self.nAllelesPerLoci+1, self.intAlleleFrequencyScheme, self.listAlleleFreqs
    #                      , 1
    #                      , False, False, [x for x in range(0, self.nLoci)], False, False
    #                      , 8                                                                ##intMatingCalenderMonth, 
    #                      , 2, 6, 1+4                                                        #intParturitionCalenderMonth, intGestationLengthInMonths, intReproductiveRestLengthInMonths + 4 (To ensure the correct rest length)
    #                      #, 9, 13, 4+4                                                        #intParturitionCalenderMonth, intGestationLengthInMonths, intReproductiveRestLengthInMonths
    #                      , 31, 8                                                             #intTotalYearsToSimulate, intTotalMonthsToSimulate
    #                      , False                                                            #self.boolSuppressBurnInOutput
    #                      , True, {strSexMale: 3, strSexFemale: 3}, {strSexMale:{12:0.86, 24:0.86, 36:0.86, 48:0.86, 60:0.86, 72:0.86, 84:0.86, 96:0.86, 108:0.86, 120:0.86, 132:0.86, 144:0.86, 156:0.86, 168:0.86, 180:0.86, 192:0.86, 204:0.86, 216:0.86, 228:0.86, 240:0.86, 252:0.86, 264:0.86, 276:0.86, 288:0.86, 300:0.86, 312:0.86, 324:0.86, 336:0.86, 348:0.86, 360:0.86, 372:0.86}, strSexFemale:{12:0.86, 24:0.86, 36:0.86, 48:0.86, 60:0.86, 72:0.86, 84:0.86, 96:0.86, 108:0.86, 120:0.86, 132:0.86, 144:0.86, 156:0.86, 168:0.86, 180:0.86, 192:0.86, 204:0.86, 216:0.86, 228:0.86, 240:0.86, 252:0.86, 264:0.86, 276:0.86, 288:0.86, 300:0.86, 312:0.86, 324:0.86, 336:0.86, 348:0.86, 360:0.86, 372:0.86}}
    #                      , False, {strSexMale: 3, strSexFemale: 3}, {strSexMale:{12:0.86, 24:0.86, 36:0.86, 48:0.86, 60:0.86, 72:0.86, 84:0.86, 96:0.86, 108:0.86, 120:0.86, 132:0.86, 144:0.86, 156:0.86, 168:0.86, 180:0.86, 192:0.86, 204:0.86, 216:0.86, 228:0.86, 240:0.86, 252:0.86, 264:0.86, 276:0.86, 288:0.86, 300:0.86, 312:0.86, 324:0.86, 336:0.86, 348:0.86, 360:0.86, 372:0.86}, strSexFemale:{12:0.86, 24:0.86, 36:0.86, 48:0.86, 60:0.86, 72:0.86, 84:0.86, 96:0.86, 108:0.86, 120:0.86, 132:0.86, 144:0.86, 156:0.86, 168:0.86, 180:0.86, 192:0.86, 204:0.86, 216:0.86, 228:0.86, 240:0.86, 252:0.86, 264:0.86, 276:0.86, 288:0.86, 300:0.86, 312:0.86, 324:0.86, 336:0.86, 348:0.86, 360:0.86, 372:0.86}}
    #                      , True]  #100 = 50
    #                     ]
                        
                        
    #                     self.listBatchRunParameters = [
    #                           [1,10,[10],3,1000,32,0.5, 31,30,15, 1,1,1,[1],self.nLoci,self.nAllelesPerLoci+1,self.intAlleleFrequencyScheme,self.listAlleleFreqs,1, False, False, self.listLDNe_Experiments_Custom_2_Loci_To_Report, False, False, 8, 10, 14, 14, 32, 8, False, 
    #                           True,  {strSexMale: 3, strSexFemale: 3}, {strSexMale:{12:0.86, 24:0.86, 36:0.86, 48:0.86, 60:0.86, 72:0.86, 84:0.86, 96:0.86, 108:0.86, 120:0.86, 132:0.86, 144:0.86, 156:0.86, 168:0.86, 180:0.86, 192:0.86, 204:0.86, 216:0.86, 228:0.86, 240:0.86, 252:0.86, 264:0.86, 276:0.86, 288:0.86, 300:0.86, 312:0.86, 324:0.86, 336:0.86, 348:0.86, 360:0.86, 372:0.86}, strSexFemale:{12:0.86, 24:0.86, 36:0.86, 48:0.86, 60:0.86, 72:0.86, 84:0.86, 96:0.86, 108:0.86, 120:0.86, 132:0.86, 144:0.86, 156:0.86, 168:0.86, 180:0.86, 192:0.86, 204:0.86, 216:0.86, 228:0.86, 240:0.86, 252:0.86, 264:0.86, 276:0.86, 288:0.86, 300:0.86, 312:0.86, 324:0.86, 336:0.86, 348:0.86, 360:0.86, 372:0.86}}, False, {strSexMale: 3, strSexFemale: 3}, {strSexMale:{12:0.86, 24:0.86, 36:0.86, 48:0.86, 60:0.86, 72:0.86, 84:0.86, 96:0.86, 108:0.86, 120:0.86, 132:0.86, 144:0.86, 156:0.86, 168:0.86, 180:0.86, 192:0.86, 204:0.86, 216:0.86, 228:0.86, 240:0.86, 252:0.86, 264:0.86, 276:0.86, 288:0.86, 300:0.86, 312:0.86, 324:0.86, 336:0.86, 348:0.86, 360:0.86, 372:0.86}, strSexFemale:{12:0.86, 24:0.86, 36:0.86, 48:0.86, 60:0.86, 72:0.86, 84:0.86, 96:0.86, 108:0.86, 120:0.86, 132:0.86, 144:0.86, 156:0.86, 168:0.86, 180:0.86, 192:0.86, 204:0.86, 216:0.86, 228:0.86, 240:0.86, 252:0.86, 264:0.86, 276:0.86, 288:0.86, 300:0.86, 312:0.86, 324:0.86, 336:0.86, 348:0.86, 360:0.86, 372:0.86}}, True]  #100 = 50]  #100 = 50
    # #                         ,[2,0,3,5000 ,1,0.5, 33,30,15, 1,1,3,[8]                         ,self.nLoci,self.nAllelesPerLoci+1,self.intAlleleFrequencyScheme,self.listAlleleFreqs,1, False, False, [0,1,2,3,4,5,6,7,8,9,10], False, False, 8, 6, 10, 33, 8, False, 
    # #                          True,  {strSexMale: 3, strSexFemale: 3}, {strSexMale:{12:0.86, 24:0.86, 36:0.86, 48:0.86, 60:0.86, 72:0.86, 84:0.86, 96:0.86, 108:0.86, 120:0.86, 132:0.86, 144:0.86, 156:0.86, 168:0.86, 180:0.86, 192:0.86, 204:0.86, 216:0.86, 228:0.86, 240:0.86, 252:0.86, 264:0.86, 276:0.86, 288:0.86, 300:0.86, 312:0.86, 324:0.86, 336:0.86, 348:0.86, 360:0.86, 372:0.86, 384:0.86, 396:0.86}, strSexFemale:{12:0.86, 24:0.86, 36:0.86, 48:0.86, 60:0.86, 72:0.86, 84:0.86, 96:0.86, 108:0.86, 120:0.86, 132:0.86, 144:0.86, 156:0.86, 168:0.86, 180:0.86, 192:0.86, 204:0.86, 216:0.86, 228:0.86, 240:0.86, 252:0.86, 264:0.86, 276:0.86, 288:0.86, 300:0.86, 312:0.86, 324:0.86, 336:0.86, 348:0.86, 360:0.86, 372:0.86, 384:0.86, 396:0.86}}, False, {strSexMale: 3, strSexFemale: 3}, {}, True]  #100 = 50]  #100 = 50
    #                          ]        
                        
    
    #                     self.listBatchRunParameters = [
    #                         [1,0,3,100   ,1,0.5, 31,30,15, 1,1,1,[1],self.nLoci,self.nAllelesPerLoci+1,self.intAlleleFrequencyScheme,self.listAlleleFreqs,1, False, False, self.listLDNe_Experiments_Custom_2_Loci_To_Report, False, False, 8, 10, 2, 32, 8, False, 
    #                         True,  {strSexMale: 3, strSexFemale: 3}, {strSexMale:{12:0.86, 24:0.86, 36:0.86, 48:0.86, 60:0.86, 72:0.86, 84:0.86, 96:0.86, 108:0.86, 120:0.86, 132:0.86, 144:0.86, 156:0.86, 168:0.86, 180:0.86, 192:0.86, 204:0.86, 216:0.86, 228:0.86, 240:0.86, 252:0.86, 264:0.86, 276:0.86, 288:0.86, 300:0.86, 312:0.86, 324:0.86, 336:0.86, 348:0.86, 360:0.86, 372:0.86}, strSexFemale:{12:0.86, 24:0.86, 36:0.86, 48:0.86, 60:0.86, 72:0.86, 84:0.86, 96:0.86, 108:0.86, 120:0.86, 132:0.86, 144:0.86, 156:0.86, 168:0.86, 180:0.86, 192:0.86, 204:0.86, 216:0.86, 228:0.86, 240:0.86, 252:0.86, 264:0.86, 276:0.86, 288:0.86, 300:0.86, 312:0.86, 324:0.86, 336:0.86, 348:0.86, 360:0.86, 372:0.86}}, False, {strSexMale: 3, strSexFemale: 3}, {strSexMale:{12:0.86, 24:0.86, 36:0.86, 48:0.86, 60:0.86, 72:0.86, 84:0.86, 96:0.86, 108:0.86, 120:0.86, 132:0.86, 144:0.86, 156:0.86, 168:0.86, 180:0.86, 192:0.86, 204:0.86, 216:0.86, 228:0.86, 240:0.86, 252:0.86, 264:0.86, 276:0.86, 288:0.86, 300:0.86, 312:0.86, 324:0.86, 336:0.86, 348:0.86, 360:0.86, 372:0.86}, strSexFemale:{12:0.86, 24:0.86, 36:0.86, 48:0.86, 60:0.86, 72:0.86, 84:0.86, 96:0.86, 108:0.86, 120:0.86, 132:0.86, 144:0.86, 156:0.86, 168:0.86, 180:0.86, 192:0.86, 204:0.86, 216:0.86, 228:0.86, 240:0.86, 252:0.86, 264:0.86, 276:0.86, 288:0.86, 300:0.86, 312:0.86, 324:0.86, 336:0.86, 348:0.86, 360:0.86, 372:0.86}}, True]  #100 = 50]  #100 = 50
    #                        ,[1,0,3,200  ,1,0.5, 31,30,15, 1,1,1,[1],self.nLoci,self.nAllelesPerLoci+1,self.intAlleleFrequencyScheme,self.listAlleleFreqs,1, False, False, self.listLDNe_Experiments_Custom_2_Loci_To_Report, False, False, 8, 10, 2, 32, 8, False, 
    #                         True,  {strSexMale: 3, strSexFemale: 3}, {strSexMale:{12:0.86, 24:0.86, 36:0.86, 48:0.86, 60:0.86, 72:0.86, 84:0.86, 96:0.86, 108:0.86, 120:0.86, 132:0.86, 144:0.86, 156:0.86, 168:0.86, 180:0.86, 192:0.86, 204:0.86, 216:0.86, 228:0.86, 240:0.86, 252:0.86, 264:0.86, 276:0.86, 288:0.86, 300:0.86, 312:0.86, 324:0.86, 336:0.86, 348:0.86, 360:0.86, 372:0.86}, strSexFemale:{12:0.86, 24:0.86, 36:0.86, 48:0.86, 60:0.86, 72:0.86, 84:0.86, 96:0.86, 108:0.86, 120:0.86, 132:0.86, 144:0.86, 156:0.86, 168:0.86, 180:0.86, 192:0.86, 204:0.86, 216:0.86, 228:0.86, 240:0.86, 252:0.86, 264:0.86, 276:0.86, 288:0.86, 300:0.86, 312:0.86, 324:0.86, 336:0.86, 348:0.86, 360:0.86, 372:0.86}}, False, {strSexMale: 3, strSexFemale: 3}, {strSexMale:{12:0.86, 24:0.86, 36:0.86, 48:0.86, 60:0.86, 72:0.86, 84:0.86, 96:0.86, 108:0.86, 120:0.86, 132:0.86, 144:0.86, 156:0.86, 168:0.86, 180:0.86, 192:0.86, 204:0.86, 216:0.86, 228:0.86, 240:0.86, 252:0.86, 264:0.86, 276:0.86, 288:0.86, 300:0.86, 312:0.86, 324:0.86, 336:0.86, 348:0.86, 360:0.86, 372:0.86}, strSexFemale:{12:0.86, 24:0.86, 36:0.86, 48:0.86, 60:0.86, 72:0.86, 84:0.86, 96:0.86, 108:0.86, 120:0.86, 132:0.86, 144:0.86, 156:0.86, 168:0.86, 180:0.86, 192:0.86, 204:0.86, 216:0.86, 228:0.86, 240:0.86, 252:0.86, 264:0.86, 276:0.86, 288:0.86, 300:0.86, 312:0.86, 324:0.86, 336:0.86, 348:0.86, 360:0.86, 372:0.86}}, True]  #100 = 50]  #100 = 50
    #                         ]
                                
    #                     self.listBatchRunParameters = [
    #                         [1,0,3,5000   ,32,0.5, 31,30,15, 1,1,1,[1],self.nLoci,self.nAllelesPerLoci+1,self.intAlleleFrequencyScheme,self.listAlleleFreqs,1, False, False, self.listLDNe_Experiments_Custom_2_Loci_To_Report, False, False, 8, 10, 2, 32, 8, False, 
    #                         True,  {strSexMale: 3, strSexFemale: 3}, {strSexMale:{12:0.86, 24:0.86, 36:0.86, 48:0.86, 60:0.86, 72:0.86, 84:0.86, 96:0.86, 108:0.86, 120:0.86, 132:0.86, 144:0.86, 156:0.86, 168:0.86, 180:0.86, 192:0.86, 204:0.86, 216:0.86, 228:0.86, 240:0.86, 252:0.86, 264:0.86, 276:0.86, 288:0.86, 300:0.86, 312:0.86, 324:0.86, 336:0.86, 348:0.86, 360:0.86, 372:0.86}, strSexFemale:{12:0.86, 24:0.86, 36:0.86, 48:0.86, 60:0.86, 72:0.86, 84:0.86, 96:0.86, 108:0.86, 120:0.86, 132:0.86, 144:0.86, 156:0.86, 168:0.86, 180:0.86, 192:0.86, 204:0.86, 216:0.86, 228:0.86, 240:0.86, 252:0.86, 264:0.86, 276:0.86, 288:0.86, 300:0.86, 312:0.86, 324:0.86, 336:0.86, 348:0.86, 360:0.86, 372:0.86}}, False, {strSexMale: 3, strSexFemale: 3}, {strSexMale:{12:0.86, 24:0.86, 36:0.86, 48:0.86, 60:0.86, 72:0.86, 84:0.86, 96:0.86, 108:0.86, 120:0.86, 132:0.86, 144:0.86, 156:0.86, 168:0.86, 180:0.86, 192:0.86, 204:0.86, 216:0.86, 228:0.86, 240:0.86, 252:0.86, 264:0.86, 276:0.86, 288:0.86, 300:0.86, 312:0.86, 324:0.86, 336:0.86, 348:0.86, 360:0.86, 372:0.86}, strSexFemale:{12:0.86, 24:0.86, 36:0.86, 48:0.86, 60:0.86, 72:0.86, 84:0.86, 96:0.86, 108:0.86, 120:0.86, 132:0.86, 144:0.86, 156:0.86, 168:0.86, 180:0.86, 192:0.86, 204:0.86, 216:0.86, 228:0.86, 240:0.86, 252:0.86, 264:0.86, 276:0.86, 288:0.86, 300:0.86, 312:0.86, 324:0.86, 336:0.86, 348:0.86, 360:0.86, 372:0.86}}, True]  #100 = 50]  #100 = 50
    #                        ,[1,0,3,10000  ,32,0.5, 31,30,15, 1,1,1,[1],self.nLoci,self.nAllelesPerLoci+1,self.intAlleleFrequencyScheme,self.listAlleleFreqs,1, False, False, self.listLDNe_Experiments_Custom_2_Loci_To_Report, False, False, 8, 10, 2, 32, 8, False, 
    #                         True,  {strSexMale: 3, strSexFemale: 3}, {strSexMale:{12:0.86, 24:0.86, 36:0.86, 48:0.86, 60:0.86, 72:0.86, 84:0.86, 96:0.86, 108:0.86, 120:0.86, 132:0.86, 144:0.86, 156:0.86, 168:0.86, 180:0.86, 192:0.86, 204:0.86, 216:0.86, 228:0.86, 240:0.86, 252:0.86, 264:0.86, 276:0.86, 288:0.86, 300:0.86, 312:0.86, 324:0.86, 336:0.86, 348:0.86, 360:0.86, 372:0.86}, strSexFemale:{12:0.86, 24:0.86, 36:0.86, 48:0.86, 60:0.86, 72:0.86, 84:0.86, 96:0.86, 108:0.86, 120:0.86, 132:0.86, 144:0.86, 156:0.86, 168:0.86, 180:0.86, 192:0.86, 204:0.86, 216:0.86, 228:0.86, 240:0.86, 252:0.86, 264:0.86, 276:0.86, 288:0.86, 300:0.86, 312:0.86, 324:0.86, 336:0.86, 348:0.86, 360:0.86, 372:0.86}}, False, {strSexMale: 3, strSexFemale: 3}, {strSexMale:{12:0.86, 24:0.86, 36:0.86, 48:0.86, 60:0.86, 72:0.86, 84:0.86, 96:0.86, 108:0.86, 120:0.86, 132:0.86, 144:0.86, 156:0.86, 168:0.86, 180:0.86, 192:0.86, 204:0.86, 216:0.86, 228:0.86, 240:0.86, 252:0.86, 264:0.86, 276:0.86, 288:0.86, 300:0.86, 312:0.86, 324:0.86, 336:0.86, 348:0.86, 360:0.86, 372:0.86}, strSexFemale:{12:0.86, 24:0.86, 36:0.86, 48:0.86, 60:0.86, 72:0.86, 84:0.86, 96:0.86, 108:0.86, 120:0.86, 132:0.86, 144:0.86, 156:0.86, 168:0.86, 180:0.86, 192:0.86, 204:0.86, 216:0.86, 228:0.86, 240:0.86, 252:0.86, 264:0.86, 276:0.86, 288:0.86, 300:0.86, 312:0.86, 324:0.86, 336:0.86, 348:0.86, 360:0.86, 372:0.86}}, True]  #100 = 50]  #100 = 50
    #                        ,[1,0,3,20000  ,32,0.5, 31,30,15, 1,1,1,[1],self.nLoci,self.nAllelesPerLoci+1,self.intAlleleFrequencyScheme,self.listAlleleFreqs,1, False, False, self.listLDNe_Experiments_Custom_2_Loci_To_Report, False, False, 8, 10, 2, 32, 8, False, 
    #                         True,  {strSexMale: 3, strSexFemale: 3}, {strSexMale:{12:0.86, 24:0.86, 36:0.86, 48:0.86, 60:0.86, 72:0.86, 84:0.86, 96:0.86, 108:0.86, 120:0.86, 132:0.86, 144:0.86, 156:0.86, 168:0.86, 180:0.86, 192:0.86, 204:0.86, 216:0.86, 228:0.86, 240:0.86, 252:0.86, 264:0.86, 276:0.86, 288:0.86, 300:0.86, 312:0.86, 324:0.86, 336:0.86, 348:0.86, 360:0.86, 372:0.86}, strSexFemale:{12:0.86, 24:0.86, 36:0.86, 48:0.86, 60:0.86, 72:0.86, 84:0.86, 96:0.86, 108:0.86, 120:0.86, 132:0.86, 144:0.86, 156:0.86, 168:0.86, 180:0.86, 192:0.86, 204:0.86, 216:0.86, 228:0.86, 240:0.86, 252:0.86, 264:0.86, 276:0.86, 288:0.86, 300:0.86, 312:0.86, 324:0.86, 336:0.86, 348:0.86, 360:0.86, 372:0.86}}, False, {strSexMale: 3, strSexFemale: 3}, {strSexMale:{12:0.86, 24:0.86, 36:0.86, 48:0.86, 60:0.86, 72:0.86, 84:0.86, 96:0.86, 108:0.86, 120:0.86, 132:0.86, 144:0.86, 156:0.86, 168:0.86, 180:0.86, 192:0.86, 204:0.86, 216:0.86, 228:0.86, 240:0.86, 252:0.86, 264:0.86, 276:0.86, 288:0.86, 300:0.86, 312:0.86, 324:0.86, 336:0.86, 348:0.86, 360:0.86, 372:0.86}, strSexFemale:{12:0.86, 24:0.86, 36:0.86, 48:0.86, 60:0.86, 72:0.86, 84:0.86, 96:0.86, 108:0.86, 120:0.86, 132:0.86, 144:0.86, 156:0.86, 168:0.86, 180:0.86, 192:0.86, 204:0.86, 216:0.86, 228:0.86, 240:0.86, 252:0.86, 264:0.86, 276:0.86, 288:0.86, 300:0.86, 312:0.86, 324:0.86, 336:0.86, 348:0.86, 360:0.86, 372:0.86}}, True]  #100 = 50]  #100 = 50
    #                        ,[1,0,3,30000  ,32,0.5, 31,30,15, 1,1,1,[1],self.nLoci,self.nAllelesPerLoci+1,self.intAlleleFrequencyScheme,self.listAlleleFreqs,1, False, False, self.listLDNe_Experiments_Custom_2_Loci_To_Report, False, False, 8, 10, 2, 32, 8, False, 
    #                         True,  {strSexMale: 3, strSexFemale: 3}, {strSexMale:{12:0.86, 24:0.86, 36:0.86, 48:0.86, 60:0.86, 72:0.86, 84:0.86, 96:0.86, 108:0.86, 120:0.86, 132:0.86, 144:0.86, 156:0.86, 168:0.86, 180:0.86, 192:0.86, 204:0.86, 216:0.86, 228:0.86, 240:0.86, 252:0.86, 264:0.86, 276:0.86, 288:0.86, 300:0.86, 312:0.86, 324:0.86, 336:0.86, 348:0.86, 360:0.86, 372:0.86}, strSexFemale:{12:0.86, 24:0.86, 36:0.86, 48:0.86, 60:0.86, 72:0.86, 84:0.86, 96:0.86, 108:0.86, 120:0.86, 132:0.86, 144:0.86, 156:0.86, 168:0.86, 180:0.86, 192:0.86, 204:0.86, 216:0.86, 228:0.86, 240:0.86, 252:0.86, 264:0.86, 276:0.86, 288:0.86, 300:0.86, 312:0.86, 324:0.86, 336:0.86, 348:0.86, 360:0.86, 372:0.86}}, False, {strSexMale: 3, strSexFemale: 3}, {strSexMale:{12:0.86, 24:0.86, 36:0.86, 48:0.86, 60:0.86, 72:0.86, 84:0.86, 96:0.86, 108:0.86, 120:0.86, 132:0.86, 144:0.86, 156:0.86, 168:0.86, 180:0.86, 192:0.86, 204:0.86, 216:0.86, 228:0.86, 240:0.86, 252:0.86, 264:0.86, 276:0.86, 288:0.86, 300:0.86, 312:0.86, 324:0.86, 336:0.86, 348:0.86, 360:0.86, 372:0.86}, strSexFemale:{12:0.86, 24:0.86, 36:0.86, 48:0.86, 60:0.86, 72:0.86, 84:0.86, 96:0.86, 108:0.86, 120:0.86, 132:0.86, 144:0.86, 156:0.86, 168:0.86, 180:0.86, 192:0.86, 204:0.86, 216:0.86, 228:0.86, 240:0.86, 252:0.86, 264:0.86, 276:0.86, 288:0.86, 300:0.86, 312:0.86, 324:0.86, 336:0.86, 348:0.86, 360:0.86, 372:0.86}}, True]  #100 = 50]  #100 = 50
    #                        ,[1,0,3,40000  ,32,0.5, 31,30,15, 1,1,1,[1],self.nLoci,self.nAllelesPerLoci+1,self.intAlleleFrequencyScheme,self.listAlleleFreqs,1, False, False, self.listLDNe_Experiments_Custom_2_Loci_To_Report, False, False, 8, 10, 2, 32, 8, False, 
    #                         True,  {strSexMale: 3, strSexFemale: 3}, {strSexMale:{12:0.86, 24:0.86, 36:0.86, 48:0.86, 60:0.86, 72:0.86, 84:0.86, 96:0.86, 108:0.86, 120:0.86, 132:0.86, 144:0.86, 156:0.86, 168:0.86, 180:0.86, 192:0.86, 204:0.86, 216:0.86, 228:0.86, 240:0.86, 252:0.86, 264:0.86, 276:0.86, 288:0.86, 300:0.86, 312:0.86, 324:0.86, 336:0.86, 348:0.86, 360:0.86, 372:0.86}, strSexFemale:{12:0.86, 24:0.86, 36:0.86, 48:0.86, 60:0.86, 72:0.86, 84:0.86, 96:0.86, 108:0.86, 120:0.86, 132:0.86, 144:0.86, 156:0.86, 168:0.86, 180:0.86, 192:0.86, 204:0.86, 216:0.86, 228:0.86, 240:0.86, 252:0.86, 264:0.86, 276:0.86, 288:0.86, 300:0.86, 312:0.86, 324:0.86, 336:0.86, 348:0.86, 360:0.86, 372:0.86}}, False, {strSexMale: 3, strSexFemale: 3}, {strSexMale:{12:0.86, 24:0.86, 36:0.86, 48:0.86, 60:0.86, 72:0.86, 84:0.86, 96:0.86, 108:0.86, 120:0.86, 132:0.86, 144:0.86, 156:0.86, 168:0.86, 180:0.86, 192:0.86, 204:0.86, 216:0.86, 228:0.86, 240:0.86, 252:0.86, 264:0.86, 276:0.86, 288:0.86, 300:0.86, 312:0.86, 324:0.86, 336:0.86, 348:0.86, 360:0.86, 372:0.86}, strSexFemale:{12:0.86, 24:0.86, 36:0.86, 48:0.86, 60:0.86, 72:0.86, 84:0.86, 96:0.86, 108:0.86, 120:0.86, 132:0.86, 144:0.86, 156:0.86, 168:0.86, 180:0.86, 192:0.86, 204:0.86, 216:0.86, 228:0.86, 240:0.86, 252:0.86, 264:0.86, 276:0.86, 288:0.86, 300:0.86, 312:0.86, 324:0.86, 336:0.86, 348:0.86, 360:0.86, 372:0.86}}, True]  #100 = 50]  #100 = 50
    #                        ,[1,0,3,50000  ,32,0.5, 31,30,15, 1,1,1,[1],self.nLoci,self.nAllelesPerLoci+1,self.intAlleleFrequencyScheme,self.listAlleleFreqs,1, False, False, self.listLDNe_Experiments_Custom_2_Loci_To_Report, False, False, 8, 10, 2, 32, 8, False, 
    #                         True,  {strSexMale: 3, strSexFemale: 3}, {strSexMale:{12:0.86, 24:0.86, 36:0.86, 48:0.86, 60:0.86, 72:0.86, 84:0.86, 96:0.86, 108:0.86, 120:0.86, 132:0.86, 144:0.86, 156:0.86, 168:0.86, 180:0.86, 192:0.86, 204:0.86, 216:0.86, 228:0.86, 240:0.86, 252:0.86, 264:0.86, 276:0.86, 288:0.86, 300:0.86, 312:0.86, 324:0.86, 336:0.86, 348:0.86, 360:0.86, 372:0.86}, strSexFemale:{12:0.86, 24:0.86, 36:0.86, 48:0.86, 60:0.86, 72:0.86, 84:0.86, 96:0.86, 108:0.86, 120:0.86, 132:0.86, 144:0.86, 156:0.86, 168:0.86, 180:0.86, 192:0.86, 204:0.86, 216:0.86, 228:0.86, 240:0.86, 252:0.86, 264:0.86, 276:0.86, 288:0.86, 300:0.86, 312:0.86, 324:0.86, 336:0.86, 348:0.86, 360:0.86, 372:0.86}}, False, {strSexMale: 3, strSexFemale: 3}, {strSexMale:{12:0.86, 24:0.86, 36:0.86, 48:0.86, 60:0.86, 72:0.86, 84:0.86, 96:0.86, 108:0.86, 120:0.86, 132:0.86, 144:0.86, 156:0.86, 168:0.86, 180:0.86, 192:0.86, 204:0.86, 216:0.86, 228:0.86, 240:0.86, 252:0.86, 264:0.86, 276:0.86, 288:0.86, 300:0.86, 312:0.86, 324:0.86, 336:0.86, 348:0.86, 360:0.86, 372:0.86}, strSexFemale:{12:0.86, 24:0.86, 36:0.86, 48:0.86, 60:0.86, 72:0.86, 84:0.86, 96:0.86, 108:0.86, 120:0.86, 132:0.86, 144:0.86, 156:0.86, 168:0.86, 180:0.86, 192:0.86, 204:0.86, 216:0.86, 228:0.86, 240:0.86, 252:0.86, 264:0.86, 276:0.86, 288:0.86, 300:0.86, 312:0.86, 324:0.86, 336:0.86, 348:0.86, 360:0.86, 372:0.86}}, True]  #100 = 50]  #100 = 50
    #                        ,[1,0,3,60000  ,32,0.5, 31,30,15, 1,1,1,[1],self.nLoci,self.nAllelesPerLoci+1,self.intAlleleFrequencyScheme,self.listAlleleFreqs,1, False, False, self.listLDNe_Experiments_Custom_2_Loci_To_Report, False, False, 8, 10, 2, 32, 8, False, 
    #                         True,  {strSexMale: 3, strSexFemale: 3}, {strSexMale:{12:0.86, 24:0.86, 36:0.86, 48:0.86, 60:0.86, 72:0.86, 84:0.86, 96:0.86, 108:0.86, 120:0.86, 132:0.86, 144:0.86, 156:0.86, 168:0.86, 180:0.86, 192:0.86, 204:0.86, 216:0.86, 228:0.86, 240:0.86, 252:0.86, 264:0.86, 276:0.86, 288:0.86, 300:0.86, 312:0.86, 324:0.86, 336:0.86, 348:0.86, 360:0.86, 372:0.86}, strSexFemale:{12:0.86, 24:0.86, 36:0.86, 48:0.86, 60:0.86, 72:0.86, 84:0.86, 96:0.86, 108:0.86, 120:0.86, 132:0.86, 144:0.86, 156:0.86, 168:0.86, 180:0.86, 192:0.86, 204:0.86, 216:0.86, 228:0.86, 240:0.86, 252:0.86, 264:0.86, 276:0.86, 288:0.86, 300:0.86, 312:0.86, 324:0.86, 336:0.86, 348:0.86, 360:0.86, 372:0.86}}, False, {strSexMale: 3, strSexFemale: 3}, {strSexMale:{12:0.86, 24:0.86, 36:0.86, 48:0.86, 60:0.86, 72:0.86, 84:0.86, 96:0.86, 108:0.86, 120:0.86, 132:0.86, 144:0.86, 156:0.86, 168:0.86, 180:0.86, 192:0.86, 204:0.86, 216:0.86, 228:0.86, 240:0.86, 252:0.86, 264:0.86, 276:0.86, 288:0.86, 300:0.86, 312:0.86, 324:0.86, 336:0.86, 348:0.86, 360:0.86, 372:0.86}, strSexFemale:{12:0.86, 24:0.86, 36:0.86, 48:0.86, 60:0.86, 72:0.86, 84:0.86, 96:0.86, 108:0.86, 120:0.86, 132:0.86, 144:0.86, 156:0.86, 168:0.86, 180:0.86, 192:0.86, 204:0.86, 216:0.86, 228:0.86, 240:0.86, 252:0.86, 264:0.86, 276:0.86, 288:0.86, 300:0.86, 312:0.86, 324:0.86, 336:0.86, 348:0.86, 360:0.86, 372:0.86}}, True]  #100 = 50]  #100 = 50
    #                        ,[1,0,3,70000  ,32,0.5, 31,30,15, 1,1,1,[1],self.nLoci,self.nAllelesPerLoci+1,self.intAlleleFrequencyScheme,self.listAlleleFreqs,1, False, False, self.listLDNe_Experiments_Custom_2_Loci_To_Report, False, False, 8, 10, 2, 32, 8, False, 
    #                         True,  {strSexMale: 3, strSexFemale: 3}, {strSexMale:{12:0.86, 24:0.86, 36:0.86, 48:0.86, 60:0.86, 72:0.86, 84:0.86, 96:0.86, 108:0.86, 120:0.86, 132:0.86, 144:0.86, 156:0.86, 168:0.86, 180:0.86, 192:0.86, 204:0.86, 216:0.86, 228:0.86, 240:0.86, 252:0.86, 264:0.86, 276:0.86, 288:0.86, 300:0.86, 312:0.86, 324:0.86, 336:0.86, 348:0.86, 360:0.86, 372:0.86}, strSexFemale:{12:0.86, 24:0.86, 36:0.86, 48:0.86, 60:0.86, 72:0.86, 84:0.86, 96:0.86, 108:0.86, 120:0.86, 132:0.86, 144:0.86, 156:0.86, 168:0.86, 180:0.86, 192:0.86, 204:0.86, 216:0.86, 228:0.86, 240:0.86, 252:0.86, 264:0.86, 276:0.86, 288:0.86, 300:0.86, 312:0.86, 324:0.86, 336:0.86, 348:0.86, 360:0.86, 372:0.86}}, False, {strSexMale: 3, strSexFemale: 3}, {strSexMale:{12:0.86, 24:0.86, 36:0.86, 48:0.86, 60:0.86, 72:0.86, 84:0.86, 96:0.86, 108:0.86, 120:0.86, 132:0.86, 144:0.86, 156:0.86, 168:0.86, 180:0.86, 192:0.86, 204:0.86, 216:0.86, 228:0.86, 240:0.86, 252:0.86, 264:0.86, 276:0.86, 288:0.86, 300:0.86, 312:0.86, 324:0.86, 336:0.86, 348:0.86, 360:0.86, 372:0.86}, strSexFemale:{12:0.86, 24:0.86, 36:0.86, 48:0.86, 60:0.86, 72:0.86, 84:0.86, 96:0.86, 108:0.86, 120:0.86, 132:0.86, 144:0.86, 156:0.86, 168:0.86, 180:0.86, 192:0.86, 204:0.86, 216:0.86, 228:0.86, 240:0.86, 252:0.86, 264:0.86, 276:0.86, 288:0.86, 300:0.86, 312:0.86, 324:0.86, 336:0.86, 348:0.86, 360:0.86, 372:0.86}}, True]  #100 = 50]  #100 = 50
    #                        ,[1,0,3,80000  ,32,0.5, 31,30,15, 1,1,1,[1],self.nLoci,self.nAllelesPerLoci+1,self.intAlleleFrequencyScheme,self.listAlleleFreqs,1, False, False, self.listLDNe_Experiments_Custom_2_Loci_To_Report, False, False, 8, 10, 2, 32, 8, False, 
    #                         True,  {strSexMale: 3, strSexFemale: 3}, {strSexMale:{12:0.86, 24:0.86, 36:0.86, 48:0.86, 60:0.86, 72:0.86, 84:0.86, 96:0.86, 108:0.86, 120:0.86, 132:0.86, 144:0.86, 156:0.86, 168:0.86, 180:0.86, 192:0.86, 204:0.86, 216:0.86, 228:0.86, 240:0.86, 252:0.86, 264:0.86, 276:0.86, 288:0.86, 300:0.86, 312:0.86, 324:0.86, 336:0.86, 348:0.86, 360:0.86, 372:0.86}, strSexFemale:{12:0.86, 24:0.86, 36:0.86, 48:0.86, 60:0.86, 72:0.86, 84:0.86, 96:0.86, 108:0.86, 120:0.86, 132:0.86, 144:0.86, 156:0.86, 168:0.86, 180:0.86, 192:0.86, 204:0.86, 216:0.86, 228:0.86, 240:0.86, 252:0.86, 264:0.86, 276:0.86, 288:0.86, 300:0.86, 312:0.86, 324:0.86, 336:0.86, 348:0.86, 360:0.86, 372:0.86}}, False, {strSexMale: 3, strSexFemale: 3}, {strSexMale:{12:0.86, 24:0.86, 36:0.86, 48:0.86, 60:0.86, 72:0.86, 84:0.86, 96:0.86, 108:0.86, 120:0.86, 132:0.86, 144:0.86, 156:0.86, 168:0.86, 180:0.86, 192:0.86, 204:0.86, 216:0.86, 228:0.86, 240:0.86, 252:0.86, 264:0.86, 276:0.86, 288:0.86, 300:0.86, 312:0.86, 324:0.86, 336:0.86, 348:0.86, 360:0.86, 372:0.86}, strSexFemale:{12:0.86, 24:0.86, 36:0.86, 48:0.86, 60:0.86, 72:0.86, 84:0.86, 96:0.86, 108:0.86, 120:0.86, 132:0.86, 144:0.86, 156:0.86, 168:0.86, 180:0.86, 192:0.86, 204:0.86, 216:0.86, 228:0.86, 240:0.86, 252:0.86, 264:0.86, 276:0.86, 288:0.86, 300:0.86, 312:0.86, 324:0.86, 336:0.86, 348:0.86, 360:0.86, 372:0.86}}, True]  #100 = 50]  #100 = 50
    #                        ,[1,0,3,90000  ,32,0.5, 31,30,15, 1,1,1,[1],self.nLoci,self.nAllelesPerLoci+1,self.intAlleleFrequencyScheme,self.listAlleleFreqs,1, False, False, self.listLDNe_Experiments_Custom_2_Loci_To_Report, False, False, 8, 10, 2, 32, 8, False, 
    #                         True,  {strSexMale: 3, strSexFemale: 3}, {strSexMale:{12:0.86, 24:0.86, 36:0.86, 48:0.86, 60:0.86, 72:0.86, 84:0.86, 96:0.86, 108:0.86, 120:0.86, 132:0.86, 144:0.86, 156:0.86, 168:0.86, 180:0.86, 192:0.86, 204:0.86, 216:0.86, 228:0.86, 240:0.86, 252:0.86, 264:0.86, 276:0.86, 288:0.86, 300:0.86, 312:0.86, 324:0.86, 336:0.86, 348:0.86, 360:0.86, 372:0.86}, strSexFemale:{12:0.86, 24:0.86, 36:0.86, 48:0.86, 60:0.86, 72:0.86, 84:0.86, 96:0.86, 108:0.86, 120:0.86, 132:0.86, 144:0.86, 156:0.86, 168:0.86, 180:0.86, 192:0.86, 204:0.86, 216:0.86, 228:0.86, 240:0.86, 252:0.86, 264:0.86, 276:0.86, 288:0.86, 300:0.86, 312:0.86, 324:0.86, 336:0.86, 348:0.86, 360:0.86, 372:0.86}}, False, {strSexMale: 3, strSexFemale: 3}, {strSexMale:{12:0.86, 24:0.86, 36:0.86, 48:0.86, 60:0.86, 72:0.86, 84:0.86, 96:0.86, 108:0.86, 120:0.86, 132:0.86, 144:0.86, 156:0.86, 168:0.86, 180:0.86, 192:0.86, 204:0.86, 216:0.86, 228:0.86, 240:0.86, 252:0.86, 264:0.86, 276:0.86, 288:0.86, 300:0.86, 312:0.86, 324:0.86, 336:0.86, 348:0.86, 360:0.86, 372:0.86}, strSexFemale:{12:0.86, 24:0.86, 36:0.86, 48:0.86, 60:0.86, 72:0.86, 84:0.86, 96:0.86, 108:0.86, 120:0.86, 132:0.86, 144:0.86, 156:0.86, 168:0.86, 180:0.86, 192:0.86, 204:0.86, 216:0.86, 228:0.86, 240:0.86, 252:0.86, 264:0.86, 276:0.86, 288:0.86, 300:0.86, 312:0.86, 324:0.86, 336:0.86, 348:0.86, 360:0.86, 372:0.86}}, True]  #100 = 50]  #100 = 50
    #                        ,[1,0,3,100000 ,32,0.5, 31,30,15, 1,1,1,[1],self.nLoci,self.nAllelesPerLoci+1,self.intAlleleFrequencyScheme,self.listAlleleFreqs,1, False, False, self.listLDNe_Experiments_Custom_2_Loci_To_Report, False, False, 8, 10, 2, 32, 8, False, 
    #                         True,  {strSexMale: 3, strSexFemale: 3}, {strSexMale:{12:0.86, 24:0.86, 36:0.86, 48:0.86, 60:0.86, 72:0.86, 84:0.86, 96:0.86, 108:0.86, 120:0.86, 132:0.86, 144:0.86, 156:0.86, 168:0.86, 180:0.86, 192:0.86, 204:0.86, 216:0.86, 228:0.86, 240:0.86, 252:0.86, 264:0.86, 276:0.86, 288:0.86, 300:0.86, 312:0.86, 324:0.86, 336:0.86, 348:0.86, 360:0.86, 372:0.86}, strSexFemale:{12:0.86, 24:0.86, 36:0.86, 48:0.86, 60:0.86, 72:0.86, 84:0.86, 96:0.86, 108:0.86, 120:0.86, 132:0.86, 144:0.86, 156:0.86, 168:0.86, 180:0.86, 192:0.86, 204:0.86, 216:0.86, 228:0.86, 240:0.86, 252:0.86, 264:0.86, 276:0.86, 288:0.86, 300:0.86, 312:0.86, 324:0.86, 336:0.86, 348:0.86, 360:0.86, 372:0.86}}, False, {strSexMale: 3, strSexFemale: 3}, {strSexMale:{12:0.86, 24:0.86, 36:0.86, 48:0.86, 60:0.86, 72:0.86, 84:0.86, 96:0.86, 108:0.86, 120:0.86, 132:0.86, 144:0.86, 156:0.86, 168:0.86, 180:0.86, 192:0.86, 204:0.86, 216:0.86, 228:0.86, 240:0.86, 252:0.86, 264:0.86, 276:0.86, 288:0.86, 300:0.86, 312:0.86, 324:0.86, 336:0.86, 348:0.86, 360:0.86, 372:0.86}, strSexFemale:{12:0.86, 24:0.86, 36:0.86, 48:0.86, 60:0.86, 72:0.86, 84:0.86, 96:0.86, 108:0.86, 120:0.86, 132:0.86, 144:0.86, 156:0.86, 168:0.86, 180:0.86, 192:0.86, 204:0.86, 216:0.86, 228:0.86, 240:0.86, 252:0.86, 264:0.86, 276:0.86, 288:0.86, 300:0.86, 312:0.86, 324:0.86, 336:0.86, 348:0.86, 360:0.86, 372:0.86}}, True]  #100 = 50]  #100 = 50
    #                          ]        
    
    #                     #TEST ON N=100 Natural mort only
    #                     self.listBatchRunParameters = [
    #                         [1,0,3,100  ,32,0.5, 31,30,15, 1,1,1,[1],self.nLoci,self.nAllelesPerLoci+1,self.intAlleleFrequencyScheme,self.listAlleleFreqs,1, False, False, self.listLDNe_Experiments_Custom_2_Loci_To_Report, False, False, 8, 10, 2, 32, 8, False, 
    #                         True,  {strSexMale: 3, strSexFemale: 3}, {strSexMale:{12:0.86, 24:0.86, 36:0.86, 48:0.86, 60:0.86, 72:0.86, 84:0.86, 96:0.86, 108:0.86, 120:0.86, 132:0.86, 144:0.86, 156:0.86, 168:0.86, 180:0.86, 192:0.86, 204:0.86, 216:0.86, 228:0.86, 240:0.86, 252:0.86, 264:0.86, 276:0.86, 288:0.86, 300:0.86, 312:0.86, 324:0.86, 336:0.86, 348:0.86, 360:0.86, 372:0.86}, strSexFemale:{12:0.86, 24:0.86, 36:0.86, 48:0.86, 60:0.86, 72:0.86, 84:0.86, 96:0.86, 108:0.86, 120:0.86, 132:0.86, 144:0.86, 156:0.86, 168:0.86, 180:0.86, 192:0.86, 204:0.86, 216:0.86, 228:0.86, 240:0.86, 252:0.86, 264:0.86, 276:0.86, 288:0.86, 300:0.86, 312:0.86, 324:0.86, 336:0.86, 348:0.86, 360:0.86, 372:0.86}}, False, {strSexMale: 3, strSexFemale: 3}, {strSexMale:{12:0.86, 24:0.86, 36:0.86, 48:0.86, 60:0.86, 72:0.86, 84:0.86, 96:0.86, 108:0.86, 120:0.86, 132:0.86, 144:0.86, 156:0.86, 168:0.86, 180:0.86, 192:0.86, 204:0.86, 216:0.86, 228:0.86, 240:0.86, 252:0.86, 264:0.86, 276:0.86, 288:0.86, 300:0.86, 312:0.86, 324:0.86, 336:0.86, 348:0.86, 360:0.86, 372:0.86}, strSexFemale:{12:0.86, 24:0.86, 36:0.86, 48:0.86, 60:0.86, 72:0.86, 84:0.86, 96:0.86, 108:0.86, 120:0.86, 132:0.86, 144:0.86, 156:0.86, 168:0.86, 180:0.86, 192:0.86, 204:0.86, 216:0.86, 228:0.86, 240:0.86, 252:0.86, 264:0.86, 276:0.86, 288:0.86, 300:0.86, 312:0.86, 324:0.86, 336:0.86, 348:0.86, 360:0.86, 372:0.86}}, True]  #100 = 50]  #100 = 50
    #                          ]        
    
    #                     #TEST ON N=1000 Natural mort only
    #                     self.listBatchRunParameters = [
    #                         [1,0,3,1000  ,32,0.5, 31,30,15, 1,1,1,[1],self.nLoci,self.nAllelesPerLoci+1,self.intAlleleFrequencyScheme,self.listAlleleFreqs,1, False, False, self.listLDNe_Experiments_Custom_2_Loci_To_Report, False, False, 8, 10, 2, 32, 8, False, 
    #                         True,  {strSexMale: 3, strSexFemale: 3}, {strSexMale:{12:0.86, 24:0.86, 36:0.86, 48:0.86, 60:0.86, 72:0.86, 84:0.86, 96:0.86, 108:0.86, 120:0.86, 132:0.86, 144:0.86, 156:0.86, 168:0.86, 180:0.86, 192:0.86, 204:0.86, 216:0.86, 228:0.86, 240:0.86, 252:0.86, 264:0.86, 276:0.86, 288:0.86, 300:0.86, 312:0.86, 324:0.86, 336:0.86, 348:0.86, 360:0.86, 372:0.86}, strSexFemale:{12:0.86, 24:0.86, 36:0.86, 48:0.86, 60:0.86, 72:0.86, 84:0.86, 96:0.86, 108:0.86, 120:0.86, 132:0.86, 144:0.86, 156:0.86, 168:0.86, 180:0.86, 192:0.86, 204:0.86, 216:0.86, 228:0.86, 240:0.86, 252:0.86, 264:0.86, 276:0.86, 288:0.86, 300:0.86, 312:0.86, 324:0.86, 336:0.86, 348:0.86, 360:0.86, 372:0.86}}, False, {strSexMale: 3, strSexFemale: 3}, {strSexMale:{12:0.86, 24:0.86, 36:0.86, 48:0.86, 60:0.86, 72:0.86, 84:0.86, 96:0.86, 108:0.86, 120:0.86, 132:0.86, 144:0.86, 156:0.86, 168:0.86, 180:0.86, 192:0.86, 204:0.86, 216:0.86, 228:0.86, 240:0.86, 252:0.86, 264:0.86, 276:0.86, 288:0.86, 300:0.86, 312:0.86, 324:0.86, 336:0.86, 348:0.86, 360:0.86, 372:0.86}, strSexFemale:{12:0.86, 24:0.86, 36:0.86, 48:0.86, 60:0.86, 72:0.86, 84:0.86, 96:0.86, 108:0.86, 120:0.86, 132:0.86, 144:0.86, 156:0.86, 168:0.86, 180:0.86, 192:0.86, 204:0.86, 216:0.86, 228:0.86, 240:0.86, 252:0.86, 264:0.86, 276:0.86, 288:0.86, 300:0.86, 312:0.86, 324:0.86, 336:0.86, 348:0.86, 360:0.86, 372:0.86}}, True]  #100 = 50]  #100 = 50
    #                          ]        
    
    #                     #TEST ON N=5000 Natural mort only
    #                     self.listBatchRunParameters = [
    #                         [1,0,3,5000  ,32,0.5, 31,30,15, 1,1,1,[1],self.nLoci,self.nAllelesPerLoci+1,self.intAlleleFrequencyScheme,self.listAlleleFreqs,1, False, False, self.listLDNe_Experiments_Custom_2_Loci_To_Report, False, False, 8, 10, 2, 32, 8, False, 
    #                         True,  {strSexMale: 3, strSexFemale: 3}, {strSexMale:{12:0.86, 24:0.86, 36:0.86, 48:0.86, 60:0.86, 72:0.86, 84:0.86, 96:0.86, 108:0.86, 120:0.86, 132:0.86, 144:0.86, 156:0.86, 168:0.86, 180:0.86, 192:0.86, 204:0.86, 216:0.86, 228:0.86, 240:0.86, 252:0.86, 264:0.86, 276:0.86, 288:0.86, 300:0.86, 312:0.86, 324:0.86, 336:0.86, 348:0.86, 360:0.86, 372:0.86}, strSexFemale:{12:0.86, 24:0.86, 36:0.86, 48:0.86, 60:0.86, 72:0.86, 84:0.86, 96:0.86, 108:0.86, 120:0.86, 132:0.86, 144:0.86, 156:0.86, 168:0.86, 180:0.86, 192:0.86, 204:0.86, 216:0.86, 228:0.86, 240:0.86, 252:0.86, 264:0.86, 276:0.86, 288:0.86, 300:0.86, 312:0.86, 324:0.86, 336:0.86, 348:0.86, 360:0.86, 372:0.86}}, False, {strSexMale: 3, strSexFemale: 3}, {strSexMale:{12:0.86, 24:0.86, 36:0.86, 48:0.86, 60:0.86, 72:0.86, 84:0.86, 96:0.86, 108:0.86, 120:0.86, 132:0.86, 144:0.86, 156:0.86, 168:0.86, 180:0.86, 192:0.86, 204:0.86, 216:0.86, 228:0.86, 240:0.86, 252:0.86, 264:0.86, 276:0.86, 288:0.86, 300:0.86, 312:0.86, 324:0.86, 336:0.86, 348:0.86, 360:0.86, 372:0.86}, strSexFemale:{12:0.86, 24:0.86, 36:0.86, 48:0.86, 60:0.86, 72:0.86, 84:0.86, 96:0.86, 108:0.86, 120:0.86, 132:0.86, 144:0.86, 156:0.86, 168:0.86, 180:0.86, 192:0.86, 204:0.86, 216:0.86, 228:0.86, 240:0.86, 252:0.86, 264:0.86, 276:0.86, 288:0.86, 300:0.86, 312:0.86, 324:0.86, 336:0.86, 348:0.86, 360:0.86, 372:0.86}}, True]  #100 = 50]  #100 = 50
    #                          ]        
    
    #                     #TEST ON N=10000 Natural mort only
    #                     self.listBatchRunParameters = [
    #                         [1,0,3,10000  ,32,0.5, 31,30,15, 1,1,1,[1],self.nLoci,self.nAllelesPerLoci+1,self.intAlleleFrequencyScheme,self.listAlleleFreqs,1, False, False, self.listLDNe_Experiments_Custom_2_Loci_To_Report, False, False, 8, 10, 2, 32, 8, False, 
    #                         True,  {strSexMale: 3, strSexFemale: 3}, {strSexMale:{12:0.86, 24:0.86, 36:0.86, 48:0.86, 60:0.86, 72:0.86, 84:0.86, 96:0.86, 108:0.86, 120:0.86, 132:0.86, 144:0.86, 156:0.86, 168:0.86, 180:0.86, 192:0.86, 204:0.86, 216:0.86, 228:0.86, 240:0.86, 252:0.86, 264:0.86, 276:0.86, 288:0.86, 300:0.86, 312:0.86, 324:0.86, 336:0.86, 348:0.86, 360:0.86, 372:0.86}, strSexFemale:{12:0.86, 24:0.86, 36:0.86, 48:0.86, 60:0.86, 72:0.86, 84:0.86, 96:0.86, 108:0.86, 120:0.86, 132:0.86, 144:0.86, 156:0.86, 168:0.86, 180:0.86, 192:0.86, 204:0.86, 216:0.86, 228:0.86, 240:0.86, 252:0.86, 264:0.86, 276:0.86, 288:0.86, 300:0.86, 312:0.86, 324:0.86, 336:0.86, 348:0.86, 360:0.86, 372:0.86}}, False, {strSexMale: 3, strSexFemale: 3}, {strSexMale:{12:0.86, 24:0.86, 36:0.86, 48:0.86, 60:0.86, 72:0.86, 84:0.86, 96:0.86, 108:0.86, 120:0.86, 132:0.86, 144:0.86, 156:0.86, 168:0.86, 180:0.86, 192:0.86, 204:0.86, 216:0.86, 228:0.86, 240:0.86, 252:0.86, 264:0.86, 276:0.86, 288:0.86, 300:0.86, 312:0.86, 324:0.86, 336:0.86, 348:0.86, 360:0.86, 372:0.86}, strSexFemale:{12:0.86, 24:0.86, 36:0.86, 48:0.86, 60:0.86, 72:0.86, 84:0.86, 96:0.86, 108:0.86, 120:0.86, 132:0.86, 144:0.86, 156:0.86, 168:0.86, 180:0.86, 192:0.86, 204:0.86, 216:0.86, 228:0.86, 240:0.86, 252:0.86, 264:0.86, 276:0.86, 288:0.86, 300:0.86, 312:0.86, 324:0.86, 336:0.86, 348:0.86, 360:0.86, 372:0.86}}, True]  #100 = 50]  #100 = 50
    #                          ]        
                        
    #                     #Natural mort only
    #                     self.listBatchRunParameters = [
    #                         [1,0,3,95000  ,32,0.5, 31,30,15, 1,1,1,[1],self.nLoci,self.nAllelesPerLoci+1,self.intAlleleFrequencyScheme,self.listAlleleFreqs,1, False, False, self.listLDNe_Experiments_Custom_2_Loci_To_Report, False, False, 8, 10, 2, 32, 8, False, 
    #                         True,  {strSexMale: 3, strSexFemale: 3}, {strSexMale:{12:0.86, 24:0.86, 36:0.86, 48:0.86, 60:0.86, 72:0.86, 84:0.86, 96:0.86, 108:0.86, 120:0.86, 132:0.86, 144:0.86, 156:0.86, 168:0.86, 180:0.86, 192:0.86, 204:0.86, 216:0.86, 228:0.86, 240:0.86, 252:0.86, 264:0.86, 276:0.86, 288:0.86, 300:0.86, 312:0.86, 324:0.86, 336:0.86, 348:0.86, 360:0.86, 372:0.86}, strSexFemale:{12:0.86, 24:0.86, 36:0.86, 48:0.86, 60:0.86, 72:0.86, 84:0.86, 96:0.86, 108:0.86, 120:0.86, 132:0.86, 144:0.86, 156:0.86, 168:0.86, 180:0.86, 192:0.86, 204:0.86, 216:0.86, 228:0.86, 240:0.86, 252:0.86, 264:0.86, 276:0.86, 288:0.86, 300:0.86, 312:0.86, 324:0.86, 336:0.86, 348:0.86, 360:0.86, 372:0.86}}, False, {strSexMale: 3, strSexFemale: 3}, {strSexMale:{12:0.86, 24:0.86, 36:0.86, 48:0.86, 60:0.86, 72:0.86, 84:0.86, 96:0.86, 108:0.86, 120:0.86, 132:0.86, 144:0.86, 156:0.86, 168:0.86, 180:0.86, 192:0.86, 204:0.86, 216:0.86, 228:0.86, 240:0.86, 252:0.86, 264:0.86, 276:0.86, 288:0.86, 300:0.86, 312:0.86, 324:0.86, 336:0.86, 348:0.86, 360:0.86, 372:0.86}, strSexFemale:{12:0.86, 24:0.86, 36:0.86, 48:0.86, 60:0.86, 72:0.86, 84:0.86, 96:0.86, 108:0.86, 120:0.86, 132:0.86, 144:0.86, 156:0.86, 168:0.86, 180:0.86, 192:0.86, 204:0.86, 216:0.86, 228:0.86, 240:0.86, 252:0.86, 264:0.86, 276:0.86, 288:0.86, 300:0.86, 312:0.86, 324:0.86, 336:0.86, 348:0.86, 360:0.86, 372:0.86}}, True]  #100 = 50]  #100 = 50
    #                          ]        
    
    #                     #TEST ON UnNatural and Natural mort
    #                     self.listBatchRunParameters = [
    #                         [1,0,3,1000  ,32,0.5, 31,30,15, 1,1,1,[1],self.nLoci,self.nAllelesPerLoci+1,self.intAlleleFrequencyScheme,self.listAlleleFreqs,1, False, False, self.listLDNe_Experiments_Custom_2_Loci_To_Report, False, False, 8, 10, 2, 32, 8, False, 
    #                         True,  {strSexMale: 3, strSexFemale: 3}, {strSexMale:{12:0.86, 24:0.86, 36:0.86, 48:0.86, 60:0.86, 72:0.86, 84:0.86, 96:0.86, 108:0.86, 120:0.86, 132:0.86, 144:0.86, 156:0.86, 168:0.86, 180:0.86, 192:0.86, 204:0.86, 216:0.86, 228:0.86, 240:0.86, 252:0.86, 264:0.86, 276:0.86, 288:0.86, 300:0.86, 312:0.86, 324:0.86, 336:0.86, 348:0.86, 360:0.86, 372:0.86}, strSexFemale:{12:0.86, 24:0.86, 36:0.86, 48:0.86, 60:0.86, 72:0.86, 84:0.86, 96:0.86, 108:0.86, 120:0.86, 132:0.86, 144:0.86, 156:0.86, 168:0.86, 180:0.86, 192:0.86, 204:0.86, 216:0.86, 228:0.86, 240:0.86, 252:0.86, 264:0.86, 276:0.86, 288:0.86, 300:0.86, 312:0.86, 324:0.86, 336:0.86, 348:0.86, 360:0.86, 372:0.86}}, True, {strSexMale: 3, strSexFemale: 3}, {strSexMale:{12:0.96, 24:0.96, 36:0.96, 48:0.98, 60:0.99, 72:0.99, 84:1.00, 96:0.99, 108:0.98, 120:0.97, 132:0.93, 144:0.95, 156:0.88, 168:0.90, 180:0.86, 192:0.90, 204:0.94, 216:0.95, 228:0.97, 240:0.96, 252:0.98, 264:0.99, 276:1.00, 288:1.00, 300:1.00, 312:1.00, 324:1.00, 336:1.00, 348:1.00, 360:1.00, 372:1.00, 384:1.00, 396:1.00}, strSexFemale:{12:0.96, 24:0.96, 36:0.96, 48:0.98, 60:0.99, 72:0.99, 84:1.00, 96:0.99, 108:0.98, 120:0.97, 132:0.93, 144:0.95, 156:0.88, 168:0.90, 180:0.86, 192:0.90, 204:0.94, 216:0.95, 228:0.97, 240:0.96, 252:0.98, 264:0.99, 276:1.00, 288:1.00, 300:1.00, 312:1.00, 324:1.00, 336:1.00, 348:1.00, 360:1.00, 372:1.00, 384:1.00, 396:1.00}}, True]  #100 = 50]  #100 = 50
    #                          ]        
    #                     #TEST OFF UnNatural and Natural mort
    #                     self.listBatchRunParameters = [
    #                         [1,0,3,1000  ,32,0.5, 31,30,15, 1,1,1,[1],self.nLoci,self.nAllelesPerLoci+1,self.intAlleleFrequencyScheme,self.listAlleleFreqs,1, False, False, self.listLDNe_Experiments_Custom_2_Loci_To_Report, False, False, 8, 10, 2, 32, 8, False, 
    #                         True,  {strSexMale: 3, strSexFemale: 3}, {strSexMale:{12:0.86, 24:0.86, 36:0.86, 48:0.86, 60:0.86, 72:0.86, 84:0.86, 96:0.86, 108:0.86, 120:0.86, 132:0.86, 144:0.86, 156:0.86, 168:0.86, 180:0.86, 192:0.86, 204:0.86, 216:0.86, 228:0.86, 240:0.86, 252:0.86, 264:0.86, 276:0.86, 288:0.86, 300:0.86, 312:0.86, 324:0.86, 336:0.86, 348:0.86, 360:0.86, 372:0.86}, strSexFemale:{12:0.86, 24:0.86, 36:0.86, 48:0.86, 60:0.86, 72:0.86, 84:0.86, 96:0.86, 108:0.86, 120:0.86, 132:0.86, 144:0.86, 156:0.86, 168:0.86, 180:0.86, 192:0.86, 204:0.86, 216:0.86, 228:0.86, 240:0.86, 252:0.86, 264:0.86, 276:0.86, 288:0.86, 300:0.86, 312:0.86, 324:0.86, 336:0.86, 348:0.86, 360:0.86, 372:0.86}}, False, {strSexMale: 3, strSexFemale: 3}, {strSexMale:{12:0.96, 24:0.96, 36:0.96, 48:0.98, 60:0.99, 72:0.99, 84:1.00, 96:0.99, 108:0.98, 120:0.97, 132:0.93, 144:0.95, 156:0.88, 168:0.90, 180:0.86, 192:0.90, 204:0.94, 216:0.95, 228:0.97, 240:0.96, 252:0.98, 264:0.99, 276:1.00, 288:1.00, 300:1.00, 312:1.00, 324:1.00, 336:1.00, 348:1.00, 360:1.00, 372:1.00, 384:1.00, 396:1.00}, strSexFemale:{12:0.96, 24:0.96, 36:0.96, 48:0.98, 60:0.99, 72:0.99, 84:1.00, 96:0.99, 108:0.98, 120:0.97, 132:0.93, 144:0.95, 156:0.88, 168:0.90, 180:0.86, 192:0.90, 204:0.94, 216:0.95, 228:0.97, 240:0.96, 252:0.98, 264:0.99, 276:1.00, 288:1.00, 300:1.00, 312:1.00, 324:1.00, 336:1.00, 348:1.00, 360:1.00, 372:1.00, 384:1.00, 396:1.00}}, True]  #100 = 50]  #100 = 50
    #                          ]        
    
    #                     #UnNatural and Natural mort
    #                     self.listBatchRunParameters = [
    #                         [1,0,3,95000  ,32,0.5, 31,30,15, 1,1,1,[1],self.nLoci,self.nAllelesPerLoci+1,self.intAlleleFrequencyScheme,self.listAlleleFreqs,1, False, False, self.listLDNe_Experiments_Custom_2_Loci_To_Report, False, False, 8, 10, 2, 32, 8, False, 
    #                         True,  {strSexMale: 3, strSexFemale: 3}, {strSexMale:{12:0.86, 24:0.86, 36:0.86, 48:0.86, 60:0.86, 72:0.86, 84:0.86, 96:0.86, 108:0.86, 120:0.86, 132:0.86, 144:0.86, 156:0.86, 168:0.86, 180:0.86, 192:0.86, 204:0.86, 216:0.86, 228:0.86, 240:0.86, 252:0.86, 264:0.86, 276:0.86, 288:0.86, 300:0.86, 312:0.86, 324:0.86, 336:0.86, 348:0.86, 360:0.86, 372:0.86}, strSexFemale:{12:0.86, 24:0.86, 36:0.86, 48:0.86, 60:0.86, 72:0.86, 84:0.86, 96:0.86, 108:0.86, 120:0.86, 132:0.86, 144:0.86, 156:0.86, 168:0.86, 180:0.86, 192:0.86, 204:0.86, 216:0.86, 228:0.86, 240:0.86, 252:0.86, 264:0.86, 276:0.86, 288:0.86, 300:0.86, 312:0.86, 324:0.86, 336:0.86, 348:0.86, 360:0.86, 372:0.86}}, True, {strSexMale: 3, strSexFemale: 3}, {strSexMale:{12:0.96, 24:0.96, 36:0.96, 48:0.98, 60:0.99, 72:0.99, 84:1.00, 96:0.99, 108:0.98, 120:0.97, 132:0.93, 144:0.95, 156:0.88, 168:0.90, 180:0.86, 192:0.90, 204:0.94, 216:0.95, 228:0.97, 240:0.96, 252:0.98, 264:0.99, 276:1.00, 288:1.00, 300:1.00, 312:1.00, 324:1.00, 336:1.00, 348:1.00, 360:1.00, 372:1.00, 384:1.00, 396:1.00}, strSexFemale:{12:0.96, 24:0.96, 36:0.96, 48:0.98, 60:0.99, 72:0.99, 84:1.00, 96:0.99, 108:0.98, 120:0.97, 132:0.93, 144:0.95, 156:0.88, 168:0.90, 180:0.86, 192:0.90, 204:0.94, 216:0.95, 228:0.97, 240:0.96, 252:0.98, 264:0.99, 276:1.00, 288:1.00, 300:1.00, 312:1.00, 324:1.00, 336:1.00, 348:1.00, 360:1.00, 372:1.00, 384:1.00, 396:1.00}}, True]  #100 = 50]  #100 = 50
    #                          ]        
    
    #                     self.listBatchRunParameters = [
    #                         [1,0,3,80000  ,32,0.5, 31,30,15, 1,1,1,[1],self.nLoci,self.nAllelesPerLoci+1,self.intAlleleFrequencyScheme,self.listAlleleFreqs,1, False, False, self.listLDNe_Experiments_Custom_2_Loci_To_Report, False, False, 8, 10, 2, 32, 8, False, 
    #                         True,  {strSexMale: 3, strSexFemale: 3}, {strSexMale:{12:0.86, 24:0.86, 36:0.86, 48:0.86, 60:0.86, 72:0.86, 84:0.86, 96:0.86, 108:0.86, 120:0.86, 132:0.86, 144:0.86, 156:0.86, 168:0.86, 180:0.86, 192:0.86, 204:0.86, 216:0.86, 228:0.86, 240:0.86, 252:0.86, 264:0.86, 276:0.86, 288:0.86, 300:0.86, 312:0.86, 324:0.86, 336:0.86, 348:0.86, 360:0.86, 372:0.86}, strSexFemale:{12:0.86, 24:0.86, 36:0.86, 48:0.86, 60:0.86, 72:0.86, 84:0.86, 96:0.86, 108:0.86, 120:0.86, 132:0.86, 144:0.86, 156:0.86, 168:0.86, 180:0.86, 192:0.86, 204:0.86, 216:0.86, 228:0.86, 240:0.86, 252:0.86, 264:0.86, 276:0.86, 288:0.86, 300:0.86, 312:0.86, 324:0.86, 336:0.86, 348:0.86, 360:0.86, 372:0.86}}, False, {strSexMale: 3, strSexFemale: 3}, {strSexMale:{12:0.86, 24:0.86, 36:0.86, 48:0.86, 60:0.86, 72:0.86, 84:0.86, 96:0.86, 108:0.86, 120:0.86, 132:0.86, 144:0.86, 156:0.86, 168:0.86, 180:0.86, 192:0.86, 204:0.86, 216:0.86, 228:0.86, 240:0.86, 252:0.86, 264:0.86, 276:0.86, 288:0.86, 300:0.86, 312:0.86, 324:0.86, 336:0.86, 348:0.86, 360:0.86, 372:0.86}, strSexFemale:{12:0.86, 24:0.86, 36:0.86, 48:0.86, 60:0.86, 72:0.86, 84:0.86, 96:0.86, 108:0.86, 120:0.86, 132:0.86, 144:0.86, 156:0.86, 168:0.86, 180:0.86, 192:0.86, 204:0.86, 216:0.86, 228:0.86, 240:0.86, 252:0.86, 264:0.86, 276:0.86, 288:0.86, 300:0.86, 312:0.86, 324:0.86, 336:0.86, 348:0.86, 360:0.86, 372:0.86}}, True]  #100 = 50]  #100 = 50
    #                        ,[1,0,3,90000  ,32,0.5, 31,30,15, 1,1,1,[1],self.nLoci,self.nAllelesPerLoci+1,self.intAlleleFrequencyScheme,self.listAlleleFreqs,1, False, False, self.listLDNe_Experiments_Custom_2_Loci_To_Report, False, False, 8, 10, 2, 32, 8, False, 
    #                         True,  {strSexMale: 3, strSexFemale: 3}, {strSexMale:{12:0.86, 24:0.86, 36:0.86, 48:0.86, 60:0.86, 72:0.86, 84:0.86, 96:0.86, 108:0.86, 120:0.86, 132:0.86, 144:0.86, 156:0.86, 168:0.86, 180:0.86, 192:0.86, 204:0.86, 216:0.86, 228:0.86, 240:0.86, 252:0.86, 264:0.86, 276:0.86, 288:0.86, 300:0.86, 312:0.86, 324:0.86, 336:0.86, 348:0.86, 360:0.86, 372:0.86}, strSexFemale:{12:0.86, 24:0.86, 36:0.86, 48:0.86, 60:0.86, 72:0.86, 84:0.86, 96:0.86, 108:0.86, 120:0.86, 132:0.86, 144:0.86, 156:0.86, 168:0.86, 180:0.86, 192:0.86, 204:0.86, 216:0.86, 228:0.86, 240:0.86, 252:0.86, 264:0.86, 276:0.86, 288:0.86, 300:0.86, 312:0.86, 324:0.86, 336:0.86, 348:0.86, 360:0.86, 372:0.86}}, False, {strSexMale: 3, strSexFemale: 3}, {strSexMale:{12:0.86, 24:0.86, 36:0.86, 48:0.86, 60:0.86, 72:0.86, 84:0.86, 96:0.86, 108:0.86, 120:0.86, 132:0.86, 144:0.86, 156:0.86, 168:0.86, 180:0.86, 192:0.86, 204:0.86, 216:0.86, 228:0.86, 240:0.86, 252:0.86, 264:0.86, 276:0.86, 288:0.86, 300:0.86, 312:0.86, 324:0.86, 336:0.86, 348:0.86, 360:0.86, 372:0.86}, strSexFemale:{12:0.86, 24:0.86, 36:0.86, 48:0.86, 60:0.86, 72:0.86, 84:0.86, 96:0.86, 108:0.86, 120:0.86, 132:0.86, 144:0.86, 156:0.86, 168:0.86, 180:0.86, 192:0.86, 204:0.86, 216:0.86, 228:0.86, 240:0.86, 252:0.86, 264:0.86, 276:0.86, 288:0.86, 300:0.86, 312:0.86, 324:0.86, 336:0.86, 348:0.86, 360:0.86, 372:0.86}}, True]  #100 = 50]  #100 = 50
    #                        ,[1,0,3,100000  ,32,0.5, 31,30,15, 1,1,1,[1],self.nLoci,self.nAllelesPerLoci+1,self.intAlleleFrequencyScheme,self.listAlleleFreqs,1, False, False, self.listLDNe_Experiments_Custom_2_Loci_To_Report, False, False, 8, 10, 2, 32, 8, False, 
    #                         True,  {strSexMale: 3, strSexFemale: 3}, {strSexMale:{12:0.86, 24:0.86, 36:0.86, 48:0.86, 60:0.86, 72:0.86, 84:0.86, 96:0.86, 108:0.86, 120:0.86, 132:0.86, 144:0.86, 156:0.86, 168:0.86, 180:0.86, 192:0.86, 204:0.86, 216:0.86, 228:0.86, 240:0.86, 252:0.86, 264:0.86, 276:0.86, 288:0.86, 300:0.86, 312:0.86, 324:0.86, 336:0.86, 348:0.86, 360:0.86, 372:0.86}, strSexFemale:{12:0.86, 24:0.86, 36:0.86, 48:0.86, 60:0.86, 72:0.86, 84:0.86, 96:0.86, 108:0.86, 120:0.86, 132:0.86, 144:0.86, 156:0.86, 168:0.86, 180:0.86, 192:0.86, 204:0.86, 216:0.86, 228:0.86, 240:0.86, 252:0.86, 264:0.86, 276:0.86, 288:0.86, 300:0.86, 312:0.86, 324:0.86, 336:0.86, 348:0.86, 360:0.86, 372:0.86}}, False, {strSexMale: 3, strSexFemale: 3}, {strSexMale:{12:0.86, 24:0.86, 36:0.86, 48:0.86, 60:0.86, 72:0.86, 84:0.86, 96:0.86, 108:0.86, 120:0.86, 132:0.86, 144:0.86, 156:0.86, 168:0.86, 180:0.86, 192:0.86, 204:0.86, 216:0.86, 228:0.86, 240:0.86, 252:0.86, 264:0.86, 276:0.86, 288:0.86, 300:0.86, 312:0.86, 324:0.86, 336:0.86, 348:0.86, 360:0.86, 372:0.86}, strSexFemale:{12:0.86, 24:0.86, 36:0.86, 48:0.86, 60:0.86, 72:0.86, 84:0.86, 96:0.86, 108:0.86, 120:0.86, 132:0.86, 144:0.86, 156:0.86, 168:0.86, 180:0.86, 192:0.86, 204:0.86, 216:0.86, 228:0.86, 240:0.86, 252:0.86, 264:0.86, 276:0.86, 288:0.86, 300:0.86, 312:0.86, 324:0.86, 336:0.86, 348:0.86, 360:0.86, 372:0.86}}, True]  #100 = 50]  #100 = 50
    #                          ]        
                        
                return True

             
            '''            
#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< CLASS FINALIZATION
            '''
            def classCleanUp(self):
                # Add class clean up items here
                boolSuccessful=False

                return boolSuccessful

        self.SSParameters_obj = SSParameters() 
        return self.SSParameters_obj
 
    def __exit__(self, type, value, traceback): 
        self.SSParameters_obj.classCleanUp()