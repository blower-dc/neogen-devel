'''
Created on 2 May 2015

@author: Alia
'''
#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< PACKAGE IMPORTS
#
#------------------< Import python modules
# DEBUG Imports
from logging import getLogger as logging__getLogger
from handler_Debug import Timer2
#from handler_Debug import Debug_Location
import pandas
import matplotlib.pyplot as matplotlib__pyplot
import matplotlib.font_manager as matplotlib__fontmanager
import numpy as numpy
from decimal import *
import math as math
from collections import OrderedDict
from os import path as os__path
#------------------< Import DCB_General modules
from FileHandler import FileHandler

#------------------< Import SharkSim modules
from SSParameterHandler import SSParameterHandler
#from SSOutputHandler import SSOutputHandler
from globals_SharkSim import globalsSS
#from SSAnalysisHandler import SSAnalysisHandler
from SSResultsHandler import SSResults
from object_SSConfigSamplingStrategy import object_SSConfigSamplingStrategy
#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< CLASS DEFINITION
class SSPlots(object):
    '''
    classdocs
    '''


     
    def __init__(self, objSSParametersLocal):
        '''
        Constructor
        '''
        ''' Get Run Display Logger '''
#                 self.obj_Log_Run_Display = None
#                 if globalsSS.Logger_Run_Display.bool_Run_Display:
        self.obj_Log_Run_Display = logging__getLogger(globalsSS.Logger_Run_Display.static_Logger_Name__Run_Display)
        pass 
                   
        ''' Get Default Logger '''
#                 self.obj_Log_Default_Display = None
#                 if globalsSS.Logger_Default_Display.bool_Default_Display:
        ''' NOTE: Name is obj_Log_Default '''
        self.obj_Log_Default = logging__getLogger(globalsSS.Logger_Default_Display.static_Logger_Name__Default_Display)
        self.obj_Log_Default_Display = logging__getLogger(globalsSS.Logger_Default_Display.static_Logger_Name__Default_Display)
        pass

        ''' Get Debug Logger '''
#                 self.obj_Log_Debug_Display = None
#                 if globalsSS.Logger_Debug_Display.bool_Debug_Display:
        ''' NOTE: Name is obj_Log_Debug '''
        self.obj_Log_Debug_Display = logging__getLogger(globalsSS.Logger_Debug_Display.static_Logger_Name__Debug_Display)
        #Retire once all classes are converted to new logger
        self.obj_Log_Debug = self.obj_Log_Debug_Display
#                 else:
#                     #Retire once all classes are converted to new logger
#                     self.obj_Log_Debug = logging__getLogger('app_debug')      
#                 pass

        ''' Get Debug Timer '''
        self.obj_Log_Debug_Timing = None
        if globalsSS.Logger_Debug_Timing.bool_Debug_Timing:
            self.obj_Log_Debug_Timing = logging__getLogger(globalsSS.Logger_Debug_Timing.static_Logger_Name__Debug_Timing)
        pass


             
        self.obj_SSParams = objSSParametersLocal
    
        return None
    
    def __enter__(self):
        
        return self   
    
    '''
    -------------------------------------------------------------
    CURRENT NEOGEN PLOT - Plot POST SIM EXP_SAMPLING_STRATEGEY_1_0 Sampling Strategy LDNe Results Per Replicate EOR SUMMARISED Results
    -------------------------------------------------------------
    '''   
    def func__Plot_EXP_Sampling_Strategy_1_0_EOR_SUMM__Get_Data(self, str_Plot_Save_Path, list_int_Mating_Count_Replicate_Totals_To_Process, list_Search_Paths):

        boolSuccess = False
       
        '''
        -------------------------------
        Specify Final Output File
        -------------------------------
        '''
        ''' Output plot '''
        str_Excel_Input_Colname_Prefix = globalsSS.Excel_Results_File_Details.static_Excel_Colname_Prefix__Ne2_LDNe__Summary_EOR_Results
        str_Excel_Input_FileName =  globalsSS.Excel_Results_File_Details.static_Excel_FileName__Ne2_LDNe__Summary_EOR_Results
        
        '''
        -------------------------------
        Specify Excel Input file
        -------------------------------
        '''        
        str_Input_FileName = '*' + str_Excel_Input_FileName + '*.xlsx'
        str_File_Search_Pattern = str_Input_FileName

        ''' Get ALL the files to plot from list of search paths '''
        list_Path_And_ALL_Files = []
        with FileHandler() as obj_FileHandler:
            bool_Files_Located = False
            for str_Search_Path in list_Search_Paths:
        
                bool_Files_Located, list_Path_And_Files = obj_FileHandler.func_Locate_Files(str_Search_Path, str_File_Search_Pattern)
                list_Path_And_ALL_Files.extend(list_Path_And_Files)
            pass
        pass
    
        if bool_Files_Located == False:
            self.obj_Log_Default.error('File specified could not be located; str_Search_Path = ' + str_Search_Path + '; strFileSearchPattern = ' + str_File_Search_Pattern)
            '''Exit the function prematurely '''
            boolSuccess = False
            return boolSuccess
        pass    
        '''
        -------------------------------
        Process each file found adding each required dataset to a list of dataframes
        -------------------------------
        '''   
        list_DFs = []
        for str_Path_And_File in list_Path_And_ALL_Files:
            '''
            -------------------------------
            Import Excel Data to dataframe
            -------------------------------
            '''
            '''
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~
            Get & Process Input SHEET
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~
            '''
            str_Input_Excel_Sheet_Name = globalsSS.Excel_Results_File_Details.static_Excel_SheetName__Ne2_LDNe__Summary_EOR_Results
    
            self.obj_Log_Default.info('Dataframing results for: ' + str_Input_FileName + ' and for SHEET: ' + str_Input_Excel_Sheet_Name) 
    
            '''Get the data from the excel files with the specified sheet'''
            xl = pandas.ExcelFile(str_Path_And_File)
            df = xl.parse(str_Input_Excel_Sheet_Name)
            '''Get only the data needed '''
            df = self.func__Plot_EXP_Sampling_Strategy_1_0_EOR_SUMM__Initial_Subset(list_int_Mating_Count_Replicate_Totals_To_Process, df)
            '''Append the df to a list of dfs for plotting'''
            list_DFs.append(df)
        pass
        '''
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~
        Concatenate the dfs
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~
        '''  
        df_Aggregate = pandas.DataFrame()
        for df in list_DFs:
            '''log the results'''
            #str_Df = df_New.to_string()
            #self.obj_Log_Debug.debug('Results dataframe NEW: %s' % str_Df)
            
            #Concat DFs - Tried df.append() but it wont work
            df_Aggregate = pandas.concat([df_Aggregate,df], ignore_index=True)
            
            #str_Df = df_Aggregate.to_string()
            #self.obj_Log_Debug.debug('Results dataframe AGGREGATE: %s' % str_Df)

        pass

        #DEBUG_ON
        #str_Df = df_Aggregate.to_string()
        #self.obj_Log_Debug.debug('Results dataframe AGGREGATE 1: %s' % str_Df)
        #DEBUG_OFF
        
        df = df_Aggregate     
        '''
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~
        Transform the data
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~
        '''
        ''' Send the relevent DFs  '''
        list_DFs_To_Process = [df]          
        list_DFs_Processed = self.func__Plot_EXP_Sampling_Strategy_1_0_EOR_SUMM__Transform_And_Process(str_Plot_Save_Path, str_Excel_Input_FileName, str_Excel_Input_Colname_Prefix, list_DFs_To_Process)
            
        pass
                    
        return boolSuccess
    
    def func__Plot_EXP_Sampling_Strategy_1_0_EOR_SUMM__Initial_Subset(self, list_int_Mating_Count_Replicate_Totals_To_Process, df):
        
        self.obj_Log_Debug.debug('Initial subset of data')

        with SSResults(self.obj_SSParams) as obj_Results:
            str_Group_Key_Mating_Count_Replicate_Total = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Mating_Count_Replicate_Total
            str_Col_Name_Mating_Count_Replicate_Total = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df, str_Group_Key_Mating_Count_Replicate_Total)
        pass
    
        '''
        -----------------------------
        Subset df
        -----------------------------
        '''
        df_Subset = df[df[str_Col_Name_Mating_Count_Replicate_Total].isin(list_int_Mating_Count_Replicate_Totals_To_Process)]
        
        return df_Subset

    def func__Plot_EXP_Sampling_Strategy_1_0_EOR_SUMM__Transform_And_Process(self, str_Plot_Save_Path, str_Excel_Input_FileName, str_Excel_Input_Colname_Prefix, list_DFs_To_Process):
        
        self.obj_Log_Default.info('Transforming data')

        '''
        -----------------------------
        Specify DFs
        -----------------------------
        '''
        df_1 = list_DFs_To_Process[0]
           
        '''
        -----------------------------
        Specify Axes
        -----------------------------
        '''
        dict_Colnames = OrderedDict()
        
        with SSResults(self.obj_SSParams) as obj_Results:
#             ''' Primary X-Axis '''
#             str_Key_Colname_Stats_Category_Code_ = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category_Code
#             str_Colname_Stats_Category_Code = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Colname_Stats_Category_Code_)            
#             str_Primary_X_Axis_df_1_Colname = str_Colname_Stats_Category_Code 
#             dict_Colnames['DF_1_X_Axis_Primary'] = str_Primary_X_Axis_df_1_Colname
#             
#             ''' Primary Y-axis '''
#             ''' Present mean Ne as primary axis as this number incorporates the uncertainty of the LDNe method which is what researcher are trying to avoid with a good sampling strategy '''
#             str_Key_Colname_Ne2_floatLDNe = globalsSS.Colnames_Ne2_Output.static_Str_Colname_Ne2_floatLDNe
#             str_Colname_Ne2_floatLDNe = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Colname_Ne2_floatLDNe)
#             str_Primary_Y_Axis_df_1_Colname = str_Colname_Ne2_floatLDNe
#             dict_Colnames['DF_1_Y_Axis_Primary'] = str_Primary_Y_Axis_df_1_Colname
#             
#             ''' Primary Y-axis error bars '''
#             str_Key_Colname_Ne2_floatLDNeJackknife_Lwr_CI = globalsSS.Colnames_Ne2_Output.static_Str_Colname_Ne2_floatLDNeJackknife_Lwr_CI
#             str_Colname__Ne2_floatLDNeJackknife_Lwr_CI = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Colname_Ne2_floatLDNeJackknife_Lwr_CI)
#             str_Primary_Y_Axis_Lwr_CI_df_1_Colname = str_Colname__Ne2_floatLDNeJackknife_Lwr_CI
#             dict_Colnames['DF_1_Y_Axis_Primary_Lwr_CI'] = str_Primary_Y_Axis_Lwr_CI_df_1_Colname
#             
#             str_Key_Colname_Ne2_floatLDNeJackknife_Upr_CI = globalsSS.Colnames_Ne2_Output.static_Str_Colname_Ne2_floatLDNeJackknife_Upr_CI
#             str_Colname__Ne2_floatLDNeJackknife_Upr_CI = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Colname_Ne2_floatLDNeJackknife_Upr_CI)
#             str_Primary_Y_Axis_Upr_CI_df_1_Colname = str_Colname__Ne2_floatLDNeJackknife_Upr_CI
#             dict_Colnames['DF_1_Y_Axis_Primary_Upr_CI'] = str_Primary_Y_Axis_Upr_CI_df_1_Colname
#             
#             ''' Secondary Y-axis '''
#             ''' Present harmonic mean Ne (= mean rSquared Ne) as secondary Y-axis as this is not the number researchers are aiming to obtain '''
#             str_Key_Colname_float_Ne2_Burrows_r_Sqrd_LDNe = globalsSS.Colnames_Ne2_Aggregation.static_Str_Colname_float_Total_Ne2_r_Sqrd_LDNe
#             str_Colname_float_Total_Ne2_r_Sqrd_LDNe = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Colname_float_Ne2_Burrows_r_Sqrd_LDNe)
#             str_Secondary_Y_Axis_df_1_Colname = str_Colname_float_Total_Ne2_r_Sqrd_LDNe
#             dict_Colnames['DF_1_Y_Axis_Secondary'] = str_Secondary_Y_Axis_df_1_Colname
            
            ''' Primary X-Axis '''
            str_Key_Colname_Stats_Category_Code_ = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category_Code
            str_Colname_Stats_Category_Code = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Colname_Stats_Category_Code_)            
            str_Primary_X_Axis_df_1_Colname = str_Colname_Stats_Category_Code 
            dict_Colnames['DF_1_X_Axis_Primary'] = str_Primary_X_Axis_df_1_Colname
            
            ''' Primary Y-axis '''
            ''' Present harmonic mean Ne (= mean rSquared Ne) as PRIMARY Y-axis as this is the number researchers are aiming to obtain '''
            str_Key_Colname_Ne2_floatLDNe = globalsSS.Colnames_Ne2_Output.static_Str_Colname_Ne2_floatLDNe
            str_Colname_Ne2_floatLDNe = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Colname_Ne2_floatLDNe)
            str_Primary_Y_Axis_df_1_Colname = str_Colname_Ne2_floatLDNe
            dict_Colnames['DF_1_Y_Axis_Primary'] = str_Primary_Y_Axis_df_1_Colname            
#             str_Key_Colname_Ne2_floatLDNe_Harmonic_Mean = globalsSS.Colnames_Ne2_Aggregation.static_Str_Colname_Ne2_floatLDNe_Harmonic_Mean
#             str_Colname_Ne2_floatLDNe_Harmonic_Mean = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Colname_Ne2_floatLDNe_Harmonic_Mean)
#             str_Primary_Y_Axis_df_1_Colname = str_Colname_Ne2_floatLDNe_Harmonic_Mean
#             dict_Colnames['DF_1_Y_Axis_Primary'] = str_Primary_Y_Axis_df_1_Colname
            
            ''' Primary Y-axis error bars '''
            str_Key_Colname_Ne2_floatLDNeJackknife_Lwr_CI = globalsSS.Colnames_Ne2_Output.static_Str_Colname_Ne2_floatLDNeJackknife_Lwr_CI
            str_Colname__Ne2_floatLDNeJackknife_Lwr_CI = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Colname_Ne2_floatLDNeJackknife_Lwr_CI)
            str_Primary_Y_Axis_Lwr_CI_df_1_Colname = str_Colname__Ne2_floatLDNeJackknife_Lwr_CI
            dict_Colnames['DF_1_Y_Axis_Primary_Lwr_CI'] = str_Primary_Y_Axis_Lwr_CI_df_1_Colname
            
            str_Key_Colname_Ne2_floatLDNeJackknife_Upr_CI = globalsSS.Colnames_Ne2_Output.static_Str_Colname_Ne2_floatLDNeJackknife_Upr_CI
            str_Colname__Ne2_floatLDNeJackknife_Upr_CI = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Colname_Ne2_floatLDNeJackknife_Upr_CI)
            str_Primary_Y_Axis_Upr_CI_df_1_Colname = str_Colname__Ne2_floatLDNeJackknife_Upr_CI
            dict_Colnames['DF_1_Y_Axis_Primary_Upr_CI'] = str_Primary_Y_Axis_Upr_CI_df_1_Colname
            
            ''' Secondary Y-axis '''
            ''' Present mean Ne as SECONDARY axis as this number incorporates the uncertainty of the LDNe method which is what researcher are trying to avoid with a good sampling strategy '''
            str_Key_Colname_Ne2_floatLDNe = globalsSS.Colnames_Ne2_Output.static_Str_Colname_Ne2_floatLDNe
            str_Colname_Ne2_floatLDNe = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Colname_Ne2_floatLDNe)
            str_Secondary_Y_Axis_df_1_Colname = str_Colname_Ne2_floatLDNe
            dict_Colnames['DF_1_Y_Axis_Secondary'] = str_Secondary_Y_Axis_df_1_Colname

            ''' Tertiary Y-axis '''
            ''' Present harmonic mean LDNe for the COMPLETE AGE CLASS COHORTS as tertiary axis as this is the target LDNe for the sub-sampling strategy to aim for '''
#             str_Key_Colname_Ne2_floatLDNe_Harmonic_Mean = globalsSS.Colnames_Ne2_Aggregation.static_Str_Colname_Ne2_floatLDNe_Harmonic_Mean
#             str_Colname_Ne2_floatLDNe_Harmonic_Mean = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Colname_Ne2_floatLDNe_Harmonic_Mean)
#             str_Tertiary_Y_Axis_df_1_Colname = str_Colname_Ne2_floatLDNe_Harmonic_Mean
#             dict_Colnames['DF_2_Y_Axis_Tertiary'] = str_Tertiary_Y_Axis_df_1_Colname
#             str_Key_Colname_float_Ne2_Burrows_r_Sqrd_LDNe = globalsSS.Colnames_Ne2_Aggregation.static_Str_Colname_float_Total_Ne2_r_Sqrd_LDNe
#             str_Colname_float_Total_Ne2_r_Sqrd_LDNe = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Colname_float_Ne2_Burrows_r_Sqrd_LDNe)
#             str_Tertiary_Y_Axis_df_1_Colname = str_Colname_float_Total_Ne2_r_Sqrd_LDNe
#             dict_Colnames['DF_2_Y_Axis_Tertiary'] = str_Tertiary_Y_Axis_df_1_Colname
            str_Key_Colname_Ne2_floatLDNe = globalsSS.Colnames_Ne2_Output.static_Str_Colname_Ne2_floatLDNe
            str_Colname_Ne2_floatLDNe = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Colname_Ne2_floatLDNe)
            str_Tertiary_Y_Axis_df_1_Colname = str_Colname_Ne2_floatLDNe
            dict_Colnames['DF_2_Y_Axis_Tertiary'] = str_Tertiary_Y_Axis_df_1_Colname 
            
            ''' Primary Y-axis INF counts'''
            str_Key_Colname_Ne2_Inf_Count_floatLDNe = globalsSS.Colnames_Ne2_Aggregation.static_Str_Colname_Ne2_Inf_Count_floatLDNe
            str_Colname_Ne2_Inf_Count_floatLDNe = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Colname_Ne2_Inf_Count_floatLDNe)
            dict_Colnames['DF_1_Y_Axis_Primary_INF_Count'] = str_Colname_Ne2_Inf_Count_floatLDNe
            
            ''' Primary Y-axis Lwr CI INF counts'''
            str_Key_Colname_Ne2_Inf_Count_floatLDNeJackknife_Lwr_CI = globalsSS.Colnames_Ne2_Aggregation.static_Str_Colname_Ne2_Inf_Count_floatLDNeJackknife_Lwr_CI
            str_Colname_Ne2_Inf_Count_floatLDNeJackknife_Lwr_CI = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Colname_Ne2_Inf_Count_floatLDNeJackknife_Lwr_CI)
            dict_Colnames['DF_1_Y_Axis_Primary_Lwr_CI_INF_Count'] = str_Colname_Ne2_Inf_Count_floatLDNeJackknife_Lwr_CI
            
            ''' Primary Y-axis Upr CI INF counts'''
            str_Key_Colname_Ne2_Inf_Count_floatLDNeJackknife_Upr_CI = globalsSS.Colnames_Ne2_Aggregation.static_Str_Colname_Ne2_Inf_Count_floatLDNeJackknife_Upr_CI
            str_Colname_Ne2_Inf_Count_floatLDNeJackknife_Upr_CI = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Colname_Ne2_Inf_Count_floatLDNeJackknife_Upr_CI)
            dict_Colnames['DF_1_Y_Axis_Primary_Upr_CI_INF_Count'] = str_Colname_Ne2_Inf_Count_floatLDNeJackknife_Upr_CI
        
        pass

        '''
        -----------------------------
        Get the Primary Y-Axis Max
        -----------------------------
        '''


        ''' Get Primary Y-Axis Mean '''
        str_Col_Y_Axis_Key = dict_Colnames['DF_1_Y_Axis_Primary']
        df_Temp_Mean = pandas.DataFrame()
        df_Temp_Mean["Mean"] = df_1[[str_Col_Y_Axis_Key]].mean(axis=1)
        int_Y_Axis_Mean = df_Temp_Mean["Mean"].mean(axis=0)
        del df_Temp_Mean     
        pass         
        
        ''' Get Y-Axis Max '''
        str_Col_Y_Axis_Key = dict_Colnames['DF_1_Y_Axis_Primary']
        #str_Col_Y_Axis_Key = dict_Colnames['DF_1_Y_Axis_Primary_Upr_CI']
        df_Temp_Max = pandas.DataFrame()
        df_Temp_Max["Max"] = df_1[[str_Col_Y_Axis_Key]].max(axis=1)
        int_Y_Axis_Max = df_Temp_Max["Max"].max(axis=0)
        int_Y_Axis_Max = int(math.ceil(int_Y_Axis_Max / 500)) * 1000
        #int_Y_Axis_Max = int(math.ceil(int_Y_Axis_Mean / 100)) * 200
        del df_Temp_Max    
        pass 
        
        ''' Get Y-Axis Min '''
        str_Col_Y_Axis_Key = dict_Colnames['DF_1_Y_Axis_Primary']
        #str_Col_Y_Axis_Key = dict_Colnames['DF_1_Y_Axis_Primary_Upr_CI']
        df_Temp_Min = pandas.DataFrame()
        df_Temp_Min["Min"] = df_1[[str_Col_Y_Axis_Key]].min(axis=1)
        int_Y_Axis_Min = df_Temp_Min["Min"].min(axis=0)
        int_Y_Axis_Min = int(math.ceil(int_Y_Axis_Min / 500)) * 1000
        #int_Y_Axis_Min = int(math.ceil(int_Y_Axis_Mean / 100)) * 200
        del df_Temp_Min     
        pass 

        '''
        -----------------------------
        Get the Runs required
        -----------------------------
        '''
        with SSResults(self.obj_SSParams) as obj_Results:
            str_Group_Key_Run_UDF_Replicate_Total = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Run_User_Defined_Folder
            str_Col_Name_Run_UDF_Replicate_Total = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Group_Key_Run_UDF_Replicate_Total)
        pass   
        ''' Get all the UNIQUE Run_User_Defined_Folder values '''
        nparray_Run_UDF_List = numpy.unique(df_1[str_Col_Name_Run_UDF_Replicate_Total])

        '''
        -----------------------------
        Get the Experiments required
        -----------------------------
        '''
        with SSResults(self.obj_SSParams) as obj_Results:
            str_Group_Key_Colname_Experiment_Label = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Experiment_Label
            str_Colname_Experiment_Label = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Group_Key_Colname_Experiment_Label)
        pass   
        ''' Get all the UNIQUE Experiment Label values '''
        nparray_Experiment_Label_List = numpy.unique(df_1[str_Colname_Experiment_Label])
        '''
        -----------------------------
        Get the matings required
        -----------------------------
        '''    
        with SSResults(self.obj_SSParams) as obj_Results:
            str_Group_Key_Mating_Count_Replicate_Total = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Mating_Count_Replicate_Total
            str_Col_Name_Mating_Count_Replicate_Total = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Group_Key_Mating_Count_Replicate_Total)
        pass
        ''' Get all the UNIQUE Mating_Count_Replicate_Total values '''
        nparray_Mating_Count_Replicate_Total = numpy.unique(df_1[str_Col_Name_Mating_Count_Replicate_Total])
  
        '''
        -----------------------------
        Define the Figures required
        -----------------------------
        '''
        bool_Interactive_Display = False
        ''' Specify the number of figure copies and their specs '''
        dict_Fig_Copies = {
                            #1:{'ColourScheme':'Default', 'Transparent':False, 'Interactive_Display':bool_Interactive_Display, 'Save_PNG': True, 'Save_PDF': False}
                            1:{'ColourScheme':'Default', 'Transparent':False, 'Interactive_Display':bool_Interactive_Display, 'Save_PNG': True, 'Save_PDF': False, 'Save_SVG': True}
                           #,2:{'ColourScheme':'Dark_Blue', 'Transparent':True, 'Interactive_Display':bool_Interactive_Display,'Save_PNG': True, 'Save_PDF': False}
                           }

        '''
        -----------------------------
        Process for each Figure required
        -----------------------------
        '''        
        for key_Dict_Fig_Copy_Params, value_Dict_Fig_Copy_Params in dict_Fig_Copies.iteritems():
            
            str_Figure_Colour_Scheme = value_Dict_Fig_Copy_Params['ColourScheme']
            
            '''
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~
            Create Figure
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~
            '''
            pyplot_Fig, ax1 = self.func__Plot_EXP_Sampling_Strategy_1_0_EOR_SUMM__Create_Figure(list_DFs_To_Process, dict_Colnames)

            '''
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~
            Plot lines for each Experiment specified
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~
            '''
            dict_pyplot_Legend_Lines = OrderedDict()   
            for str_Experiment_Path in nparray_Run_UDF_List: 
                 
                ''' Get Experiment detail from Experiment path '''
#                 dict_Experiment_Details = OrderedDict()
#                 #print(repr(str_Experiment_Path)) 
#                 #';'.split(str_Experiment_Path.replace('\\', ';'))
#                 list_Experiment_Details = str_Experiment_Path.split('\\')
#                 dict_Experiment_Details['Species_Code'] = list_Experiment_Details[0]
#                 dict_Experiment_Details['Scenario_Code'] = list_Experiment_Details[1]
#                 dict_Experiment_Details['Pop_Replicates'] = list_Experiment_Details[2]
#                 dict_Experiment_Details['Experiment_Label'] = list_Experiment_Details[3]
#                 str_Experiment_Label = dict_Experiment_Details['Experiment_Label']
#                 str_Experiment_Scenario_Code = dict_Experiment_Details['Scenario_Code']
                '''
                ~~~~~~~~~~~~~~~~~~~~~~~~~~~
                Plot lines for each mating count required
                ~~~~~~~~~~~~~~~~~~~~~~~~~~~
                '''    
                for int_Mating_Count_Replicate_Total in nparray_Mating_Count_Replicate_Total:
        
                    '''
                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~
                    Transform
                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~
                    '''  
                    self.obj_Log_Default.info('Transforming data for int_Mating_Count_Replicate_Total :' + str(int_Mating_Count_Replicate_Total))

                    ''' Subset the DF to get the correct Experiment '''
                    str_Experiment_Label = globalsSS.Experment_Groups.static_str_Experiment_Sampling_Strategy_v1_0_Label
                    if self.obj_SSParams.int_Sampling_Strategy_Sample_Proportions_Source == globalsSS.Experment_Groups.static_int_Experiment_Sampling_Strategy_v1_0:
                        str_Experiment_Label = globalsSS.Experment_Groups.static_str_Experiment_Sampling_Strategy_v1_0_Label
                    elif self.obj_SSParams.int_Sampling_Strategy_Sample_Proportions_Source == globalsSS.Experment_Groups.static_int_Experiment_Sampling_Strategy_v1_1__USER_AGE_COHORTS:
                        str_Experiment_Label = globalsSS.Experment_Groups.static_str_Experiment_Sampling_Strategy_v1_1__USER_AGE_COHORTS_Label
                    elif self.obj_SSParams.int_Sampling_Strategy_Sample_Proportions_Source == globalsSS.Experment_Groups.static_int_Experiment_Sampling_Strategy_v1_1__USER_PROPORTIONS:
                        str_Experiment_Label = globalsSS.Experment_Groups.static_str_Experiment_Sampling_Strategy_v1_1__USER_PROPORTIONS_Label
                    elif self.obj_SSParams.int_Sampling_Strategy_Sample_Proportions_Source == globalsSS.Experment_Groups.static_int_Experiment_Sampling_Strategy_v1_1__USER_SAMPLE_NUMBERS:
                        str_Experiment_Label = globalsSS.Experment_Groups.static_str_Experiment_Sampling_Strategy_v1_1__USER_SAMPLE_NUMBERS_Label
                    elif self.obj_SSParams.int_Sampling_Strategy_Sample_Proportions_Source == globalsSS.Experment_Groups.static_int_Experiment_Sampling_Strategy_v1_1__USER_SAMPLE_PROPORTIONS:
                        str_Experiment_Label = globalsSS.Experment_Groups.static_int_Experiment_Sampling_Strategy_v1_1__USER_SAMPLE_PROPORTIONS_Label
                    pass     
                               
                    df_1_Subset = df_1[(df_1[str_Colname_Experiment_Label]==str_Experiment_Label)]

#                     str_Experiment_Label = globalsSS.Experment_Groups.static_str_Experiment_2_Ver_2_Label
#                     df_2_Subset = df_1[(df_1[str_Colname_Experiment_Label]==str_Experiment_Label)]
                              
                    #str_Experiment_Label_1 = globalsSS.Experment_Groups.static_str_Experiment_2_Ver_2_Label
                    #str_Experiment_Label_2 = globalsSS.Experment_Groups.static_str_Experiment_100_PERCENT_USER_SPECIFIED_AGE_COHORTS_v1_0_Label
                    #df_2_Subset = df_1[(df_1[str_Colname_Experiment_Label]==str_Experiment_Label_1) | (df_1[str_Colname_Experiment_Label]==str_Experiment_Label_2)]

                    str_Group_Key_Colname = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category_Code
                    str_Colname_Stat_Category_Code = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Group_Key_Colname)
                    str_Stat_Category_Code = self.obj_SSParams.dict_Sampling_Plan_To_Use_For_Accuracy_Guideline.keys()[0]
                    
                    str_Experiment_Label_1 = globalsSS.Experment_Groups.static_str_Experiment_2_Ver_2_Label
                    #str_Experiment_Label_2 = globalsSS.Experment_Groups.static_str_Experiment_100_PERCENT_USER_SPECIFIED_AGE_COHORTS_v1_0_Label
                    df_2_Subset = df_1[(df_1[str_Colname_Experiment_Label]==str_Experiment_Label_1) | (df_1[str_Colname_Stat_Category_Code]==str_Stat_Category_Code)]
                              
                    ''' Subset the DF to get the correct value '''
                    df_1_Subset = df_1_Subset[(df_1_Subset[str_Col_Name_Mating_Count_Replicate_Total]==int_Mating_Count_Replicate_Total)]
                    ''' Subset the DF to get the correct value '''
                    df_2_Subset = df_2_Subset[(df_2_Subset[str_Col_Name_Mating_Count_Replicate_Total]==int_Mating_Count_Replicate_Total)]
                                        
                    #DEBUG_ON
                    #str_Df = df_1_Subset.to_string()
                    #self.obj_Log_Debug.debug('Results dataframe df 1: %s' % str_Df)
                    #raw_input('pausing')
                    #DEBUG_OFF    
        
                    list_DFs = [df_1_Subset, df_2_Subset] 
                    
                    ''' Plot the line '''
                    #pyplot_Fig, list_Pyplot_Lines, df_Key_Values = self.func__Plot_EXP_Sampling_Strategy_1_0_EOR_SUMM__Plot(str_Figure_Colour_Scheme, list_DFs, dict_Colnames, int_Mating_Count_Replicate_Total, int_Y_Axis_Max, value_Dict_Fig_Copy_Params, pyplot_Fig)
                    pyplot_Fig, list_Pyplot_Lines, df_Key_Values = self.func__Plot_EXP_Sampling_Strategy_1_0_EOR_SUMM__Plot(str_Figure_Colour_Scheme, list_DFs, dict_Colnames, int_Mating_Count_Replicate_Total, int_Y_Axis_Max, int_Y_Axis_Min, value_Dict_Fig_Copy_Params, pyplot_Fig)
                    
                    #dict_pyplot_Legend_Lines = OrderedDict([(str_Experiment_Scenario_Code, list_Pyplot_Lines)])
                    dict_pyplot_Legend_Lines = OrderedDict([(str_Experiment_Label, list_Pyplot_Lines)])
                pass
            pass

            '''
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~
            Format the Figure
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~
            '''  
            pyplot_Fig = self.func__Plot_EXP_Sampling_Strategy_1_0_EOR_SUMM__Format_Figure(str_Figure_Colour_Scheme, list_DFs, dict_Colnames, df_Key_Values, pyplot_Fig, ax1, int_Y_Axis_Max, int_Y_Axis_Min, dict_pyplot_Legend_Lines, nparray_Mating_Count_Replicate_Total, value_Dict_Fig_Copy_Params)
            
            
            '''
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~
            Save results
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~
            '''    
            str_Plot_Output_Path = str_Plot_Save_Path
            ''' Create path if it doesnt exist '''
            with FileHandler() as obj_File_Op:
                obj_File_Op.method_Create_Path(str_Plot_Output_Path)
            pass                
            str_Plot_Output_FileName = self.obj_SSParams.strUniqueRunID + '_' + str_Excel_Input_FileName + '_' + str_Excel_Input_Colname_Prefix + '_' + str(int_Mating_Count_Replicate_Total)
            str_Plot_Output_Path_And_FileName = os__path.join(str_Plot_Output_Path, str_Plot_Output_FileName)
            if value_Dict_Fig_Copy_Params['Save_PNG'] == True:
                str_Plot_Output_Path_And_FileName_PNG = str_Plot_Output_Path_And_FileName + '_' + str(key_Dict_Fig_Copy_Params) + '.png'
                bool_Transparent = value_Dict_Fig_Copy_Params['Transparent']
                pyplot_Fig.savefig(str_Plot_Output_Path_And_FileName_PNG, bbox_inches='tight', dpi=400, transparent=bool_Transparent)
                #DEBUG_ON
                #matplotlib__pyplot.show()
                #DEBUG_OFF
            pass
            if value_Dict_Fig_Copy_Params['Save_PDF'] == True:
                str_Plot_Output_Path_And_FileName_PDF = str_Plot_Output_Path_And_FileName + '_' + str(key_Dict_Fig_Copy_Params) + '.pdf'
                pyplot_Fig.savefig(str_Plot_Output_Path_And_FileName_PDF, bbox_inches='tight')
 
            pass
            if value_Dict_Fig_Copy_Params['Save_SVG'] == True:
                str_Plot_Output_Path_And_FileName_SVG = str_Plot_Output_Path_And_FileName + '_' + str(key_Dict_Fig_Copy_Params) + '.svg'
                bool_Transparent = value_Dict_Fig_Copy_Params['Transparent']
                pyplot_Fig.savefig(str_Plot_Output_Path_And_FileName_SVG, bbox_inches='tight', dpi=400, transparent=bool_Transparent)
            pass
                
            '''
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~
            Display results
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~
            '''
            if value_Dict_Fig_Copy_Params['Interactive_Display'] == True:           
                matplotlib__pyplot.show()
            pass

            ''' Close the plot '''
            matplotlib__pyplot.close(pyplot_Fig) 
        pass
                  
        pass        
        
        
        return list_DFs
    
    def func__Plot_EXP_Sampling_Strategy_1_0_EOR_SUMM__Create_Figure(self, list_DFs, dict_Colnames):

        self.obj_Log_Default.info('Creating figure')
        
        '''
        -----------------------------
        Specify DFs
        -----------------------------
        '''
        df_1 = list_DFs[0]
        '''
        -----------------------------
        Specify X-Axis
        -----------------------------
        '''
        str_X_Axis_Colname = dict_Colnames['DF_1_X_Axis_Primary']

        '''
        -----------------------------
        Create figure
        -----------------------------
        '''


        bool_Use_Relative_Fig_Size = False
        if bool_Use_Relative_Fig_Size:
            # default scale is 1 in your original case, scales with other cases:
            int_X_Axis_Length = len(df_1[str_X_Axis_Colname])
            int_Width_Scale = int_X_Axis_Length/10
            if  int_Width_Scale < 10:
                int_Width_Scale = 2
            pass 
            int_Width_Control = 10 #6 - About perfect for PowerPoint
            int_Height_Control = 12 #8 - About perfect for PowerPoint
            figsize = (int_Width_Control*int_Width_Scale,int_Height_Control) # fig size in inches (width,height)
            int_DPI = 400
        else:
            int_DPI = 80
            int_Width_Control = 14 
            int_Height_Control = 6          
            figsize = (int_Width_Control,int_Height_Control) # fig size in inches (width,height)
        pass
        pyplot_Fig = matplotlib__pyplot.figure(dpi = int_DPI, figsize = figsize)    

        left = 0.1
        bottom = 0.1
        width = 0.8
        height = 0.68 #0.69
        ax1 = pyplot_Fig.add_axes([left, bottom, width, height])
                         
        return pyplot_Fig, ax1
                                                                 
    def func__Plot_EXP_Sampling_Strategy_1_0_EOR_SUMM__Plot_ORIG(self, str_Figure_Colour_Scheme, list_DFs, dict_Colnames, int_Mating_Count_Replicate_Total, int_Y_Axis_Max, dict_Fig_Copy, pyplot_Fig):
        
        self.obj_Log_Default.info('Creating plot')

        list_pyplot_Lines = []
        
        #int_Plot_Line_Width = 4
        '''
        -----------------------------
        Specify DFs
        -----------------------------
        '''
        df_1 = list_DFs[0]
        df_2 = list_DFs[1]
        
        '''
        -----------------------------
        Plot Line over all replicates
        -----------------------------
        ''' 
        ''' Primary X-axis '''
        str_Primary_X_Axis_df_1_Colname = dict_Colnames['DF_1_X_Axis_Primary']

        ''' Primary Y-axis '''
        str_Primary_Y_Axis_df_1_Colname = dict_Colnames['DF_1_Y_Axis_Primary']
        
        ''' Primary Y-axis error bars '''
        str_Primary_Y_Axis_Lwr_CI_df_1_Colname = dict_Colnames['DF_1_Y_Axis_Primary_Lwr_CI']
        str_Primary_Y_Axis_Upr_CI_df_1_Colname = dict_Colnames['DF_1_Y_Axis_Primary_Upr_CI']
         
        ''' Secondary Y-axis '''
        str_Secondary_Y_Axis_df_1_Colname = dict_Colnames['DF_1_Y_Axis_Secondary']
        
        ''' Primary Y-Axis INF counts '''
#         str_Primary_Y_Axis_INF_Count_df_1_Colname = dict_Colnames['DF_1_Y_Axis_Primary_INF_Count']
#         str_Primary_Y_Axis_INF_Count_Lwr_CI_df_1_Colname = dict_Colnames['DF_1_Y_Axis_Primary_Lwr_CI_INF_Count']
#         str_Primary_Y_Axis_INF_Count_Upr_CI_df_1_Colname = dict_Colnames['DF_1_Y_Axis_Primary_Upr_CI_INF_Count']
               
        ''' Format CI's '''
        df_Key_Values = pandas.DataFrame()
        df_Key_Values['DF_1_Y_Axis_Primary_Lwr_CI'] = df_1[str_Primary_Y_Axis_df_1_Colname] - df_1[str_Primary_Y_Axis_Lwr_CI_df_1_Colname]
        df_Key_Values['DF_1_Y_Axis_Primary_Upr_CI'] = df_1[str_Primary_Y_Axis_Upr_CI_df_1_Colname] - df_1[str_Primary_Y_Axis_df_1_Colname]
        nparray_Error_Bars_Lwr_CIs = numpy.asarray(df_Key_Values['DF_1_Y_Axis_Primary_Lwr_CI'])
        #df_Key_Values['DF_1_Y_Axis_Primary_Upr_CI_Trunc'] = numpy.where(df_1[str_Primary_Y_Axis_Upr_CI_df_1_Colname] > int_Y_Axis_Max, int_Y_Axis_Max - df_1[str_Primary_Y_Axis_df_1_Colname] , df_1[str_Primary_Y_Axis_Upr_CI_df_1_Colname] - df_1[str_Primary_Y_Axis_df_1_Colname])
        df_Key_Values['DF_1_Y_Axis_Primary_Upr_CI_Trunc'] = numpy.where(df_1[str_Primary_Y_Axis_Upr_CI_df_1_Colname] > int_Y_Axis_Max, int_Y_Axis_Max - df_1[str_Primary_Y_Axis_df_1_Colname] , df_1[str_Primary_Y_Axis_Upr_CI_df_1_Colname] - df_1[str_Primary_Y_Axis_df_1_Colname])
        '''Check for and replace NaNs (which result when all upr CIs are inf) with Y-axis max '''
        df_Key_Values['DF_1_Y_Axis_Primary_Upr_CI_Trunc'] = numpy.where(numpy.isnan(df_Key_Values['DF_1_Y_Axis_Primary_Upr_CI_Trunc']), int_Y_Axis_Max - df_1[str_Primary_Y_Axis_df_1_Colname] , df_Key_Values['DF_1_Y_Axis_Primary_Upr_CI_Trunc'])
        #df_Key_Values['DF_1_Y_Axis_Primary_Upr_CI_Trunc'].replace(numpy.isnan(), int_Y_Axis_Max - df_1[str_Primary_Y_Axis_df_1_Colname])
        #df_Key_Values['DF_1_Y_Axis_Primary_Upr_CI_Trunc_Flag'] = numpy.where(df_Key_Values['DF_1_Y_Axis_Primary_Upr_CI_Trunc'] == (int_Y_Axis_Max - df_1[str_Primary_Y_Axis_df_1_Colname]), True, False)
        df_Key_Values['DF_1_Y_Axis_Primary_Upr_CI_Trunc_Flag'] = numpy.where(df_Key_Values['DF_1_Y_Axis_Primary_Upr_CI_Trunc'] == (int_Y_Axis_Max - df_1[str_Primary_Y_Axis_df_1_Colname]), True, False)

        #nparray_Error_Bars_Upr_CIs = numpy.asarray(df_Temp_CIs['DF_1_Y_Axis_Primary_Upr_CI'])
        nparray_Error_Bars_Upr_CIs = numpy.asarray(df_Key_Values['DF_1_Y_Axis_Primary_Upr_CI_Trunc'])
        list_Error_Bars_CIs = [nparray_Error_Bars_Lwr_CIs, nparray_Error_Bars_Upr_CIs]

        ''' Get Primary X-Axis Values '''
        list_Primary_X_Axis_Values = df_1[str_Primary_X_Axis_df_1_Colname].tolist()
        df_Key_Values['DF_1_X_Axis_Primary'] = df_1[str_Primary_X_Axis_df_1_Colname]
        list_Primary_X_Axis_Points = [int(x[-2:]) for x in list_Primary_X_Axis_Values]
        df_Key_Values['DF_1_X_Axis_Primary_Points'] = list_Primary_X_Axis_Points
        ''' Get Primary Y-Axis Values '''
        list_Primary_Y_Axis_Values = df_1[str_Primary_Y_Axis_df_1_Colname].tolist()
        list_Primary_Y_Axis_Points = [int(round(y,0)) for y in list_Primary_Y_Axis_Values]
        df_Key_Values['DF_1_Y_Axis_Primary'] = df_1[str_Primary_Y_Axis_df_1_Colname]
        ''' Get Primary Y-Axis INF counts '''
        df_Key_Values['DF_1_Y_Axis_Primary_INF_Count'] = df_1[dict_Colnames['DF_1_Y_Axis_Primary_INF_Count']]
        df_Key_Values['DF_1_Y_Axis_Primary_Lwr_CI_INF_Count'] = df_1[dict_Colnames['DF_1_Y_Axis_Primary_Lwr_CI_INF_Count']]
        df_Key_Values['DF_1_Y_Axis_Primary_Upr_CI_INF_Count'] = df_1[dict_Colnames['DF_1_Y_Axis_Primary_Upr_CI_INF_Count']]
        
        bool_Plot_Primary_Points = True
        if bool_Plot_Primary_Points:
            ''' Plot the Primary Y-axis points '''
            str_Plot_Primary_Line_Color = 'blue'
            int_Capsize = 5   #<-- If you change these you will have to change the formating of the Caps in the formatting section to match.
            int_Capthick = 3  #<-- If you change these you will have to change the formating of the Caps in the formatting section to match.
            pyplot_Line_1 = matplotlib__pyplot.errorbar(list_Primary_X_Axis_Points, list_Primary_Y_Axis_Points, linestyle='None', marker='o', yerr=list_Error_Bars_CIs, capthick=int_Capthick, capsize=int_Capsize, color=str_Plot_Primary_Line_Color, figure=pyplot_Fig)
            
            ''' Force all major ticks to be shown - Other wise only every second tick is shown!?'''
            matplotlib__pyplot.xticks(list_Primary_X_Axis_Points)
            
            list_pyplot_Lines.append(pyplot_Line_1)
            
            #DEBUG_ON
            #matplotlib__pyplot.show()
            #DEBUG_OFF   
        pass

        bool_Plot_Secondary_Points = False
        if bool_Plot_Secondary_Points:            
            ''' Plot the Secondary Y-axis points '''
            str_Plot_Secondary_Line_Color = 'green'
            #pyplot_Line_2 = matplotlib__pyplot.plot(df_1[str_Primary_X_Axis_df_1_Colname], df_1[str_Secondary_Y_Axis_df_1_Colname], linestyle='.', marker='o', color=str_Plot_Secondary_Line_Color, figure=pyplot_Fig)
            pyplot_Line_2 = matplotlib__pyplot.plot(list_Primary_X_Axis_Points, df_1[str_Secondary_Y_Axis_df_1_Colname], linestyle='None', marker='o', color=str_Plot_Secondary_Line_Color, figure=pyplot_Fig)
            
            list_pyplot_Lines.append(pyplot_Line_2)
    
            #DEBUG_ON
            #matplotlib__pyplot.show()
            #DEBUG_OFF   
        pass

         
        return pyplot_Fig, list_pyplot_Lines, df_Key_Values
    
    def func__Plot_EXP_Sampling_Strategy_1_0_EOR_SUMM__Plot(self, str_Figure_Colour_Scheme, list_DFs, dict_Colnames, int_Mating_Count_Replicate_Total, int_Y_Axis_Max, int_Y_Axis_Min, dict_Fig_Copy, pyplot_Fig):
        
        self.obj_Log_Default.info('Creating plot')

        list_pyplot_Lines = []
        
        #int_Plot_Line_Width = 4
        '''
        -----------------------------
        Specify DFs
        -----------------------------
        '''
        df_1 = list_DFs[0]
        df_2 = list_DFs[1]
        
        '''
        -----------------------------
        Plot Line over all replicates
        -----------------------------
        ''' 
        ''' Primary X-axis '''
        str_Primary_X_Axis_df_1_Colname = dict_Colnames['DF_1_X_Axis_Primary']

        ''' Primary Y-axis '''
        str_Primary_Y_Axis_df_1_Colname = dict_Colnames['DF_1_Y_Axis_Primary']
        
        ''' Primary Y-axis error bars '''
        str_Primary_Y_Axis_Lwr_CI_df_1_Colname = dict_Colnames['DF_1_Y_Axis_Primary_Lwr_CI']
        str_Primary_Y_Axis_Upr_CI_df_1_Colname = dict_Colnames['DF_1_Y_Axis_Primary_Upr_CI']
         
        ''' Secondary Y-axis '''
        str_Secondary_Y_Axis_df_1_Colname = dict_Colnames['DF_1_Y_Axis_Secondary']
        
        ''' Primary Y-Axis INF counts '''
#         str_Primary_Y_Axis_INF_Count_df_1_Colname = dict_Colnames['DF_1_Y_Axis_Primary_INF_Count']
#         str_Primary_Y_Axis_INF_Count_Lwr_CI_df_1_Colname = dict_Colnames['DF_1_Y_Axis_Primary_Lwr_CI_INF_Count']
#         str_Primary_Y_Axis_INF_Count_Upr_CI_df_1_Colname = dict_Colnames['DF_1_Y_Axis_Primary_Upr_CI_INF_Count']

        bool_ORIG_Meth = False
        if bool_ORIG_Meth:
            ''' Format CI's '''
            df_Key_Values = pandas.DataFrame()
            df_Key_Values['DF_1_Y_Axis_Primary_Lwr_CI'] = df_1[str_Primary_Y_Axis_df_1_Colname] - df_1[str_Primary_Y_Axis_Lwr_CI_df_1_Colname]
            df_Key_Values['DF_1_Y_Axis_Primary_Upr_CI'] = df_1[str_Primary_Y_Axis_Upr_CI_df_1_Colname] - df_1[str_Primary_Y_Axis_df_1_Colname]
            nparray_Error_Bars_Lwr_CIs = numpy.asarray(df_Key_Values['DF_1_Y_Axis_Primary_Lwr_CI'])
            #df_Key_Values['DF_1_Y_Axis_Primary_Upr_CI_Trunc'] = numpy.where(df_1[str_Primary_Y_Axis_Upr_CI_df_1_Colname] > int_Y_Axis_Max, int_Y_Axis_Max - df_1[str_Primary_Y_Axis_df_1_Colname] , df_1[str_Primary_Y_Axis_Upr_CI_df_1_Colname] - df_1[str_Primary_Y_Axis_df_1_Colname])
            df_Key_Values['DF_1_Y_Axis_Primary_Upr_CI_Trunc'] = numpy.where(df_1[str_Primary_Y_Axis_Upr_CI_df_1_Colname] > int_Y_Axis_Max, int_Y_Axis_Max - df_1[str_Primary_Y_Axis_df_1_Colname] , df_1[str_Primary_Y_Axis_Upr_CI_df_1_Colname] - df_1[str_Primary_Y_Axis_df_1_Colname])
            '''Check for and replace NaNs (which result when all upr CIs are inf) with Y-axis max '''
            df_Key_Values['DF_1_Y_Axis_Primary_Upr_CI_Trunc'] = numpy.where(numpy.isnan(df_Key_Values['DF_1_Y_Axis_Primary_Upr_CI_Trunc']), int_Y_Axis_Max - df_1[str_Primary_Y_Axis_df_1_Colname] , df_Key_Values['DF_1_Y_Axis_Primary_Upr_CI_Trunc'])
            #df_Key_Values['DF_1_Y_Axis_Primary_Upr_CI_Trunc'].replace(numpy.isnan(), int_Y_Axis_Max - df_1[str_Primary_Y_Axis_df_1_Colname])
            #df_Key_Values['DF_1_Y_Axis_Primary_Upr_CI_Trunc_Flag'] = numpy.where(df_Key_Values['DF_1_Y_Axis_Primary_Upr_CI_Trunc'] == (int_Y_Axis_Max - df_1[str_Primary_Y_Axis_df_1_Colname]), True, False)
            df_Key_Values['DF_1_Y_Axis_Primary_Upr_CI_Trunc_Flag'] = numpy.where(df_Key_Values['DF_1_Y_Axis_Primary_Upr_CI_Trunc'] == (int_Y_Axis_Max - df_1[str_Primary_Y_Axis_df_1_Colname]), True, False)
    
            #nparray_Error_Bars_Upr_CIs = numpy.asarray(df_Temp_CIs['DF_1_Y_Axis_Primary_Upr_CI'])
            nparray_Error_Bars_Upr_CIs = numpy.asarray(df_Key_Values['DF_1_Y_Axis_Primary_Upr_CI_Trunc'])
        
        pass

        bool_NEW_Meth = True
        if bool_NEW_Meth:               
            ''' Format CI's '''
            df_Key_Values = pandas.DataFrame()
            #df_Key_Values['DF_1_Y_Axis_Primary_Lwr_CI'] = df_1[str_Primary_Y_Axis_df_1_Colname] - df_1[str_Primary_Y_Axis_Lwr_CI_df_1_Colname]
            #df_Key_Values['DF_1_Y_Axis_Primary_Upr_CI'] = df_1[str_Primary_Y_Axis_Upr_CI_df_1_Colname] - df_1[str_Primary_Y_Axis_df_1_Colname]
            
            #nparray_Error_Bars_Lwr_CIs = numpy.asarray(df_Key_Values['DF_1_Y_Axis_Primary_Lwr_CI'])
            
            '''
            Format LOWER CI's
            '''
            df_Key_Values['DF_1_Y_Axis_Primary_Lwr_CI'] = df_1[str_Primary_Y_Axis_df_1_Colname] - df_1[str_Primary_Y_Axis_Lwr_CI_df_1_Colname]
            
            ''' Identify and flag CI's that need truncation or removal of NaN's '''
            '''Check for and replace NaNs (which result when all CIs are inf) with Y-axis max '''
            df_Key_Values['DF_1_Y_Axis_Primary_Lwr_CI_Trunc'] = numpy.where(numpy.isnan(df_1[str_Primary_Y_Axis_Lwr_CI_df_1_Colname]), df_1[str_Primary_Y_Axis_df_1_Colname] - int_Y_Axis_Min, df_1[str_Primary_Y_Axis_df_1_Colname] - df_1[str_Primary_Y_Axis_Lwr_CI_df_1_Colname])
              
            ''' Set the FLAG to true if the CI is truncated '''
            df_Key_Values['DF_1_Y_Axis_Primary_Lwr_CI_Trunc_Flag'] = numpy.where(df_Key_Values['DF_1_Y_Axis_Primary_Lwr_CI_Trunc'] == (df_1[str_Primary_Y_Axis_df_1_Colname] - int_Y_Axis_Min), True, False)
             
            nparray_Error_Bars_Lwr_CIs = numpy.asarray(df_Key_Values['DF_1_Y_Axis_Primary_Lwr_CI_Trunc'])
            
            '''
            Format UPPER CI's
            '''
            df_Key_Values['DF_1_Y_Axis_Primary_Upr_CI'] = df_1[str_Primary_Y_Axis_Upr_CI_df_1_Colname] - df_1[str_Primary_Y_Axis_df_1_Colname]
             
            ''' Identify and flag CI's that need truncation or removal of NaN's '''
            '''Check for and replace NaNs (which result when all CIs are inf) with Y-axis max '''
            #df_Key_Values['DF_1_Y_Axis_Primary_Upr_CI_Trunc'] = numpy.where(numpy.isnan(df_1[str_Primary_Y_Axis_Upr_CI_df_1_Colname]), int_Y_Axis_Max - df_1[str_Primary_Y_Axis_df_1_Colname] , df_1[str_Primary_Y_Axis_Upr_CI_df_1_Colname])
            df_Key_Values['DF_1_Y_Axis_Primary_Upr_CI_No_NaNs'] = numpy.where(numpy.isnan(df_1[str_Primary_Y_Axis_Upr_CI_df_1_Colname]), int_Y_Axis_Max - df_1[str_Primary_Y_Axis_df_1_Colname] , df_1[str_Primary_Y_Axis_Upr_CI_df_1_Colname])

            ''' Set the CI to truncated if it exceeds the CI limit '''
            #df_Key_Values['DF_1_Y_Axis_Primary_Upr_CI_Trunc'] = numpy.where(df_Key_Values['DF_1_Y_Axis_Primary_Upr_CI_Trunc'] > int_Y_Axis_Max, int_Y_Axis_Max - df_1[str_Primary_Y_Axis_df_1_Colname] , df_1[str_Primary_Y_Axis_Upr_CI_df_1_Colname] - df_1[str_Primary_Y_Axis_df_1_Colname])
            ''' This is better than the above as it avoideds NaNs '''
            df_Key_Values['DF_1_Y_Axis_Primary_Upr_CI_Trunc'] = numpy.where(df_Key_Values['DF_1_Y_Axis_Primary_Upr_CI_No_NaNs'] > int_Y_Axis_Max, int_Y_Axis_Max - df_1[str_Primary_Y_Axis_df_1_Colname] , df_Key_Values['DF_1_Y_Axis_Primary_Upr_CI_No_NaNs'] - df_1[str_Primary_Y_Axis_df_1_Colname])
             
            ''' Set the FLAG to true if the CI is truncated '''
            df_Key_Values['DF_1_Y_Axis_Primary_Upr_CI_Trunc_Flag'] = numpy.where(df_Key_Values['DF_1_Y_Axis_Primary_Upr_CI_Trunc'] == (int_Y_Axis_Max - df_1[str_Primary_Y_Axis_df_1_Colname]), True, False)
            
            nparray_Error_Bars_Upr_CIs = numpy.asarray(df_Key_Values['DF_1_Y_Axis_Primary_Upr_CI_Trunc'])        

#             ''' Identify and flag LOWER CI's that need truncation or removal of NaN's '''
#             df_Key_Values['DF_1_Y_Axis_Primary_Lwr_CI_Trunc'] = numpy.where(df_1[str_Primary_Y_Axis_Lwr_CI_df_1_Colname] < int_Y_Axis_Min, int_Y_Axis_Min + df_1[str_Primary_Y_Axis_df_1_Colname] , df_1[str_Primary_Y_Axis_Lwr_CI_df_1_Colname] + df_1[str_Primary_Y_Axis_df_1_Colname])
#             '''Check for and replace NaNs (which result when all CIs are inf) with Y-axis max '''
#             df_Key_Values['DF_1_Y_Axis_Primary_Lwr_CI_Trunc'] = numpy.where(numpy.isnan(df_Key_Values['DF_1_Y_Axis_Primary_Lwr_CI_Trunc']), int_Y_Axis_Min + df_1[str_Primary_Y_Axis_df_1_Colname] , df_Key_Values['DF_1_Y_Axis_Primary_Lwr_CI_Trunc'])
#             df_Key_Values['DF_1_Y_Axis_Primary_Lwr_CI_Trunc_Flag'] = numpy.where(df_Key_Values['DF_1_Y_Axis_Primary_Lwr_CI_Trunc'] == (int_Y_Axis_Min + df_1[str_Primary_Y_Axis_df_1_Colname]), True, False)
#             nparray_Error_Bars_Lwr_CIs = numpy.asarray(df_Key_Values['DF_1_Y_Axis_Primary_Lwr_CI_Trunc'])
            
#             ''' Identify and flag UPPER CI's that need truncation or removal of NaN's '''
#             '''Check for and replace NaNs (which result when all CIs are inf) with Y-axis max '''
#             df_Key_Values['DF_1_Y_Axis_Primary_Upr_CI_Trunc'] = numpy.where(numpy.isnan(df_1[str_Primary_Y_Axis_Upr_CI_df_1_Colname]), int_Y_Axis_Max - df_1[str_Primary_Y_Axis_df_1_Colname] , df_1[str_Primary_Y_Axis_Upr_CI_df_1_Colname])
#             df_Key_Values['DF_1_Y_Axis_Primary_Upr_CI_Trunc'] = numpy.where(df_Key_Values['DF_1_Y_Axis_Primary_Upr_CI_Trunc'] > int_Y_Axis_Max, int_Y_Axis_Max - df_1[str_Primary_Y_Axis_df_1_Colname] , df_1[str_Primary_Y_Axis_Upr_CI_df_1_Colname] - df_1[str_Primary_Y_Axis_df_1_Colname])
#             df_Key_Values['DF_1_Y_Axis_Primary_Upr_CI_Trunc_Flag'] = numpy.where(df_Key_Values['DF_1_Y_Axis_Primary_Upr_CI_Trunc'] == (int_Y_Axis_Max - df_1[str_Primary_Y_Axis_df_1_Colname]), True, False)
#             nparray_Error_Bars_Upr_CIs = numpy.asarray(df_Key_Values['DF_1_Y_Axis_Primary_Upr_CI_Trunc'])
    
#             ''' Identify and flag UPPER CI's that need truncation or removal of NaN's '''
#             df_Key_Values['DF_1_Y_Axis_Primary_Upr_CI_Trunc'] = numpy.where(df_1[str_Primary_Y_Axis_Upr_CI_df_1_Colname] > int_Y_Axis_Max, int_Y_Axis_Max - df_1[str_Primary_Y_Axis_df_1_Colname] , df_1[str_Primary_Y_Axis_Upr_CI_df_1_Colname] - df_1[str_Primary_Y_Axis_df_1_Colname])
#             '''Check for and replace NaNs (which result when all CIs are inf) with Y-axis max '''
#             df_Key_Values['DF_1_Y_Axis_Primary_Upr_CI_Trunc'] = numpy.where(numpy.isnan(df_Key_Values['DF_1_Y_Axis_Primary_Upr_CI_Trunc']), int_Y_Axis_Max - df_1[str_Primary_Y_Axis_df_1_Colname] , df_Key_Values['DF_1_Y_Axis_Primary_Upr_CI_Trunc'])
#             df_Key_Values['DF_1_Y_Axis_Primary_Upr_CI_Trunc_Flag'] = numpy.where(df_Key_Values['DF_1_Y_Axis_Primary_Upr_CI_Trunc'] == (int_Y_Axis_Max - df_1[str_Primary_Y_Axis_df_1_Colname]), True, False)
#             nparray_Error_Bars_Upr_CIs = numpy.asarray(df_Key_Values['DF_1_Y_Axis_Primary_Upr_CI_Trunc'])

        
        
        pass
    
        ''' Combine Lwr an Upr CI's '''
        list_Error_Bars_CIs = [nparray_Error_Bars_Lwr_CIs, nparray_Error_Bars_Upr_CIs]

        ''' Get Primary X-Axis Values '''
        list_Primary_X_Axis_Values = df_1[str_Primary_X_Axis_df_1_Colname].tolist()
        df_Key_Values['DF_1_X_Axis_Primary'] = df_1[str_Primary_X_Axis_df_1_Colname]
        list_Primary_X_Axis_Points = [int(x[-2:]) for x in list_Primary_X_Axis_Values]
        df_Key_Values['DF_1_X_Axis_Primary_Points'] = list_Primary_X_Axis_Points
        ''' Get Primary Y-Axis Values '''
        list_Primary_Y_Axis_Values = df_1[str_Primary_Y_Axis_df_1_Colname].tolist()
        list_Primary_Y_Axis_Points = [int(round(y,0)) for y in list_Primary_Y_Axis_Values]
        df_Key_Values['DF_1_Y_Axis_Primary'] = df_1[str_Primary_Y_Axis_df_1_Colname]
        ''' Get Primary Y-Axis INF counts '''
        df_Key_Values['DF_1_Y_Axis_Primary_INF_Count'] = df_1[dict_Colnames['DF_1_Y_Axis_Primary_INF_Count']]
        df_Key_Values['DF_1_Y_Axis_Primary_Lwr_CI_INF_Count'] = df_1[dict_Colnames['DF_1_Y_Axis_Primary_Lwr_CI_INF_Count']]
        df_Key_Values['DF_1_Y_Axis_Primary_Upr_CI_INF_Count'] = df_1[dict_Colnames['DF_1_Y_Axis_Primary_Upr_CI_INF_Count']]
        
        bool_Plot_Primary_Points = True
        if bool_Plot_Primary_Points:
            ''' Plot the Primary Y-axis points '''
            str_Plot_Primary_Line_Color = 'blue'
            int_Capsize = 5   #<-- If you change these you will have to change the formating of the Caps in the formatting section to match.
            int_Capthick = 3  #<-- If you change these you will have to change the formating of the Caps in the formatting section to match.
            pyplot_Line_1 = matplotlib__pyplot.errorbar(list_Primary_X_Axis_Points, list_Primary_Y_Axis_Points, linestyle='None', marker='o', yerr=list_Error_Bars_CIs, capthick=int_Capthick, capsize=int_Capsize, color=str_Plot_Primary_Line_Color, figure=pyplot_Fig)
            #DEBUG_ON
            #Removes erors bars to see the effect of adding error bars later on
            #pyplot_Line_1 = matplotlib__pyplot.plot(list_Primary_X_Axis_Points, list_Primary_Y_Axis_Points, linestyle='None', marker='o', color=str_Plot_Primary_Line_Color, figure=pyplot_Fig)
            #DEBUG_OFF
            
            ''' Force all major ticks to be shown - Other wise only every second tick is shown!?'''
            matplotlib__pyplot.xticks(list_Primary_X_Axis_Points)
            
            list_pyplot_Lines.append(pyplot_Line_1)
            
            #DEBUG_ON
            #matplotlib__pyplot.show()
            #DEBUG_OFF   
        pass

        bool_Plot_Secondary_Points = False
        if bool_Plot_Secondary_Points:            
            ''' Plot the Secondary Y-axis points '''
            str_Plot_Secondary_Line_Color = 'green'
            #pyplot_Line_2 = matplotlib__pyplot.plot(df_1[str_Primary_X_Axis_df_1_Colname], df_1[str_Secondary_Y_Axis_df_1_Colname], linestyle='.', marker='o', color=str_Plot_Secondary_Line_Color, figure=pyplot_Fig)
            pyplot_Line_2 = matplotlib__pyplot.plot(list_Primary_X_Axis_Points, df_1[str_Secondary_Y_Axis_df_1_Colname], linestyle='None', marker='o', color=str_Plot_Secondary_Line_Color, figure=pyplot_Fig)
            
            list_pyplot_Lines.append(pyplot_Line_2)
    
            #DEBUG_ON
            #matplotlib__pyplot.show()
            #DEBUG_OFF   
        pass

         
        return pyplot_Fig, list_pyplot_Lines, df_Key_Values
    
    def func__Plot_EXP_Sampling_Strategy_1_0_EOR_SUMM__Format_Figure(self, str_Figure_Colour_Scheme, list_DFs, dict_Colnames, df_Key_Values, pyplot_Fig, ax1, int_Y_Axis_Max, int_Y_Axis_Min, dict_pyplot_Legend_Lines, list_int_Mating_Count_Replicate_Totals_To_Process, dict_Fig_Copy):                  

        str_Stat_Category_Code_Full = object_SSConfigSamplingStrategy.static_str_Value__Sampling_Strategy_Run_LDNe_Sampling_Plan_Code_FUL
        str_Stat_Category_Code_Full_Mature = object_SSConfigSamplingStrategy.static_str_Value__Sampling_Strategy_Run_LDNe_Sampling_Plan_Code_FMT
        str_Stat_Category_Code_Full_Juvenile = object_SSConfigSamplingStrategy.static_str_Value__Sampling_Strategy_Run_LDNe_Sampling_Plan_Code_FJV
        str_Stat_Category_Code_Full_Embryo = object_SSConfigSamplingStrategy.static_str_Value__Sampling_Strategy_Run_LDNe_Sampling_Plan_Code_FEM
        str_Stat_Category_Code_Full_Age_Cohorts = object_SSConfigSamplingStrategy.static_str_Value__Sampling_Strategy_Run_LDNe_Sampling_Plan_Code_FAC
        str_Stat_Category_Code_Scale_By_Max_Prop = object_SSConfigSamplingStrategy.static_str_Value__Sampling_Strategy_Run_LDNe_Sampling_Plan_Code_PSMP
                            
        '''
        -----------------------------
        Format Plot
        -----------------------------
        '''
        pyplot_Line_1 = dict_pyplot_Legend_Lines.values()[0][0]
        #(pyplot_Line_1_x, pyplot_Line_1_Error_Bar_Caps, pyplot_Line_1_Barlinecols) = pyplot_Line_1
        '''
        -----------------------------
        Specify DFs
        -----------------------------
        '''
        df_1 = list_DFs[0]
        df_2 = list_DFs[1]
        '''
        Font properties for subsequent text
        '''
        pyplot_Fig_FontProperties__Base = matplotlib__fontmanager.FontProperties(size=16)

        '''
        ~~~~~~~~~~~~~~~~~~
        Colours - Axis & Tick
        ~~~~~~~~~~~~~~~~~~
        '''

        if str_Figure_Colour_Scheme == globalsSS.Figure_Colour_Schemes.static_str_Figure_Colour_Scheme__Dark_Blue:
            str_Colour = 'darkblue'

        else:
            str_Colour = 'white'
        pass        
        #ax1 = pyplot_Fig.add_subplot(111, axisbg=str_Colour)
        #ax1 = pyplot_Fig.add_subplot(111)
#         left = 0.1
#         bottom = 0.1
#         width = 0.8
#         height = 0.65 #0.69
#         ax1 = pyplot_Fig.add_axes([left, bottom, width, height])  
              
        '''
        ~~~~~~~~~~~~~~~~~~~~~~
        Set axis limits
        ~~~~~~~~~~~~~~~~~~~~~~
        '''
        bool_Change_Axis_Limits = True
        if bool_Change_Axis_Limits:
            with SSResults(self.obj_SSParams) as obj_Results:
                str_Key_Colname_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category
                str_Col_Name_Stats_Category = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Colname_Stats_Category)
            pass
    
            list_Major_Ticks_X = list(df_1[str_Col_Name_Stats_Category])        
            ''' Add spacing at beginning and end of x-axis '''                                          
            ax1.set_xlim(-0.30, len(list_Major_Ticks_X)+1)
            #ax1.set_xlim((0, 10))
           
            #DEBUG_ON
            #matplotlib__pyplot.show()
            #DEBUG_OFF 
        pass


        '''
        ~~~~~~~~~~~~~~~~~~
        Grid and ticks details
        ~~~~~~~~~~~~~~~~~~
        '''
        bool_Add_Grid = True
        if bool_Add_Grid:
            matplotlib__pyplot.grid(True, figure=pyplot_Fig)

            #DEBUG_ON
            #matplotlib__pyplot.show()
            #DEBUG_OFF 

            '''
            ~~~~~~~~~~~~~~~~~~
            Format Grid
            ~~~~~~~~~~~~~~~~~~
            '''            
            # and a corresponding grid                                                       
            #ax1.grid(which='both')
            ax1.xaxis.grid(False)
            ax1.yaxis.grid(True)        

            # or if you want differnet settings for the grids:                               
            #ax1.grid(which='minor', alpha=0.2)                                                
            #ax1.grid(which='major', alpha=0.5)  

            #DEBUG_ON
            #matplotlib__pyplot.show()
            #DEBUG_OFF                          
        pass        
#         '''
#         ~~~~~~~~~~~~~~~~~~
#         Legend details
#         ~~~~~~~~~~~~~~~~~~
#         '''
#         bool_Add_Legend = False
#         if bool_Add_Legend:
#             list_pyplot_Lines = []
#             list_str_Experiment_Text = []
#             for key_str_Experiment, value_pyplot_Line in dict_pyplot_Legend_Lines.items():
#                 list_pyplot_Lines.append(value_pyplot_Line)
#                 list_str_Experiment_Text.append(key_str_Experiment)
#             pass
#     
#             float_Bbox_X_Pos = 0.80
#             float_Bbox_Y_Pos = 0.35    
#             pyplot_Fig_Legend = pyplot_Fig.legend(list_pyplot_Lines
#                                                   ,list_str_Experiment_Text
#                                                   ,bbox_to_anchor=(float_Bbox_X_Pos, float_Bbox_Y_Pos)
#                                                   ,frameon = 1)
#             
#             #DEBUG_ON
#             #matplotlib__pyplot.show()
#             #DEBUG_OFF    
#         pass

                
        '''
        ~~~~~~~~~~~~~~~~~~
        Line Error Bar Caps
        ~~~~~~~~~~~~~~~~~~
        '''
        bool_Change_Error_Bar_Caps = True
        if bool_Change_Error_Bar_Caps:
            
            #DEBUG_ON
            #matplotlib__pyplot.show()
            #DEBUG_OFF 
            bool_Change_LOWER_Error_Bar_Caps = True
            if bool_Change_LOWER_Error_Bar_Caps:
                
                ''' Split plot point and CI's into two separate df's to be formatted separately - allows for the Trunc CI's to be coloured and displayed differently form the non-trunc CI's '''
                df_Temp_Data_With_Non_Trunc_Lwr_CIs = df_Key_Values[(df_Key_Values['DF_1_Y_Axis_Primary_Lwr_CI_Trunc_Flag']==False)]
                df_Temp_Data_With_Trunc_Lwr_CIs = df_Key_Values[(df_Key_Values['DF_1_Y_Axis_Primary_Lwr_CI_Trunc_Flag']==True)]
                 
                list_X_Values_NTUCI = [x for x in df_Temp_Data_With_Non_Trunc_Lwr_CIs['DF_1_X_Axis_Primary_Points']]
                list_Y_Values_NTUCI = [int(round(y,0)) for y in df_Temp_Data_With_Non_Trunc_Lwr_CIs['DF_1_Y_Axis_Primary']]
                list_X_Values_TUCI = [x for x in df_Temp_Data_With_Trunc_Lwr_CIs['DF_1_X_Axis_Primary_Points']]
                list_Y_Values_TUCI = [int(round(y,0)) for y in df_Temp_Data_With_Trunc_Lwr_CIs['DF_1_Y_Axis_Primary']]
                 
                ''' Pass the points you want to plot as CI's '''
                list_Error_Lwr_NTUCIs = [int(round(x,0)) for x in df_Temp_Data_With_Non_Trunc_Lwr_CIs['DF_1_Y_Axis_Primary_Lwr_CI_Trunc']]
                list_Error_Lwr_TUCIs = [int(round(x,0)) for x in df_Temp_Data_With_Trunc_Lwr_CIs['DF_1_Y_Axis_Primary_Lwr_CI_Trunc']]

                ''' Pass Zeros for the CI points you dont want to plot '''
                list_Error_Upr_NTUCIs = [0 for x in df_Temp_Data_With_Non_Trunc_Lwr_CIs['DF_1_Y_Axis_Primary_Upr_CI']]
                list_Error_Upr_TUCIs = [0 for x in df_Temp_Data_With_Trunc_Lwr_CIs['DF_1_Y_Axis_Primary_Upr_CI']]
                
                list_Error_Lwr_NTUCIs_Trunc_Flags = [bool_Flag for bool_Flag in df_Temp_Data_With_Non_Trunc_Lwr_CIs['DF_1_Y_Axis_Primary_Lwr_CI_Trunc_Flag']]
                list_Error_Lwr_TUCIs_Trunc_Flags = [bool_Flag for bool_Flag in df_Temp_Data_With_Trunc_Lwr_CIs['DF_1_Y_Axis_Primary_Lwr_CI_Trunc_Flag']]
     
                list_Error_Lwr_INF_Count_NTUCIs = [int(round(x,0)) for x in df_Temp_Data_With_Non_Trunc_Lwr_CIs['DF_1_Y_Axis_Primary_Lwr_CI_INF_Count']]
                list_Error_Lwr_INF_Count_TUCIs = [int(round(x,0)) for x in df_Temp_Data_With_Trunc_Lwr_CIs['DF_1_Y_Axis_Primary_Lwr_CI_INF_Count']]
                 
                ''' Plot NTUCI Points '''
                tup_Zip_Lwr_NTUCI = zip(list_X_Values_NTUCI, list_Y_Values_NTUCI, list_Error_Lwr_NTUCIs, list_Error_Upr_NTUCIs, list_Error_Lwr_NTUCIs_Trunc_Flags, list_Error_Lwr_INF_Count_NTUCIs)
                for int_X_Point, int_Y_Point, int_Error_Lwr_CI, int_Error_Upr_CI, bool_Error_Lwr_CI_Trunc_Flag, int_Error_Lwr_INF_Count_NTUCIs in tup_Zip_Lwr_NTUCI:
                    '''
                    !!!!!!!!!!!!!!!!!!!!!!
                    NOTE: This is how to pass args to yerr for asymetric CIs - TOOK ME HOURS TO WORK IT OUT - Google knows nothing (in this case)!
                      
                    yerr=[[list_Error_Lwr_CI],[list_Error_Upr_CI]]
                    !!!!!!!!!!!!!!!!!!!!!!
                    '''
                    if int_Error_Lwr_INF_Count_NTUCIs == 0:
                        ''' Specs for NON-Truncated NON-INF Lwr CIs - Blue line & Flat Cap '''
                        str_Colour = 'blue'
                        int_Capsize = 7
                        int_Capthick = 4
                        bool_Lolims=False
                        bool_Uplims=False 
                        #int_Error_Lwr_CI = 0 #Passing 0 stops the CI from being plotted
                        int_Error_Upr_CI = int_Error_Lwr_CI*-1 #This to circumvent a bug that plots the upper CI even if zero
                    else:
                        ''' Specs for INF Lwr CIs - RED line & Arrow Cap '''
                        str_Colour = 'red'
                        int_Capsize = 0
                        int_Capthick = 10 #This has to be thicker than the original plotted values to cover them up (if doesnt replace them)
                        bool_Lolims=False
                        bool_Uplims=True     
                        int_Error_Upr_CI = 0 #Passing 0 stops the CI from being plotted
                    pass
                    
                    ''' Re-plot points and CI's '''
                    ax1.errorbar(int_X_Point, int_Y_Point, yerr=[[int_Error_Lwr_CI],[int_Error_Upr_CI]], lolims=bool_Lolims, uplims=bool_Uplims, lw=1, capsize=int_Capsize, capthick=int_Capthick, color=str_Colour)
                pass
             
                ''' Plot TUCI Points '''
                tup_Zip_Lwr_TUCI = zip(list_X_Values_TUCI, list_Y_Values_TUCI, list_Error_Lwr_TUCIs, list_Error_Upr_TUCIs, list_Error_Lwr_TUCIs_Trunc_Flags, list_Error_Lwr_INF_Count_TUCIs)
                for int_X_Point, int_Y_Point, int_Error_Lwr_CI, int_Error_Upr_CI, bool_Error_Lwr_CI_Trunc_Flag, int_Error_Lwr_INF_Count_TUCIs in tup_Zip_Lwr_TUCI:
                    '''
                    !!!!!!!!!!!!!!!!!!!!!!
                    NOTE: This is how to pass args to yerr for asymetric CIs - TOOK ME HOURS TO WORK IT OUT - Google knows nothing (in this case)!
                       
                    yerr=[[list_Error_Lwr_CI],[list_Error_Upr_CI]]
                    !!!!!!!!!!!!!!!!!!!!!!
                    '''
                    if int_Error_Lwr_INF_Count_TUCIs == 0:
                        ''' Specs for NON-INF Truncated Lwr CIs - Blue line & Arrow Cap '''
                        str_Colour = 'blue'
                        int_Capsize = 0
                        int_Capthick = 10 #This has to be thicker than the original plotted values to cover them up (if doesnt replace them)
                        bool_Lolims=False
                        bool_Uplims=True  
                        int_Error_Upr_CI = 0 #Passing 0 stops the CI from being plotted
                    else:
                        ''' Specs for INF TruncatedLwr CIs - RED line & Arrow Cap '''
                        str_Colour = 'red'
                        int_Capsize = 0
                        int_Capthick = 10 #This has to be thicker than the original plotted values to cover them up (if doesnt replace them)
                        bool_Lolims=False
                        bool_Uplims=True  
                        int_Error_Upr_CI = 0 #Passing 0 stops the CI from being plotted
                    pass
                                       
                    ''' Re-plot points and CI's '''
                    ax1.errorbar(int_X_Point, int_Y_Point, yerr=[[int_Error_Lwr_CI],[int_Error_Upr_CI]], lolims=bool_Lolims, uplims=bool_Uplims, lw=1, capsize=int_Capsize, capthick=int_Capthick, color=str_Colour)
             
                pass
                
                #DEBUG_ON
                #matplotlib__pyplot.show()
                #DEBUG_OFF    

            pass
            
            bool_Change_UPPER_Error_Bar_Caps = True
            if bool_Change_UPPER_Error_Bar_Caps:                    
                ''' Split plot point and CI's into two separate df's to be formatted separately - allows for the Trunc CI's to be coloured and displayed differently form the non-trunc CI's '''
                df_Temp_Data_With_Non_Trunc_Upr_CIs = df_Key_Values[(df_Key_Values['DF_1_Y_Axis_Primary_Upr_CI_Trunc_Flag']==False)]
                df_Temp_Data_With_Trunc_Upr_CIs = df_Key_Values[(df_Key_Values['DF_1_Y_Axis_Primary_Upr_CI_Trunc_Flag']==True)]
                 
                list_X_Values_NTUCI = [x for x in df_Temp_Data_With_Non_Trunc_Upr_CIs['DF_1_X_Axis_Primary_Points']]
                list_Y_Values_NTUCI = [int(round(y,0)) for y in df_Temp_Data_With_Non_Trunc_Upr_CIs['DF_1_Y_Axis_Primary']]
                list_X_Values_TUCI = [x for x in df_Temp_Data_With_Trunc_Upr_CIs['DF_1_X_Axis_Primary_Points']]
                list_Y_Values_TUCI = [int(round(y,0)) for y in df_Temp_Data_With_Trunc_Upr_CIs['DF_1_Y_Axis_Primary']]
                 
                ''' Pass the points you want to plot as CI's '''
                list_Error_Upr_NTUCIs = [int(round(x,0)) for x in df_Temp_Data_With_Non_Trunc_Upr_CIs['DF_1_Y_Axis_Primary_Upr_CI_Trunc']]
                list_Error_Upr_TUCIs = [int(round(x,0)) for x in df_Temp_Data_With_Trunc_Upr_CIs['DF_1_Y_Axis_Primary_Upr_CI_Trunc']]
                
                ''' Pass Zeros for the CI points you dont want to plot '''
                list_Error_Lwr_NTUCIs = [0 for x in df_Temp_Data_With_Non_Trunc_Upr_CIs['DF_1_Y_Axis_Primary_Lwr_CI']]
                list_Error_Lwr_TUCIs = [0 for x in df_Temp_Data_With_Trunc_Upr_CIs['DF_1_Y_Axis_Primary_Lwr_CI']]
                 
                list_Error_Upr_NTUCIs_Trunc_Flags = [bool_Flag for bool_Flag in df_Temp_Data_With_Non_Trunc_Upr_CIs['DF_1_Y_Axis_Primary_Upr_CI_Trunc_Flag']]
                list_Error_Upr_TUCIs_Trunc_Flags = [bool_Flag for bool_Flag in df_Temp_Data_With_Trunc_Upr_CIs['DF_1_Y_Axis_Primary_Upr_CI_Trunc_Flag']]
     
                list_Error_Upr_INF_Count_NTUCIs = [int(round(x,0)) for x in df_Temp_Data_With_Non_Trunc_Upr_CIs['DF_1_Y_Axis_Primary_Upr_CI_INF_Count']]
                list_Error_Upr_INF_Count_TUCIs = [int(round(x,0)) for x in df_Temp_Data_With_Trunc_Upr_CIs['DF_1_Y_Axis_Primary_Upr_CI_INF_Count']]
                 
                ''' Plot NTUCI Points '''
                tup_Zip_Upr_NTUCI = zip(list_X_Values_NTUCI, list_Y_Values_NTUCI, list_Error_Lwr_NTUCIs, list_Error_Upr_NTUCIs, list_Error_Upr_NTUCIs_Trunc_Flags, list_Error_Upr_INF_Count_NTUCIs)
                for int_X_Point, int_Y_Point, int_Error_Lwr_CI, int_Error_Upr_CI, bool_Error_Upr_CI_Trunc_Flag, int_Error_Upr_INF_Count_NTUCIs in tup_Zip_Upr_NTUCI:
                    '''
                    !!!!!!!!!!!!!!!!!!!!!!
                    NOTE: This is how to pass args to yerr for asymetric CIs - TOOK ME HOURS TO WORK IT OUT - Google knows nothing (in this case)!
                      
                    yerr=[[list_Error_Lwr_CI],[list_Error_Upr_CI]]
                    !!!!!!!!!!!!!!!!!!!!!!
                    '''
                    if int_Error_Upr_INF_Count_NTUCIs == 0:
                        ''' Specs for NON-Truncated NON-INF Upr CIs - Blue line & Flat Cap '''
                        str_Colour = 'blue'
                        int_Capsize = 7
                        int_Capthick = 4
                        bool_Lolims=False
                        bool_Uplims=False
                        if int_Error_Upr_CI > 0 and  int_Error_Upr_CI < int_Y_Axis_Max:
                            int_Error_Lwr_CI = int_Error_Upr_CI*-1
                        else:
                            int_Error_Lwr_CI = 0
                        pass
                    else:
                        ''' Specs for INF Upr CIs - RED line & Arrow Cap '''
                        str_Colour = 'red'
                        int_Capsize = 0
                        int_Capthick = 10 #This has to be thicker than the original plotted values to cover them up (if doesnt replace them)
                        bool_Lolims=True
                        bool_Uplims=False 
                        int_Error_Lwr_CI = 0
                    pass
                                   
                    ''' Re-plot points and CI's '''
                    ax1.errorbar(int_X_Point, int_Y_Point, yerr=[[int_Error_Lwr_CI],[int_Error_Upr_CI]], lolims=bool_Lolims, uplims=bool_Uplims, lw=1, capsize=int_Capsize, capthick=int_Capthick, color=str_Colour)
                  
                pass
             
                ''' Plot TUCI Points '''
                tup_Zip_Upr_TUCI = zip(list_X_Values_TUCI, list_Y_Values_TUCI, list_Error_Lwr_TUCIs, list_Error_Upr_TUCIs, list_Error_Upr_TUCIs_Trunc_Flags, list_Error_Upr_INF_Count_TUCIs)
                for int_X_Point, int_Y_Point, int_Error_Lwr_CI, int_Error_Upr_CI, bool_Error_Upr_CI_Trunc_Flag, int_Error_Upr_INF_Count_TUCIs in tup_Zip_Upr_TUCI:
                    '''
                    !!!!!!!!!!!!!!!!!!!!!!
                    NOTE: This is how to pass args to yerr for asymetric CIs - TOOK ME HOURS TO WORK IT OUT - Google knows nothing (in this case)!
                     
                    yerr=[[list_Error_Lwr_CI],[list_Error_Upr_CI]]
                    !!!!!!!!!!!!!!!!!!!!!!
                    '''
                    if int_Error_Upr_INF_Count_TUCIs == 0:
                        ''' Specs for NON-INF Truncated Upr CIs - Blue line & Arrow Cap '''
                        str_Colour = 'blue'
                        int_Capsize = 0
                        int_Capthick = 10 #This has to be thicker than the original plotted values to cover them up (if doesnt replace them)
                        bool_Lolims=True
                        bool_Uplims=False  
                        int_Error_Lwr_CI = 0
                    else:
                        ''' Specs for INF TruncatedUpr CIs - RED line & Arrow Cap '''
                        str_Colour = 'red'
                        int_Capsize = 0
                        int_Capthick = 10 #This has to be thicker than the original plotted values to cover them up (if doesnt replace them)
                        bool_Lolims=True
                        bool_Uplims=False 
                        int_Error_Lwr_CI = 0 
                    pass
                                     
                    ''' Re-plot points and CI's '''
                    ax1.errorbar(int_X_Point, int_Y_Point, yerr=[[int_Error_Lwr_CI],[int_Error_Upr_CI]], lolims=bool_Lolims, uplims=bool_Uplims, lw=1, capsize=int_Capsize, capthick=int_Capthick, color=str_Colour)
           
                pass
                #DEBUG_ON
                #matplotlib__pyplot.show()
                #DEBUG_OFF 
                
            bool_Change_Point_Estimates = True
            if bool_Change_Point_Estimates:                    
                ''' Get the X & Y points and if each is INF '''
                list_X_Values = [x for x in df_Key_Values['DF_1_X_Axis_Primary_Points']]
                list_Y_Values = [int(round(y,0)) for y in df_Key_Values['DF_1_Y_Axis_Primary']]

                list_INF_Count = [int(round(x,0)) for x in df_Key_Values['DF_1_Y_Axis_Primary_INF_Count']]
                 
                ''' Plot Points '''
                tup_Zip_Point_Estimates = zip(list_X_Values, list_Y_Values, list_INF_Count)
                for int_X_Point, int_Y_Point, int_INF_Count in tup_Zip_Point_Estimates:
                    
                    if int_INF_Count == 0:
                        ''' Specs for Non Inf points - Blue point '''
                        str_Colour = 'blue'
                        
                    else:
                        ''' Specs for INF points - RED point '''
                        str_Colour = 'red'
                        
                    pass
                                   
                    ''' Re-plot points and CI's '''
                    ax1.plot(int_X_Point, int_Y_Point, marker='o', markersize=6, color=str_Colour, markeredgecolor=str_Colour, markeredgewidth=1 )
                  
                pass
             
                pass
                #DEBUG_ON
                #matplotlib__pyplot.show()
                #DEBUG_OFF 
            pass
         
        pass

        '''
        ~~~~~~~~~~~~~~~~~~
        Plot Shading
        ~~~~~~~~~~~~~~~~~~
        '''
        bool_LDNe_Accuracy_Line_METHOD_1 = False
        if bool_LDNe_Accuracy_Line_METHOD_1:            

            ''' Plot the Background Y-axis points '''
            
            ''' Get Primary X-Axis Values '''
            list_Primary_X_Axis_Values = df_Key_Values['DF_1_X_Axis_Primary'].tolist()
            ''' Get Primary X-Axis REF Values '''
            list_Primary_X_Axis_REF_Values = df_2[dict_Colnames['DF_1_X_Axis_Primary']].tolist()
            df_Key_Values['DF_2_X_Axis_Primary'] = df_2[dict_Colnames['DF_1_X_Axis_Primary']]
           
            ''' Get Primary Y-Axis REF Values '''
            list_Primary_Y_Axis_REF_Values = df_2[dict_Colnames['DF_1_Y_Axis_Primary']].tolist()
            list_Primary_Y_Axis_REF_Points = [int(round(y,0)) for y in list_Primary_Y_Axis_REF_Values]
            df_Key_Values['DF_2_Y_Axis_Primary'] = df_2[dict_Colnames['DF_1_Y_Axis_Primary']]         

            ''' Subset to get just the value of interest '''
            with SSResults(self.obj_SSParams) as obj_Results:
                str_Key_Colname_Ne2_floatPCrit = globalsSS.Colnames_Ne2_Output.static_Str_Colname_Ne2_floatPCrit
                str_Colname_Ne2_floatPCrit = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Colname_Ne2_floatPCrit)
            pass
            float_LDNe_Pcrit = df_1[str_Colname_Ne2_floatPCrit].iloc[0]                            
            str_Stat_Category_Code = str_Stat_Category_Code_Full
            df_float_Mean_LDNe__Category = df_2[(df_2[dict_Colnames['DF_1_X_Axis_Primary']]== str_Stat_Category_Code) & (df_2[str_Colname_Ne2_floatPCrit]== float_LDNe_Pcrit)]
            float_Mean_LDNe__Category = df_float_Mean_LDNe__Category[dict_Colnames['DF_1_Y_Axis_Primary']].iloc[0]
            float_Mean_LDNe_JK_Lwr_CI__Category = df_float_Mean_LDNe__Category[dict_Colnames['DF_1_Y_Axis_Primary_Lwr_CI']].iloc[0]
            float_Mean_LDNe_JK_Upr_CI__Category = df_float_Mean_LDNe__Category[dict_Colnames['DF_1_Y_Axis_Primary_Upr_CI']].iloc[0]
            int_Mean_LDNe_JK_Lwr_CI__Category = (round(float_Mean_LDNe_JK_Lwr_CI__Category,0))
            #int_Mean_LDNe_JK_Lwr_CI__Category = int(round(float_Mean_LDNe_JK_Lwr_CI__Category,0))
            int_Mean_LDNe_JK_Upr_CI__Category = int(round(float_Mean_LDNe_JK_Upr_CI__Category,0))
#             ''' Create Primary X-Axis Values for value of interest '''
#             # Use the existing Primary X-Axis points
#             int_Len_Primary_X_Axis = len(list_Primary_X_Axis_Values)
#             list_Primary_X_Axis_REF_Points = [x for x in range(0, int_Len_Primary_X_Axis + 2)]
#             ''' Create Primary Y-Axis Values for value of interest '''
#             list_Primary_Y_Axis_REF_Point_Mean_LDNe__Category = [int(round(float_Mean_LDNe__Category,0)) for x in list_Primary_X_Axis_REF_Points]
# 
            #DEBUG_ON
            #matplotlib__pyplot.show()
            #DEBUG_OFF
            
            str_Panel_Color = 'green'            
            ax1.axhspan(int_Mean_LDNe_JK_Lwr_CI__Category, int_Mean_LDNe_JK_Upr_CI__Category, color=str_Panel_Color, edgecolor=None, alpha=0.1)

            #pyplot_Line_3 = matplotlib__pyplot.plot(list_Primary_X_Axis_REF_Points, list_Primary_Y_Axis_REF_Point_Mean_LDNe__Category, lw=63, linestyle='-', marker='', alpha=0.3, color=str_Plot_Secondary_Line_Color, figure=pyplot_Fig)
            
            #list_pyplot_Lines.append(pyplot_Line_3)
    
            #DEBUG_ON
            #matplotlib__pyplot.show()
            #DEBUG_OFF   
        pass
    
        bool_LDNe_Accuracy_Line_METHOD_2 = False
        if bool_LDNe_Accuracy_Line_METHOD_2:            

            ''' Plot the Background Y-axis points '''
            
            ''' Get Primary X-Axis Values '''
            list_Primary_X_Axis_Values = df_Key_Values['DF_1_X_Axis_Primary'].tolist()
            ''' Get Primary X-Axis REF Values '''
            list_Primary_X_Axis_REF_Values = df_2[dict_Colnames['DF_1_X_Axis_Primary']].tolist()
            df_Key_Values['DF_2_X_Axis_Primary'] = df_2[dict_Colnames['DF_1_X_Axis_Primary']]
           
            ''' Get Primary Y-Axis REF Values '''
            list_Primary_Y_Axis_REF_Values = df_2[dict_Colnames['DF_1_Y_Axis_Primary']].tolist()
            list_Primary_Y_Axis_REF_Points = [int(round(y,0)) for y in list_Primary_Y_Axis_REF_Values]
            df_Key_Values['DF_2_Y_Axis_Primary'] = df_2[dict_Colnames['DF_1_Y_Axis_Primary']]         

            ''' Subset to get just the value of interest '''
            with SSResults(self.obj_SSParams) as obj_Results:
                str_Key_Colname_Ne2_floatPCrit = globalsSS.Colnames_Ne2_Output.static_Str_Colname_Ne2_floatPCrit
                str_Colname_Ne2_floatPCrit = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Colname_Ne2_floatPCrit)
            pass
            float_LDNe_Pcrit = df_1[str_Colname_Ne2_floatPCrit].iloc[0]                            
            df_float_Mean_LDNe__Category = df_2[((df_2[dict_Colnames['DF_1_X_Axis_Primary']]== str_Stat_Category_Code_Full) | (df_2[dict_Colnames['DF_1_X_Axis_Primary']]== str_Stat_Category_Code_Full_Mature) | (df_2[dict_Colnames['DF_1_X_Axis_Primary']]== str_Stat_Category_Code_Full_Juvenile)) & (df_2[str_Colname_Ne2_floatPCrit]== float_LDNe_Pcrit)]
            
            ''' Get largest upper CI '''
            str_Col_Y_Axis_Key = dict_Colnames['DF_1_Y_Axis_Primary_Upr_CI']
            df_Temp_Max = pandas.DataFrame()
            df_Temp_Max[str_Col_Y_Axis_Key] = df_float_Mean_LDNe__Category[[str_Col_Y_Axis_Key]].max(axis=1)
            float_Max_LDNe_Upper_CI = df_Temp_Max[str_Col_Y_Axis_Key].max(axis=0)
            del df_Temp_Max    
            pass 
            
            '''' Get smallest lower CI '''
            str_Col_Y_Axis_Key = dict_Colnames['DF_1_Y_Axis_Primary_Lwr_CI']
            df_Temp_Min = pandas.DataFrame()
            df_Temp_Min[str_Col_Y_Axis_Key] = df_1[[str_Col_Y_Axis_Key]].min(axis=1)
            float_Min_LDNe_Lower_CI = df_Temp_Min[str_Col_Y_Axis_Key].min(axis=0)
            del df_Temp_Min     
            pass 
# 
            #DEBUG_ON
            #matplotlib__pyplot.show()
            #DEBUG_OFF
            
            str_Panel_Color = 'green'            
            ax1.axhspan(float_Min_LDNe_Lower_CI, float_Max_LDNe_Upper_CI, color=str_Panel_Color, edgecolor=None, alpha=0.1)

            #pyplot_Line_3 = matplotlib__pyplot.plot(list_Primary_X_Axis_REF_Points, list_Primary_Y_Axis_REF_Point_Mean_LDNe__Category, lw=63, linestyle='-', marker='', alpha=0.3, color=str_Plot_Secondary_Line_Color, figure=pyplot_Fig)
            
            #list_pyplot_Lines.append(pyplot_Line_3)
    
            #DEBUG_ON
            #matplotlib__pyplot.show()
            #DEBUG_OFF   
        pass
    
        bool_LDNe_Accuracy_Line_METHOD_3 = False
        if bool_LDNe_Accuracy_Line_METHOD_3:            

            ''' Subset to get just the value of interest '''
            with SSResults(self.obj_SSParams) as obj_Results:
                str_Key_Colname_Ne2_floatPCrit = globalsSS.Colnames_Ne2_Output.static_Str_Colname_Ne2_floatPCrit
                str_Colname_Ne2_floatPCrit = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Colname_Ne2_floatPCrit)
            pass
        
            float_LDNe_Pcrit = df_1[str_Colname_Ne2_floatPCrit].iloc[0]                            
            str_Stat_Category_Code = str_Stat_Category_Code_Full_Age_Cohorts
            df_float_LDNe__By_Category = df_2[(df_2[dict_Colnames['DF_1_X_Axis_Primary']]== str_Stat_Category_Code) & (df_2[str_Colname_Ne2_floatPCrit]== float_LDNe_Pcrit)]
            float_LDNe_Point_Estimate__By_Category = df_float_LDNe__By_Category[dict_Colnames['DF_1_Y_Axis_Primary']].iloc[0]
            str_Col_Key = dict_Colnames['DF_1_Y_Axis_Primary_Upr_CI']
            float_LDNe_Upr_CI__By_Category = df_float_LDNe__By_Category[dict_Colnames['DF_1_Y_Axis_Primary_Upr_CI']].iloc[0]
            str_Col_Key = dict_Colnames['DF_1_Y_Axis_Primary_Lwr_CI']
            float_LDNe_Lwr_CI__By_Category = df_float_LDNe__By_Category[dict_Colnames['DF_1_Y_Axis_Primary_Lwr_CI']].iloc[0]

            #DEBUG_ON
            #matplotlib__pyplot.show()
            #DEBUG_OFF
            
            str_Panel_Color = 'green'            
            #int_Padding = 5
            ''' line is upper and lower bound at 2% of the point estimate '''
            int_Padding = float_LDNe_Point_Estimate__By_Category * 0.02
            ax1.axhspan(float_LDNe_Point_Estimate__By_Category-int_Padding, float_LDNe_Point_Estimate__By_Category+int_Padding, color=str_Panel_Color, edgecolor=None, alpha=0.1)
    
            #DEBUG_ON
            #matplotlib__pyplot.show()
            #DEBUG_OFF   
        pass
    
        bool_LDNe_Accuracy_Line_METHOD_4 = True
        if bool_LDNe_Accuracy_Line_METHOD_4:            

            ''' Subset to get just the value of interest '''
            with SSResults(self.obj_SSParams) as obj_Results:
                str_Key_Colname_Ne2_floatPCrit = globalsSS.Colnames_Ne2_Output.static_Str_Colname_Ne2_floatPCrit
                str_Colname_Ne2_floatPCrit = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Colname_Ne2_floatPCrit)
            pass
        
            float_LDNe_Pcrit = df_1[str_Colname_Ne2_floatPCrit].iloc[0]                            
            str_Stat_Category_Code = self.obj_SSParams.dict_Sampling_Plan_To_Use_For_Accuracy_Guideline.keys()[0]
            str_Accuracy_Guideline_Estimate_Desc = ''
            if str_Stat_Category_Code == str_Stat_Category_Code_Full_Age_Cohorts:
                str_Accuracy_Guideline_Estimate_Desc = 'LDNe of fully sampled age cohorts'
            elif str_Stat_Category_Code == str_Stat_Category_Code_Scale_By_Max_Prop:
                str_Accuracy_Guideline_Estimate_Desc = 'LDNe of sampled age cohorts scaled by max sampling proportion'
            elif str_Stat_Category_Code == str_Stat_Category_Code_Full:
                str_Accuracy_Guideline_Estimate_Desc = 'LDNe of all cohorts '
            elif str_Stat_Category_Code == str_Stat_Category_Code_Full_Mature:
                str_Accuracy_Guideline_Estimate_Desc = 'LDNe of all mature age cohorts'
            elif str_Stat_Category_Code == str_Stat_Category_Code_Full_Juvenile:
                str_Accuracy_Guideline_Estimate_Desc = 'LDNe of all juvenile cohorts'
            elif str_Stat_Category_Code == str_Stat_Category_Code_Full_Embryo:
                str_Accuracy_Guideline_Estimate_Desc = 'LDNe of embryonic cohort'
            pass
            df_float_LDNe__By_Category = df_2[(df_2[dict_Colnames['DF_1_X_Axis_Primary']]== str_Stat_Category_Code) & (df_2[str_Colname_Ne2_floatPCrit]== float_LDNe_Pcrit)]
            float_LDNe_Point_Estimate__By_Category = df_float_LDNe__By_Category[dict_Colnames['DF_1_Y_Axis_Primary']].iloc[0]
            ''' Value for title '''
            int_LDNe_Point_Estimate__By_Category = int(round(float_LDNe_Point_Estimate__By_Category,0))
            
            str_Col_Key = dict_Colnames['DF_1_Y_Axis_Primary_Upr_CI']
            float_LDNe_Upr_CI__By_Category = df_float_LDNe__By_Category[dict_Colnames['DF_1_Y_Axis_Primary_Upr_CI']].iloc[0]
            str_Col_Key = dict_Colnames['DF_1_Y_Axis_Primary_Lwr_CI']
            float_LDNe_Lwr_CI__By_Category = df_float_LDNe__By_Category[dict_Colnames['DF_1_Y_Axis_Primary_Lwr_CI']].iloc[0]

            #DEBUG_ON
            #matplotlib__pyplot.show()
            #DEBUG_OFF
            
            str_Panel_Color = 'green'            
            #int_Padding = 5
            ''' line is upper and lower bound at 2% of the point estimate '''
            int_Padding = float_LDNe_Point_Estimate__By_Category * 0.02
            ax1.axhspan(float_LDNe_Point_Estimate__By_Category-int_Padding, float_LDNe_Point_Estimate__By_Category+int_Padding, color=str_Panel_Color, edgecolor=None, alpha=0.1)
    
            #DEBUG_ON
            #matplotlib__pyplot.show()
            #DEBUG_OFF   
        pass
        
        '''
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        Label details
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        '''
        '''
        ~~~~~~~~~~~~~~~
        Label - SubTitle
        ~~~~~~~~~~~~~~~
        '''   
        bool_Add_SubTitle = True
        if bool_Add_SubTitle:
            ''' Get colnames in order to get data from df_1 '''
            with SSResults(self.obj_SSParams) as obj_Results:
                str_Key_AgeNe__Sim_Pop_Size = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Pop_Size
                str_Col_Name_AgeNe__Sim_Pop_Size = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Sim_Pop_Size)
    #             str_Key_AgeNe__Nc_Adult_Pop_Size = globalsSS.Colnames_AgeNe_Results.static_str_Colname_Nx_Nc_Adults
    #             str_Col_Name_AgeNe__Nc_Adult_Pop_Size = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Nc_Adult_Pop_Size)
                str_Key_AgeNe__Sim_Replicates = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Sim_Replicates
                str_Col_Name_AgeNe__Sim_Replicates = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Sim_Replicates)
                str_Key_AgeNe__Loci = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Loci
                str_Col_Name_AgeNe__Loci = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Loci)
                str_Key_Sim__Run_User_Defined_Folder = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Run_User_Defined_Folder
                str_Col_Name_Sim__Run_User_Defined_Folder = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Sim__Run_User_Defined_Folder)
    
                #str_Key_Colname_Stats_Category_Code = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category_Code
                #str_Col_Name_Stats_Category_Code = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Colname_Stats_Category_Code)
                str_Key_Colname_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category
                str_Col_Name_Stats_Category = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Colname_Stats_Category)
                #str_Key_Colname_float_Ne2_Burrows_r_Sqrd_LDNe = globalsSS.Colnames_Ne2_Aggregation.static_Str_Colname_float_Total_Ne2_r_Sqrd_LDNe
                #str_Col_Name_float_Total_Ne2_r_Sqrd_LDNe = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Colname_float_Ne2_Burrows_r_Sqrd_LDNe)
    
            pass
    
            ''' Get values from df_1 '''
            str_Mating_Count_Replicate_Total = str(list_int_Mating_Count_Replicate_Totals_To_Process)
            int_Pop_Size__N = df_1[str_Col_Name_AgeNe__Sim_Pop_Size].iloc[0]
            str_Pop_Size__N = str(int_Pop_Size__N)
    #         str_Adult_Pop_Size__N = str(int_AgeNe__Adult_Pop_Size__Nx_Adults__N)
    #         str_Adult_Pop_Size__Nc = str(int_AgeNe__Adult_Pop_Size__Nx_Adults__Nc)
            str_Replicates = str(df_1[str_Col_Name_AgeNe__Sim_Replicates].iloc[0])
            str_Loci = str(df_1[str_Col_Name_AgeNe__Loci].iloc[0])
            str_Sim__Run_User_Defined_Folder = str(df_1[str_Col_Name_Sim__Run_User_Defined_Folder].iloc[0])
    
            str_Fig_Title = str('Sampling strategy: Estimated LDNe for sample size-locus number combinations')
    
            ''' Title spacing '''
            #matplotlib__pyplot.subplots_adjust(top=0.87)
            ''' Font details '''          
            int_Plot_SupTitle_Size = 16
            if str_Figure_Colour_Scheme == globalsSS.Figure_Colour_Schemes.static_str_Figure_Colour_Scheme__Dark_Blue:
                str_Font_Colour = 'white'
            else:
                str_Font_Colour = 'blue'
    
    
            #matplotlib__pyplot.suptitle(str_Fig_Title, fontsize=int_Plot_SupTitle_Size, color=str_Font_Colour, figure=pyplot_Fig)
            ''' Top Middle '''
            x = .5 
            y = 1.16                
            matplotlib__pyplot.text(x, y, str_Fig_Title,
                     horizontalalignment='center',
                     fontsize=int_Plot_SupTitle_Size,
                     color=str_Font_Colour,
                     transform = ax1.transAxes,
                     figure=pyplot_Fig)     
            #DEBUG_ON
            #matplotlib__pyplot.show()
            #DEBUG_OFF    
        pass
            
        ''' Font details '''          
#         int_Plot_SupTitle_Size = 16
#         str_Font_Colour = 'blue'

        '''
        ~~~~~~~~~~~~~~~
        Label - PlotTitle
        ~~~~~~~~~~~~~~~
        '''   
        bool_Add_PlotTitle = True
        if bool_Add_PlotTitle:
            ''' Get colnames in order to get data from df_1 '''
            with SSResults(self.obj_SSParams) as obj_Results:
                str_Key_AgeNe__Sim_Pop_Size = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Pop_Size
                str_Col_Name_AgeNe__Sim_Pop_Size = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Sim_Pop_Size)
    #             str_Key_AgeNe__Nc_Adult_Pop_Size = globalsSS.Colnames_AgeNe_Results.static_str_Colname_Nx_Nc_Adults
    #             str_Col_Name_AgeNe__Nc_Adult_Pop_Size = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Nc_Adult_Pop_Size)
                str_Key_AgeNe__Sim_Replicates = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Sim_Replicates
                str_Col_Name_AgeNe__Sim_Replicates = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Sim_Replicates)
                str_Key_AgeNe__Loci = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Loci
                str_Col_Name_AgeNe__Loci = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Loci)
                str_Key_Sim__Run_User_Defined_Folder = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Run_User_Defined_Folder
                str_Col_Name_Sim__Run_User_Defined_Folder = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Sim__Run_User_Defined_Folder)
    
                #str_Key_Colname_Stats_Category_Code = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category_Code
                #str_Col_Name_Stats_Category_Code = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Colname_Stats_Category_Code)
                str_Key_Colname_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category
                str_Col_Name_Stats_Category = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Colname_Stats_Category)
                #str_Key_Colname_float_Ne2_Burrows_r_Sqrd_LDNe = globalsSS.Colnames_Ne2_Aggregation.static_Str_Colname_float_Total_Ne2_r_Sqrd_LDNe
                #str_Col_Name_float_Total_Ne2_r_Sqrd_LDNe = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Colname_float_Ne2_Burrows_r_Sqrd_LDNe)

                str_Mating_Count_Replicate_Total = str(list_int_Mating_Count_Replicate_Totals_To_Process)
                int_Pop_Size__N = df_1[str_Col_Name_AgeNe__Sim_Pop_Size].iloc[0]
                str_Pop_Size__N = str(int_Pop_Size__N)
                #str_Adult_Pop_Size__N = str(int_AgeNe__Adult_Pop_Size__Nx_Adults__N)
                #str_Adult_Pop_Size__Nc = str(int_AgeNe__Adult_Pop_Size__Nx_Adults__Nc)
                str_Replicates = str(df_1[str_Col_Name_AgeNe__Sim_Replicates].iloc[0])
                int_Loci = int(df_1[str_Col_Name_AgeNe__Loci].iloc[0])
                str_Loci = str(int_Loci)
                str_Sim__Run_User_Defined_Folder = str(df_1[str_Col_Name_Sim__Run_User_Defined_Folder].iloc[0])

                ''' Subset to get just the value of interest '''
                with SSResults(self.obj_SSParams) as obj_Results:
                    str_Key_Colname_Nc_Potential_Parents_PP = globalsSS.Colnames_Parent_Offspring_Stats_METHOD_2.static_Str_Colname_Potential_Parents_PP
                    str_Colname_Nc_Potential_Parents_PP = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Colname_Nc_Potential_Parents_PP)
                    str_Key_Colname_Ne2_floatPCrit = globalsSS.Colnames_Ne2_Output.static_Str_Colname_Ne2_floatPCrit
                    str_Colname_Ne2_floatPCrit = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Colname_Ne2_floatPCrit)
                pass
                int_Nc_Potential_Parents_PP = int(df_1[str_Colname_Nc_Potential_Parents_PP].iloc[0])
                float_LDNe_Pcrit = df_1[str_Colname_Ne2_floatPCrit].iloc[0]

#                 str_Stat_Category_Code = str_Stat_Category_Code_Full
#                 df_float_LDNe__By_Category = df_2[(df_2[dict_Colnames['DF_1_X_Axis_Primary']]== str_Stat_Category_Code) & (df_2[str_Colname_Ne2_floatPCrit]== float_LDNe_Pcrit)]
#                 float_LDNe_Point_Estimate__By_Category = df_float_LDNe__By_Category[dict_Colnames['DF_1_Y_Axis_Primary']].iloc[0]
#                 int_LDNe_Point_Estimate__By_Category = int(round(float_LDNe_Point_Estimate__By_Category,0))
                str_Col_Key = dict_Colnames['DF_1_Y_Axis_Primary_Upr_CI']
                float_LDNe_Upr_CI__By_Category = df_float_LDNe__By_Category[dict_Colnames['DF_1_Y_Axis_Primary_Upr_CI']].iloc[0]
                int_LDNe_Upr_CI__By_Category = int(round(float_LDNe_Upr_CI__By_Category,0))
                str_Col_Key = dict_Colnames['DF_1_Y_Axis_Primary_Lwr_CI']
                float_LDNe_Lwr_CI__By_Category = df_float_LDNe__By_Category[dict_Colnames['DF_1_Y_Axis_Primary_Lwr_CI']].iloc[0]
                int_LDNe_Lwr_CI__By_Category = int(round(float_LDNe_Lwr_CI__By_Category,0))
                
#                 str_Stat_Category_Code = globalsSS.Colnames_COMMON_STATS.static_str_Colname_Stats_Category_Code__Full
#                 df_float_Mean_LDNe__Full = df_2[(df_2[dict_Colnames['DF_1_X_Axis_Primary']]== str_Stat_Category_Code) & (df_2[str_Colname_Ne2_floatPCrit]== float_LDNe_Pcrit)]
#                 float_Mean_LDNe__Full = df_float_Mean_LDNe__Full[dict_Colnames['DF_1_Y_Axis_Primary']].iloc[0]
#                 float_Mean_LDNe_JK_Lwr_CI__Full = df_float_Mean_LDNe__Full[dict_Colnames['DF_1_Y_Axis_Primary_Lwr_CI']].iloc[0]
#                 float_Mean_LDNe_JK_Upr_CI__Full = df_float_Mean_LDNe__Full[dict_Colnames['DF_1_Y_Axis_Primary_Upr_CI']].iloc[0]
#                 int_Mean_LDNe__Full = int(round(float_Mean_LDNe__Full,0))                                            
#                 
#                 str_Stat_Category_Code = globalsSS.Colnames_COMMON_STATS.static_str_Colname_Stats_Category_Code__Full_Juvenile
#                 df_float_Mean_LDNe__Full_Juvenile = df_2[(df_2[dict_Colnames['DF_1_X_Axis_Primary']]== str_Stat_Category_Code) & (df_2[str_Colname_Ne2_floatPCrit]== float_LDNe_Pcrit)]
#                 float_Mean_LDNe__Full_Juvenile = df_float_Mean_LDNe__Full_Juvenile[dict_Colnames['DF_1_Y_Axis_Primary']].iloc[0]
#                 float_Mean_LDNe_JK_Lwr_CI__Full_Juvenile = df_float_Mean_LDNe__Full_Juvenile[dict_Colnames['DF_1_Y_Axis_Primary_Lwr_CI']].iloc[0]
#                 float_Mean_LDNe_JK_Upr_CI__Full_Juvenile = df_float_Mean_LDNe__Full_Juvenile[dict_Colnames['DF_1_Y_Axis_Primary_Upr_CI']].iloc[0]
#                 int_Mean_LDNe__Full_Juvenile = int(round(float_Mean_LDNe__Full_Juvenile,0))
#                 
#                 str_Stat_Category_Code = globalsSS.Colnames_COMMON_STATS.static_str_Colname_Stats_Category_Code__Full_Mature
#                 df_float_Mean_LDNe__FullMature = df_2[(df_2[dict_Colnames['DF_1_X_Axis_Primary']]== str_Stat_Category_Code) & (df_2[str_Colname_Ne2_floatPCrit]== float_LDNe_Pcrit)]
#                 float_Mean_LDNe__FullMature = df_float_Mean_LDNe__FullMature[dict_Colnames['DF_1_Y_Axis_Primary']].iloc[0]
#                 float_Mean_LDNe_JK_Lwr_CI__FullMature = df_float_Mean_LDNe__FullMature[dict_Colnames['DF_1_Y_Axis_Primary_Lwr_CI']].iloc[0]
#                 float_Mean_LDNe_JK_Upr_CI__FullMature = df_float_Mean_LDNe__FullMature[dict_Colnames['DF_1_Y_Axis_Primary_Upr_CI']].iloc[0]
#                 int_Mean_LDNe__FullMature = int(round(float_Mean_LDNe__FullMature,0))

                ''' Get values from parameter object '''
                str_Simulation_Batch_Replicate_Length_Burn_In = str(self.obj_SSParams.int_Simulation_Batch_Replicate_Length_Burn_In)
                str_Simulation_Batch_Replicate_Length_Temporal_Evolution = str(self.obj_SSParams.int_Simulation_Batch_Replicate_Length_Temporal_Evolution)
                str_Scenario_Project_Name = self.obj_SSParams.str_Scenario_Project_Name
                str_Scenario_Project_Species_Name = self.obj_SSParams.str_Scenario_Project_Species_Name
                str_Scenario_Name = self.obj_SSParams.str_Scenario_Name
                str_Sampling_Strategy_Name = self.obj_SSParams.str_Sampling_Strategy_Name
                str_Scenario_Project_UID = str(self.obj_SSParams.int_Scenario_Project_UID)
                str_Scenario_UID = str(self.obj_SSParams.int_Scenario_UID)
                str_Sampling_Strategy_UID = str(self.obj_SSParams.int_Sampling_Strategy_UID)
                str_Sampling_Strategy_LDNe_Replicates = str(self.obj_SSParams.int_Sampling_Strategy_LDNe_Replicates)
                
                ''' TEMPORARY FIX - Removed NC as it rquires data from other spreadsheet (AgeNe Nx Nc).  It IS CORRECT on Demographic Plot and Sampling Plan plots '''
                str_Plot_Title = str(
                                    '' #Conveniant placeholder
                                    + 'Species: ' + str_Scenario_Project_Species_Name  + ', '
                                    + 'Project \\ Scenario \\ Sampling Strat: ' + str_Scenario_Project_Name + ' \\ ' + str_Scenario_Name + ' \\ ' + str_Sampling_Strategy_Name + ', ' 
                                    + '\n'                                 
                                    + 'Annual matings (Burn-in \\ Post Burn-in): ' + str_Simulation_Batch_Replicate_Length_Burn_In + ' \\ ' + str_Simulation_Batch_Replicate_Length_Temporal_Evolution + ', '
                                    + 'Pop Reps: ' + str_Replicates + ', '
                                    + 'LDNe Reps: ' + str_Sampling_Strategy_LDNe_Replicates + ', '
                                    + 'N: ' + '{:,}'.format(int_Pop_Size__N).replace(',',' ') + ', '
                                    #+ 'Nc: ' + '{:,}'.format(int_Nc_Potential_Parents_PP).replace(',',' ') + ', '
                                    #+ 'Loci: ' + str_Loci + ', '
                                    + 'Loci: ' + '{:,}'.format(int_Loci).replace(',',' ') + ', '
                                    + '\n'
                                    + str_Accuracy_Guideline_Estimate_Desc + ': ' + '{:,}'.format(int_LDNe_Point_Estimate__By_Category).replace(',',' ') + ' '
                                    + '(95% CI: '+ '{:,}'.format(int_LDNe_Lwr_CI__By_Category).replace(',',' ') + ' - '
                                    + '' + '{:,}'.format(int_LDNe_Upr_CI__By_Category).replace(',',' ') + ') '
#                                     + 'LDNe Juvenile: ' + '{:,}'.format(int_Mean_LDNe__Full_Juvenile).replace(',',' ') + ', '
#                                     + 'LDNe Mature: ' + '{:,}'.format(int_Mean_LDNe__FullMature).replace(',',' ') + ', '
#                                     + 'LDNe All: ' + '{:,}'.format(int_Mean_LDNe__Full).replace(',',' ')
                                    #+ 'Nc: ' + str_Adult_Pop_Size__Nc + ', '
                                    #+ 'AgeNe: ' + str_AgeNe__Ne + ', '
                                    #+ 'AgeNb: ' + str_AgeNe__Nb + ', '
#                                     + '\n'
#                                     #+ 'Run: ' + str_Sim__Run_User_Defined_Folder
#                                     + 'Species: ' + str_Scenario_Project_Species_Name  + ', '
#                                     + 'Project \\ Scenario: ' + str_Scenario_Project_Name + ' \\ ' + str_Scenario_Name
                                    + ''
                                    )
                
                
                ''' Font details '''          
                int_Plot_Title_Size = 14
                if str_Figure_Colour_Scheme == globalsSS.Figure_Colour_Schemes.static_str_Figure_Colour_Scheme__Dark_Blue:
                    str_Font_Colour = 'grey'
                else:
                    str_Font_Colour = 'blue'
                        
                #matplotlib__pyplot.title(str_Plot_Title, fontsize=int_Plot_Title_Size, color=str_Font_Colour, figure=pyplot_Fig)
                
                ''' Top Middle '''
                x = .5 
                y = 1.00                
                #matplotlib__pyplot.title(y, str_Plot_Title, fontsize=int_Plot_Title_Size, color=str_Font_Colour, figure=pyplot_Fig)
                matplotlib__pyplot.text(x, y, str_Plot_Title,
                         horizontalalignment='center',
                         fontsize=int_Plot_Title_Size,
                         color=str_Font_Colour,
                         transform = ax1.transAxes,
                         figure=pyplot_Fig)                
                #DEBUG_ON
                #matplotlib__pyplot.show()
                #DEBUG_OFF        
            pass
        
        ''' Font details '''          
        int_PLot_Y_Label_Size = 16
        if str_Figure_Colour_Scheme == globalsSS.Figure_Colour_Schemes.static_str_Figure_Colour_Scheme__Dark_Blue:
            str_Font_Colour = 'white'
        else:
            str_Font_Colour = 'blue'
       
        '''
        ~~~~~~~~~~~~~~~
        Label - Axis Labels
        ~~~~~~~~~~~~~~~
        ''' 
        bool_Add_Axis_Labels = True
        if bool_Add_Axis_Labels:       
            '''
            ~~~~~~~~~~~~~~~
            Label - X-Axis Labels
            ~~~~~~~~~~~~~~~
            '''
            bool_Add_X_Axis_Labels = True
            if bool_Add_X_Axis_Labels:                                                            
                matplotlib__pyplot.xlabel('Sample - Locus combinations', fontsize=int_PLot_Y_Label_Size, color=str_Font_Colour, figure=pyplot_Fig)
                
                #DEBUG_ON
                #matplotlib__pyplot.show()
                #DEBUG_OFF
    
                '''
                ~~~~~~~~~~~~~~~~~~~~~~
                Format X-axis labels
                ~~~~~~~~~~~~~~~~~~~~~~
                '''
           
                with SSResults(self.obj_SSParams) as obj_Results:
                    str_Key_Colname_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category
                    str_Col_Name_Stats_Category = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Colname_Stats_Category)
                pass
                list_Horiz_Align = ['right', 'center', 'left']
                int_Label_Rotation = 45
                list_Major_Ticks_X = list(df_1[str_Col_Name_Stats_Category])
                ax1.set_xticklabels(list_Major_Ticks_X, rotation=int_Label_Rotation, ha=list_Horiz_Align[0])

                #DEBUG_ON
                #matplotlib__pyplot.show()
                #DEBUG_OFF
            pass

            '''
            ~~~~~~~~~~~~~~~
            Label - Y-Axis Labels
            ~~~~~~~~~~~~~~~
            '''
            bool_Add_X_Axis_Labels = True
            if bool_Add_X_Axis_Labels:
                with SSResults(self.obj_SSParams) as obj_Results:
                    str_Key_Colname_Ne2_floatPCrit = globalsSS.Colnames_Ne2_Output.static_Str_Colname_Ne2_floatPCrit
                    str_Colname_Ne2_floatPCrit = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Colname_Ne2_floatPCrit)
                pass
                str_LDNe_Pcrit = str(df_1[str_Colname_Ne2_floatPCrit].iloc[0])
                ''' Check for Ne2_1 No Singletons PCrit option (PCrit Option = 1) '''
                if float(str_LDNe_Pcrit) == globalsSS.LDNe_PCrit__Float.static_float_LDNe_PCrit_NoS:                         
                    matplotlib__pyplot.ylabel('LDNe (Pcrit: No singletons)', fontsize=int_PLot_Y_Label_Size, color=str_Font_Colour, figure=pyplot_Fig)
                else:
                    matplotlib__pyplot.ylabel('LDNe (Pcrit: ' + str_LDNe_Pcrit + ')', fontsize=int_PLot_Y_Label_Size, color=str_Font_Colour, figure=pyplot_Fig)
                pass
                #DEBUG_ON
                #matplotlib__pyplot.show()
                #DEBUG_OFF
            pass                  
        pass          
        '''
        ~~~~~~~~~~~~~~~~~~
        Label - Sim Unique Identifier details
        ~~~~~~~~~~~~~~~~~~
        '''
        bool_Add_Sim_Unique_Run_ID_Labels = True
        if bool_Add_Sim_Unique_Run_ID_Labels:    
            ''' Get colnames in order to get data from df_1 '''
            with SSResults(self.obj_SSParams) as obj_Results:
                str_Key_Sim__Run_User_Defined_Folder = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Run_User_Defined_Folder
                str_Col_Name_Sim__Run_User_Defined_Folder = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Sim__Run_User_Defined_Folder)
                str_Key_Sim__Unique_Run_ID = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Unique_Run_ID
                str_Col_Name_Sim__Unique_Run_ID = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Sim__Unique_Run_ID)
    
            pass

            ''' Project/Scenario UIDs '''
            str_Scenario_Project__And_Scenario_UID = 'P_' + str_Scenario_Project_UID + '_B_' + str_Scenario_UID + '_S_' + str_Sampling_Strategy_UID
            #str_Sim__Run_User_Defined_Folder = str(df_1[str_Col_Name_Sim__Run_User_Defined_Folder].iloc[0])
    
            ''' Font details '''          
            int_Font_Size = 6
            str_Font_Colour = 'darkgrey'
            
            ''' Add figure text '''
            ''' Bottom Right '''
            #matplotlib__pyplot.figtext(.70,.025,str_Scenario_Project__And_Scenario_UID, fontsize=int_Font_Size, color=str_Font_Colour, figure=pyplot_Fig)    
#             ''' Top Right '''
#             x = .80 
#             y = .975 #.835 
            ''' Bottom Right '''
            x = .80 
            y = -0.055
            matplotlib__pyplot.figtext(x,y,str_Scenario_Project__And_Scenario_UID, fontsize=int_Font_Size, color=str_Font_Colour, figure=pyplot_Fig)
            
            ''' Get values from df_1 '''
            str_Sim__Unique_Run_ID = str(df_1[str_Col_Name_Sim__Unique_Run_ID].iloc[0])
            str_UID_Text = str(str_Sim__Unique_Run_ID)
    
            ''' Font details '''          
            int_Font_Size = 6
            str_Font_Colour = 'darkgrey'
            
            ''' Add figure text '''
            ''' Bottom Right '''
            #matplotlib__pyplot.figtext(.70,.015,str_UID_Text, fontsize=int_Font_Size, color=str_Font_Colour, figure=pyplot_Fig)
#             ''' Top Right '''
#             x = .80
#             y = .955 #.815
            ''' Bottom Right '''
            x = .80
            y = -0.075
            matplotlib__pyplot.figtext(x,y,str_UID_Text, fontsize=int_Font_Size, color=str_Font_Colour, figure=pyplot_Fig)
            
            #DEBUG_ON
            #matplotlib__pyplot.show()
            #DEBUG_OFF
        pass   
        '''
        ~~~~~~~~~~~~~~~~~~
        Axis details
        ~~~~~~~~~~~~~~~~~~
        '''
#         [xmin, xmax, ymin, ymax] = matplotlib__pyplot.axis()
#         matplotlib__pyplot.xlim(1, xmax)
        
        #int_Y_Axis_Max = int_Pop_Size__N / 2
        
        #dec_Total_Ne2_r_Sqrd_LDNe_LM = Decimal(float_Total_Ne2_r_Sqrd_LDNe_LM)
        #int_Y_Axis_Max = int(math.ceil(dec_Total_Ne2_r_Sqrd_LDNe_LM / 1000)) * 1000
        
        #int_Y_Axis_Max = int(math.ceil(int_Pop_Size__N * 0.1 * 2.1 / 500)) * 500
#         df_Temp = pandas.DataFrame()
#         df_Temp["Max"] = df_2[[str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe]].max(axis=1)
#         int_Y_Axis_Max = df_Temp["Max"].max(axis=0)
#         int_Y_Axis_Max = int(math.ceil(int_Y_Axis_Max / 500)) * 500
        
#         ''' int_Y_Axis_Max passed into function '''
#         matplotlib__pyplot.ylim(0, int_Y_Axis_Max)
        
#         '''
#         ~~~~~~~~~~~~~~~~~~
#         Colours - Axis & Tick
#         ~~~~~~~~~~~~~~~~~~
#         '''
# 
#         if str_Figure_Colour_Scheme == globalsSS.Figure_Colour_Schemes.static_str_Figure_Colour_Scheme__Dark_Blue:
#             str_Colour = 'darkblue'
# 
#         else:
#             str_Colour = 'white'
#         pass        
#         #ax1 = pyplot_Fig.add_subplot(111, axisbg=str_Colour)
#         ax1 = pyplot_Fig.add_subplot(111)
        



    
#         ax.plot(range(10))
#         ax.set_xlabel('X-axis')
#         ax.set_ylabel('Y-axis')
        
#         ax.spines['bottom'].set_color('red')
#         ax.spines['top'].set_color('red')
#         ax.xaxis.label.set_color('red')
        if str_Figure_Colour_Scheme == globalsSS.Figure_Colour_Schemes.static_str_Figure_Colour_Scheme__Dark_Blue:
            int_Tick_Label_Size = 16
            str_X_Axis_Tick_Labels_Colour = 'white'
            str_Y_Axis_Tick_Labels_Colour = 'white'
            str_X_Axis_Tick_Major_Colour = 'white'
            str_X_Axis_Tick_Minor_Colour = 'grey'
            str_Y_Axis_Tick_Major_Colour = 'white'
            str_Y_Axis_Tick_Minor_Colour = 'grey'
        pass
    
        if str_Figure_Colour_Scheme == globalsSS.Figure_Colour_Schemes.static_str_Figure_Colour_Scheme__Dark_Blue:
            ax1.tick_params(axis='x', colors=str_X_Axis_Tick_Labels_Colour)
            ax1.tick_params(axis='y', colors=str_Y_Axis_Tick_Labels_Colour)
    
            # We change the fontsize of minor ticks label 
            ax1.tick_params(axis='x', which='major', labelsize=int_Tick_Label_Size, color=str_X_Axis_Tick_Major_Colour)
            ax1.tick_params(axis='x', which='minor', labelsize=int_Tick_Label_Size, color=str_X_Axis_Tick_Minor_Colour)
            ax1.tick_params(axis='y', which='major', labelsize=int_Tick_Label_Size, color=str_Y_Axis_Tick_Major_Colour)
            ax1.tick_params(axis='y', which='minor', labelsize=int_Tick_Label_Size, color=str_Y_Axis_Tick_Minor_Colour) 
        pass 
    
        ''' Axis tick pointing direction '''
        ax1.tick_params(axis='x', direction='out')
        ax1.tick_params(axis='y', direction='out')
        
        ''' Specify axis ticks to be plotted '''
        ax1.xaxis.tick_bottom() 
        ax1.yaxis.tick_left() 
             
#         for ax, color in zip([ax1], ['white']):
#             matplotlib__pyplot.setp(ax.spines.values(), color=color)
#             matplotlib__pyplot.setp([ax.get_xticklines(), ax1.get_yticklines()], color=color)        
#         
#         ax1.axhline(linewidth=4, color="w") # inc. width of x-axis and color it
#         ax1.axvline(linewidth=4, color="w") # inc. width of y-axis and color it

        if str_Figure_Colour_Scheme == globalsSS.Figure_Colour_Schemes.static_str_Figure_Colour_Scheme__Dark_Blue:
            str_Colour = 'white'

        else:
            str_Colour = 'black'
        pass
        for axis in ['top','bottom','left','right']:
            ax1.spines[axis].set_linewidth(4)
            ax1.spines[axis].set_color(str_Colour)
 
        ax1.spines['top'].set_visible(False)
        ax1.spines['right'].set_visible(False)           

        '''
        ~~~~~~~~~~~~~~~~~~
        Legend 
        ~~~~~~~~~~~~~~~~~~
        '''
        bool_Add_Legend = False
        if bool_Add_Legend:
            list_pyplot_Lines = []
            list_str_Experiment_Text = []
            for key_str_Experiment, value_pyplot_Line in dict_pyplot_Legend_Lines.items():
                list_pyplot_Lines.append(value_pyplot_Line)
                list_str_Experiment_Text.append(key_str_Experiment)
            pass
    
            float_Bbox_X_Pos = 0.80
            float_Bbox_Y_Pos = 0.35    
            pyplot_Fig_Legend = pyplot_Fig.legend(list_pyplot_Lines
                                                  ,list_str_Experiment_Text
                                                  ,bbox_to_anchor=(float_Bbox_X_Pos, float_Bbox_Y_Pos)
                                                  ,frameon = 1)
            

        
            pyplot_Fig_Legend_Frame = pyplot_Fig_Legend.get_frame()
            
            pyplot_Fig_Legend_Frame.set_color('white')
            ''' Legend frame background '''
            #pyplot_Fig_Legend_Frame.set_facecolor('green')
            ''' Legend frame border '''
            #pyplot_Fig_Legend_Frame.set_edgecolor('red')
            
            ''' Turn off frame outline '''
            pyplot_Fig_Legend_Frame.set_linewidth(0)
            
            # set the alpha value of the legend: it will be translucent
            pyplot_Fig_Legend_Frame.set_alpha(0.5)                                                    
        
            #DEBUG_ON
            #matplotlib__pyplot.show()
            #DEBUG_OFF    
        pass
        #ax1.grid(True, figure=pyplot_Fig)

        bool_Format_Ticks = False
        if bool_Format_Ticks:
            nparray_Major_Ticks_X = ax1.xaxis.get_majorticklocs()      
            if len(nparray_Major_Ticks_X) > 1: 
                float_Major_Ticks_X_First = nparray_Major_Ticks_X[0]
                ''' Not sure why but use option 1 for 0 lower bound x-axis and option 2 for categorical x-axis '''
                #float_Major_Ticks_X_Last = nparray_Major_Ticks_X[-1] #Option 1
                float_Major_Ticks_X_Last = nparray_Major_Ticks_X[-1]+1 #Option 2
                float_Major_Ticks_X_Interval = 1
                nparray_Major_Ticks_X = numpy.arange(float_Major_Ticks_X_First, float_Major_Ticks_X_Last, float_Major_Ticks_X_Interval)                                              
                ax1.set_xticks(nparray_Major_Ticks_X) 

            pass
        
            nparray_Minor_Ticks_X = ax1.xaxis.get_minorticklocs()
            
            if len(nparray_Minor_Ticks_X) > 1:     
                float_Minor_Ticks_X_First = nparray_Minor_Ticks_X[0]
                float_Minor_Ticks_X_Last = nparray_Minor_Ticks_X[-1]
                float_Minor_Ticks_X_Interval = 1
                nparray_Minor_Ticks_X = numpy.arange(float_Minor_Ticks_X_First, float_Minor_Ticks_X_Last, float_Minor_Ticks_X_Interval)                                              
                ax1.set_xticks(nparray_Minor_Ticks_X, minor=True)
            
            nparray_Major_Ticks_Y = ax1.yaxis.get_majorticklocs()      
            if len(nparray_Major_Ticks_Y) > 1: 
                float_Major_Ticks_Y_First = nparray_Major_Ticks_Y[0]
                float_Major_Ticks_Y_Last = nparray_Major_Ticks_Y[-1]
                float_Major_Ticks_Y_Interval = 50
                nparray_Major_Ticks_Y = numpy.arange(float_Major_Ticks_Y_First, float_Major_Ticks_Y_Last, float_Major_Ticks_Y_Interval)                                              
                ax1.set_yticks(nparray_Major_Ticks_Y)  
                
            nparray_Minor_Ticks_Y = ax1.yaxis.get_minorticklocs()      
            if len(nparray_Minor_Ticks_Y) > 1: 
                float_Minor_Ticks_Y_First = nparray_Minor_Ticks_Y[0]
                float_Minor_Ticks_Y_Last = nparray_Minor_Ticks_Y[-1]
                float_Minor_Ticks_Y_Interval = 1
                nparray_Minor_Ticks_Y = numpy.arange(float_Minor_Ticks_Y_First, float_Minor_Ticks_Y_Last, float_Minor_Ticks_Y_Interval)                                              
                ax1.set_yticks(nparray_Minor_Ticks_Y, minor=True)                                  
            
                                                                  
            ax1.grid(which='both')   
            
            #DEBUG_ON
            #matplotlib__pyplot.show()
            #DEBUG_OFF 
        pass

#         '''
#         ~~~~~~~~~~~~~~~~~~~~~~
#         Format axis labels
#         ~~~~~~~~~~~~~~~~~~~~~~
#         '''
#    
#         with SSResults(self.obj_SSParams) as obj_Results:
#             str_Key_Colname_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category
#             str_Col_Name_Stats_Category = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Colname_Stats_Category)
#         pass
#         list_Horiz_Align = ['right', 'center', 'left']
#         int_Label_Rotation = 45
#         list_Major_Ticks_X = list(df_1[str_Col_Name_Stats_Category])
#         ax1.set_xticklabels(list_Major_Ticks_X, rotation=int_Label_Rotation, ha=list_Horiz_Align[1])
#         
#         '''
#         ~~~~~~~~~~~~~~~~~~~~~~
#         Set axis limits
#         ~~~~~~~~~~~~~~~~~~~~~~
#         '''
#         ''' Add spacing at beginning and end of x-axis '''                                          
#         ax1.set_xlim(+0.5, len(list_Major_Ticks_X)+0.5)
#         #ax1.set_xlim((0, 10))
#                 
#         # and a corresponding grid                                                       
#         
#         ax1.grid(which='both')                                                            
#         
#         # or if you want differnet settings for the grids:                               
#         ax1.grid(which='minor', alpha=0.2)                                                
#         ax1.grid(which='major', alpha=0.5)   
#         
        '''
        ~~~~~~~~~~~~~~~~~~
        Annotate points
        ~~~~~~~~~~~~~~~~~~
        '''
        bool_Annotate_Points = True
        if bool_Annotate_Points:
            ''' Get colnames in order to get data from df_1 '''
            with SSResults(self.obj_SSParams) as obj_Results:
                str_Key_Colname_Ne2_Inf_Count_floatLDNe = globalsSS.Colnames_Ne2_Aggregation.static_Str_Colname_Ne2_Inf_Count_floatLDNe
                str_Colname_Ne2_Inf_Count_floatLDNe = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Colname_Ne2_Inf_Count_floatLDNe)
    
                str_Key_Colname_Ne2_Inf_Count_floatLDNeJackknife_Lwr_CI = globalsSS.Colnames_Ne2_Aggregation.static_Str_Colname_Ne2_Inf_Count_floatLDNeJackknife_Lwr_CI
                str_Colname_Ne2_Inf_Count_floatLDNeJackknife_Lwr_CI = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Colname_Ne2_Inf_Count_floatLDNeJackknife_Lwr_CI)
                
                str_Key_Colname_Ne2_Inf_Count_floatLDNeJackknife_Upr_CI = globalsSS.Colnames_Ne2_Aggregation.static_Str_Colname_Ne2_Inf_Count_floatLDNeJackknife_Upr_CI
                str_Colname_Ne2_Inf_Count_floatLDNeJackknife_Upr_CI = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Colname_Ne2_Inf_Count_floatLDNeJackknife_Upr_CI)
    
            pass        
        
            
        
            ''' Annotate Primary Y-Axis points - Point Estimate'''
            list_int_X_Axis_Primary = df_Key_Values['DF_1_X_Axis_Primary_Points'].tolist()
            #int_X_Axis_Primary = df_1[dict_Colnames['DF_1_X_Axis_Primary']]
            list_int_Y_Axis_Primary = [int(round(x,0)) for x in df_1[dict_Colnames['DF_1_Y_Axis_Primary']]]
            list_int_Ne2_Inf_Count_floatLDNe = df_1[str_Colname_Ne2_Inf_Count_floatLDNe]
            int_Fontsize_Annotation = 9
            int_XYText_Offset_Horiz = -5
            int_XYText_Offset_Vert = -3
            for a, b, c in zip(list_int_X_Axis_Primary, list_int_Y_Axis_Primary, list_int_Ne2_Inf_Count_floatLDNe):    
                if c > 0:
                    str_Annotation_colour = 'red'
                else:
                    str_Annotation_colour = 'black'
                pass
            
                ax1.annotate('(' + '{:,}'.format(b).replace(',',' ') + ', ' + '{}'.format(c) + ')', xy=(a,b), xytext=(int_XYText_Offset_Horiz, int_XYText_Offset_Vert), ha='right', textcoords='offset points', color=str_Annotation_colour, fontsize=int_Fontsize_Annotation)
            pass
                         
            ''' Annotate Primary Y-Axis points - Lwr CI'''
            #int_Y_Axis_Primary_Lwr_CI = [int(round(x,0)) for x in df_1[dict_Colnames['DF_1_Y_Axis_Primary_Lwr_CI']]]
            list_int_Y_Axis_Primary_Lwr_CI = [int(round(x,0)) if numpy.isnan(x) == False else float('NaN') for x in df_1[dict_Colnames['DF_1_Y_Axis_Primary_Lwr_CI']]]
            list_int_Y_Axis_Primary_Lwr_CI_Trunc_Flag = [x for x in df_Key_Values['DF_1_Y_Axis_Primary_Lwr_CI_Trunc_Flag']]
            list_int_Ne2_Inf_Count_floatLDNeJackknife_Lwr_CI = df_1[str_Colname_Ne2_Inf_Count_floatLDNeJackknife_Lwr_CI].tolist()
            int_Fontsize_Annotation = 9
            int_XYText_Offset_Horiz = -5
            int_XYText_Offset_Vert = -10
            for a, b, c, d in zip(list_int_X_Axis_Primary, list_int_Y_Axis_Primary_Lwr_CI, list_int_Ne2_Inf_Count_floatLDNeJackknife_Lwr_CI, list_int_Y_Axis_Primary_Lwr_CI_Trunc_Flag):   
                if c > 0:
                    str_Annotation_colour = 'red'
                else:
                    str_Annotation_colour = 'black'
                pass
                
                #if b == float('NaN'):
                if numpy.isnan(b):
                    b = globalsSS.Output_Display_Constants.static_str_Does_Not_Compute
                pass
            
                if not isinstance(b, str):
                    if d:
                        ax1.annotate('(' + '{:,}'.format(b).replace(',',' ') + ', ' + '{}'.format(c) + ')', xy=(a,int_Y_Axis_Max), xytext=(int_XYText_Offset_Horiz, int_XYText_Offset_Vert), ha='right', textcoords='offset points', color=str_Annotation_colour, fontsize=int_Fontsize_Annotation)
                    else:
                        ax1.annotate('(' + '{:,}'.format(b).replace(',',' ') + ', ' + '{}'.format(c) + ')', xy=(a,b), xytext=(int_XYText_Offset_Horiz, int_XYText_Offset_Vert), ha='right', textcoords='offset points', color=str_Annotation_colour, fontsize=int_Fontsize_Annotation)
                    pass
                else:
                    if d:
                        ax1.annotate('(' + b + ', ' + '{}'.format(c) + ')', xy=(a, int_Y_Axis_Min), xytext=(int_XYText_Offset_Horiz, int_XYText_Offset_Vert), ha='right', textcoords='offset points', color=str_Annotation_colour, fontsize=int_Fontsize_Annotation)
                    else:
                        ax1.annotate('(' + b + ', ' + '{}'.format(c) + ')', xy=(a,b), xytext=(int_XYText_Offset_Horiz, int_XYText_Offset_Vert), ha='right', textcoords='offset points', color=str_Annotation_colour, fontsize=int_Fontsize_Annotation)
                    pass 
                pass                   
            pass 
        
            ''' Annotate Primary Y-Axis points - Upr CI'''
            #int_Y_Axis_Primary_Upr_CI = [int(round(x,0)) for x in df_1[dict_Colnames['DF_1_Y_Axis_Primary_Upr_CI']]]
            list_int_Y_Axis_Primary_Upr_CI = [int(round(x,0)) if numpy.isnan(x) == False else float('NaN') for x in df_1[dict_Colnames['DF_1_Y_Axis_Primary_Upr_CI']]]
            list_int_Y_Axis_Primary_Upr_CI_No_NaNs = [int(round(x,0)) for x in df_Key_Values['DF_1_Y_Axis_Primary_Upr_CI_No_NaNs']]
            list_int_Y_Axis_Primary_Upr_CI_Trunc_Flag = [x for x in df_Key_Values['DF_1_Y_Axis_Primary_Upr_CI_Trunc_Flag']]
            list_int_Ne2_Inf_Count_floatLDNeJackknife_Upr_CI = df_1[str_Colname_Ne2_Inf_Count_floatLDNeJackknife_Upr_CI].tolist()
            int_Fontsize_Annotation = 9
            int_XYText_Offset_Horiz = -5
            int_XYText_Offset_Vert = 5            
            for a, b, c, d, e in zip(list_int_X_Axis_Primary, list_int_Y_Axis_Primary_Upr_CI_No_NaNs, list_int_Ne2_Inf_Count_floatLDNeJackknife_Upr_CI, list_int_Y_Axis_Primary_Upr_CI_Trunc_Flag, list_int_Y_Axis_Primary_Upr_CI):   
                if c > 0:
                    str_Annotation_colour = 'red'
                else:
                    str_Annotation_colour = 'black'
                pass
                
                bool_IsDNC = numpy.isnan(e)
                if bool_IsDNC:
                    e = globalsSS.Output_Display_Constants.static_str_Does_Not_Compute
                pass
            
                if not bool_IsDNC:
                    if d:
                        ax1.annotate('(' + '{:,}'.format(b).replace(',',' ') + ', ' + '{}'.format(c) + ')', xy=(a,int_Y_Axis_Max), xytext=(int_XYText_Offset_Horiz, int_XYText_Offset_Vert), ha='right', textcoords='offset points', color=str_Annotation_colour, fontsize=int_Fontsize_Annotation)
                    else:
                        ax1.annotate('(' + '{:,}'.format(b).replace(',',' ') + ', ' + '{}'.format(c) + ')', xy=(a,b), xytext=(int_XYText_Offset_Horiz, int_XYText_Offset_Vert), ha='right', textcoords='offset points', color=str_Annotation_colour, fontsize=int_Fontsize_Annotation)
                    pass
                else:
                    if d:
                        ax1.annotate('(' + str(b) + ', ' + '{}'.format(c) + ')', xy=(a,int_Y_Axis_Max), xytext=(int_XYText_Offset_Horiz, int_XYText_Offset_Vert), ha='right', textcoords='offset points', color=str_Annotation_colour, fontsize=int_Fontsize_Annotation)
                    else:
                        ax1.annotate('(' + e + ', ' + '{}'.format(c) + ')', xy=(a,b), xytext=(int_XYText_Offset_Horiz, int_XYText_Offset_Vert), ha='right', textcoords='offset points', color=str_Annotation_colour, fontsize=int_Fontsize_Annotation)
                    pass 
                pass                   
            pass 
            #DEBUG_ON
            #matplotlib__pyplot.show()
            #DEBUG_OFF         

        pass
                
        #DEBUG_ON
        ''' Required to change background of INTERACTIVE WINDOW only'''
        if str_Figure_Colour_Scheme == globalsSS.Figure_Colour_Schemes.static_str_Figure_Colour_Scheme__Dark_Blue:
            pyplot_Fig_Patch = pyplot_Fig.patch
            pyplot_Fig_Patch.set_facecolor('darkblue') # works with plt.show().  
        pass
        #DEBUG_OFF
        #DEBUG_ON
        #matplotlib__pyplot.show()
        #DEBUG_OFF         
                                
        return pyplot_Fig

    '''
    -------------------------------------------------------------
    CURRENT NEOGEN PLOT - Plot SAMPLING INDIVS SUMMARISED Results
    -------------------------------------------------------------
    '''   
    def func__Plot_SAMPLING_INDIVS_Summary__Get_Data(self, str_Plot_Save_Path, str_Search_Path__Batch_Scenario_Data, str_Search_Path__Sampling_Strategy_Data):

        boolSuccess = False
       
        '''
        -------------------------------
        Specify Input & Output Files
        -------------------------------
        '''
        ''' Input file '''
        str_Excel_Input_Colname_Prefix = globalsSS.Excel_Results_File_Details.static_Excel_Colname_Prefix__SAMPLING_INDIVS_Summary__Aggregate_Results
        str_Excel_Input_FileName =  globalsSS.Excel_Results_File_Details.static_Excel_FileName__SAMPLING_INDIVS_Summary__Aggregate_Results

        ''' Output plots '''        
        str_Plot_Output_File_1 = str_Plot_Save_Path + '\\' + self.obj_SSParams.strUniqueRunID + '_' + str_Excel_Input_FileName + '_' + str_Excel_Input_Colname_Prefix + '.png'
        str_Plot_Output_File_2 = str_Plot_Save_Path + '\\' + self.obj_SSParams.strUniqueRunID + '_' + str_Excel_Input_FileName + '_' + str_Excel_Input_Colname_Prefix + '.pdf'

        '''
        -------------------------------
        Specify Excel Input file
        -------------------------------
        '''        
        str_Input_FileName = '*' + str_Excel_Input_FileName + '*.xlsx'
        str_File_Search_Pattern = str_Input_FileName
        
        '''
        -------------------------------
        Import Excel Data to dataframee
        -------------------------------
        '''
        '''
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~
        Get & Process Input SHEET
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~
        '''
        str_Search_Path = str_Search_Path__Sampling_Strategy_Data 
        
        str_Input_Excel_Sheet_Name = globalsSS.Excel_Results_File_Details.static_Excel_SheetName__SAMPLING_INDIVS_Summary__Aggregate_Results

        self.obj_Log_Default.info('Dataframing results for: ' + str_Input_FileName + ' and for SHEET: ' + str_Input_Excel_Sheet_Name) 

        bool_File_1_Located = False
        with FileHandler() as obj_FileHandler:
            bool_File_1_Located, list_Path_And_Files = obj_FileHandler.func_Locate_Files(str_Search_Path, str_File_Search_Pattern)
        pass
    
        if bool_File_1_Located:
            
            '''Process Results'''
            list_DF_1s = []            
            for str_Path_And_File in list_Path_And_Files:
                
                '''Get the data from the excel files with the specified sheet'''
                xl = pandas.ExcelFile(str_Path_And_File)
                df_1 = xl.parse(str_Input_Excel_Sheet_Name)
                list_DF_1s.append(df_1)
                
            pass

            ''' concatinate the dfs '''
            df_Aggregate = pandas.DataFrame()
            for df_New in list_DF_1s:
                '''log the results'''
                #str_Df = df_New.to_string()
                #self.obj_Log_Debug.debug('Results dataframe NEW: %s' % str_Df)
                
                #Concat DFs - Tried df.append() but it wont work
                df_Aggregate = pandas.concat([df_Aggregate,df_New], ignore_index=True)
                
                #str_Df = df_Aggregate.to_string()
                #self.obj_Log_Debug.debug('Results dataframe AGGREGATE: %s' % str_Df)

            pass

            #DEBUG_ON
            #str_Df = df_Aggregate.to_string()
            #self.obj_Log_Debug.debug('Results dataframe AGGREGATE 1: %s' % str_Df)
            #DEBUG_OFF
            
            df1 = df_Aggregate 
        else:
            self.obj_Log_Default.error('File specified could not be located; str_Search_Path = ' + str_Search_Path + '; strFileSearchPattern = ' + str_File_Search_Pattern)
        pass
    
        '''
        -------------------------------
        Get More Data
        -------------------------------
        '''
        '''
        -------------------------------
        Specify Excel Input file 2
        -------------------------------
        '''        
        #str_Excel_Input_Colname_Prefix = globalsSS.Excel_Results_File_Details.static_Excel_Colname_Prefix__EXPERIMENT_Parent_Offspring_Ne_1__Summary_Results
        str_Excel_Input_FileName =  globalsSS.Excel_Results_File_Details.static_Excel_FileName__Ne2_LDNe__Summary_EOR_Results
 
        str_Input_FileName = '*' + str_Excel_Input_FileName + '*.xlsx'
        str_File_Search_Pattern = str_Input_FileName
        
        '''
        -------------------------------
        Import Excel Data to dataframee
        -------------------------------
        '''
        '''
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~
        Get & Process Input SHEET
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~
        '''
        str_Search_Path = str_Search_Path__Sampling_Strategy_Data 
        
        str_Input_Excel_Sheet_Name = globalsSS.Excel_Results_File_Details.static_Excel_SheetName__Ne2_LDNe__Summary_EOR_Results

        self.obj_Log_Default.info('Dataframing results for: ' + str_Input_FileName + ' and for SHEET: ' + str_Input_Excel_Sheet_Name) 

        bool_File_2_Located = False
        with FileHandler() as obj_FileHandler:
            bool_File_2_Located, list_Path_And_Files = obj_FileHandler.func_Locate_Files(str_Search_Path, str_File_Search_Pattern)
       
        if bool_File_2_Located:
            
            '''Process Results'''
            list_DF_2s = []            
            for str_Path_And_File in list_Path_And_Files:
                
                '''Get the data from the excel files with the specified sheet'''
                xl = pandas.ExcelFile(str_Path_And_File)
                df_2 = xl.parse(str_Input_Excel_Sheet_Name)
                list_DF_2s.append(df_2)
                
            pass

            ''' concatinate the dfs '''
            df_Aggregate = pandas.DataFrame()
            for df_New in list_DF_2s:
                '''log the results'''
                #str_Df = df_New.to_string()
                #self.obj_Log_Debug.debug('Results dataframe NEW: %s' % str_Df)
                
                #Concat DFs - Tried df.append() but it wont work
                df_Aggregate = pandas.concat([df_Aggregate,df_New], ignore_index=True)
                
                #str_Df = df_Aggregate.to_string()
                #self.obj_Log_Debug.debug('Results dataframe AGGREGATE: %s' % str_Df)

            pass

            #DEBUG_ON
            #str_Df = df_Aggregate.to_string()
            #self.obj_Log_Debug.debug('Results dataframe AGGREGATE 1: %s' % str_Df)
            #DEBUG_OFF
            
            df2 = df_Aggregate 
        else:
            self.obj_Log_Default.error('File specified could not be located; str_Search_Path = ' + str_Search_Path + '; strFileSearchPattern = ' + str_File_Search_Pattern)
        pass
        '''
        -------------------------------
        Get More Data
        -------------------------------
        '''
        '''
        -------------------------------
        Specify Excel Input file 3
        -------------------------------
        '''        
        str_Excel_Input_FileName =  globalsSS.Excel_Results_File_Details.static_Excel_FileName__SS_LEVEL_Results
 
        str_Input_FileName = '*' + str_Excel_Input_FileName + '*.xlsx'
        str_File_Search_Pattern = str_Input_FileName
        
        '''
        -------------------------------
        Import Excel Data to dataframee
        -------------------------------
        '''
        '''
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~
        Get & Process Input SHEET
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~
        '''
        str_Search_Path = str_Search_Path__Batch_Scenario_Data 
        
        str_Input_Excel_Sheet_Name = globalsSS.Excel_Results_File_Details.static_Excel_SheetName__SS_LEVEL_BATCH_Results

        self.obj_Log_Default.info('Dataframing results for: ' + str_Input_FileName + ' and for SHEET: ' + str_Input_Excel_Sheet_Name) 
        
        bool_File_3_Located = False
        with FileHandler() as obj_FileHandler:
            bool_File_3_Located, list_Path_And_Files = obj_FileHandler.func_Locate_Files(str_Search_Path, str_File_Search_Pattern)
       
        if bool_File_3_Located:
            
            '''Process Results'''
            list_DF_3s = []            
            for str_Path_And_File in list_Path_And_Files:
                
                '''Get the data from the excel files with the specified sheet'''
                xl = pandas.ExcelFile(str_Path_And_File)
                df_3 = xl.parse(str_Input_Excel_Sheet_Name)
                list_DF_3s.append(df_3)
                
            pass

            ''' concatinate the dfs '''
            df_Aggregate = pandas.DataFrame()
            for df_New in list_DF_3s:
                '''log the results'''
                #str_Df = df_New.to_string()
                #self.obj_Log_Debug.debug('Results dataframe NEW: %s' % str_Df)
                
                #Concat DFs - Tried df.append() but it wont work
                df_Aggregate = pandas.concat([df_Aggregate,df_New], ignore_index=True)
                
                #str_Df = df_Aggregate.to_string()
                #self.obj_Log_Debug.debug('Results dataframe AGGREGATE: %s' % str_Df)

            pass

            #DEBUG_ON
            #str_Df = df_Aggregate.to_string()
            #self.obj_Log_Debug.debug('Results dataframe AGGREGATE 1: %s' % str_Df)
            #DEBUG_OFF
            
            df3 = df_Aggregate 
        else:
            self.obj_Log_Default.error('File specified could not be located; str_Search_Path = ' + str_Search_Path + '; strFileSearchPattern = ' + str_File_Search_Pattern)
        pass


        '''
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~
        Transform the data
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~
        '''  
        if bool_File_1_Located and bool_File_2_Located and bool_File_3_Located:
            
            ''' Send the relevent DFs  '''
            list_DFs = [df1, df2, df3]
     
            list_DFs = self.func__Plot_SAMPLING_INDIVS_Summary__Transform_And_Process(str_Plot_Save_Path, str_Excel_Input_FileName, str_Excel_Input_Colname_Prefix, list_DFs)
            
        pass
    
                    
        return boolSuccess

    def func__Plot_SAMPLING_INDIVS_Summary__Transform_And_Process(self, str_Plot_Save_Path, str_Excel_Input_FileName, str_Excel_Input_Colname_Prefix, list_DFs):
        
        self.obj_Log_Default.info('Transforming data')

        '''
        -----------------------------
        Specify DFs
        -----------------------------
        '''
        df_1 = list_DFs[0]
        df_2 = list_DFs[1]
        df_3 = list_DFs[2]
           
        with SSResults(self.obj_SSParams) as obj_Results:
            str_Group_Key_Experiment_Label = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Experiment_Label
            str_Col_Name_Experiment_Label_DF1 = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Group_Key_Experiment_Label)

            str_Group_Key_Sampling_Indiv_Number = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Sampling_Indiv_Number
            str_Col_Name_Sampling_Indiv_Number_DF1 = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Group_Key_Sampling_Indiv_Number)
            str_Group_Key_Mating_Count_Sim_Total = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Mating_Count_Sim_Total
            str_Col_Name_Mating_Count_Sim_Total_DF1 = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Group_Key_Mating_Count_Sim_Total)
            str_Group_Key_Mating_Count_Replicate_Total = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Mating_Count_Replicate_Total
            str_Col_Name_Mating_Count_Replicate_Total_DF2 = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Group_Key_Mating_Count_Replicate_Total)

        pass

        ''' Subset the DF to get the correct Experiment '''
        str_Experiment_Label = globalsSS.Experment_Groups.static_str_Experiment_Sampling_Strategy_v1_0_Label
        if self.obj_SSParams.int_Sampling_Strategy_Sample_Proportions_Source == globalsSS.Experment_Groups.static_int_Experiment_Sampling_Strategy_v1_0:
            str_Experiment_Label = globalsSS.Experment_Groups.static_str_Experiment_Sampling_Strategy_v1_0_Label
        elif self.obj_SSParams.int_Sampling_Strategy_Sample_Proportions_Source == globalsSS.Experment_Groups.static_int_Experiment_Sampling_Strategy_v1_1__USER_AGE_COHORTS:
            str_Experiment_Label = globalsSS.Experment_Groups.static_str_Experiment_Sampling_Strategy_v1_1__USER_AGE_COHORTS_Label
        elif self.obj_SSParams.int_Sampling_Strategy_Sample_Proportions_Source == globalsSS.Experment_Groups.static_int_Experiment_Sampling_Strategy_v1_1__USER_PROPORTIONS:
            str_Experiment_Label = globalsSS.Experment_Groups.static_str_Experiment_Sampling_Strategy_v1_1__USER_PROPORTIONS_Label
        elif self.obj_SSParams.int_Sampling_Strategy_Sample_Proportions_Source == globalsSS.Experment_Groups.static_int_Experiment_Sampling_Strategy_v1_1__USER_SAMPLE_NUMBERS:
            str_Experiment_Label = globalsSS.Experment_Groups.static_str_Experiment_Sampling_Strategy_v1_1__USER_SAMPLE_NUMBERS_Label
        elif self.obj_SSParams.int_Sampling_Strategy_Sample_Proportions_Source == globalsSS.Experment_Groups.static_int_Experiment_Sampling_Strategy_v1_1__USER_SAMPLE_PROPORTIONS:
            str_Experiment_Label = globalsSS.Experment_Groups.static_int_Experiment_Sampling_Strategy_v1_1__USER_SAMPLE_PROPORTIONS_Label
        pass
        
        df_1 = df_1[(df_1[str_Col_Name_Experiment_Label_DF1]==str_Experiment_Label)]

        ''' Get all the UNIQUE Sampling_Indiv_Number record subsets so each can be plotted '''
        nparray_Sampling_Indiv_Number = numpy.unique(df_1[str_Col_Name_Sampling_Indiv_Number_DF1])

        pass

#         ''' Get the UNIQUE Mating_Count_Replicate_Total values for just the last mating'''
#         nparray_Mating_Count_Replicate_Total = numpy.unique(df_2[str_Col_Name_Mating_Count_Replicate_Total_DF2])

        ''' Get the SIm Total Mating Count so that just the last matings records can be extracted from DF2 '''
        int_Mating_Count_Sim_Total = df_1[str_Col_Name_Mating_Count_Sim_Total_DF1].iloc[0]  
        df_2_Subset = df_2[(df_2[str_Col_Name_Mating_Count_Replicate_Total_DF2]==int_Mating_Count_Sim_Total)]
         
        #DEBUG_ON
        #str_Df = df_2_Subset.to_string()
        #self.obj_Log_Debug.debug('Results dataframe df 2: %s' % str_Df)
        #raw_input('pausing')
        #DEBUG_OFF      

        '''Subset and plot each Sampling_Indiv_Number '''                
        for int_Sampling_Indiv_Number in nparray_Sampling_Indiv_Number:

            '''
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~
            Transform
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~
            '''  
            self.obj_Log_Default.info('Transforming data for int_Sampling_Indiv_Number :' + str(int_Sampling_Indiv_Number))
                      
            ''' Subset the DF to get the correct value '''
            df_1_Subset = df_1[(df_1[str_Col_Name_Sampling_Indiv_Number_DF1]==int_Sampling_Indiv_Number)]
            
            #DEBUG_ON
            #str_Df = df_1_Subset.to_string()
            #self.obj_Log_Debug.debug('Results dataframe df 1: %s' % str_Df)
            #raw_input('pausing')
            #DEBUG_OFF    
            
            list_DFs = [df_1_Subset, df_2_Subset, df_3] 

            '''
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~
            Plot
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~
            '''    
            
            ''' Send the relevent DFs to the plotter '''
            #list_DFs = [df1, df2]
            
            bool_Interactive_Display = False
            ''' Specify the number of figure copies and their specs '''
            dict_Fig_Copies = {
                                1:{'ColourScheme':'Default', 'Transparent':False, 'Interactive_Display':bool_Interactive_Display, 'Save_PNG': True, 'Save_PDF': False}
                               #,2:{'ColourScheme':'Dark_Blue', 'Transparent':True, 'Interactive_Display':bool_Interactive_Display,'Save_PNG': True, 'Save_PDF': False}
                               }
            
            pyplot_Fig_1 = None
            for key_Dict_Fig_Copy_Params, value_Dict_Fig_Copy_Params in dict_Fig_Copies.iteritems():

                '''
                ~~~~~~~~~~~~~~~~~~~~~~~~~~~
                Create Figure, Plot & Format
                ~~~~~~~~~~~~~~~~~~~~~~~~~~~
                '''
                pyplot_Fig_1 = self.func__Plot_SAMPLING_INDIVS_Summary__Plot(list_DFs, int_Mating_Count_Sim_Total, int_Sampling_Indiv_Number, value_Dict_Fig_Copy_Params)
                
                '''
                ~~~~~~~~~~~~~~~~~~~~~~~~~~~
                Save results
                ~~~~~~~~~~~~~~~~~~~~~~~~~~~
                '''    
                str_Plot_Output_Path = str_Plot_Save_Path
                ''' Create path if it doesnt exist '''
                with FileHandler() as obj_File_Op:
                    obj_File_Op.method_Create_Path(str_Plot_Output_Path)
                pass                
                str_Plot_Output_FileName = self.obj_SSParams.strUniqueRunID + '_' + str_Excel_Input_FileName + '_' + str_Excel_Input_Colname_Prefix + '_I_' + str(int_Sampling_Indiv_Number)
                str_Plot_Output_Path_And_FileName = os__path.join(str_Plot_Output_Path, str_Plot_Output_FileName)
                if value_Dict_Fig_Copy_Params['Save_PNG'] == True:
                    str_Plot_Output_Path_And_FileName_PNG = str_Plot_Output_Path_And_FileName + '_' + str(key_Dict_Fig_Copy_Params) + '.png'
                    bool_Transparent = value_Dict_Fig_Copy_Params['Transparent']
                    pyplot_Fig_1.savefig(str_Plot_Output_Path_And_FileName_PNG, bbox_inches='tight', dpi=400, transparent=bool_Transparent)
                pass
                if value_Dict_Fig_Copy_Params['Save_PDF'] == True:
                    str_Plot_Output_Path_And_FileName_PDF = str_Plot_Output_Path_And_FileName + '_' + str(key_Dict_Fig_Copy_Params) + '.pdf'
                    pyplot_Fig_1.savefig(str_Plot_Output_Path_And_FileName_PDF, bbox_inches='tight')
                pass
        
                '''
                ~~~~~~~~~~~~~~~~~~~~~~~~~~~
                Display results
                ~~~~~~~~~~~~~~~~~~~~~~~~~~~
                '''
                if value_Dict_Fig_Copy_Params['Interactive_Display'] == True:           
                    matplotlib__pyplot.show()
                pass
            pass
            ''' Close the plot '''
            matplotlib__pyplot.close(pyplot_Fig_1) 
        pass
                  
        pass        
        
        
        return list_DFs
    
    def func__Plot_SAMPLING_INDIVS_Summary__Plot(self, list_DFs, int_Mating_Count_Sim_Total, int_Sampling_Indiv_Number, dict_Fig_Copy):
        
        self.obj_Log_Default.info('Creating figure')
        
        bool_Plot_Theme__Default = False
        bool_Plot_Theme__Dark_Blue_1 = False
        
        if dict_Fig_Copy['ColourScheme'] == 'Dark_Blue':
            bool_Plot_Theme__Dark_Blue_1 = True
        else:
            bool_Plot_Theme__Default = True
        pass

        int_Plot_Line_Width = 4
        '''
        -----------------------------
        Specify DFs
        -----------------------------
        '''
        df_1 = list_DFs[0]
        #df_2 = list_DFs[1]
        df_3 = list_DFs[2]
        
        
        '''
        -----------------------------
        Specify X-Axis
        -----------------------------
        '''
        with SSResults(self.obj_SSParams) as obj_Results:
            ''' X-axis - Age cohort original (source) ages in months'''
            str_Key_Source_VSP_Ages_And_Sizes__Ages = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Source_VSP_Ages_And_Sizes__Ages
            str_Colname_Source_VSP_Ages_And_Sizes__Ages = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Source_VSP_Ages_And_Sizes__Ages)
        pass
        str_X_Axis_df_1_Colname = str_Colname_Source_VSP_Ages_And_Sizes__Ages
        list_Primary_X_Axis = df_1[str_X_Axis_df_1_Colname].tolist()
        ''' NOTE: Because SharkSim ages start at zero (embryo) and AgeNe has to work with ages starting with one...'''
        ''' adjust the ages down by one '''
        #list_Primary_X_Axis = [(int(x / 12) - 1) for x in list_Primary_X_Axis]
        list_Primary_X_Axis = [(int(x // 12)) for x in list_Primary_X_Axis]
        list_Source_VSP_Ages_And_Sizes__Ages = list_Primary_X_Axis

        '''
        -----------------------------
        Create figure
        -----------------------------
        '''
        # default scale is 1 in your original case, scales with other cases:
        bool_Use_Relative_Fig_Size = False
        if bool_Use_Relative_Fig_Size:
            int_X_Axis_Length = len(df_1[str_X_Axis_df_1_Colname])
            int_Width_Scale = int_X_Axis_Length/10 
            int_Width_Control = 8  #6 - About perfect for PowerPoint
            int_Height_Control = 8 #8 - About perfect for PowerPoint
            figsize = (int_Width_Control*int_Width_Scale,int_Height_Control) # fig size in inches (width,height)
            int_DPI = 400
        else:
            int_DPI = 80
            int_Width_Control = 14 
            int_Height_Control = 6          
            figsize = (int_Width_Control,int_Height_Control) # fig size in inches (width,height)
        pass
        pyplot_Fig = matplotlib__pyplot.figure(dpi = int_DPI, figsize = figsize)       
        
        #ax1 = pyplot_Fig.add_subplot(111)
        left = 0.1
        bottom = 0.1
        width = 0.8
        height = 0.69
        ax1 = pyplot_Fig.add_axes([left, bottom, width, height])
                
        
        bool_Dx_Bx_Nx_Stacked_Bar_Plot = True
        if bool_Dx_Bx_Nx_Stacked_Bar_Plot:
            
            with SSResults(self.obj_SSParams) as obj_Results:
                ''' Y-axis - Age cohort original (source) size'''
                str_Key_Source_VSP_Ages_And_Sizes__Sizes = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Source_VSP_Ages_And_Sizes__Sizes
                str_Colname_Source_VSP_Ages_And_Sizes__Sizes = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Source_VSP_Ages_And_Sizes__Sizes)
                str_Y_Axis_df_1_Colname = str_Colname_Source_VSP_Ages_And_Sizes__Sizes
                list_Source_VSP_Ages_And_Sizes__Sizes = df_1[str_Y_Axis_df_1_Colname].tolist()                
                ''' Y-axis - Age cohort SAMPLE size'''
                str_Key_Sample_VSP_Ages_And_Sizes__Sizes = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Sample_VSP_Ages_And_Sizes__Sizes
                str_Colname_Sample_VSP_Ages_And_Sizes__Sizes = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Sample_VSP_Ages_And_Sizes__Sizes)
                str_Y_Axis_df_1_Colname = str_Colname_Sample_VSP_Ages_And_Sizes__Sizes 
                list_Sample_VSP_Ages_And_Sizes__Sizes = df_1[str_Y_Axis_df_1_Colname].tolist()
                list_Sample_VSP_Ages_And_Sizes__Sizes = [int(round(round(x,1),0)) for x in list_Sample_VSP_Ages_And_Sizes__Sizes]
                ''' Y-axis - Age cohort SAMPLE size percent of source'''
                bool_Get_Percent_From_File = False
                if bool_Get_Percent_From_File:
                    str_Key_Sample_Percent_VSP_Ages_And_Sizes__Sizes = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Sample_Percent_VSP_Ages_And_Sizes__Sizes
                    str_Colname_Sample_Percent_VSP_Ages_And_Sizes__Sizes = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Sample_Percent_VSP_Ages_And_Sizes__Sizes)
                    str_Y_Axis_df_1_Colname = str_Colname_Sample_Percent_VSP_Ages_And_Sizes__Sizes
                    list_Sample_Percent_VSP_Ages_And_Sizes__Sizes = df_1[str_Y_Axis_df_1_Colname].tolist()
                else:
                    list_Sample_Percent_VSP_Ages_And_Sizes__Sizes = [(float(x) / float(y))*float(100) if y != 0 else 0 for x, y in zip(list_Sample_VSP_Ages_And_Sizes__Sizes, list_Source_VSP_Ages_And_Sizes__Sizes)]
                pass
                list_Sample_Percent_VSP_Ages_And_Sizes__Sizes = [round(x,3) for x in list_Sample_Percent_VSP_Ages_And_Sizes__Sizes]
                
                tup_VSP_Ages_And_Source_Sizes = zip(list_Source_VSP_Ages_And_Sizes__Ages, list_Source_VSP_Ages_And_Sizes__Sizes)
                
                ''' Life-history parameters '''
                df_In = df_3
                ''' MaxAge '''
                str_Key_str_LifeHist__Max_Age = globalsSS.Colnames_BATCH_PARAMETERS.static_str_Colname_Max_age
                str_Colname__str_LifeHist__Max_Age = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_In, str_Key_str_LifeHist__Max_Age)
                ''' Max Mating Age '''
                str_Key_str_LifeHist__Max_Mating_Age = globalsSS.Colnames_BATCH_PARAMETERS.static_str_Colname_Max_mating_age
                str_Colname__str_LifeHist__Max_Mating_Age = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_In, str_Key_str_LifeHist__Max_Mating_Age)
                ''' Min Mating Age '''
                str_Key_str_LifeHist__Min_Mating_Age = globalsSS.Colnames_BATCH_PARAMETERS.static_str_Colname_Min_mating_age
                str_Colname__str_LifeHist__Min_Mating_Age = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_In, str_Key_str_LifeHist__Min_Mating_Age)

                int_LifeHist__Min_Mating_Age = df_3[str_Colname__str_LifeHist__Min_Mating_Age].iloc[0]                            
                int_LifeHist__Max_Mating_Age = df_3[str_Colname__str_LifeHist__Max_Mating_Age].iloc[0]                            
                int_LifeHist__Max_Age = df_3[str_Colname__str_LifeHist__Max_Age].iloc[0]                
            pass
            
            '''
            -----------------------------
            Plot 1
            -----------------------------
            '''
            int_Bar_Width = 0.80         
            str_Plot_Line_Color = 'blue' #'red'
            #pyplot_Line_3, = matplotlib__pyplot.plot(df_1[str_X_Axis_df_1_Colname], df_1[str_Y_Axis_df_1_Colname], color=str_Plot_Line_Color, linewidth=int_Plot_Line_Width, figure=pyplot_Fig)
            pyplot_Line_3 = matplotlib__pyplot.bar(list_Primary_X_Axis, list_Source_VSP_Ages_And_Sizes__Sizes, width=int_Bar_Width, align='center', color=str_Plot_Line_Color, figure=pyplot_Fig)
            #DEBUG_ON
            #matplotlib__pyplot.show()
            #DEBUG_OFF                        
            '''
            -----------------------------
            Plot 2
            -----------------------------
            '''         
            if bool_Plot_Theme__Dark_Blue_1:
                str_Plot_Line_Color = 'white'
            else:
                str_Plot_Line_Color = 'yellow'
            pass
        
            
            #pyplot_Line_2, = matplotlib__pyplot.plot(df_1[str_X_Axis_df_1_Colname], df_1[str_Y_Axis_df_1_Colname], color=str_Plot_Line_Color, linewidth=int_Plot_Line_Width, figure=pyplot_Fig)
            pyplot_Line_2 = matplotlib__pyplot.bar(list_Primary_X_Axis, list_Sample_VSP_Ages_And_Sizes__Sizes, bottom=list_Source_VSP_Ages_And_Sizes__Sizes, width=int_Bar_Width, align='center', color=str_Plot_Line_Color, figure=pyplot_Fig)
            #DEBUG_ON
            #matplotlib__pyplot.show()
            #DEBUG_OFF    
#             '''
#             -----------------------------
#             Plot 3
#             -----------------------------
#             ''' 
#             str_Plot_Line_Color = 'red' #'blue'
#             #pyplot_Line_1, = matplotlib__pyplot.plot(df_1[str_X_Axis_df_1_Colname], df_1[str_Y_Axis_df_1_Colname], color=str_Plot_Line_Color, linewidth=int_Plot_Line_Width, figure=pyplot_Fig)
#             pyplot_Line_1 = matplotlib__pyplot.bar(list_Primary_X_Axis, list_Dx, bottom=[list_Source_VSP_Ages_And_Sizes__Sizes[j] + list_Sample_VSP_Ages_And_Sizes__Sizes[j] for j in range(len(list_Source_VSP_Ages_And_Sizes__Sizes))], width=int_Bar_Width, align='center', color=str_Plot_Line_Color, figure=pyplot_Fig)
#             #DEBUG_ON
#             #matplotlib__pyplot.show()
#             #DEBUG_OFF
        pass

        '''
        -----------------------------
        Specify Y-Axis Max
        -----------------------------
        '''
        bool_Specify_Y_Axis_Max = True
        if bool_Specify_Y_Axis_Max:
            
            tup_VSP_Ages_And_Samples_Sizes = zip(list_Source_VSP_Ages_And_Sizes__Sizes, list_Sample_VSP_Ages_And_Sizes__Sizes)
            list_All = [x+y for x,y in tup_VSP_Ages_And_Samples_Sizes]
            int_All_Max = max(list_All)
            def roundup(int_X, int_Round_Up_To_Nearest):
                return int_X if int_X % int_Round_Up_To_Nearest == 0 else int_X + int_Round_Up_To_Nearest - int_X % int_Round_Up_To_Nearest       
            
            int_Y_Axis_Max = int(roundup(int_All_Max, 10)) 

        pass     
    
        '''
        -----------------------------
        Format Plot
        -----------------------------
        '''



    
        '''
        ~~~~~~~~~~~~~~~~~~
        Grid and ticks details
        ~~~~~~~~~~~~~~~~~~
        '''
        #matplotlib__pyplot.grid(True, figure=pyplot_Fig)
        '''
        ~~~~~~~~~~~~~~~~~~
        Colours - Axis & Tick
        ~~~~~~~~~~~~~~~~~~
        '''
        bool_Format_Ticks = True
        if bool_Format_Ticks:
            if bool_Plot_Theme__Dark_Blue_1:
                str_Colour = 'darkblue'
    
            else:
                str_Colour = 'white'
            pass        
            #ax1 = pyplot_Fig.add_subplot(111, axisbg=str_Colour)
            #ax1 = pyplot_Fig.add_subplot(111)
            
    #         ax.plot(range(10))
    #         ax.set_xlabel('X-axis')
    #         ax.set_ylabel('Y-axis')
            
    #         ax.spines['bottom'].set_color('red')
    #         ax.spines['top'].set_color('red')
    #         ax.xaxis.label.set_color('red')
            if bool_Plot_Theme__Dark_Blue_1:
                int_Tick_Label_Size = 16
                str_X_Axis_Tick_Labels_Colour = 'white'
                str_Y_Axis_Tick_Labels_Colour = 'white'
                str_X_Axis_Tick_Major_Colour = 'white'
                str_X_Axis_Tick_Minor_Colour = 'grey'
                str_Y_Axis_Tick_Major_Colour = 'white'
                str_Y_Axis_Tick_Minor_Colour = 'grey'
            pass
        
            if bool_Plot_Theme__Default == False:
                ax1.tick_params(axis='x', colors=str_X_Axis_Tick_Labels_Colour)
                ax1.tick_params(axis='y', colors=str_Y_Axis_Tick_Labels_Colour)
        
                # We change the fontsize of minor ticks label 
                ax1.tick_params(axis='x', which='major', labelsize=int_Tick_Label_Size, color=str_X_Axis_Tick_Major_Colour)
                ax1.tick_params(axis='x', which='minor', labelsize=int_Tick_Label_Size, color=str_X_Axis_Tick_Minor_Colour)
                ax1.tick_params(axis='y', which='major', labelsize=int_Tick_Label_Size, color=str_Y_Axis_Tick_Major_Colour)
                ax1.tick_params(axis='y', which='minor', labelsize=int_Tick_Label_Size, color=str_Y_Axis_Tick_Minor_Colour) 
            pass 
        
            ''' Axis tick pointing direction '''
            ax1.tick_params(axis='x', direction='out')
            ax1.tick_params(axis='y', direction='out')
            
            ''' Specify axis ticks to be plotted '''
            ax1.xaxis.tick_bottom() 
            ax1.yaxis.tick_left() 
    
            #DEBUG_ON
            #matplotlib__pyplot.show()
            #DEBUG_OFF             
        pass

        bool_Change_Axis_Spines = True
        if bool_Change_Axis_Spines:
            if bool_Plot_Theme__Dark_Blue_1:
                str_Colour = 'white'
    
            else:
                str_Colour = 'black'
            pass
            for axis in ['top','bottom','left','right']:
                ax1.spines[axis].set_linewidth(1)
                ax1.spines[axis].set_color(str_Colour)
            pass
        
            ax1.spines['top'].set_visible(False)
            ax1.spines['right'].set_visible(False) 
        pass          


        bool_Format_Ticks = True
        if bool_Format_Ticks:
            nparray_Major_Ticks_X = ax1.xaxis.get_majorticklocs()      
            if len(nparray_Major_Ticks_X) > 1: 
                float_Major_Ticks_X_First = list_Primary_X_Axis[0] #nparray_Major_Ticks_X[0]
                float_Major_Ticks_X_Last = nparray_Major_Ticks_X[-1]
                float_Major_Ticks_X_Interval = 5
                nparray_Major_Ticks_X = numpy.arange(float_Major_Ticks_X_First, float_Major_Ticks_X_Last, float_Major_Ticks_X_Interval)   
                ''' Add extra ticks '''
                #int_LifeHist__Min_Mating_Age = df_3[str_Colname__str_LifeHist__Min_Mating_Age].iloc[0]  
                nparray_New_Tick = numpy.array([int_LifeHist__Min_Mating_Age])
                if nparray_New_Tick not in nparray_Major_Ticks_X:
                    nparray_Major_Ticks_X = numpy.concatenate((nparray_Major_Ticks_X, nparray_New_Tick), axis=0)
                pass 
                #int_LifeHist__Max_Mating_Age = df_3[str_Colname__str_LifeHist__Max_Mating_Age].iloc[0]  
                nparray_New_Tick = numpy.array([int_LifeHist__Max_Mating_Age])
                if nparray_New_Tick not in nparray_Major_Ticks_X:
                    nparray_Major_Ticks_X = numpy.concatenate((nparray_Major_Ticks_X, nparray_New_Tick), axis=0)
                pass
                #int_LifeHist__Max_Age = df_3[str_Colname__str_LifeHist__Max_Age].iloc[0]  
                nparray_New_Tick = numpy.array([int_LifeHist__Max_Age])
                if nparray_New_Tick not in nparray_Major_Ticks_X:
                    nparray_Major_Ticks_X = numpy.concatenate((nparray_Major_Ticks_X, nparray_New_Tick), axis=0)
                pass
                ''' Sort the ticks in numeric order '''
                nparray_Major_Ticks_X.sort()
#                 ''' Set the ticks '''                           
#                 ax1.set_xticks(nparray_Major_Ticks_X) 
                ''' Set the tick POSTION '''
                ''' Shift all ticks to the left so that the columns fall inbetween the ticks '''
                float_Offset = -0.5                           
                ax1.set_xticks(nparray_Major_Ticks_X + float_Offset)                 
                ''' Set X-Axis Max & Min variables '''
                int_X_Axis_Min = nparray_Major_Ticks_X[0]
                int_X_Axis_Max = nparray_Major_Ticks_X[-1]
                int_X_Axis_Interval = float_Major_Ticks_X_Interval
            
                bool_Change_Tick_Labels = True
                if bool_Change_Tick_Labels:
                    list_Tick_Labels = [str(int(x)) for x in nparray_Major_Ticks_X]
                    ax1.set_xticklabels(list_Tick_Labels, rotation=0)
                    
                    bool_Change_Tick_Colours = True
                    if bool_Change_Tick_Colours:
                        str_Colour = 'black'
                        #list_Tick_Colors = [str_Colour]
                        list_Tick_Label_Obj = ax1.get_xticklabels()
                        #for str_Tick_Label in zip(ax1.get_xticklabels(), list_Tick_Colors):
                        #for tick_Label in list_Tick_Labels:
                        int_Count = 0
                        for str_Label in list_Tick_Labels:
                            bool_Tick_Label_Found = False
                            if str_Label == str(int_LifeHist__Min_Mating_Age):
                                str_Tick_Color = 'darkgrey'
                                bool_Tick_Label_Found = True
                            if str_Label == str(int_LifeHist__Max_Mating_Age):
                                str_Tick_Color = 'darkgrey'
                                bool_Tick_Label_Found = True
                            if str_Label == str(int_LifeHist__Max_Age):
                                str_Tick_Color = 'red'
                                bool_Tick_Label_Found = True
                            if not bool_Tick_Label_Found:
                                str_Tick_Color = 'black'
                            pass
                            list_Tick_Label_Obj[int_Count].set_color(str_Tick_Color) 
                            int_Count += 1               
                        pass
                    pass
                pass
            pass
        
            nparray_Minor_Ticks_X = ax1.xaxis.get_minorticklocs()
            if len(nparray_Minor_Ticks_X) > 1:     
                float_Minor_Ticks_X_First = nparray_Minor_Ticks_X[0]
                float_Minor_Ticks_X_Last = nparray_Minor_Ticks_X[-1]
                float_Minor_Ticks_X_Interval = 1
                nparray_Minor_Ticks_X = numpy.arange(float_Minor_Ticks_X_First, float_Minor_Ticks_X_Last, float_Minor_Ticks_X_Interval)                                              
                ax1.set_xticks(nparray_Minor_Ticks_X, minor=True)
            
            nparray_Major_Ticks_Y = ax1.yaxis.get_majorticklocs()      
            if len(nparray_Major_Ticks_Y) > 1: 
                float_Major_Ticks_Y_First = nparray_Major_Ticks_Y[0]
                float_Major_Ticks_Y_Last = nparray_Major_Ticks_Y[-1] #nparray_Major_Ticks_Y[-1]
                int_Y_Axis_Max_Digits = len(str(int(int_Y_Axis_Max)))
                #float_Major_Ticks_Y_Interval = 50
                float_Major_Ticks_Y_Interval = 10
                if int_Y_Axis_Max_Digits <= 2:
                    float_Major_Ticks_Y_Interval = 1
                elif int_Y_Axis_Max_Digits <= 3:
                    if int_Y_Axis_Max <= 250:
                        float_Major_Ticks_Y_Interval = 25
                    elif int_Y_Axis_Max <= 500:
                        float_Major_Ticks_Y_Interval = 50
                    elif int_Y_Axis_Max < 1000:
                        float_Major_Ticks_Y_Interval = 100
                elif int_Y_Axis_Max_Digits <= 4:
                    if int_Y_Axis_Max <= 2500:
                        float_Major_Ticks_Y_Interval = 250
                    if int_Y_Axis_Max <= 5000:
                        float_Major_Ticks_Y_Interval = 500
                    elif int_Y_Axis_Max < 10000:
                        float_Major_Ticks_Y_Interval = 1000
                elif int_Y_Axis_Max_Digits <= 5:
                    if int_Y_Axis_Max <= 50000:
                        float_Major_Ticks_Y_Interval = 2000
                    elif int_Y_Axis_Max < 100000:
                        float_Major_Ticks_Y_Interval = 5000
                elif int_Y_Axis_Max_Digits <= 6:
                    if int_Y_Axis_Max <= 500000:
                        float_Major_Ticks_Y_Interval = 20000
                    elif int_Y_Axis_Max < 1000000:
                        float_Major_Ticks_Y_Interval = 50000
                elif int_Y_Axis_Max_Digits <= 7:
                    if int_Y_Axis_Max <= 5000000:
                        float_Major_Ticks_Y_Interval = 2000000
                    elif int_Y_Axis_Max < 10000000:
                        float_Major_Ticks_Y_Interval = 5000000
                elif int_Y_Axis_Max_Digits <= 8:
                    if int_Y_Axis_Max <= 50000000:
                        float_Major_Ticks_Y_Interval = 20000000
                    elif int_Y_Axis_Max < 100000000:
                        float_Major_Ticks_Y_Interval = 50000000
                pass
                float_Major_Ticks_Y_Last = float_Major_Ticks_Y_Last + float_Major_Ticks_Y_Interval
                nparray_Major_Ticks_Y = numpy.arange(float_Major_Ticks_Y_First, float_Major_Ticks_Y_Last, float_Major_Ticks_Y_Interval)                                              
                ax1.set_yticks(nparray_Major_Ticks_Y)  
                ''' Set Y-Axis Max & Min variables '''
                int_Y_Axis_Min = nparray_Major_Ticks_Y[0]
                int_Y_Axis_Max = nparray_Major_Ticks_Y[-1]
                int_Y_Axis_Interval = float_Major_Ticks_Y_Interval
            pass
                            
            nparray_Minor_Ticks_Y = ax1.yaxis.get_minorticklocs()      
            if len(nparray_Minor_Ticks_Y) > 1: 
                float_Minor_Ticks_Y_First = nparray_Minor_Ticks_Y[0]
                float_Minor_Ticks_Y_Last = nparray_Minor_Ticks_Y[-1]
                float_Minor_Ticks_Y_Interval = 1
                nparray_Minor_Ticks_Y = numpy.arange(float_Minor_Ticks_Y_First, float_Minor_Ticks_Y_Last, float_Minor_Ticks_Y_Interval)                                              
                ax1.set_yticks(nparray_Minor_Ticks_Y, minor=True)                                  
            pass
                                                                  
            #ax1.grid(which='both')    
            
            #DEBUG_ON                                                           
            #matplotlib__pyplot.show()
            #DEBUG_OFF  
        pass        

        '''
        ~~~~~~~~~~~~~~~~~~
        Axis details
        ~~~~~~~~~~~~~~~~~~
        '''
        bool_Format_Axis = True
        if bool_Format_Axis:

            ''' X-Axis limits '''
            #matplotlib__pyplot.xlim(0-1, max(list_Primary_X_Axis)+1)
            #matplotlib__pyplot.xlim(0-1, int_X_Axis_Max+0.8)
            matplotlib__pyplot.xlim(int_X_Axis_Min-0.5, int_X_Axis_Max+0.5)
                        
            ''' int_Y_Axis_Max passed into function '''
            matplotlib__pyplot.ylim(0, int_Y_Axis_Max)
    
    
            #DEBUG_ON
            #matplotlib__pyplot.show()
            #DEBUG_OFF  
        pass
        '''
        ~~~~~~~~~~~~~~~~~~
        Grid details
        ~~~~~~~~~~~~~~~~~~
        '''                                                  
        bool_Change_Grid = False
        if bool_Change_Grid:
            ''' add a grid '''                                                       
            
            ax1.grid(which='both')                                                            
            
            '''...or if you want differnet settings for the grids '''                               
            ax1.grid(which='minor', alpha=0.2)                                                
            ax1.grid(which='major', alpha=0.5)   
            
            #DEBUG_ON
            #matplotlib__pyplot.show()
            #DEBUG_OFF  
        pass
            
        '''
        ~~~~~~~~~~~~~~~~~~
        Legend details
        ~~~~~~~~~~~~~~~~~~
        '''
        bool_Add_Legend = True
        if bool_Add_Legend:
            
            float_Bbox_X_Pos = 0.5
            #float_Bbox_Y_Pos = 1.01 #-0.07
            float_Bbox_Y_Pos = -0.15 #-0.1 #-0.07
            
            '''
            Place legend longways under the x-axis '''
            # Shrink current axis's height by 10% on the bottom
            box = ax1.get_position()
            ax1.set_position([box.x0, box.y0 + box.height * 0.1,
                             box.width, box.height * 0.9])
            
            # Put a legend below current axis
            pyplot_Fig_Legend = ax1.legend([
                               pyplot_Line_3
                               , pyplot_Line_2
                               #, pyplot_Line_3
                               ]
                              ,[
                                'Cohort size'
                                ,'Sample size'
                                #,'Dx - Deaths per age'
                                ]
                              ,bbox_to_anchor=(float_Bbox_X_Pos, float_Bbox_Y_Pos)
                              ,frameon = 1
                              ,loc='upper center'
                              ,fancybox=False
                              ,shadow=False
                              , ncol=5)                            
       
    
            '''
            ~~~~~~~~~~~~~~~~~~~~~~~~~~
            Format Legend
            ~~~~~~~~~~~~~~~~~~~~~~~~~~
            '''
            pyplot_Fig_Legend_Frame = pyplot_Fig_Legend.get_frame()
            
            pyplot_Fig_Legend_Frame.set_color('white')
            ''' Legend frame background '''
            #pyplot_Fig_Legend_Frame.set_facecolor('green')
            ''' Legend frame border '''
            #pyplot_Fig_Legend_Frame.set_edgecolor('red')
            
            ''' Turn off frame outline '''
            pyplot_Fig_Legend_Frame.set_linewidth(0)
            
            # set the alpha value of the legend: it will be translucent
            pyplot_Fig_Legend_Frame.set_alpha(0.3)                  

            #DEBUG_ON
            #matplotlib__pyplot.show()
            #DEBUG_OFF              
        pass
                    
        '''
        ~~~~~~~~~~~~~~~~~~
        Plot Shading
        ~~~~~~~~~~~~~~~~~~
        '''
        bool_Plot_Background_Points = False
        if bool_Plot_Background_Points:            
            ''' Plot the Background X-axis points '''

#             int_LifeHist__Min_Mating_Age = df_3[str_Colname__str_LifeHist__Min_Mating_Age].iloc[0]                            
#             int_LifeHist__Max_Mating_Age = df_3[str_Colname__str_LifeHist__Max_Mating_Age].iloc[0]                            
#             int_LifeHist__Max_Age = df_3[str_Colname__str_LifeHist__Max_Age].iloc[0]

            str_Panel_Color = 'white'#'lightgrey'      
            str_Edge_Color = 'black'       
            #ax1.axvspan(int_LifeHist__Min_Mating_Age-0.4, int_LifeHist__Max_Mating_Age+0.4, color=str_Panel_Color, edgecolor=None, alpha=0.3, zorder=0)
            ax1.axvspan(0-0.4, int_LifeHist__Min_Mating_Age-0.4, facecolor=str_Panel_Color, ls='solid', linewidth=0.5, edgecolor=str_Edge_Color, alpha=0.3, zorder=0)
            
            str_Panel_Color = 'white'#'lightgrey'      
            str_Edge_Color = 'black'       
            #ax1.axvspan(int_LifeHist__Min_Mating_Age-0.4, int_LifeHist__Max_Mating_Age+0.4, color=str_Panel_Color, edgecolor=None, alpha=0.3, zorder=0)
            ax1.axvspan(int_LifeHist__Min_Mating_Age-0.4, int_LifeHist__Max_Mating_Age+0.4, facecolor=str_Panel_Color, ls='solid', linewidth=0.5, edgecolor=str_Edge_Color, alpha=0.3, zorder=0)

            str_Panel_Color = 'white'#'lightgrey'      
            str_Edge_Color = 'black'       
            #ax1.axvspan(int_LifeHist__Min_Mating_Age-0.4, int_LifeHist__Max_Mating_Age+0.4, color=str_Panel_Color, edgecolor=None, alpha=0.3, zorder=0)
            ax1.axvspan(int_LifeHist__Max_Mating_Age-0.4, int_LifeHist__Max_Age+0.4, facecolor=str_Panel_Color, ls='solid', linewidth=0.5, edgecolor=str_Edge_Color, alpha=0.3, zorder=0)
            
            #DEBUG_ON
            #matplotlib__pyplot.show()
            #DEBUG_OFF   
        pass

        '''
        ~~~~~~~~~~~~~~~~~~
        Plot Shading
        ~~~~~~~~~~~~~~~~~~
        '''
        bool_Plot_Background_Points = True
        if bool_Plot_Background_Points:            
            ''' Plot the Background X-axis points '''

            int_LifeHist__Min_Mating_Age = df_3[str_Colname__str_LifeHist__Min_Mating_Age].iloc[0]                            
            int_LifeHist__Max_Mating_Age = df_3[str_Colname__str_LifeHist__Max_Mating_Age].iloc[0]                            
            
            str_Panel_Color = 'lightgrey'            
            ax1.axvspan(int_LifeHist__Min_Mating_Age-0.4, (int_LifeHist__Max_Mating_Age-1)+0.4, color=str_Panel_Color, edgecolor=None, alpha=0.3, zorder=0)
    
            #DEBUG_ON
            #matplotlib__pyplot.show()
            #DEBUG_OFF   
        pass

        '''
        ~~~~~~~~~~~~~~~~~~
        Plot Background Lines
        ~~~~~~~~~~~~~~~~~~
        '''
        bool_Plot_Background_Lines = False
        if bool_Plot_Background_Lines:            
            ''' Plot the Background X-axis points '''

#             int_LifeHist__Min_Mating_Age = df_3[str_Colname__str_LifeHist__Min_Mating_Age].iloc[0]                            
#             int_LifeHist__Max_Mating_Age = df_3[str_Colname__str_LifeHist__Max_Mating_Age].iloc[0]                            
#             int_LifeHist__Max_Age = df_3[str_Colname__str_LifeHist__Max_Age].iloc[0]
            
            int_Y_Axis_Line_Upper_Limit = (int_Y_Axis_Interval / 4)*-1
            
            int_Linewidth = 3
            int_Opacity = 0.1
            str_Color = 'black'       
            #ax1.axvspan(int_LifeHist__Min_Mating_Age-0.4, int_LifeHist__Max_Mating_Age+0.4, color=str_Panel_Color, edgecolor=None, alpha=0.3, zorder=0)
            ax1.axvline(int_LifeHist__Min_Mating_Age-0.5, ymax=int_Y_Axis_Max + int_Y_Axis_Line_Upper_Limit, color=str_Color, ls='solid', linewidth=int_Linewidth, alpha=int_Opacity,)
            
            #str_Color = 'black'       
            #ax1.axvspan(int_LifeHist__Min_Mating_Age-0.4, int_LifeHist__Max_Mating_Age+0.4, color=str_Panel_Color, edgecolor=None, alpha=0.3, zorder=0)
            ax1.axvline(int_LifeHist__Max_Mating_Age+0.5, ymax=int_Y_Axis_Max + int_Y_Axis_Line_Upper_Limit, color=str_Color, ls='solid', linewidth=int_Linewidth, alpha=int_Opacity)

            #str_Color = 'black'       
            #ax1.axvspan(int_LifeHist__Min_Mating_Age-0.4, int_LifeHist__Max_Mating_Age+0.4, color=str_Panel_Color, edgecolor=None, alpha=0.3, zorder=0)
            ax1.axvline(int_LifeHist__Max_Age+0.5, ymax=int_Y_Axis_Max, color=str_Color, ls='solid', linewidth=int_Linewidth, alpha=int_Opacity)

            #str_Color = 'black'       
            #ax1.axvspan(int_LifeHist__Min_Mating_Age-0.4, int_LifeHist__Max_Mating_Age+0.4, color=str_Panel_Color, edgecolor=None, alpha=0.3, zorder=0)
            ax1.axhline(int_Y_Axis_Max+1, xmax=int_LifeHist__Max_Age+0.5, color=str_Color, ls='solid', linewidth=int_Linewidth, alpha=int_Opacity)

    
            int_Y_Axis_Lower_Line = int_Y_Axis_Max + int_Y_Axis_Line_Upper_Limit
            #str_Color = 'black'       
            #ax1.axvspan(int_LifeHist__Min_Mating_Age-0.4, int_LifeHist__Max_Mating_Age+0.4, color=str_Panel_Color, edgecolor=None, alpha=0.3, zorder=0)
            ax1.axhline(int_Y_Axis_Lower_Line+1, xmax=int_LifeHist__Max_Age+0.5, color=str_Color, ls='solid', linewidth=int_Linewidth, alpha=int_Opacity)

    
            #DEBUG_ON
            #matplotlib__pyplot.show()
            #DEBUG_OFF   
        pass       
        '''
        ~~~~~~~~~~~~~~~~~~
        Label details
        ~~~~~~~~~~~~~~~~~~
        '''
        '''
        Font properties for subsequent text
        '''
        bool_Add_Titles = True
        if bool_Add_Titles:
            with SSResults(self.obj_SSParams) as obj_Results:
                ''' Population Size '''
                str_Key_Sim_Pop_Size = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Pop_Size
                str_Colname__Sim_Pop_Size = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Sim_Pop_Size)
                str_Key_Sim_Replicates = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Sim_Replicates
                str_Colname__Sim_Replicates = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Sim_Replicates)
    #             str_Key_AgeNe__Loci = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Loci
    #             str_Col_Name_AgeNe__Loci = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Loci)
                str_Key_Sim__Run_User_Defined_Folder = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Run_User_Defined_Folder
                str_Colname__Sim_Run_User_Defined_Folder = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Sim__Run_User_Defined_Folder)
            pass
    
            ''' Get values from df_1 '''
            str_Mating_Count_Sim_Total = str(int_Mating_Count_Sim_Total)
            int_Pop_Size__N = df_1[str_Colname__Sim_Pop_Size].iloc[0]
            str_Pop_Size__N = str(int_Pop_Size__N)
            list_Pop_Size__Nc = [int_Source_Size for int_VSP_Age, int_Source_Size in tup_VSP_Ages_And_Source_Sizes if int_VSP_Age >= (int_LifeHist__Min_Mating_Age) and int_VSP_Age <= (int_LifeHist__Max_Age)]
            list_Pop_Size__Nc = list_Pop_Size__Nc[:(int_LifeHist__Max_Age) - (int_LifeHist__Min_Mating_Age)]
            float_Pop_Size__Nc = round(sum(list_Pop_Size__Nc),2)
            #list_Pop_Size__Nc = [int_Cohort_Size for int_Index, int_Cohort_Size in enumerate(list_Source_VSP_Ages_And_Sizes__Sizes) if int_Index >= (int_LifeHist__Min_Mating_Age*12) and int_Index < (int_LifeHist__Max_Age*12)]
            #int_Pop_Size__Nc = int(round(sum(list_Pop_Size__Nc),0))   
            str_Adult_Pop_Size__Nc = str(float_Pop_Size__Nc)
    #         str_AgeNe__Ne = str(int_AgeNe__Ne)
    #         str_AgeNe__Nb = str(int_AgeNe__Nb)
            int_Pop_Replicates = df_1[str_Colname__Sim_Replicates].iloc[0]
            str_Replicates = str(int_Pop_Replicates)
    #         str_Loci = str(df_1[str_Colname_AgeNe__Loci].iloc[0])
            str_Sim__Run_User_Defined_Folder = str(df_1[str_Colname__Sim_Run_User_Defined_Folder].iloc[0])

            ''' Passed into the function '''
            str_Sampling_Indiv_Number = str(int_Sampling_Indiv_Number)

            ''' Get values from parameter object '''
            str_Simulation_Batch_Replicate_Length_Burn_In = str(self.obj_SSParams.int_Simulation_Batch_Replicate_Length_Burn_In)
            str_Simulation_Batch_Replicate_Length_Temporal_Evolution = str(self.obj_SSParams.int_Simulation_Batch_Replicate_Length_Temporal_Evolution)
            str_Scenario_Project_Name = self.obj_SSParams.str_Scenario_Project_Name
            str_Scenario_Project_Species_Name = self.obj_SSParams.str_Scenario_Project_Species_Name
            str_Scenario_Name = self.obj_SSParams.str_Scenario_Name
            str_Sampling_Strategy_Name = self.obj_SSParams.str_Sampling_Strategy_Name
            str_Scenario_Project_UID = str(self.obj_SSParams.int_Scenario_Project_UID)
            str_Scenario_UID = str(self.obj_SSParams.int_Scenario_UID)
            str_Sampling_Strategy_UID = str(self.obj_SSParams.int_Sampling_Strategy_UID)
    
            str_Fig_Title = str('Population sub-sampling profile by age')
    
            ''' Title spacing '''
            matplotlib__pyplot.subplots_adjust(top=0.87)
            ''' Font details '''          
            int_Plot_SupTitle_Size = 16
            if bool_Plot_Theme__Dark_Blue_1:
                str_Font_Colour = 'white'
            else:
                str_Font_Colour = 'blue'
    
    
            matplotlib__pyplot.suptitle(str_Fig_Title, fontsize=int_Plot_SupTitle_Size, color=str_Font_Colour, figure=pyplot_Fig)
    
            ''' Font details '''          
            #int_Plot_SupTitle_Size = 16
            #str_Font_Colour = 'blue'
                    
#             str_Plot_Title = str(
#                                  'Sim Total matings: ' + str_Mating_Count_Sim_Total + ', '
#                                 + 'N:' + '{:,}'.format(int_Pop_Size__N).replace(',',' ') + ', '
#                                 + 'Nc: ' + str_Adult_Pop_Size__Nc + ', '
#                                 #+ 'AgeNe: ' + str_AgeNe__Ne + ', '
#                                 #+ 'AgeNb: ' + str_AgeNe__Nb + ', '
#                                 #+ 'Loci: ' + str_Loci + ', '
#                                 + 'Sim Replicates: ' + str_Replicates
#                                 + '\n'
#                                 + 'Run: ' + str_Sim__Run_User_Defined_Folder)


            str_Plot_Title = str(
                                '' #Conveniant placeholder
                                + 'Pop Replicates: ' + str_Replicates + ', '
                                + 'Annual matings (Burn-in \\ Post Burn-in): ' + str_Simulation_Batch_Replicate_Length_Burn_In + ' \\ ' + str_Simulation_Batch_Replicate_Length_Temporal_Evolution + ', '
                                + '\n'
                                + 'N: ' + '{:,}'.format(int_Pop_Size__N).replace(',',' ') + ', '
                                + 'Nc: ' + '{:,}'.format(float_Pop_Size__Nc).replace(',',' ') + ', '
                                + 'Sample size: ' + '{:,}'.format(int_Sampling_Indiv_Number).replace(',',' ') + ', '
                                #+ 'AgeNe: ' + str_AgeNe__Ne + ', '
                                #+ 'AgeNb: ' + str_AgeNe__Nb + ', '
                                #+ 'Loci: ' + str_Loci + ', '
                                + '\n'
                                #+ 'Run: ' + str_Sim__Run_User_Defined_Folder
                                + 'Species: ' + str_Scenario_Project_Species_Name  + ', '
                                + 'Project \\ Scenario \\ Sampling Strat: ' + str_Scenario_Project_Name + ' \\ ' + str_Scenario_Name + ' \\ ' + str_Sampling_Strategy_Name 
                                )
    
            ''' Font details '''          
            int_Plot_Title_Size = 14
            if bool_Plot_Theme__Dark_Blue_1:
                str_Font_Colour = 'grey'
            else:
                str_Font_Colour = 'blue'
                    
            matplotlib__pyplot_title = matplotlib__pyplot.title(str_Plot_Title, fontsize=int_Plot_Title_Size, color=str_Font_Colour, figure=pyplot_Fig)
            ''' Fine adjust title position '''
            matplotlib__pyplot_title.set_y(1.02)
            
            ''' Font details '''          
            int_PLot_Y_Label_Size = 14
            if bool_Plot_Theme__Dark_Blue_1:
                str_Font_Colour = 'white'
            else:
                str_Font_Colour = 'blue'
                                            
            matplotlib__pyplot.xlabel('Cohort age (years)', fontsize=int_PLot_Y_Label_Size, color=str_Font_Colour, figure=pyplot_Fig)
            matplotlib__pyplot.ylabel('Individuals', fontsize=int_PLot_Y_Label_Size, color=str_Font_Colour, figure=pyplot_Fig)

            #DEBUG_ON
            #matplotlib__pyplot.show()
            #DEBUG_OFF         
        pass
        
#         bool_UID_Label = True
#         if bool_UID_Label:
#             '''
#             ~~~~~~~~~~~~~~~~~~
#             Label Unique Identifier details
#             ~~~~~~~~~~~~~~~~~~
#             '''
#             ''' Get colnames in order to get data from df_1 '''
#             with SSResults(self.obj_SSParams) as obj_Results:
#                 str_Key_Sim__Run_User_Defined_Folder = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Run_User_Defined_Folder
#                 str_Col_Name_Sim__Run_User_Defined_Folder = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Sim__Run_User_Defined_Folder)
#                 str_Key_Sim__Unique_Run_ID = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Unique_Run_ID
#                 str_Col_Name_Sim__Unique_Run_ID = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Sim__Unique_Run_ID)
#     
#             pass
#     
#             str_Sim__Run_User_Defined_Folder = str(df_1[str_Col_Name_Sim__Run_User_Defined_Folder].iloc[0])
#             str_RUDF_Text = str(str_Sim__Run_User_Defined_Folder)
#     
#             ''' Font details '''          
#             int_Font_Size = 6
#             str_Font_Colour = 'darkgrey'
#             
#             ''' Add figure text '''
#             #matplotlib__pyplot.figtext(.75,.91,str_RUDF_Text, fontsize=int_Font_Size, color=str_Font_Colour, figure=pyplot_Fig)
#             matplotlib__pyplot.figtext(.70,.025,str_RUDF_Text, fontsize=int_Font_Size, color=str_Font_Colour, figure=pyplot_Fig)    
#             
#             
#             ''' Get values from df_1 '''
#             str_Sim__Unique_Run_ID = str(df_1[str_Col_Name_Sim__Unique_Run_ID].iloc[0])
#             str_UID_Text = str(str_Sim__Unique_Run_ID)
#     
#             ''' Font details '''          
#             int_Font_Size = 6
#             str_Font_Colour = 'darkgrey'
#             
#             ''' Add figure text '''
#             #matplotlib__pyplot.figtext(.75,.99,str_UID_Text, fontsize=int_Font_Size, color=str_Font_Colour, figure=pyplot_Fig)
#             matplotlib__pyplot.figtext(.70,.015,str_UID_Text, fontsize=int_Font_Size, color=str_Font_Colour, figure=pyplot_Fig)
# 
#         pass
        
        bool_UID_Label = True
        if bool_UID_Label:
            '''
            ~~~~~~~~~~~~~~~~~~
            Label Unique Identifier details
            ~~~~~~~~~~~~~~~~~~
            '''
            ''' Get colnames in order to get data from df_1 '''
            with SSResults(self.obj_SSParams) as obj_Results:
                str_Key_Sim__Run_User_Defined_Folder = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Run_User_Defined_Folder
                str_Col_Name_Sim__Run_User_Defined_Folder = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Sim__Run_User_Defined_Folder)
                str_Key_Sim__Unique_Run_ID = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Unique_Run_ID
                str_Col_Name_Sim__Unique_Run_ID = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Sim__Unique_Run_ID)
    
            pass
    
            ''' Project/Scenario UIDs '''
            str_Scenario_Project__And_Scenario_UID = 'P_' + str_Scenario_Project_UID + '_B_' + str_Scenario_UID + '_S_' + str_Sampling_Strategy_UID 
            #str_Sim__Run_User_Defined_Folder = str(df_1[str_Col_Name_Sim__Run_User_Defined_Folder].iloc[0])
    
            ''' Font details '''          
            int_Font_Size = 6
            str_Font_Colour = 'darkgrey'
            
            ''' Add figure text '''
            ''' Bottom Right '''
            #matplotlib__pyplot.figtext(.70,.025,str_Scenario_Project__And_Scenario_UID, fontsize=int_Font_Size, color=str_Font_Colour, figure=pyplot_Fig)    
            ''' Top Right '''
            x = .80 
            y = .975 #.835 
            matplotlib__pyplot.figtext(x,y,str_Scenario_Project__And_Scenario_UID, fontsize=int_Font_Size, color=str_Font_Colour, figure=pyplot_Fig)
            
            ''' Get values from df_1 '''
            str_Sim__Unique_Run_ID = str(df_1[str_Col_Name_Sim__Unique_Run_ID].iloc[0])
            str_UID_Text = str(str_Sim__Unique_Run_ID)
    
            ''' Font details '''          
            int_Font_Size = 6
            str_Font_Colour = 'darkgrey'
            
            ''' Add figure text '''
            ''' Bottom Right '''
            #matplotlib__pyplot.figtext(.70,.015,str_UID_Text, fontsize=int_Font_Size, color=str_Font_Colour, figure=pyplot_Fig)
            ''' Top Right '''
            x = .80
            y = .955 #.815
            matplotlib__pyplot.figtext(x,y,str_UID_Text, fontsize=int_Font_Size, color=str_Font_Colour, figure=pyplot_Fig)
            
        pass
        


        '''
        ~~~~~~~~~~~~~~~~~~
        Annotate points
        ~~~~~~~~~~~~~~~~~~
        '''

        bool_Annotate_Points = True
        if bool_Annotate_Points:
            ''' Annotate Primary Y-Axis points '''
            list_X_Axis_Primary = list(list_Primary_X_Axis)
            list_Y_Axis_Primary = [x + y for x, y in zip(list_Source_VSP_Ages_And_Sizes__Sizes, list_Sample_VSP_Ages_And_Sizes__Sizes)] #list(list_Sample_VSP_Ages_And_Sizes__Sizes)
            #list_Y_Axis_Primary_Values = list_Sample_Percent_VSP_Ages_And_Sizes__Sizes
            list_Y_Axis_Primary_Values = [round(x,2) for x in list_Sample_Percent_VSP_Ages_And_Sizes__Sizes]
            for a, b, c in zip(list_X_Axis_Primary, list_Y_Axis_Primary, list_Y_Axis_Primary_Values):    
                 
                int_Value = c
                if c > 0:
                    str_Annotation_colour = 'green'
                    str_Annotation = '{:,}'.format(int_Value).replace(',',' ')
                    bool_Scale_Font_And_X_Offset = False
                    if bool_Scale_Font_And_X_Offset:
                        if int_Value > 4:
                            str_Fontweight = 'bold'
                            int_Fontsize = 8
                            int_X_Text_Offset = -8
                        elif int_Value == 4 or int_Value == 3:
                            str_Fontweight = 'normal' #'bold'
                            int_Fontsize = 6
                            int_X_Text_Offset = -6
                        elif int_Value < 3:
                            str_Fontweight = 'normal' #'bold'
                            int_Fontsize = 4
                            int_X_Text_Offset = -4
                        pass
                    else:
                        str_Fontweight = 'normal' #'bold'
                        int_Fontsize = 6
                        int_X_Text_Offset = +35
                    pass
                    ax1.annotate(str_Annotation
                                 ,fontsize=int_Fontsize
                                 ,fontweight=str_Fontweight
                                 ,xy=(a,b)
                                 ,rotation=0
                                 ,xytext=(0, int_X_Text_Offset)
                                 ,ha='center'
                                 ,textcoords='offset points'
                                 ,color=str_Annotation_colour)
                pass
            pass

            ''' Annotate Primary Y-Axis points '''
            #list_X_Axis_Primary = list(list_Primary_X_Axis)
            #list_Y_Axis_Primary = [x + y for x, y in zip(list_Source_VSP_Ages_And_Sizes__Sizes, list_Sample_VSP_Ages_And_Sizes__Sizes)] #list(list_Sample_VSP_Ages_And_Sizes__Sizes)
            list_Y_Axis_Primary_Values = list(list_Sample_VSP_Ages_And_Sizes__Sizes)
            for a, b, c in zip(list_X_Axis_Primary, list_Y_Axis_Primary, list_Y_Axis_Primary_Values):    
                 
                int_Value = c
                if c > 0:
                    str_Annotation_colour = 'darkorange'
                    str_Annotation = '{:,}'.format(int_Value).replace(',',' ')
                    bool_Scale_Font_And_X_Offset = False
                    if bool_Scale_Font_And_X_Offset:
                        if int_Value > 4:
                            str_Fontweight = 'bold'
                            int_Fontsize = 8
                            int_X_Text_Offset = -8
                        elif int_Value == 4 or int_Value == 3:
                            str_Fontweight = 'normal' #'bold'
                            int_Fontsize = 6
                            int_X_Text_Offset = -6
                        elif int_Value < 3:
                            str_Fontweight = 'bold'
                            int_Fontsize = 4
                            int_X_Text_Offset = -4
                        pass
                    else:
                        str_Fontweight = 'normal' #'bold'
                        int_Fontsize = 8
                        int_X_Text_Offset = +25
                    pass
                    ax1.annotate(str_Annotation
                                 ,fontsize=int_Fontsize
                                 ,fontweight=str_Fontweight
                                 ,xy=(a,b)
                                 ,rotation=0
                                 ,xytext=(0, int_X_Text_Offset)
                                 ,ha='center'
                                 ,textcoords='offset points'
                                 ,color=str_Annotation_colour)
                pass
            pass
        
            ''' Annotate Primary Y-Axis points '''
            #list_X_Axis_Primary = list(list_Primary_X_Axis)
            #list_Y_Axis_Primary = [x + y for x, y in zip(list_Source_VSP_Ages_And_Sizes__Sizes, list_Sample_VSP_Ages_And_Sizes__Sizes)] #list(list_Sample_VSP_Ages_And_Sizes__Sizes)
            list_Y_Axis_Primary_Values = [round(x,2) for x in list_Source_VSP_Ages_And_Sizes__Sizes]
            for a, b, c in zip(list_X_Axis_Primary, list_Y_Axis_Primary, list_Y_Axis_Primary_Values):    
                 
                int_Value = c
                if c > 0:
                    str_Annotation_colour = 'blue'
                    str_Annotation = '{:,}'.format(int_Value).replace(',',' ')
                    bool_Scale_Font_And_X_Offset = False
                    if bool_Scale_Font_And_X_Offset:
                        if int_Value > 4:
                            str_Fontweight = 'bold'
                            int_Fontsize = 8
                            int_X_Text_Offset = -8
                        elif int_Value == 4 or int_Value == 3:
                            str_Fontweight = 'normal' #'bold'
                            int_Fontsize = 6
                            int_X_Text_Offset = -6
                        elif int_Value < 3:
                            str_Fontweight = 'normal' #'bold'
                            int_Fontsize = 4
                            int_X_Text_Offset = -4
                        pass
                    else:
                        str_Fontweight = 'bold'
                        int_Fontsize = 8
                        int_X_Text_Offset = 15
                    pass
                    ax1.annotate(str_Annotation
                                 ,fontsize=int_Fontsize
                                 ,fontweight=str_Fontweight
                                 ,xy=(a,b)
                                 ,rotation=0
                                 ,xytext=(0, int_X_Text_Offset)
                                 ,ha='center'
                                 ,textcoords='offset points'
                                 ,color=str_Annotation_colour)
                pass
            pass
        pass
    
        bool_Annotation_Headings = False
        if bool_Annotation_Headings:         
            ''' Annotate - Pop Size N '''
            int_Pop_Size__N = df_1[str_Colname__Sim_Pop_Size].iloc[0]  
            int_X_Axis_Primary = int_X_Axis_Max / 2   
            int_Y_Axis_Primary_Offset = (int_Y_Axis_Interval / 6)*-1 #int_Y_Axis_Interval*1                    
            int_Y_Axis_Primary = int_Y_Axis_Max + int_Y_Axis_Primary_Offset
            a, b = int_X_Axis_Primary, int_Y_Axis_Primary        
            str_Annotation_colour = 'darkgrey'
            str_Value = '{:,}'.format(int_Pop_Size__N).replace(',',' ')
            str_Text = 'Total population size (N): ' + str_Value
            str_Annotation = '{:}'.format(str_Text)
            ax1.annotate(str_Annotation, fontsize=12, fontweight='bold', xy=(a,b), rotation=0, xytext=(0, 0), ha='center', textcoords='offset points', color=str_Annotation_colour)
        
            ''' Annotate - Adult Pop Size Nc '''
            #int_AgeNe__Adult_Pop_Size__Nx_Adults__Nc = int(df_1[str_Col_Name_AgeNe__Adult_Pop_Size__Nx_Nc_Adults].iloc[0])  
            int_X_Axis_Primary = int_X_Axis_Max / 2   
            int_Y_Axis_Primary_Offset = (int_Y_Axis_Interval / 3)*-1 #int_Y_Axis_Interval*1                    
            int_Y_Axis_Primary = int_Y_Axis_Max + int_Y_Axis_Primary_Offset
            a, b = int_X_Axis_Primary, int_Y_Axis_Primary        
            str_Annotation_colour = 'darkgrey'
            str_Value = '{:,}'.format(float_Pop_Size__Nc).replace(',',' ')
            str_Text = 'Adult population size (Nc): ' + str_Value
            str_Annotation = '{:}'.format(str_Text)
            ax1.annotate(str_Annotation, fontsize=12, fontweight='bold', xy=(a,b), rotation=0, xytext=(0, 0), ha='center', textcoords='offset points', color=str_Annotation_colour)
 
            #DEBUG_ON
            #matplotlib__pyplot.show()
            #DEBUG_OFF        
        pass

    
        bool_Text_Boxes = False
        if bool_Text_Boxes:
      
            ''' Annotate Primary X-Axis points - Min Mating age '''
            #int_LifeHist__Min_Mating_Age = df_3[str_Colname__str_LifeHist__Min_Mating_Age].iloc[0]
            int_X_Axis_Primary_Offset = 0  
            list_X_Axis_Primary = int_LifeHist__Min_Mating_Age + int_X_Axis_Primary_Offset 
            int_Y_Axis_Primary_Offset = -18                         
            list_Y_Axis_Primary = 0 + int_Y_Axis_Primary_Offset
            a, b = list_X_Axis_Primary, list_Y_Axis_Primary        
            str_Annotation_colour = 'darkgrey'
            str_Text = a #' Min. mating age: ' + str(int(int_LifeHist__Min_Mating_Age))
            str_Annotation = '{:}'.format(str_Text)
            #ax1.annotate(str_Annotation, fontsize=14, fontweight='bold', xy=(a,b), rotation=0, xytext=(0, 0), ha='center', textcoords='offset points', color=str_Annotation_colour)
            ax1.text(a, b, str_Annotation, fontsize=13, fontweight='bold', color=str_Annotation_colour, ha='center', bbox=dict(facecolor='white', edgecolor='none'))
#             a = float(int_LifeHist__Min_Mating_Age) / float(int_X_Axis_Max - 3.15)
#             b = float(-6.2) / float(int_Y_Axis_Max)
#             ax1.text(a, b, str_Annotation, fontsize=13, fontweight='bold', color=str_Annotation_colour, ha='center', va='center', transform = ax1.transAxes, bbox=dict(facecolor='white', edgecolor='none'))


#             ax.annotate('local max', xy=(3, 1),  xycoords='data',
#             xytext=(0.8, 0.95), textcoords='axes fraction',
#             arrowprops=dict(facecolor='black', shrink=0.05),
#             horizontalalignment='right', verticalalignment='top',
#             )            
            ''' Annotate Primary X-Axis points - Max Mating age '''
            #int_LifeHist__Max_Mating_Age = df_3[str_Colname__str_LifeHist__Max_Mating_Age].iloc[0]
            int_X_Axis_Primary_Offset = 0  
            list_X_Axis_Primary = int_LifeHist__Max_Mating_Age + int_X_Axis_Primary_Offset
            int_Y_Axis_Primary_Offset = -18                         
            list_Y_Axis_Primary = 0 + int_Y_Axis_Primary_Offset
            a, b = list_X_Axis_Primary, list_Y_Axis_Primary        
            str_Annotation_colour = 'darkgrey'
            str_Text = a
            str_Annotation = '{:}'.format(str_Text)
            ax1.text(a, b, str_Annotation, fontsize=13, fontweight='bold', color=str_Annotation_colour, ha='center', bbox=dict(facecolor='white', edgecolor='none'))

            ''' Annotate Primary X-Axis points - Max age '''
            #int_LifeHist__Max_Age = df_3[str_Colname__str_LifeHist__Max_Age].iloc[0]
            int_X_Axis_Primary_Offset = 0
            int_X_Axis_Primary = int_LifeHist__Max_Age + int_X_Axis_Primary_Offset
            int_Y_Axis_Primary_Offset = -18                       
            int_Y_Axis_Primary = 0 + int_Y_Axis_Primary_Offset
            a, b = int_X_Axis_Primary, int_Y_Axis_Primary        
            str_Annotation_colour = 'red'
            str_Text = a
            str_Annotation = '{:}'.format(str_Text)
            ax1.text(a, b, str_Annotation, fontsize=13, fontweight='bold', color=str_Annotation_colour, ha='center', bbox=dict(facecolor='white', edgecolor='none'))            

            #DEBUG_ON
            #matplotlib__pyplot.show()
            #DEBUG_OFF 
        pass              

        #DEBUG_ON
        ''' Required to change background of INTERACTIVE WINDOW only'''
        if bool_Plot_Theme__Dark_Blue_1:
            pyplot_Fig_Patch = pyplot_Fig.patch
            pyplot_Fig_Patch.set_facecolor('darkblue') # works with plt.show().  
        pass
        #matplotlib__pyplot.show()
        #DEBUG_OFF
        
                                
        return pyplot_Fig

    '''
    -------------------------------------------------------------
    CURRENT NEOGEN PLOT - Plot SAMPLING For Accuracy Guideline and other sampling plans SUMMARISED Results
    -------------------------------------------------------------
    '''   
    def func__Plot_SAMPLING_PLANS_Accuracy_And_Others_Summary__Get_Data(self, str_Plot_Save_Path, str_Search_Path__Batch_Scenario_Data, str_Search_Path__Sampling_Strategy_Data):

        boolSuccess = False
       
        '''
        -------------------------------
        Specify Input & Output Files
        -------------------------------
        '''
        ''' Input file '''
        str_Excel_Input_Colname_Prefix = globalsSS.Excel_Results_File_Details.static_Excel_Colname_Prefix__SAMPLING_INDIVS_Summary__Aggregate_Results
        str_Excel_Input_FileName =  globalsSS.Excel_Results_File_Details.static_Excel_FileName__SAMPLING_INDIVS_Summary__Aggregate_Results

        ''' Output plots '''        
        str_Plot_Output_File_1 = str_Plot_Save_Path + '\\' + self.obj_SSParams.strUniqueRunID + '_' + str_Excel_Input_FileName + '_' + str_Excel_Input_Colname_Prefix + '.png'
        str_Plot_Output_File_2 = str_Plot_Save_Path + '\\' + self.obj_SSParams.strUniqueRunID + '_' + str_Excel_Input_FileName + '_' + str_Excel_Input_Colname_Prefix + '.pdf'

        '''
        -------------------------------
        Specify Excel Input file
        -------------------------------
        '''        
        str_Input_FileName = '*' + str_Excel_Input_FileName + '*.xlsx'
        str_File_Search_Pattern = str_Input_FileName
        
        '''
        -------------------------------
        Import Excel Data to dataframe
        -------------------------------
        '''
        '''
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~
        Get & Process Input SHEET
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~
        '''
        str_Search_Path = str_Search_Path__Sampling_Strategy_Data 
        
        str_Input_Excel_Sheet_Name = globalsSS.Excel_Results_File_Details.static_Excel_SheetName__SAMPLING_INDIVS_Summary__Aggregate_Results

        self.obj_Log_Default.info('Dataframing results for: ' + str_Input_FileName + ' and for SHEET: ' + str_Input_Excel_Sheet_Name) 

        bool_File_1_Located = False
        with FileHandler() as obj_FileHandler:
            bool_File_1_Located, list_Path_And_Files = obj_FileHandler.func_Locate_Files(str_Search_Path, str_File_Search_Pattern)
        pass
    
        if bool_File_1_Located:
            
            '''Process Results'''
            list_DF_1s = []            
            for str_Path_And_File in list_Path_And_Files:
                
                '''Get the data from the excel files with the specified sheet'''
                xl = pandas.ExcelFile(str_Path_And_File)
                df_1 = xl.parse(str_Input_Excel_Sheet_Name)
                list_DF_1s.append(df_1)
                
            pass

            ''' concatinate the dfs '''
            df_Aggregate = pandas.DataFrame()
            for df_New in list_DF_1s:
                '''log the results'''
                #str_Df = df_New.to_string()
                #self.obj_Log_Debug.debug('Results dataframe NEW: %s' % str_Df)
                
                #Concat DFs - Tried df.append() but it wont work
                df_Aggregate = pandas.concat([df_Aggregate,df_New], ignore_index=True)
                
                #str_Df = df_Aggregate.to_string()
                #self.obj_Log_Debug.debug('Results dataframe AGGREGATE: %s' % str_Df)

            pass

            #DEBUG_ON
            #str_Df = df_Aggregate.to_string()
            #self.obj_Log_Debug.debug('Results dataframe AGGREGATE 1: %s' % str_Df)
            #DEBUG_OFF
            
            df1 = df_Aggregate 
        else:
            self.obj_Log_Default.error('File specified could not be located; str_Search_Path = ' + str_Search_Path + '; strFileSearchPattern = ' + str_File_Search_Pattern)
        pass
    
        '''
        -------------------------------
        Get More Data
        -------------------------------
        '''
        '''
        -------------------------------
        Specify Excel Input file 2
        -------------------------------
        '''        
        str_Excel_Input_FileName =  globalsSS.Excel_Results_File_Details.static_Excel_FileName__SS_LEVEL_Results
 
        str_Input_FileName = '*' + str_Excel_Input_FileName + '*.xlsx'
        str_File_Search_Pattern = str_Input_FileName
        
        '''
        -------------------------------
        Import Excel Data to dataframee
        -------------------------------
        '''
        '''
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~
        Get & Process Input SHEET
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~
        '''
        str_Search_Path = str_Search_Path__Batch_Scenario_Data 
        
        str_Input_Excel_Sheet_Name = globalsSS.Excel_Results_File_Details.static_Excel_SheetName__SS_LEVEL_BATCH_Results

        self.obj_Log_Default.info('Dataframing results for: ' + str_Input_FileName + ' and for SHEET: ' + str_Input_Excel_Sheet_Name) 
        
        bool_File_2_Located = False
        with FileHandler() as obj_FileHandler:
            bool_File_2_Located, list_Path_And_Files = obj_FileHandler.func_Locate_Files(str_Search_Path, str_File_Search_Pattern)
       
        if bool_File_2_Located:
            
            '''Process Results'''
            list_DF_2s = []            
            for str_Path_And_File in list_Path_And_Files:
                
                '''Get the data from the excel files with the specified sheet'''
                xl = pandas.ExcelFile(str_Path_And_File)
                df_2 = xl.parse(str_Input_Excel_Sheet_Name)
                list_DF_2s.append(df_2)
                
            pass

            ''' concatinate the dfs '''
            df_Aggregate = pandas.DataFrame()
            for df_New in list_DF_2s:
                '''log the results'''
                #str_Df = df_New.to_string()
                #self.obj_Log_Debug.debug('Results dataframe NEW: %s' % str_Df)
                
                #Concat DFs - Tried df.append() but it wont work
                df_Aggregate = pandas.concat([df_Aggregate,df_New], ignore_index=True)
                
                #str_Df = df_Aggregate.to_string()
                #self.obj_Log_Debug.debug('Results dataframe AGGREGATE: %s' % str_Df)

            pass

            #DEBUG_ON
            #str_Df = df_Aggregate.to_string()
            #self.obj_Log_Debug.debug('Results dataframe AGGREGATE 1: %s' % str_Df)
            #DEBUG_OFF
            
            df2 = df_Aggregate 
        else:
            self.obj_Log_Default.error('File specified could not be located; str_Search_Path = ' + str_Search_Path + '; strFileSearchPattern = ' + str_File_Search_Pattern)
        pass


        '''
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~
        Transform the data
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~
        '''  
        if bool_File_1_Located and bool_File_2_Located:
            
            ''' Send the relevent DFs  '''
            list_DFs = [df1, df2]
     
            list_DFs = self.func__Plot_SAMPLING_PLANS_Accuracy_And_Others_Summary__Transform_And_Process(str_Plot_Save_Path, str_Excel_Input_FileName, str_Excel_Input_Colname_Prefix, list_DFs)
            
        pass
    
                    
        return boolSuccess

    def func__Plot_SAMPLING_PLANS_Accuracy_And_Others_Summary__Transform_And_Process(self, str_Plot_Save_Path, str_Excel_Input_FileName, str_Excel_Input_Colname_Prefix, list_DFs):
        
        self.obj_Log_Default.info('Transforming data')

        '''
        -----------------------------
        Specify DFs
        -----------------------------
        '''
        df_1 = list_DFs[0]
        df_2 = list_DFs[1]
           
        with SSResults(self.obj_SSParams) as obj_Results:
            str_Group_Key_Experiment_Label = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Experiment_Label
            str_Col_Name_Experiment_Label_DF1 = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Group_Key_Experiment_Label)
            str_Group_Key_Stats_Category_Code = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category_Code
            str_Col_Name_Stats_Category_Code_DF1 = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Group_Key_Stats_Category_Code)

            str_Group_Key_Mating_Count_Sim_Total = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Mating_Count_Sim_Total
            str_Col_Name_Mating_Count_Sim_Total_DF1 = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Group_Key_Mating_Count_Sim_Total)
        pass

        ''' Subset the DF to get the correct Experiment '''
        str_Experiment_Label = globalsSS.Experment_Groups.static_str_Experiment_Sampling_Strategy_v1_0_Label
        if self.obj_SSParams.int_Sampling_Strategy_Sample_Proportions_Source == globalsSS.Experment_Groups.static_int_Experiment_Sampling_Strategy_v1_0:
            str_Experiment_Label = globalsSS.Experment_Groups.static_str_Experiment_Sampling_Strategy_v1_0_Label
        elif self.obj_SSParams.int_Sampling_Strategy_Sample_Proportions_Source == globalsSS.Experment_Groups.static_int_Experiment_Sampling_Strategy_v1_1__USER_AGE_COHORTS:
            str_Experiment_Label = globalsSS.Experment_Groups.static_str_Experiment_Sampling_Strategy_v1_1__USER_AGE_COHORTS_Label
        elif self.obj_SSParams.int_Sampling_Strategy_Sample_Proportions_Source == globalsSS.Experment_Groups.static_int_Experiment_Sampling_Strategy_v1_1__USER_PROPORTIONS:
            str_Experiment_Label = globalsSS.Experment_Groups.static_str_Experiment_Sampling_Strategy_v1_1__USER_PROPORTIONS_Label
        elif self.obj_SSParams.int_Sampling_Strategy_Sample_Proportions_Source == globalsSS.Experment_Groups.static_int_Experiment_Sampling_Strategy_v1_1__USER_SAMPLE_NUMBERS:
            str_Experiment_Label = globalsSS.Experment_Groups.static_str_Experiment_Sampling_Strategy_v1_1__USER_SAMPLE_NUMBERS_Label
        elif self.obj_SSParams.int_Sampling_Strategy_Sample_Proportions_Source == globalsSS.Experment_Groups.static_int_Experiment_Sampling_Strategy_v1_1__USER_SAMPLE_PROPORTIONS:
            str_Experiment_Label = globalsSS.Experment_Groups.static_int_Experiment_Sampling_Strategy_v1_1__USER_SAMPLE_PROPORTIONS_Label
        pass
        
        df_1 = df_1[(df_1[str_Col_Name_Experiment_Label_DF1]!=str_Experiment_Label)]

        ''' Get all the Sampling Plan Codes so each can be plotted '''
        nparray_Plots = numpy.unique(df_1[str_Col_Name_Stats_Category_Code_DF1])

        pass

        ''' Get the Sim Total Mating Count  '''
        int_Mating_Count_Sim_Total = df_1[str_Col_Name_Mating_Count_Sim_Total_DF1].iloc[0]  
         
        #DEBUG_ON
        #str_Df = df_2_Subset.to_string()
        #self.obj_Log_Debug.debug('Results dataframe df 2: %s' % str_Df)
        #raw_input('pausing')
        #DEBUG_OFF      

        '''Subset and plot each Sampling_Plan '''                
        for str_Sampling_Plan in nparray_Plots:

            '''
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~
            Transform
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~
            '''  
            self.obj_Log_Default.info('Transforming data for Sampling Plan Code :' + str_Sampling_Plan)
                      
            ''' Subset the DF to get the correct value '''
            df_1_Subset = df_1[(df_1[str_Col_Name_Stats_Category_Code_DF1]==str_Sampling_Plan)]
            
            #DEBUG_ON
            #str_Df = df_1_Subset.to_string()
            #self.obj_Log_Debug.debug('Results dataframe df 1: %s' % str_Df)
            #raw_input('pausing')
            #DEBUG_OFF    
            
            list_DFs = [df_1_Subset, df_2] 

            '''
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~
            Plot
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~
            '''    
            
            bool_Interactive_Display = False
            ''' Specify the number of figure copies and their specs '''
            dict_Fig_Copies = {
                                1:{'ColourScheme':'Default', 'Transparent':False, 'Interactive_Display':bool_Interactive_Display, 'Save_PNG': True, 'Save_PDF': False}
                               #,2:{'ColourScheme':'Dark_Blue', 'Transparent':True, 'Interactive_Display':bool_Interactive_Display,'Save_PNG': True, 'Save_PDF': False}
                               }
            
            pyplot_Fig_1 = None
            for key_Dict_Fig_Copy_Params, value_Dict_Fig_Copy_Params in dict_Fig_Copies.iteritems():

                '''
                ~~~~~~~~~~~~~~~~~~~~~~~~~~~
                Create Figure, Plot & Format
                ~~~~~~~~~~~~~~~~~~~~~~~~~~~
                '''
                pyplot_Fig_1 = self.func__Plot_SAMPLING_PLANS_Accuracy_And_Others_Summary__Plot(list_DFs, int_Mating_Count_Sim_Total, str_Sampling_Plan, value_Dict_Fig_Copy_Params)
                
                '''
                ~~~~~~~~~~~~~~~~~~~~~~~~~~~
                Save results
                ~~~~~~~~~~~~~~~~~~~~~~~~~~~
                '''    
                str_Plot_Output_Path = str_Plot_Save_Path
                ''' Create path if it doesnt exist '''
                with FileHandler() as obj_File_Op:
                    obj_File_Op.method_Create_Path(str_Plot_Output_Path)
                pass                
                str_Plot_Output_FileName = self.obj_SSParams.strUniqueRunID + '_' + str_Excel_Input_FileName + '_' + str_Excel_Input_Colname_Prefix + '_I_' + str_Sampling_Plan
                str_Plot_Output_Path_And_FileName = os__path.join(str_Plot_Output_Path, str_Plot_Output_FileName)
                if value_Dict_Fig_Copy_Params['Save_PNG'] == True:
                    str_Plot_Output_Path_And_FileName_PNG = str_Plot_Output_Path_And_FileName + '_' + str(key_Dict_Fig_Copy_Params) + '.png'
                    bool_Transparent = value_Dict_Fig_Copy_Params['Transparent']
                    pyplot_Fig_1.savefig(str_Plot_Output_Path_And_FileName_PNG, bbox_inches='tight', dpi=400, transparent=bool_Transparent)
                pass
                if value_Dict_Fig_Copy_Params['Save_PDF'] == True:
                    str_Plot_Output_Path_And_FileName_PDF = str_Plot_Output_Path_And_FileName + '_' + str(key_Dict_Fig_Copy_Params) + '.pdf'
                    pyplot_Fig_1.savefig(str_Plot_Output_Path_And_FileName_PDF, bbox_inches='tight')
                pass
        
                '''
                ~~~~~~~~~~~~~~~~~~~~~~~~~~~
                Display results
                ~~~~~~~~~~~~~~~~~~~~~~~~~~~
                '''
                if value_Dict_Fig_Copy_Params['Interactive_Display'] == True:           
                    matplotlib__pyplot.show()
                pass
            pass
            ''' Close the plot '''
            matplotlib__pyplot.close(pyplot_Fig_1) 
        pass
                  
        pass        
        
        
        return list_DFs
    
    def func__Plot_SAMPLING_PLANS_Accuracy_And_Others_Summary__Plot(self, list_DFs, int_Mating_Count_Sim_Total, str_Sampling_Plan, dict_Fig_Copy):
        
        self.obj_Log_Default.info('Creating figure')

        str_Stat_Category_Code = str_Sampling_Plan
        
        str_Stat_Category_Code_Full = object_SSConfigSamplingStrategy.static_str_Value__Sampling_Strategy_Run_LDNe_Sampling_Plan_Code_FUL
        str_Stat_Category_Code_Full_Mature = object_SSConfigSamplingStrategy.static_str_Value__Sampling_Strategy_Run_LDNe_Sampling_Plan_Code_FMT
        str_Stat_Category_Code_Full_Juvenile = object_SSConfigSamplingStrategy.static_str_Value__Sampling_Strategy_Run_LDNe_Sampling_Plan_Code_FJV
        str_Stat_Category_Code_Full_Embryo = object_SSConfigSamplingStrategy.static_str_Value__Sampling_Strategy_Run_LDNe_Sampling_Plan_Code_FEM
        str_Stat_Category_Code_Full_Age_Cohorts = object_SSConfigSamplingStrategy.static_str_Value__Sampling_Strategy_Run_LDNe_Sampling_Plan_Code_FAC
        str_Stat_Category_Code_Scale_By_Max_Prop = object_SSConfigSamplingStrategy.static_str_Value__Sampling_Strategy_Run_LDNe_Sampling_Plan_Code_PSMP
                                  
        bool_Plot_Theme__Default = False
        bool_Plot_Theme__Dark_Blue_1 = False
        
        if dict_Fig_Copy['ColourScheme'] == 'Dark_Blue':
            bool_Plot_Theme__Dark_Blue_1 = True
        else:
            bool_Plot_Theme__Default = True
        pass

        int_Plot_Line_Width = 4
        '''
        -----------------------------
        Specify DFs
        -----------------------------
        '''
        df_1 = list_DFs[0]
        df_2 = list_DFs[1]
        
        
        '''
        -----------------------------
        Specify X-Axis
        -----------------------------
        '''
        with SSResults(self.obj_SSParams) as obj_Results:
            ''' X-axis - Age cohort original (source) ages in months'''
            str_Key_Source_VSP_Ages_And_Sizes__Ages = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Source_VSP_Ages_And_Sizes__Ages
            str_Colname_Source_VSP_Ages_And_Sizes__Ages = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Source_VSP_Ages_And_Sizes__Ages)
        pass
        str_X_Axis_df_1_Colname = str_Colname_Source_VSP_Ages_And_Sizes__Ages
        list_Primary_X_Axis = df_1[str_X_Axis_df_1_Colname].tolist()
        ''' NOTE: Because SharkSim ages start at zero (embryo) and AgeNe has to work with ages starting with one...'''
        ''' adjust the ages down by one '''
        #list_Primary_X_Axis = [(int(x / 12) - 1) for x in list_Primary_X_Axis]
        list_Primary_X_Axis = [(int(x // 12)) for x in list_Primary_X_Axis]
        list_Source_VSP_Ages_And_Sizes__Ages = list_Primary_X_Axis

        '''
        -----------------------------
        Create figure
        -----------------------------
        '''
        # default scale is 1 in your original case, scales with other cases:
        bool_Use_Relative_Fig_Size = False
        if bool_Use_Relative_Fig_Size:
            int_X_Axis_Length = len(df_1[str_X_Axis_df_1_Colname])
            int_Width_Scale = int_X_Axis_Length/10 
            int_Width_Control = 8  #6 - About perfect for PowerPoint
            int_Height_Control = 8 #8 - About perfect for PowerPoint
            figsize = (int_Width_Control*int_Width_Scale,int_Height_Control) # fig size in inches (width,height)
            int_DPI = 400
        else:
            int_DPI = 80
            int_Width_Control = 14 
            int_Height_Control = 6          
            figsize = (int_Width_Control,int_Height_Control) # fig size in inches (width,height)
        pass
        pyplot_Fig = matplotlib__pyplot.figure(dpi = int_DPI, figsize = figsize)       
        
        #ax1 = pyplot_Fig.add_subplot(111)
        left = 0.1
        bottom = 0.1
        width = 0.8
        height = 0.69
        ax1 = pyplot_Fig.add_axes([left, bottom, width, height])
                
        
        bool_Dx_Bx_Nx_Stacked_Bar_Plot = True
        if bool_Dx_Bx_Nx_Stacked_Bar_Plot:
            
            with SSResults(self.obj_SSParams) as obj_Results:
                ''' Y-axis - Age cohort original (source) size'''
                str_Key_Source_VSP_Ages_And_Sizes__Sizes = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Source_VSP_Ages_And_Sizes__Sizes
                str_Colname_Source_VSP_Ages_And_Sizes__Sizes = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Source_VSP_Ages_And_Sizes__Sizes)
                str_Y_Axis_df_1_Colname = str_Colname_Source_VSP_Ages_And_Sizes__Sizes
                list_Source_VSP_Ages_And_Sizes__Sizes = df_1[str_Y_Axis_df_1_Colname].tolist()                
                ''' Y-axis - Age cohort SAMPLE size'''
                str_Key_Sample_VSP_Ages_And_Sizes__Sizes = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Sample_VSP_Ages_And_Sizes__Sizes
                str_Colname_Sample_VSP_Ages_And_Sizes__Sizes = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Sample_VSP_Ages_And_Sizes__Sizes)
                str_Y_Axis_df_1_Colname = str_Colname_Sample_VSP_Ages_And_Sizes__Sizes 
                list_Sample_VSP_Ages_And_Sizes__Sizes = df_1[str_Y_Axis_df_1_Colname].tolist()
                list_Sample_VSP_Ages_And_Sizes__Sizes = [int(round(round(x,1),0)) for x in list_Sample_VSP_Ages_And_Sizes__Sizes]
                int_Sampling_Indiv_Number = sum(list_Sample_VSP_Ages_And_Sizes__Sizes)
                
                ''' Y-axis - Age cohort SAMPLE size percent of source'''
                bool_Get_Percent_From_File = False
                if bool_Get_Percent_From_File:
                    str_Key_Sample_Percent_VSP_Ages_And_Sizes__Sizes = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Sample_Percent_VSP_Ages_And_Sizes__Sizes
                    str_Colname_Sample_Percent_VSP_Ages_And_Sizes__Sizes = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Sample_Percent_VSP_Ages_And_Sizes__Sizes)
                    str_Y_Axis_df_1_Colname = str_Colname_Sample_Percent_VSP_Ages_And_Sizes__Sizes
                    list_Sample_Percent_VSP_Ages_And_Sizes__Sizes = df_1[str_Y_Axis_df_1_Colname].tolist()
                else:
                    list_Sample_Percent_VSP_Ages_And_Sizes__Sizes = [(float(x) / float(y))*float(100) if y != 0 else 0 for x, y in zip(list_Sample_VSP_Ages_And_Sizes__Sizes, list_Source_VSP_Ages_And_Sizes__Sizes)]
                pass
                list_Sample_Percent_VSP_Ages_And_Sizes__Sizes = [round(x,3) for x in list_Sample_Percent_VSP_Ages_And_Sizes__Sizes]
                
                tup_VSP_Ages_And_Source_Sizes = zip(list_Source_VSP_Ages_And_Sizes__Ages, list_Source_VSP_Ages_And_Sizes__Sizes)
                
                ''' Life-history parameters '''
                df_In = df_2
                ''' MaxAge '''
                str_Key_str_LifeHist__Max_Age = globalsSS.Colnames_BATCH_PARAMETERS.static_str_Colname_Max_age
                str_Colname__str_LifeHist__Max_Age = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_In, str_Key_str_LifeHist__Max_Age)
                ''' Max Mating Age '''
                str_Key_str_LifeHist__Max_Mating_Age = globalsSS.Colnames_BATCH_PARAMETERS.static_str_Colname_Max_mating_age
                str_Colname__str_LifeHist__Max_Mating_Age = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_In, str_Key_str_LifeHist__Max_Mating_Age)
                ''' Min Mating Age '''
                str_Key_str_LifeHist__Min_Mating_Age = globalsSS.Colnames_BATCH_PARAMETERS.static_str_Colname_Min_mating_age
                str_Colname__str_LifeHist__Min_Mating_Age = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_In, str_Key_str_LifeHist__Min_Mating_Age)

                int_LifeHist__Min_Mating_Age = df_2[str_Colname__str_LifeHist__Min_Mating_Age].iloc[0]                            
                int_LifeHist__Max_Mating_Age = df_2[str_Colname__str_LifeHist__Max_Mating_Age].iloc[0]                            
                int_LifeHist__Max_Age = df_2[str_Colname__str_LifeHist__Max_Age].iloc[0]                
            pass
            
            '''
            -----------------------------
            Plot 1
            -----------------------------
            '''
            int_Bar_Width = 0.80         
            str_Plot_Line_Color = 'blue' #'red'
            pyplot_Line_3 = matplotlib__pyplot.bar(list_Primary_X_Axis, list_Source_VSP_Ages_And_Sizes__Sizes, width=int_Bar_Width, align='center', color=str_Plot_Line_Color, figure=pyplot_Fig)
            #DEBUG_ON
            #matplotlib__pyplot.show()
            #DEBUG_OFF                        
            '''
            -----------------------------
            Plot 2
            -----------------------------
            '''         
            if bool_Plot_Theme__Dark_Blue_1:
                str_Plot_Line_Color = 'white'
            else:
                str_Plot_Line_Color = 'yellow'
            pass
        
            
            pyplot_Line_2 = matplotlib__pyplot.bar(list_Primary_X_Axis, list_Sample_VSP_Ages_And_Sizes__Sizes, bottom=list_Source_VSP_Ages_And_Sizes__Sizes, width=int_Bar_Width, align='center', color=str_Plot_Line_Color, figure=pyplot_Fig)
            #DEBUG_ON
            #matplotlib__pyplot.show()
            #DEBUG_OFF    
        pass

        '''
        -----------------------------
        Specify Y-Axis Max
        -----------------------------
        '''
        bool_Specify_Y_Axis_Max = True
        if bool_Specify_Y_Axis_Max:
            
            tup_VSP_Ages_And_Samples_Sizes = zip(list_Source_VSP_Ages_And_Sizes__Sizes, list_Sample_VSP_Ages_And_Sizes__Sizes)
            list_All = [x+y for x,y in tup_VSP_Ages_And_Samples_Sizes]
            int_All_Max = max(list_All)
            def roundup(int_X, int_Round_Up_To_Nearest):
                return int_X if int_X % int_Round_Up_To_Nearest == 0 else int_X + int_Round_Up_To_Nearest - int_X % int_Round_Up_To_Nearest       
            
            int_Y_Axis_Max = int(roundup(int_All_Max, 10)) 

        pass     
    
        '''
        -----------------------------
        Format Plot
        -----------------------------
        '''



    
        '''
        ~~~~~~~~~~~~~~~~~~
        Grid and ticks details
        ~~~~~~~~~~~~~~~~~~
        '''
        #matplotlib__pyplot.grid(True, figure=pyplot_Fig)
        '''
        ~~~~~~~~~~~~~~~~~~
        Colours - Axis & Tick
        ~~~~~~~~~~~~~~~~~~
        '''
        bool_Format_Ticks = True
        if bool_Format_Ticks:
            if bool_Plot_Theme__Dark_Blue_1:
                str_Colour = 'darkblue'
    
            else:
                str_Colour = 'white'
            pass        
            #ax1 = pyplot_Fig.add_subplot(111, axisbg=str_Colour)
            #ax1 = pyplot_Fig.add_subplot(111)
            
    #         ax.plot(range(10))
    #         ax.set_xlabel('X-axis')
    #         ax.set_ylabel('Y-axis')
            
    #         ax.spines['bottom'].set_color('red')
    #         ax.spines['top'].set_color('red')
    #         ax.xaxis.label.set_color('red')
            if bool_Plot_Theme__Dark_Blue_1:
                int_Tick_Label_Size = 16
                str_X_Axis_Tick_Labels_Colour = 'white'
                str_Y_Axis_Tick_Labels_Colour = 'white'
                str_X_Axis_Tick_Major_Colour = 'white'
                str_X_Axis_Tick_Minor_Colour = 'grey'
                str_Y_Axis_Tick_Major_Colour = 'white'
                str_Y_Axis_Tick_Minor_Colour = 'grey'
            pass
        
            if bool_Plot_Theme__Default == False:
                ax1.tick_params(axis='x', colors=str_X_Axis_Tick_Labels_Colour)
                ax1.tick_params(axis='y', colors=str_Y_Axis_Tick_Labels_Colour)
        
                # We change the fontsize of minor ticks label 
                ax1.tick_params(axis='x', which='major', labelsize=int_Tick_Label_Size, color=str_X_Axis_Tick_Major_Colour)
                ax1.tick_params(axis='x', which='minor', labelsize=int_Tick_Label_Size, color=str_X_Axis_Tick_Minor_Colour)
                ax1.tick_params(axis='y', which='major', labelsize=int_Tick_Label_Size, color=str_Y_Axis_Tick_Major_Colour)
                ax1.tick_params(axis='y', which='minor', labelsize=int_Tick_Label_Size, color=str_Y_Axis_Tick_Minor_Colour) 
            pass 
        
            ''' Axis tick pointing direction '''
            ax1.tick_params(axis='x', direction='out')
            ax1.tick_params(axis='y', direction='out')
            
            ''' Specify axis ticks to be plotted '''
            ax1.xaxis.tick_bottom() 
            ax1.yaxis.tick_left() 
    
            #DEBUG_ON
            #matplotlib__pyplot.show()
            #DEBUG_OFF             
        pass

        bool_Change_Axis_Spines = True
        if bool_Change_Axis_Spines:
            if bool_Plot_Theme__Dark_Blue_1:
                str_Colour = 'white'
    
            else:
                str_Colour = 'black'
            pass
            for axis in ['top','bottom','left','right']:
                ax1.spines[axis].set_linewidth(1)
                ax1.spines[axis].set_color(str_Colour)
            pass
        
            ax1.spines['top'].set_visible(False)
            ax1.spines['right'].set_visible(False) 
        pass          


        bool_Format_Ticks = True
        if bool_Format_Ticks:
            nparray_Major_Ticks_X = ax1.xaxis.get_majorticklocs()      
            if len(nparray_Major_Ticks_X) > 1: 
                float_Major_Ticks_X_First = list_Primary_X_Axis[0] #nparray_Major_Ticks_X[0]
                float_Major_Ticks_X_Last = nparray_Major_Ticks_X[-1]
                float_Major_Ticks_X_Interval = 5
                nparray_Major_Ticks_X = numpy.arange(float_Major_Ticks_X_First, float_Major_Ticks_X_Last, float_Major_Ticks_X_Interval)   
                ''' Add extra ticks '''
                #int_LifeHist__Min_Mating_Age = df_2[str_Colname__str_LifeHist__Min_Mating_Age].iloc[0]  
                nparray_New_Tick = numpy.array([int_LifeHist__Min_Mating_Age])
                if nparray_New_Tick not in nparray_Major_Ticks_X:
                    nparray_Major_Ticks_X = numpy.concatenate((nparray_Major_Ticks_X, nparray_New_Tick), axis=0)
                pass 
                #int_LifeHist__Max_Mating_Age = df_2[str_Colname__str_LifeHist__Max_Mating_Age].iloc[0]  
                nparray_New_Tick = numpy.array([int_LifeHist__Max_Mating_Age])
                if nparray_New_Tick not in nparray_Major_Ticks_X:
                    nparray_Major_Ticks_X = numpy.concatenate((nparray_Major_Ticks_X, nparray_New_Tick), axis=0)
                pass
                #int_LifeHist__Max_Age = df_2[str_Colname__str_LifeHist__Max_Age].iloc[0]  
                nparray_New_Tick = numpy.array([int_LifeHist__Max_Age])
                if nparray_New_Tick not in nparray_Major_Ticks_X:
                    nparray_Major_Ticks_X = numpy.concatenate((nparray_Major_Ticks_X, nparray_New_Tick), axis=0)
                pass
                ''' Sort the ticks in numeric order '''
                nparray_Major_Ticks_X.sort()
#                 ''' Set the ticks '''                           
#                 ax1.set_xticks(nparray_Major_Ticks_X) 
                ''' Set the tick POSTION '''
                ''' Shift all ticks to the left so that the columns fall inbetween the ticks '''
                float_Offset = -0.5                           
                ax1.set_xticks(nparray_Major_Ticks_X + float_Offset)                 
                ''' Set X-Axis Max & Min variables '''
                int_X_Axis_Min = nparray_Major_Ticks_X[0]
                int_X_Axis_Max = nparray_Major_Ticks_X[-1]
                int_X_Axis_Interval = float_Major_Ticks_X_Interval
            
                bool_Change_Tick_Labels = True
                if bool_Change_Tick_Labels:
                    list_Tick_Labels = [str(int(x)) for x in nparray_Major_Ticks_X]
                    ax1.set_xticklabels(list_Tick_Labels, rotation=0)
                    
                    bool_Change_Tick_Colours = True
                    if bool_Change_Tick_Colours:
                        str_Colour = 'black'
                        #list_Tick_Colors = [str_Colour]
                        list_Tick_Label_Obj = ax1.get_xticklabels()
                        #for str_Tick_Label in zip(ax1.get_xticklabels(), list_Tick_Colors):
                        #for tick_Label in list_Tick_Labels:
                        int_Count = 0
                        for str_Label in list_Tick_Labels:
                            bool_Tick_Label_Found = False
                            if str_Label == str(int_LifeHist__Min_Mating_Age):
                                str_Tick_Color = 'darkgrey'
                                bool_Tick_Label_Found = True
                            if str_Label == str(int_LifeHist__Max_Mating_Age):
                                str_Tick_Color = 'darkgrey'
                                bool_Tick_Label_Found = True
                            if str_Label == str(int_LifeHist__Max_Age):
                                str_Tick_Color = 'red'
                                bool_Tick_Label_Found = True
                            if not bool_Tick_Label_Found:
                                str_Tick_Color = 'black'
                            pass
                            list_Tick_Label_Obj[int_Count].set_color(str_Tick_Color) 
                            int_Count += 1               
                        pass
                    pass
                pass
            pass
        
            nparray_Minor_Ticks_X = ax1.xaxis.get_minorticklocs()
            if len(nparray_Minor_Ticks_X) > 1:     
                float_Minor_Ticks_X_First = nparray_Minor_Ticks_X[0]
                float_Minor_Ticks_X_Last = nparray_Minor_Ticks_X[-1]
                float_Minor_Ticks_X_Interval = 1
                nparray_Minor_Ticks_X = numpy.arange(float_Minor_Ticks_X_First, float_Minor_Ticks_X_Last, float_Minor_Ticks_X_Interval)                                              
                ax1.set_xticks(nparray_Minor_Ticks_X, minor=True)
            
            nparray_Major_Ticks_Y = ax1.yaxis.get_majorticklocs()      
            if len(nparray_Major_Ticks_Y) > 1: 
                float_Major_Ticks_Y_First = nparray_Major_Ticks_Y[0]
                float_Major_Ticks_Y_Last = nparray_Major_Ticks_Y[-1] #nparray_Major_Ticks_Y[-1]
                int_Y_Axis_Max_Digits = len(str(int(int_Y_Axis_Max)))
                #float_Major_Ticks_Y_Interval = 50
                float_Major_Ticks_Y_Interval = 10
                if int_Y_Axis_Max_Digits <= 2:
                    float_Major_Ticks_Y_Interval = 1
                elif int_Y_Axis_Max_Digits <= 3:
                    if int_Y_Axis_Max <= 250:
                        float_Major_Ticks_Y_Interval = 25
                    elif int_Y_Axis_Max <= 500:
                        float_Major_Ticks_Y_Interval = 50
                    elif int_Y_Axis_Max < 1000:
                        float_Major_Ticks_Y_Interval = 100
                elif int_Y_Axis_Max_Digits <= 4:
                    if int_Y_Axis_Max <= 2500:
                        float_Major_Ticks_Y_Interval = 250
                    if int_Y_Axis_Max <= 5000:
                        float_Major_Ticks_Y_Interval = 500
                    elif int_Y_Axis_Max < 10000:
                        float_Major_Ticks_Y_Interval = 1000
                elif int_Y_Axis_Max_Digits <= 5:
                    if int_Y_Axis_Max <= 50000:
                        float_Major_Ticks_Y_Interval = 2000
                    elif int_Y_Axis_Max < 100000:
                        float_Major_Ticks_Y_Interval = 5000
                elif int_Y_Axis_Max_Digits <= 6:
                    if int_Y_Axis_Max <= 500000:
                        float_Major_Ticks_Y_Interval = 20000
                    elif int_Y_Axis_Max < 1000000:
                        float_Major_Ticks_Y_Interval = 50000
                elif int_Y_Axis_Max_Digits <= 7:
                    if int_Y_Axis_Max <= 5000000:
                        float_Major_Ticks_Y_Interval = 2000000
                    elif int_Y_Axis_Max < 10000000:
                        float_Major_Ticks_Y_Interval = 5000000
                elif int_Y_Axis_Max_Digits <= 8:
                    if int_Y_Axis_Max <= 50000000:
                        float_Major_Ticks_Y_Interval = 20000000
                    elif int_Y_Axis_Max < 100000000:
                        float_Major_Ticks_Y_Interval = 50000000
                pass
                float_Major_Ticks_Y_Last = float_Major_Ticks_Y_Last + float_Major_Ticks_Y_Interval
                nparray_Major_Ticks_Y = numpy.arange(float_Major_Ticks_Y_First, float_Major_Ticks_Y_Last, float_Major_Ticks_Y_Interval)                                              
                ax1.set_yticks(nparray_Major_Ticks_Y)  
                ''' Set Y-Axis Max & Min variables '''
                int_Y_Axis_Min = nparray_Major_Ticks_Y[0]
                int_Y_Axis_Max = nparray_Major_Ticks_Y[-1]
                int_Y_Axis_Interval = float_Major_Ticks_Y_Interval
            pass
                            
            nparray_Minor_Ticks_Y = ax1.yaxis.get_minorticklocs()      
            if len(nparray_Minor_Ticks_Y) > 1: 
                float_Minor_Ticks_Y_First = nparray_Minor_Ticks_Y[0]
                float_Minor_Ticks_Y_Last = nparray_Minor_Ticks_Y[-1]
                float_Minor_Ticks_Y_Interval = 1
                nparray_Minor_Ticks_Y = numpy.arange(float_Minor_Ticks_Y_First, float_Minor_Ticks_Y_Last, float_Minor_Ticks_Y_Interval)                                              
                ax1.set_yticks(nparray_Minor_Ticks_Y, minor=True)                                  
            pass
                                                                  
            #ax1.grid(which='both')    
            
            #DEBUG_ON                                                           
            #matplotlib__pyplot.show()
            #DEBUG_OFF  
        pass        

        '''
        ~~~~~~~~~~~~~~~~~~
        Axis details
        ~~~~~~~~~~~~~~~~~~
        '''
        bool_Format_Axis = True
        if bool_Format_Axis:

            ''' X-Axis limits '''
            #matplotlib__pyplot.xlim(0-1, max(list_Primary_X_Axis)+1)
            #matplotlib__pyplot.xlim(0-1, int_X_Axis_Max+0.8)
            matplotlib__pyplot.xlim(int_X_Axis_Min-0.5, int_X_Axis_Max+0.5)
                        
            ''' int_Y_Axis_Max passed into function '''
            matplotlib__pyplot.ylim(0, int_Y_Axis_Max)
    
    
            #DEBUG_ON
            #matplotlib__pyplot.show()
            #DEBUG_OFF  
        pass
        '''
        ~~~~~~~~~~~~~~~~~~
        Grid details
        ~~~~~~~~~~~~~~~~~~
        '''                                                  
        bool_Change_Grid = False
        if bool_Change_Grid:
            ''' add a grid '''                                                       
            
            ax1.grid(which='both')                                                            
            
            '''...or if you want differnet settings for the grids '''                               
            ax1.grid(which='minor', alpha=0.2)                                                
            ax1.grid(which='major', alpha=0.5)   
            
            #DEBUG_ON
            #matplotlib__pyplot.show()
            #DEBUG_OFF  
        pass
            
        '''
        ~~~~~~~~~~~~~~~~~~
        Legend details
        ~~~~~~~~~~~~~~~~~~
        '''
        bool_Add_Legend = True
        if bool_Add_Legend:
            
            float_Bbox_X_Pos = 0.5
            #float_Bbox_Y_Pos = 1.01 #-0.07
            float_Bbox_Y_Pos = -0.15 #-0.1 #-0.07
            
            '''
            Place legend longways under the x-axis '''
            # Shrink current axis's height by 10% on the bottom
            box = ax1.get_position()
            ax1.set_position([box.x0, box.y0 + box.height * 0.1,
                             box.width, box.height * 0.9])
            
            # Put a legend below current axis
            pyplot_Fig_Legend = ax1.legend([
                               pyplot_Line_3
                               , pyplot_Line_2
                               #, pyplot_Line_3
                               ]
                              ,[
                                'Cohort size'
                                ,'Sample size'
                                #,'Dx - Deaths per age'
                                ]
                              ,bbox_to_anchor=(float_Bbox_X_Pos, float_Bbox_Y_Pos)
                              ,frameon = 1
                              ,loc='upper center'
                              ,fancybox=False
                              ,shadow=False
                              , ncol=5)                            
       
    
            '''
            ~~~~~~~~~~~~~~~~~~~~~~~~~~
            Format Legend
            ~~~~~~~~~~~~~~~~~~~~~~~~~~
            '''
            pyplot_Fig_Legend_Frame = pyplot_Fig_Legend.get_frame()
            
            pyplot_Fig_Legend_Frame.set_color('white')
            ''' Legend frame background '''
            #pyplot_Fig_Legend_Frame.set_facecolor('green')
            ''' Legend frame border '''
            #pyplot_Fig_Legend_Frame.set_edgecolor('red')
            
            ''' Turn off frame outline '''
            pyplot_Fig_Legend_Frame.set_linewidth(0)
            
            # set the alpha value of the legend: it will be translucent
            pyplot_Fig_Legend_Frame.set_alpha(0.3)                  

            #DEBUG_ON
            #matplotlib__pyplot.show()
            #DEBUG_OFF              
        pass
                    
        '''
        ~~~~~~~~~~~~~~~~~~
        Plot Shading
        ~~~~~~~~~~~~~~~~~~
        '''
        bool_Plot_Background_Points = False
        if bool_Plot_Background_Points:            
            ''' Plot the Background X-axis points '''

#             int_LifeHist__Min_Mating_Age = df_2[str_Colname__str_LifeHist__Min_Mating_Age].iloc[0]                            
#             int_LifeHist__Max_Mating_Age = df_2[str_Colname__str_LifeHist__Max_Mating_Age].iloc[0]                            
#             int_LifeHist__Max_Age = df_2[str_Colname__str_LifeHist__Max_Age].iloc[0]

            str_Panel_Color = 'white'#'lightgrey'      
            str_Edge_Color = 'black'       
            #ax1.axvspan(int_LifeHist__Min_Mating_Age-0.4, int_LifeHist__Max_Mating_Age+0.4, color=str_Panel_Color, edgecolor=None, alpha=0.3, zorder=0)
            ax1.axvspan(0-0.4, int_LifeHist__Min_Mating_Age-0.4, facecolor=str_Panel_Color, ls='solid', linewidth=0.5, edgecolor=str_Edge_Color, alpha=0.3, zorder=0)
            
            str_Panel_Color = 'white'#'lightgrey'      
            str_Edge_Color = 'black'       
            #ax1.axvspan(int_LifeHist__Min_Mating_Age-0.4, int_LifeHist__Max_Mating_Age+0.4, color=str_Panel_Color, edgecolor=None, alpha=0.3, zorder=0)
            ax1.axvspan(int_LifeHist__Min_Mating_Age-0.4, int_LifeHist__Max_Mating_Age+0.4, facecolor=str_Panel_Color, ls='solid', linewidth=0.5, edgecolor=str_Edge_Color, alpha=0.3, zorder=0)

            str_Panel_Color = 'white'#'lightgrey'      
            str_Edge_Color = 'black'       
            #ax1.axvspan(int_LifeHist__Min_Mating_Age-0.4, int_LifeHist__Max_Mating_Age+0.4, color=str_Panel_Color, edgecolor=None, alpha=0.3, zorder=0)
            ax1.axvspan(int_LifeHist__Max_Mating_Age-0.4, int_LifeHist__Max_Age+0.4, facecolor=str_Panel_Color, ls='solid', linewidth=0.5, edgecolor=str_Edge_Color, alpha=0.3, zorder=0)
            
            #DEBUG_ON
            #matplotlib__pyplot.show()
            #DEBUG_OFF   
        pass

        '''
        ~~~~~~~~~~~~~~~~~~
        Plot Shading
        ~~~~~~~~~~~~~~~~~~
        '''
        bool_Plot_Background_Points = True
        if bool_Plot_Background_Points:            
            ''' Plot the Background X-axis points '''

            int_LifeHist__Min_Mating_Age = df_2[str_Colname__str_LifeHist__Min_Mating_Age].iloc[0]                            
            int_LifeHist__Max_Mating_Age = df_2[str_Colname__str_LifeHist__Max_Mating_Age].iloc[0]                            
            
            str_Panel_Color = 'lightgrey'            
            ax1.axvspan(int_LifeHist__Min_Mating_Age-0.4, (int_LifeHist__Max_Mating_Age-1)+0.4, color=str_Panel_Color, edgecolor=None, alpha=0.3, zorder=0)
    
            #DEBUG_ON
            #matplotlib__pyplot.show()
            #DEBUG_OFF   
        pass

        '''
        ~~~~~~~~~~~~~~~~~~
        Plot Background Lines
        ~~~~~~~~~~~~~~~~~~
        '''
        bool_Plot_Background_Lines = False
        if bool_Plot_Background_Lines:            
            ''' Plot the Background X-axis points '''

#             int_LifeHist__Min_Mating_Age = df_2[str_Colname__str_LifeHist__Min_Mating_Age].iloc[0]                            
#             int_LifeHist__Max_Mating_Age = df_2[str_Colname__str_LifeHist__Max_Mating_Age].iloc[0]                            
#             int_LifeHist__Max_Age = df_2[str_Colname__str_LifeHist__Max_Age].iloc[0]
            
            int_Y_Axis_Line_Upper_Limit = (int_Y_Axis_Interval / 4)*-1
            
            int_Linewidth = 3
            int_Opacity = 0.1
            str_Color = 'black'       
            #ax1.axvspan(int_LifeHist__Min_Mating_Age-0.4, int_LifeHist__Max_Mating_Age+0.4, color=str_Panel_Color, edgecolor=None, alpha=0.3, zorder=0)
            ax1.axvline(int_LifeHist__Min_Mating_Age-0.5, ymax=int_Y_Axis_Max + int_Y_Axis_Line_Upper_Limit, color=str_Color, ls='solid', linewidth=int_Linewidth, alpha=int_Opacity,)
            
            #str_Color = 'black'       
            #ax1.axvspan(int_LifeHist__Min_Mating_Age-0.4, int_LifeHist__Max_Mating_Age+0.4, color=str_Panel_Color, edgecolor=None, alpha=0.3, zorder=0)
            ax1.axvline(int_LifeHist__Max_Mating_Age+0.5, ymax=int_Y_Axis_Max + int_Y_Axis_Line_Upper_Limit, color=str_Color, ls='solid', linewidth=int_Linewidth, alpha=int_Opacity)

            #str_Color = 'black'       
            #ax1.axvspan(int_LifeHist__Min_Mating_Age-0.4, int_LifeHist__Max_Mating_Age+0.4, color=str_Panel_Color, edgecolor=None, alpha=0.3, zorder=0)
            ax1.axvline(int_LifeHist__Max_Age+0.5, ymax=int_Y_Axis_Max, color=str_Color, ls='solid', linewidth=int_Linewidth, alpha=int_Opacity)

            #str_Color = 'black'       
            #ax1.axvspan(int_LifeHist__Min_Mating_Age-0.4, int_LifeHist__Max_Mating_Age+0.4, color=str_Panel_Color, edgecolor=None, alpha=0.3, zorder=0)
            ax1.axhline(int_Y_Axis_Max+1, xmax=int_LifeHist__Max_Age+0.5, color=str_Color, ls='solid', linewidth=int_Linewidth, alpha=int_Opacity)

    
            int_Y_Axis_Lower_Line = int_Y_Axis_Max + int_Y_Axis_Line_Upper_Limit
            #str_Color = 'black'       
            #ax1.axvspan(int_LifeHist__Min_Mating_Age-0.4, int_LifeHist__Max_Mating_Age+0.4, color=str_Panel_Color, edgecolor=None, alpha=0.3, zorder=0)
            ax1.axhline(int_Y_Axis_Lower_Line+1, xmax=int_LifeHist__Max_Age+0.5, color=str_Color, ls='solid', linewidth=int_Linewidth, alpha=int_Opacity)

    
            #DEBUG_ON
            #matplotlib__pyplot.show()
            #DEBUG_OFF   
        pass       
        '''
        ~~~~~~~~~~~~~~~~~~
        Label details
        ~~~~~~~~~~~~~~~~~~
        '''
        '''
        Font properties for subsequent text
        '''
        bool_Add_Titles = True
        if bool_Add_Titles:
            with SSResults(self.obj_SSParams) as obj_Results:
                ''' Population Size '''
                str_Key_Sim_Pop_Size = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Pop_Size
                str_Colname__Sim_Pop_Size = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Sim_Pop_Size)
                str_Key_Sim_Replicates = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Sim_Replicates
                str_Colname__Sim_Replicates = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Sim_Replicates)
    #             str_Key_AgeNe__Loci = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Loci
    #             str_Col_Name_AgeNe__Loci = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Loci)
                str_Key_Sim__Run_User_Defined_Folder = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Run_User_Defined_Folder
                str_Colname__Sim_Run_User_Defined_Folder = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Sim__Run_User_Defined_Folder)
            
            pass
    
            ''' Get values from df_1 '''
            str_Mating_Count_Sim_Total = str(int_Mating_Count_Sim_Total)
            int_Pop_Size__N = df_1[str_Colname__Sim_Pop_Size].iloc[0]
            str_Pop_Size__N = str(int_Pop_Size__N)
            list_Pop_Size__Nc = [int_Source_Size for int_VSP_Age, int_Source_Size in tup_VSP_Ages_And_Source_Sizes if int_VSP_Age >= (int_LifeHist__Min_Mating_Age) and int_VSP_Age <= (int_LifeHist__Max_Age)]
            list_Pop_Size__Nc = list_Pop_Size__Nc[:(int_LifeHist__Max_Age) - (int_LifeHist__Min_Mating_Age)]
            float_Pop_Size__Nc = round(sum(list_Pop_Size__Nc),2)
            #list_Pop_Size__Nc = [int_Cohort_Size for int_Index, int_Cohort_Size in enumerate(list_Source_VSP_Ages_And_Sizes__Sizes) if int_Index >= (int_LifeHist__Min_Mating_Age*12) and int_Index < (int_LifeHist__Max_Age*12)]
            #int_Pop_Size__Nc = int(round(sum(list_Pop_Size__Nc),0))   
            str_Adult_Pop_Size__Nc = str(float_Pop_Size__Nc)
    #         str_AgeNe__Ne = str(int_AgeNe__Ne)
    #         str_AgeNe__Nb = str(int_AgeNe__Nb)
            int_Pop_Replicates = df_1[str_Colname__Sim_Replicates].iloc[0]
            str_Replicates = str(int_Pop_Replicates)
    #         str_Loci = str(df_1[str_Colname_AgeNe__Loci].iloc[0])
            str_Sim__Run_User_Defined_Folder = str(df_1[str_Colname__Sim_Run_User_Defined_Folder].iloc[0])

            ''' Passed into the function '''
            str_Stat_Category_Code_Desc = ''
            if str_Stat_Category_Code == str_Stat_Category_Code_Full_Age_Cohorts:
                str_Stat_Category_Code_Desc = 'Fully sampled age cohorts'
            elif str_Stat_Category_Code == str_Stat_Category_Code_Scale_By_Max_Prop:
                str_Stat_Category_Code_Desc = 'Age cohorts scaled by max sampling proportion'
            elif str_Stat_Category_Code == str_Stat_Category_Code_Full:
                str_Stat_Category_Code_Desc = 'All cohorts '
            elif str_Stat_Category_Code == str_Stat_Category_Code_Full_Mature:
                str_Stat_Category_Code_Desc = 'All mature age cohorts'
            elif str_Stat_Category_Code == str_Stat_Category_Code_Full_Juvenile:
                str_Stat_Category_Code_Desc = 'All juvenile cohorts'
            elif str_Stat_Category_Code == str_Stat_Category_Code_Full_Embryo:
                str_Stat_Category_Code_Desc = 'Yearling cohort'
            pass

            ''' Get values from parameter object '''
            str_Simulation_Batch_Replicate_Length_Burn_In = str(self.obj_SSParams.int_Simulation_Batch_Replicate_Length_Burn_In)
            str_Simulation_Batch_Replicate_Length_Temporal_Evolution = str(self.obj_SSParams.int_Simulation_Batch_Replicate_Length_Temporal_Evolution)
            str_Scenario_Project_Name = self.obj_SSParams.str_Scenario_Project_Name
            str_Scenario_Project_Species_Name = self.obj_SSParams.str_Scenario_Project_Species_Name
            str_Scenario_Name = self.obj_SSParams.str_Scenario_Name
            str_Sampling_Strategy_Name = self.obj_SSParams.str_Sampling_Strategy_Name
            str_Scenario_Project_UID = str(self.obj_SSParams.int_Scenario_Project_UID)
            str_Scenario_UID = str(self.obj_SSParams.int_Scenario_UID)
            str_Sampling_Strategy_UID = str(self.obj_SSParams.int_Sampling_Strategy_UID)
    
            str_Fig_Title = str('Population sub-sampling profile by age')
    
            ''' Title spacing '''
            matplotlib__pyplot.subplots_adjust(top=0.87)
            ''' Font details '''          
            int_Plot_SupTitle_Size = 16
            if bool_Plot_Theme__Dark_Blue_1:
                str_Font_Colour = 'white'
            else:
                str_Font_Colour = 'blue'
    
    
            matplotlib__pyplot.suptitle(str_Fig_Title, fontsize=int_Plot_SupTitle_Size, color=str_Font_Colour, figure=pyplot_Fig)
    
            str_Plot_Title = str(
                                '' #Conveniant placeholder
                                + 'Pop Replicates: ' + str_Replicates + ', '
                                + 'Annual matings (Burn-in \\ Post Burn-in): ' + str_Simulation_Batch_Replicate_Length_Burn_In + ' \\ ' + str_Simulation_Batch_Replicate_Length_Temporal_Evolution + ', '
                                + '\n'
                                + 'N: ' + '{:,}'.format(int_Pop_Size__N).replace(',',' ') + ', '
                                + 'Nc: ' + '{:,}'.format(float_Pop_Size__Nc).replace(',',' ') + ', '
                                + 'Sample size: ' + '{:,}'.format(int_Sampling_Indiv_Number).replace(',',' ') + ', '
                                + 'Sample Plan: ' + str_Stat_Category_Code_Desc + ' (' + str_Stat_Category_Code + ')' + ', '
                                + '\n'
                                + 'Species: ' + str_Scenario_Project_Species_Name  + ', '
                                + 'Project \\ Scenario \\ Sampling Strat: ' + str_Scenario_Project_Name + ' \\ ' + str_Scenario_Name + ' \\ ' + str_Sampling_Strategy_Name 
                                )
    
            ''' Font details '''          
            int_Plot_Title_Size = 14
            if bool_Plot_Theme__Dark_Blue_1:
                str_Font_Colour = 'grey'
            else:
                str_Font_Colour = 'blue'
                    
            matplotlib__pyplot_title = matplotlib__pyplot.title(str_Plot_Title, fontsize=int_Plot_Title_Size, color=str_Font_Colour, figure=pyplot_Fig)
            ''' Fine adjust title position '''
            matplotlib__pyplot_title.set_y(1.02)
            
            ''' Font details '''          
            int_PLot_Y_Label_Size = 14
            if bool_Plot_Theme__Dark_Blue_1:
                str_Font_Colour = 'white'
            else:
                str_Font_Colour = 'blue'
                                            
            matplotlib__pyplot.xlabel('Cohort age (years)', fontsize=int_PLot_Y_Label_Size, color=str_Font_Colour, figure=pyplot_Fig)
            matplotlib__pyplot.ylabel('Individuals', fontsize=int_PLot_Y_Label_Size, color=str_Font_Colour, figure=pyplot_Fig)

            #DEBUG_ON
            #matplotlib__pyplot.show()
            #DEBUG_OFF         
        pass
        
#         bool_UID_Label = True
#         if bool_UID_Label:
#             '''
#             ~~~~~~~~~~~~~~~~~~
#             Label Unique Identifier details
#             ~~~~~~~~~~~~~~~~~~
#             '''
#             ''' Get colnames in order to get data from df_1 '''
#             with SSResults(self.obj_SSParams) as obj_Results:
#                 str_Key_Sim__Run_User_Defined_Folder = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Run_User_Defined_Folder
#                 str_Col_Name_Sim__Run_User_Defined_Folder = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Sim__Run_User_Defined_Folder)
#                 str_Key_Sim__Unique_Run_ID = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Unique_Run_ID
#                 str_Col_Name_Sim__Unique_Run_ID = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Sim__Unique_Run_ID)
#     
#             pass
#     
#             str_Sim__Run_User_Defined_Folder = str(df_1[str_Col_Name_Sim__Run_User_Defined_Folder].iloc[0])
#             str_RUDF_Text = str(str_Sim__Run_User_Defined_Folder)
#     
#             ''' Font details '''          
#             int_Font_Size = 6
#             str_Font_Colour = 'darkgrey'
#             
#             ''' Add figure text '''
#             #matplotlib__pyplot.figtext(.75,.91,str_RUDF_Text, fontsize=int_Font_Size, color=str_Font_Colour, figure=pyplot_Fig)
#             matplotlib__pyplot.figtext(.70,.025,str_RUDF_Text, fontsize=int_Font_Size, color=str_Font_Colour, figure=pyplot_Fig)    
#             
#             
#             ''' Get values from df_1 '''
#             str_Sim__Unique_Run_ID = str(df_1[str_Col_Name_Sim__Unique_Run_ID].iloc[0])
#             str_UID_Text = str(str_Sim__Unique_Run_ID)
#     
#             ''' Font details '''          
#             int_Font_Size = 6
#             str_Font_Colour = 'darkgrey'
#             
#             ''' Add figure text '''
#             #matplotlib__pyplot.figtext(.75,.99,str_UID_Text, fontsize=int_Font_Size, color=str_Font_Colour, figure=pyplot_Fig)
#             matplotlib__pyplot.figtext(.70,.015,str_UID_Text, fontsize=int_Font_Size, color=str_Font_Colour, figure=pyplot_Fig)
# 
#         pass
        
        bool_UID_Label = True
        if bool_UID_Label:
            '''
            ~~~~~~~~~~~~~~~~~~
            Label Unique Identifier details
            ~~~~~~~~~~~~~~~~~~
            '''
            ''' Get colnames in order to get data from df_1 '''
            with SSResults(self.obj_SSParams) as obj_Results:
                str_Key_Sim__Run_User_Defined_Folder = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Run_User_Defined_Folder
                str_Col_Name_Sim__Run_User_Defined_Folder = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Sim__Run_User_Defined_Folder)
                str_Key_Sim__Unique_Run_ID = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Unique_Run_ID
                str_Col_Name_Sim__Unique_Run_ID = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Sim__Unique_Run_ID)
    
            pass
    
            ''' Project/Scenario UIDs '''
            str_Scenario_Project__And_Scenario_UID = 'P_' + str_Scenario_Project_UID + '_B_' + str_Scenario_UID + '_S_' + str_Sampling_Strategy_UID 
            #str_Sim__Run_User_Defined_Folder = str(df_1[str_Col_Name_Sim__Run_User_Defined_Folder].iloc[0])
    
            ''' Font details '''          
            int_Font_Size = 6
            str_Font_Colour = 'darkgrey'
            
            ''' Add figure text '''
            ''' Bottom Right '''
            #matplotlib__pyplot.figtext(.70,.025,str_Scenario_Project__And_Scenario_UID, fontsize=int_Font_Size, color=str_Font_Colour, figure=pyplot_Fig)    
            ''' Top Right '''
            x = .80 
            y = .975 #.835 
            matplotlib__pyplot.figtext(x,y,str_Scenario_Project__And_Scenario_UID, fontsize=int_Font_Size, color=str_Font_Colour, figure=pyplot_Fig)
            
            ''' Get values from df_1 '''
            str_Sim__Unique_Run_ID = str(df_1[str_Col_Name_Sim__Unique_Run_ID].iloc[0])
            str_UID_Text = str(str_Sim__Unique_Run_ID)
    
            ''' Font details '''          
            int_Font_Size = 6
            str_Font_Colour = 'darkgrey'
            
            ''' Add figure text '''
            ''' Bottom Right '''
            #matplotlib__pyplot.figtext(.70,.015,str_UID_Text, fontsize=int_Font_Size, color=str_Font_Colour, figure=pyplot_Fig)
            ''' Top Right '''
            x = .80
            y = .955 #.815
            matplotlib__pyplot.figtext(x,y,str_UID_Text, fontsize=int_Font_Size, color=str_Font_Colour, figure=pyplot_Fig)
            
        pass
        


        '''
        ~~~~~~~~~~~~~~~~~~
        Annotate points
        ~~~~~~~~~~~~~~~~~~
        '''

        bool_Annotate_Points = True
        if bool_Annotate_Points:
            ''' Annotate Primary Y-Axis points '''
            list_X_Axis_Primary = list(list_Primary_X_Axis)
            list_Y_Axis_Primary = [x + y for x, y in zip(list_Source_VSP_Ages_And_Sizes__Sizes, list_Sample_VSP_Ages_And_Sizes__Sizes)] #list(list_Sample_VSP_Ages_And_Sizes__Sizes)
            #list_Y_Axis_Primary_Values = list_Sample_Percent_VSP_Ages_And_Sizes__Sizes
            list_Y_Axis_Primary_Values = [round(x,2) for x in list_Sample_Percent_VSP_Ages_And_Sizes__Sizes]
            for a, b, c in zip(list_X_Axis_Primary, list_Y_Axis_Primary, list_Y_Axis_Primary_Values):    
                 
                int_Value = c
                if c > 0:
                    str_Annotation_colour = 'green'
                    str_Annotation = '{:,}'.format(int_Value).replace(',',' ')
                    bool_Scale_Font_And_X_Offset = False
                    if bool_Scale_Font_And_X_Offset:
                        if int_Value > 4:
                            str_Fontweight = 'bold'
                            int_Fontsize = 8
                            int_X_Text_Offset = -8
                        elif int_Value == 4 or int_Value == 3:
                            str_Fontweight = 'normal' #'bold'
                            int_Fontsize = 6
                            int_X_Text_Offset = -6
                        elif int_Value < 3:
                            str_Fontweight = 'normal' #'bold'
                            int_Fontsize = 4
                            int_X_Text_Offset = -4
                        pass
                    else:
                        str_Fontweight = 'normal' #'bold'
                        int_Fontsize = 6
                        int_X_Text_Offset = +35
                    pass
                    ax1.annotate(str_Annotation
                                 ,fontsize=int_Fontsize
                                 ,fontweight=str_Fontweight
                                 ,xy=(a,b)
                                 ,rotation=0
                                 ,xytext=(0, int_X_Text_Offset)
                                 ,ha='center'
                                 ,textcoords='offset points'
                                 ,color=str_Annotation_colour)
                pass
            pass

            ''' Annotate Primary Y-Axis points '''
            #list_X_Axis_Primary = list(list_Primary_X_Axis)
            #list_Y_Axis_Primary = [x + y for x, y in zip(list_Source_VSP_Ages_And_Sizes__Sizes, list_Sample_VSP_Ages_And_Sizes__Sizes)] #list(list_Sample_VSP_Ages_And_Sizes__Sizes)
            list_Y_Axis_Primary_Values = list(list_Sample_VSP_Ages_And_Sizes__Sizes)
            for a, b, c in zip(list_X_Axis_Primary, list_Y_Axis_Primary, list_Y_Axis_Primary_Values):    
                 
                int_Value = c
                if c > 0:
                    str_Annotation_colour = 'darkorange'
                    str_Annotation = '{:,}'.format(int_Value).replace(',',' ')
                    bool_Scale_Font_And_X_Offset = False
                    if bool_Scale_Font_And_X_Offset:
                        if int_Value > 4:
                            str_Fontweight = 'bold'
                            int_Fontsize = 8
                            int_X_Text_Offset = -8
                        elif int_Value == 4 or int_Value == 3:
                            str_Fontweight = 'normal' #'bold'
                            int_Fontsize = 6
                            int_X_Text_Offset = -6
                        elif int_Value < 3:
                            str_Fontweight = 'bold'
                            int_Fontsize = 4
                            int_X_Text_Offset = -4
                        pass
                    else:
                        str_Fontweight = 'normal' #'bold'
                        int_Fontsize = 8
                        int_X_Text_Offset = +25
                    pass
                    ax1.annotate(str_Annotation
                                 ,fontsize=int_Fontsize
                                 ,fontweight=str_Fontweight
                                 ,xy=(a,b)
                                 ,rotation=0
                                 ,xytext=(0, int_X_Text_Offset)
                                 ,ha='center'
                                 ,textcoords='offset points'
                                 ,color=str_Annotation_colour)
                pass
            pass
        
            ''' Annotate Primary Y-Axis points '''
            #list_X_Axis_Primary = list(list_Primary_X_Axis)
            #list_Y_Axis_Primary = [x + y for x, y in zip(list_Source_VSP_Ages_And_Sizes__Sizes, list_Sample_VSP_Ages_And_Sizes__Sizes)] #list(list_Sample_VSP_Ages_And_Sizes__Sizes)
            list_Y_Axis_Primary_Values = [round(x,2) for x in list_Source_VSP_Ages_And_Sizes__Sizes]
            for a, b, c in zip(list_X_Axis_Primary, list_Y_Axis_Primary, list_Y_Axis_Primary_Values):    
                 
                int_Value = c
                if c > 0:
                    str_Annotation_colour = 'blue'
                    str_Annotation = '{:,}'.format(int_Value).replace(',',' ')
                    bool_Scale_Font_And_X_Offset = False
                    if bool_Scale_Font_And_X_Offset:
                        if int_Value > 4:
                            str_Fontweight = 'bold'
                            int_Fontsize = 8
                            int_X_Text_Offset = -8
                        elif int_Value == 4 or int_Value == 3:
                            str_Fontweight = 'normal' #'bold'
                            int_Fontsize = 6
                            int_X_Text_Offset = -6
                        elif int_Value < 3:
                            str_Fontweight = 'normal' #'bold'
                            int_Fontsize = 4
                            int_X_Text_Offset = -4
                        pass
                    else:
                        str_Fontweight = 'bold'
                        int_Fontsize = 8
                        int_X_Text_Offset = 15
                    pass
                    ax1.annotate(str_Annotation
                                 ,fontsize=int_Fontsize
                                 ,fontweight=str_Fontweight
                                 ,xy=(a,b)
                                 ,rotation=0
                                 ,xytext=(0, int_X_Text_Offset)
                                 ,ha='center'
                                 ,textcoords='offset points'
                                 ,color=str_Annotation_colour)
                pass
            pass
        pass
    
        bool_Annotation_Headings = False
        if bool_Annotation_Headings:         
            ''' Annotate - Pop Size N '''
            int_Pop_Size__N = df_1[str_Colname__Sim_Pop_Size].iloc[0]  
            int_X_Axis_Primary = int_X_Axis_Max / 2   
            int_Y_Axis_Primary_Offset = (int_Y_Axis_Interval / 6)*-1 #int_Y_Axis_Interval*1                    
            int_Y_Axis_Primary = int_Y_Axis_Max + int_Y_Axis_Primary_Offset
            a, b = int_X_Axis_Primary, int_Y_Axis_Primary        
            str_Annotation_colour = 'darkgrey'
            str_Value = '{:,}'.format(int_Pop_Size__N).replace(',',' ')
            str_Text = 'Total population size (N): ' + str_Value
            str_Annotation = '{:}'.format(str_Text)
            ax1.annotate(str_Annotation, fontsize=12, fontweight='bold', xy=(a,b), rotation=0, xytext=(0, 0), ha='center', textcoords='offset points', color=str_Annotation_colour)
        
            ''' Annotate - Adult Pop Size Nc '''
            #int_AgeNe__Adult_Pop_Size__Nx_Adults__Nc = int(df_1[str_Col_Name_AgeNe__Adult_Pop_Size__Nx_Nc_Adults].iloc[0])  
            int_X_Axis_Primary = int_X_Axis_Max / 2   
            int_Y_Axis_Primary_Offset = (int_Y_Axis_Interval / 3)*-1 #int_Y_Axis_Interval*1                    
            int_Y_Axis_Primary = int_Y_Axis_Max + int_Y_Axis_Primary_Offset
            a, b = int_X_Axis_Primary, int_Y_Axis_Primary        
            str_Annotation_colour = 'darkgrey'
            str_Value = '{:,}'.format(float_Pop_Size__Nc).replace(',',' ')
            str_Text = 'Adult population size (Nc): ' + str_Value
            str_Annotation = '{:}'.format(str_Text)
            ax1.annotate(str_Annotation, fontsize=12, fontweight='bold', xy=(a,b), rotation=0, xytext=(0, 0), ha='center', textcoords='offset points', color=str_Annotation_colour)
 
            #DEBUG_ON
            #matplotlib__pyplot.show()
            #DEBUG_OFF        
        pass

    
        bool_Text_Boxes = False
        if bool_Text_Boxes:
      
            ''' Annotate Primary X-Axis points - Min Mating age '''
            #int_LifeHist__Min_Mating_Age = df_2[str_Colname__str_LifeHist__Min_Mating_Age].iloc[0]
            int_X_Axis_Primary_Offset = 0  
            list_X_Axis_Primary = int_LifeHist__Min_Mating_Age + int_X_Axis_Primary_Offset 
            int_Y_Axis_Primary_Offset = -18                         
            list_Y_Axis_Primary = 0 + int_Y_Axis_Primary_Offset
            a, b = list_X_Axis_Primary, list_Y_Axis_Primary        
            str_Annotation_colour = 'darkgrey'
            str_Text = a #' Min. mating age: ' + str(int(int_LifeHist__Min_Mating_Age))
            str_Annotation = '{:}'.format(str_Text)
            #ax1.annotate(str_Annotation, fontsize=14, fontweight='bold', xy=(a,b), rotation=0, xytext=(0, 0), ha='center', textcoords='offset points', color=str_Annotation_colour)
            ax1.text(a, b, str_Annotation, fontsize=13, fontweight='bold', color=str_Annotation_colour, ha='center', bbox=dict(facecolor='white', edgecolor='none'))
#             a = float(int_LifeHist__Min_Mating_Age) / float(int_X_Axis_Max - 3.15)
#             b = float(-6.2) / float(int_Y_Axis_Max)
#             ax1.text(a, b, str_Annotation, fontsize=13, fontweight='bold', color=str_Annotation_colour, ha='center', va='center', transform = ax1.transAxes, bbox=dict(facecolor='white', edgecolor='none'))


#             ax.annotate('local max', xy=(3, 1),  xycoords='data',
#             xytext=(0.8, 0.95), textcoords='axes fraction',
#             arrowprops=dict(facecolor='black', shrink=0.05),
#             horizontalalignment='right', verticalalignment='top',
#             )            
            ''' Annotate Primary X-Axis points - Max Mating age '''
            #int_LifeHist__Max_Mating_Age = df_2[str_Colname__str_LifeHist__Max_Mating_Age].iloc[0]
            int_X_Axis_Primary_Offset = 0  
            list_X_Axis_Primary = int_LifeHist__Max_Mating_Age + int_X_Axis_Primary_Offset
            int_Y_Axis_Primary_Offset = -18                         
            list_Y_Axis_Primary = 0 + int_Y_Axis_Primary_Offset
            a, b = list_X_Axis_Primary, list_Y_Axis_Primary        
            str_Annotation_colour = 'darkgrey'
            str_Text = a
            str_Annotation = '{:}'.format(str_Text)
            ax1.text(a, b, str_Annotation, fontsize=13, fontweight='bold', color=str_Annotation_colour, ha='center', bbox=dict(facecolor='white', edgecolor='none'))

            ''' Annotate Primary X-Axis points - Max age '''
            #int_LifeHist__Max_Age = df_2[str_Colname__str_LifeHist__Max_Age].iloc[0]
            int_X_Axis_Primary_Offset = 0
            int_X_Axis_Primary = int_LifeHist__Max_Age + int_X_Axis_Primary_Offset
            int_Y_Axis_Primary_Offset = -18                       
            int_Y_Axis_Primary = 0 + int_Y_Axis_Primary_Offset
            a, b = int_X_Axis_Primary, int_Y_Axis_Primary        
            str_Annotation_colour = 'red'
            str_Text = a
            str_Annotation = '{:}'.format(str_Text)
            ax1.text(a, b, str_Annotation, fontsize=13, fontweight='bold', color=str_Annotation_colour, ha='center', bbox=dict(facecolor='white', edgecolor='none'))            

            #DEBUG_ON
            #matplotlib__pyplot.show()
            #DEBUG_OFF 
        pass              

        #DEBUG_ON
        ''' Required to change background of INTERACTIVE WINDOW only'''
        if bool_Plot_Theme__Dark_Blue_1:
            pyplot_Fig_Patch = pyplot_Fig.patch
            pyplot_Fig_Patch.set_facecolor('darkblue') # works with plt.show().  
        pass
        #matplotlib__pyplot.show()
        #DEBUG_OFF
        
                                
        return pyplot_Fig

    '''
    -------------------------------------------------------------
    CURRENT NEOGEN PLOT - Plot EXPERIMENT POST SIM & AGENE_DEMOGRAPHIC PROFILE Per Replicate EOR SUMMARISED Results
    -------------------------------------------------------------
    '''   
    def func__Plot_EXPERIMENT_AgeNe_Sim_Demographic_Population_Profile__Get_Data(self, str_Plot_Save_Path, str_Search_Path):

        boolSuccess = False
       
        '''
        -------------------------------
        Specify Final Output File
        -------------------------------
        '''
        ''' Output plot '''
        str_Excel_Input_Colname_Prefix = globalsSS.Excel_Results_File_Details.static_Excel_Colname_Prefix__AgeNe_Sim_Summarise_ALL_EOR__Summary_Results
        str_Excel_Input_FileName =  globalsSS.Excel_Results_File_Details.static_Excel_FileName__AgeNe_Sim_Summarise_ALL_EOR__Summary_Results
        
#         str_Plot_Output_File_1 = self.obj_SSParams.strOutputLocation_CumulativeRun_Path + '\\' + self.obj_SSParams.strUniqueRunID + '_' + str_Excel_Input_FileName + '_' + str_Excel_Input_Colname_Prefix + '.png'
#         str_Plot_Output_File_2 = self.obj_SSParams.strOutputLocation_CumulativeRun_Path + '\\' + self.obj_SSParams.strUniqueRunID + '_' + str_Excel_Input_FileName + '_' + str_Excel_Input_Colname_Prefix + '.pdf'
        str_Plot_Output_File_1 = str_Search_Path + '\\' + self.obj_SSParams.strUniqueRunID + '_' + str_Excel_Input_FileName + '_' + str_Excel_Input_Colname_Prefix + '.png'
        str_Plot_Output_File_2 = str_Search_Path + '\\' + self.obj_SSParams.strUniqueRunID + '_' + str_Excel_Input_FileName + '_' + str_Excel_Input_Colname_Prefix + '.pdf'

        '''
        -------------------------------
        Specify Excel Input file
        -------------------------------
        '''        
        str_Input_FileName = '*' + str_Excel_Input_FileName + '*.xlsx'
        str_File_Search_Pattern = str_Input_FileName
        
        '''
        -------------------------------
        Import Excel Data to dataframee
        -------------------------------
        '''
        '''
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~
        Get & Process Input SHEET
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~
        '''
        str_Input_Excel_Sheet_Name = globalsSS.Excel_Results_File_Details.static_Excel_Colname_Prefix__AgeNe_Sim_Summarise_ALL_EOR__Summary_Results

        self.obj_Log_Default.info('Dataframing results for: ' + str_Input_FileName + ' and for SHEET: ' + str_Input_Excel_Sheet_Name) 

        bool_File_1_Located = False
        with FileHandler() as obj_FileHandler:
            bool_File_1_Located, list_Path_And_Files = obj_FileHandler.func_Locate_Files(str_Search_Path, str_File_Search_Pattern)
       
        if bool_File_1_Located:
            
            '''Process Results'''
            list_DF_1s = []            
            for str_Path_And_File in list_Path_And_Files:
                
                '''Get the data from the excel files with the specified sheet'''
                xl = pandas.ExcelFile(str_Path_And_File)
                df_1 = xl.parse(str_Input_Excel_Sheet_Name)
                list_DF_1s.append(df_1)
                
            pass

            ''' concatinate the dfs '''
            df_Aggregate = pandas.DataFrame()
            for df_New in list_DF_1s:
                '''log the results'''
                #str_Df = df_New.to_string()
                #self.obj_Log_Debug.debug('Results dataframe NEW: %s' % str_Df)
                
                #Concat DFs - Tried df.append() but it wont work
                df_Aggregate = pandas.concat([df_Aggregate,df_New], ignore_index=True)
                
                #str_Df = df_Aggregate.to_string()
                #self.obj_Log_Debug.debug('Results dataframe AGGREGATE: %s' % str_Df)

            pass

            #DEBUG_ON
            #str_Df = df_Aggregate.to_string()
            #self.obj_Log_Debug.debug('Results dataframe AGGREGATE 1: %s' % str_Df)
            #DEBUG_OFF
            
            df1 = df_Aggregate 
        else:
            self.obj_Log_Default.error('File specified could not be located; str_Search_Path = ' + str_Search_Path + '; strFileSearchPattern = ' + str_File_Search_Pattern)
        pass
    
        '''
        -------------------------------
        Get More Data
        -------------------------------
        '''
        '''
        -------------------------------
        Specify Excel Input file 2
        -------------------------------
        '''        
        #str_Excel_Input_Colname_Prefix = globalsSS.Excel_Results_File_Details.static_Excel_Colname_Prefix__EXPERIMENT_Parent_Offspring_Ne_1__Summary_Results
        str_Excel_Input_FileName =  globalsSS.Excel_Results_File_Details.static_Excel_FileName__Ne2_LDNe__Summary_EOR_Results
 
        str_Input_FileName = '*' + str_Excel_Input_FileName + '*.xlsx'
        str_File_Search_Pattern = str_Input_FileName
        
        '''
        -------------------------------
        Import Excel Data to dataframee
        -------------------------------
        '''
        '''
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~
        Get & Process Input SHEET
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~
        '''
        str_Input_Excel_Sheet_Name = globalsSS.Excel_Results_File_Details.static_Excel_SheetName__Ne2_LDNe__Summary_EOR_Results

        self.obj_Log_Default.info('Dataframing results for: ' + str_Input_FileName + ' and for SHEET: ' + str_Input_Excel_Sheet_Name) 

        bool_File_2_Located = False
        with FileHandler() as obj_FileHandler:
            bool_File_2_Located, list_Path_And_Files = obj_FileHandler.func_Locate_Files(str_Search_Path, str_File_Search_Pattern)
       
        if bool_File_2_Located:
            
            '''Process Results'''
            list_DF_2s = []            
            for str_Path_And_File in list_Path_And_Files:
                
                '''Get the data from the excel files with the specified sheet'''
                xl = pandas.ExcelFile(str_Path_And_File)
                df_2 = xl.parse(str_Input_Excel_Sheet_Name)
                list_DF_2s.append(df_2)
                
            pass

            ''' concatinate the dfs '''
            df_Aggregate = pandas.DataFrame()
            for df_New in list_DF_2s:
                '''log the results'''
                #str_Df = df_New.to_string()
                #self.obj_Log_Debug.debug('Results dataframe NEW: %s' % str_Df)
                
                #Concat DFs - Tried df.append() but it wont work
                df_Aggregate = pandas.concat([df_Aggregate,df_New], ignore_index=True)
                
                #str_Df = df_Aggregate.to_string()
                #self.obj_Log_Debug.debug('Results dataframe AGGREGATE: %s' % str_Df)

            pass

            #DEBUG_ON
            #str_Df = df_Aggregate.to_string()
            #self.obj_Log_Debug.debug('Results dataframe AGGREGATE 1: %s' % str_Df)
            #DEBUG_OFF
            
            df2 = df_Aggregate 
        else:
            self.obj_Log_Default.error('File specified could not be located; str_Search_Path = ' + str_Search_Path + '; strFileSearchPattern = ' + str_File_Search_Pattern)
        pass
        '''
        -------------------------------
        Get More Data
        -------------------------------
        '''
        '''
        -------------------------------
        Specify Excel Input file 3
        -------------------------------
        '''        
        str_Excel_Input_FileName =  globalsSS.Excel_Results_File_Details.static_Excel_FileName__SS_LEVEL_Results
 
        str_Input_FileName = '*' + str_Excel_Input_FileName + '*.xlsx'
        str_File_Search_Pattern = str_Input_FileName
        
        '''
        -------------------------------
        Import Excel Data to dataframee
        -------------------------------
        '''
        '''
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~
        Get & Process Input SHEET
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~
        '''
        str_Input_Excel_Sheet_Name = globalsSS.Excel_Results_File_Details.static_Excel_SheetName__SS_LEVEL_BATCH_Results

        self.obj_Log_Default.info('Dataframing results for: ' + str_Input_FileName + ' and for SHEET: ' + str_Input_Excel_Sheet_Name) 

        bool_File_3_Located = False
        with FileHandler() as obj_FileHandler:
            bool_File_3_Located, list_Path_And_Files = obj_FileHandler.func_Locate_Files(str_Search_Path, str_File_Search_Pattern)
       
        if bool_File_3_Located:
            
            '''Process Results'''
            list_DF_3s = []            
            for str_Path_And_File in list_Path_And_Files:
                
                '''Get the data from the excel files with the specified sheet'''
                xl = pandas.ExcelFile(str_Path_And_File)
                df_3 = xl.parse(str_Input_Excel_Sheet_Name)
                list_DF_3s.append(df_3)
                
            pass

            ''' concatinate the dfs '''
            df_Aggregate = pandas.DataFrame()
            for df_New in list_DF_3s:
                '''log the results'''
                #str_Df = df_New.to_string()
                #self.obj_Log_Debug.debug('Results dataframe NEW: %s' % str_Df)
                
                #Concat DFs - Tried df.append() but it wont work
                df_Aggregate = pandas.concat([df_Aggregate,df_New], ignore_index=True)
                
                #str_Df = df_Aggregate.to_string()
                #self.obj_Log_Debug.debug('Results dataframe AGGREGATE: %s' % str_Df)

            pass

            #DEBUG_ON
            #str_Df = df_Aggregate.to_string()
            #self.obj_Log_Debug.debug('Results dataframe AGGREGATE 1: %s' % str_Df)
            #DEBUG_OFF
            
            df3 = df_Aggregate 
        else:
            self.obj_Log_Default.error('File specified could not be located; str_Search_Path = ' + str_Search_Path + '; strFileSearchPattern = ' + str_File_Search_Pattern)
        pass


        '''
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~
        Transform the data
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~
        '''  
#         if bool_File_1_Located and bool_File_2_Located and bool_File_3_Located:
#             
#             ''' Send the relevent DFs  '''
#             list_DFs = [df1, df2, df3]
#      
#             list_DFs = self.func__Plot_EXPERIMENT_AgeNe_Sim_Demographic_Population_Profile__Transform_And_Process(str_Excel_Input_FileName, str_Excel_Input_Colname_Prefix, list_DFs)
#             
#         pass
        if bool_File_1_Located and bool_File_3_Located:
            
            ''' Send the relevent DFs  '''
            list_DFs = [df1, df3]
     
            list_DFs = self.func__Plot_EXPERIMENT_AgeNe_Sim_Demographic_Population_Profile__Transform_And_Process(str_Plot_Save_Path, str_Excel_Input_FileName, str_Excel_Input_Colname_Prefix, list_DFs)
            
        pass
    
                    
        return boolSuccess

    def func__Plot_EXPERIMENT_AgeNe_Sim_Demographic_Population_Profile__Transform_And_Process(self, str_Plot_Save_Path, str_Excel_Input_FileName, str_Excel_Input_Colname_Prefix, list_DFs):
        
        self.obj_Log_Default.info('Transforming data')

        '''
        -----------------------------
        Specify DFs
        -----------------------------
        '''
        df_1 = list_DFs[0]
        #df_2 = list_DFs[1]
        #df_3 = list_DFs[2]
        df_3 = list_DFs[1]
           
        with SSResults(self.obj_SSParams) as obj_Results:
            str_Group_Key_Mating_Count_Replicate_Total = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Mating_Count_Replicate_Total
            str_Col_Name_Mating_Count_Replicate_Total_DF1 = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Group_Key_Mating_Count_Replicate_Total)
            #str_Col_Name_Mating_Count_Replicate_Total_DF2 = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Group_Key_Mating_Count_Replicate_Total)
        pass

        ''' Get all the UNIQUE Mating_Count_Replicate_Total values '''
        nparray_Mating_Count_Replicate_Total = numpy.unique(df_1[str_Col_Name_Mating_Count_Replicate_Total_DF1])
        #nparray_Mating_Count_Replicate_Total = numpy.unique(df_2[str_Col_Name_Mating_Count_Replicate_Total_DF2])

        ''' Get Y-Axis Max '''
        with SSResults(self.obj_SSParams) as obj_Results:
            str_Key_AgeNe__Ne_Demo = globalsSS.Colnames_AgeNe_Results.static_str_Colname_NeDemo
            str_Col_Name_AgeNe__Ne_Demo = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Ne_Demo)
            str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe = globalsSS.Colnames_Ne2_Aggregation.static_Str_Colname_float_Total_Ne2_r_Sqrd_LDNe
            #str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe)
            df_Temp = pandas.DataFrame()
            df_Temp_1 = pandas.DataFrame()
            df_Temp_2 = pandas.DataFrame()
            df_Temp_1["Max"] = df_1[[str_Col_Name_AgeNe__Ne_Demo]].max(axis=1)
#             df_Temp_2["Max"] = df_2[[str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe]].max(axis=1)
#             df_Temp = pandas.concat([df_Temp_1,df_Temp_2], ignore_index=True)
            df_Temp = df_Temp_1
            int_Y_Axis_Max = df_Temp["Max"].max(axis=0)
            int_Y_Axis_Max = int(math.ceil(int_Y_Axis_Max / 500)) * 500
            del df_Temp_1     
            del df_Temp_2     
            del df_Temp     
        pass 
                
        for int_Mating_Count_Replicate_Total in nparray_Mating_Count_Replicate_Total:

            '''
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~
            Transform
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~
            '''  
            self.obj_Log_Default.info('Transforming data for int_Mating_Count_Replicate_Total :' + str(int_Mating_Count_Replicate_Total))
                      
            ''' Subset the DF to get the correct value '''
            df_1_Subset = df_1[(df_1[str_Col_Name_Mating_Count_Replicate_Total_DF1]==int_Mating_Count_Replicate_Total)]
            
            #DEBUG_ON
            #str_Df = df_1_Subset.to_string()
            #self.obj_Log_Debug.debug('Results dataframe df 1: %s' % str_Df)
            #raw_input('pausing')
            #DEBUG_OFF    
            
            #df_2_Subset = df_2[(df_2[str_Col_Name_Mating_Count_Replicate_Total_DF2]==int_Mating_Count_Replicate_Total)]
            
            #DEBUG_ON
            #str_Df = df_2_Subset.to_string()
            #self.obj_Log_Debug.debug('Results dataframe df 2: %s' % str_Df)
            #raw_input('pausing')
            #DEBUG_OFF            

            #list_DFs = [df_1_Subset, df_2_Subset, df_3] 
            list_DFs = [df_1_Subset, df_3] 
            
            '''
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~
            Plot
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~
            '''    
            
            ''' Send the relevent DFs to the plotter '''
            #list_DFs = [df1, df2]
            
            bool_Interactive_Display = False
            ''' Specify the number of figure copies and their specs '''
            dict_Fig_Copies = {
                                1:{'ColourScheme':'Default', 'Transparent':False, 'Interactive_Display':bool_Interactive_Display, 'Save_PNG': True, 'Save_PDF': False}
                               #,2:{'ColourScheme':'Dark_Blue', 'Transparent':True, 'Interactive_Display':bool_Interactive_Display,'Save_PNG': True, 'Save_PDF': False}
                               }
            
            pyplot_Fig_1 = None
            for key_Dict_Fig_Copy_Params, value_Dict_Fig_Copy_Params in dict_Fig_Copies.iteritems():
                
                pyplot_Fig_1 = self.func__Plot_EXPERIMENT_AgeNe_Sim_Demographic_Population_Profile__Plot(list_DFs, int_Mating_Count_Replicate_Total, int_Y_Axis_Max, value_Dict_Fig_Copy_Params)
                
                '''
                ~~~~~~~~~~~~~~~~~~~~~~~~~~~
                Save results
                ~~~~~~~~~~~~~~~~~~~~~~~~~~~
                '''    
                str_Plot_Output_Path = str_Plot_Save_Path
                ''' Create path if it doesnt exist '''
                with FileHandler() as obj_File_Op:
                    obj_File_Op.method_Create_Path(str_Plot_Output_Path)
                pass                
                str_Plot_Output_FileName = self.obj_SSParams.strUniqueRunID + '_' + str_Excel_Input_FileName + '_' + str_Excel_Input_Colname_Prefix + '_' + str(int_Mating_Count_Replicate_Total)
                str_Plot_Output_Path_And_FileName = os__path.join(str_Plot_Output_Path, str_Plot_Output_FileName)
                if value_Dict_Fig_Copy_Params['Save_PNG'] == True:
                    str_Plot_Output_Path_And_FileName_PNG = str_Plot_Output_Path_And_FileName + '_' + str(key_Dict_Fig_Copy_Params) + '.png'
                    bool_Transparent = value_Dict_Fig_Copy_Params['Transparent']
                    pyplot_Fig_1.savefig(str_Plot_Output_Path_And_FileName_PNG, bbox_inches='tight', dpi=400, transparent=bool_Transparent)
                pass
                if value_Dict_Fig_Copy_Params['Save_PDF'] == True:
                    str_Plot_Output_Path_And_FileName_PDF = str_Plot_Output_Path_And_FileName + '_' + str(key_Dict_Fig_Copy_Params) + '.pdf'
                    pyplot_Fig_1.savefig(str_Plot_Output_Path_And_FileName_PDF, bbox_inches='tight')
                pass
        
                '''
                ~~~~~~~~~~~~~~~~~~~~~~~~~~~
                Display results
                ~~~~~~~~~~~~~~~~~~~~~~~~~~~
                '''
                if value_Dict_Fig_Copy_Params['Interactive_Display'] == True:           
                    matplotlib__pyplot.show()
                pass
            pass
            ''' Close the plot '''
            matplotlib__pyplot.close(pyplot_Fig_1) 
        pass
                  
        pass        
        
        
        return list_DFs

    def func__Plot_EXPERIMENT_AgeNe_Sim_Demographic_Population_Profile__Plot(self, list_DFs, int_Mating_Count_Replicate_Total, int_Y_Axis_Max, dict_Fig_Copy):
        
        self.obj_Log_Default.info('Creating figure')
        
        bool_Plot_Theme__Default = False
        bool_Plot_Theme__Dark_Blue_1 = False
        
        if dict_Fig_Copy['ColourScheme'] == 'Dark_Blue':
            bool_Plot_Theme__Dark_Blue_1 = True
        else:
            bool_Plot_Theme__Default = True
        pass

        int_Plot_Line_Width = 4
        '''
        -----------------------------
        Specify DFs
        -----------------------------
        '''
        df_1 = list_DFs[0]
        #df_2 = list_DFs[1]
        #df_3 = list_DFs[2]
        df_3 = list_DFs[1]
        
        
        '''
        -----------------------------
        Specify X-Axis
        -----------------------------
        '''
        with SSResults(self.obj_SSParams) as obj_Results:
            str_Key_AgeNe__Age = globalsSS.Colnames_AgeNe_Results.static_str_Colname_Age
            str_Col_Name_AgeNe__Age = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Age)
        pass
        str_X_Axis_df_1_Colname = str_Col_Name_AgeNe__Age
        list_Primary_X_Axis = df_1[str_X_Axis_df_1_Colname].tolist()
        ''' NOTE: Because SharkSim ages start at zero (embryo) and AgeNe has to work with ages starting with one...'''
        #''' DONT adjust the ages - Leave as equivalent to AgeNe'''
        list_Primary_X_Axis = [(int(x)-1) for x in list_Primary_X_Axis]


    
        '''
        -----------------------------
        Create figure
        -----------------------------
        '''
        # default scale is 1 in your original case, scales with other cases:
        bool_Use_Relative_Fig_Size = False
        if bool_Use_Relative_Fig_Size:
            int_X_Axis_Length = len(df_1[str_X_Axis_df_1_Colname])
            int_Width_Scale = int_X_Axis_Length/10 
            int_Width_Control = 8  #6 - About perfect for PowerPoint
            int_Height_Control = 8 #8 - About perfect for PowerPoint
            figsize = (int_Width_Control*int_Width_Scale,int_Height_Control) # fig size in inches (width,height)
            int_DPI = 400
        else:
            int_DPI = 80
            int_Width_Control = 14 
            int_Height_Control = 6          
            figsize = (int_Width_Control,int_Height_Control) # fig size in inches (width,height)
        pass
        pyplot_Fig = matplotlib__pyplot.figure(dpi = int_DPI, figsize = figsize)       
        
        #ax1 = pyplot_Fig.add_subplot(111)
        left = 0.1
        bottom = 0.1
        width = 0.8
        height = 0.69
        ax1 = pyplot_Fig.add_axes([left, bottom, width, height])
        
        
        bool_Dx_Bx_Nx_Stacked_Bar_Plot = True
        if bool_Dx_Bx_Nx_Stacked_Bar_Plot:
            
            with SSResults(self.obj_SSParams) as obj_Results:
                ''' Nx Y-axis - Nx - Survivors per age cohort'''
                str_Key_AgeNe__Nx = globalsSS.Colnames_AgeNe_Results.static_str_Colname_Nx
                str_Col_Name_AgeNe__Nx = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Nx)
                str_Y_Axis_df_1_Colname = str_Col_Name_AgeNe__Nx 
                list_Nx = df_1[str_Y_Axis_df_1_Colname].tolist()
                #''' NOTE!!! - Zero the last NX as it represent indivs of MaxAge who are dead in reality -  But still show as Dx deaths'''
                #list_Nx[self.obj_SSParams.maxAge - 1] = 0             
                ''' Bx Y-axis - Bx - Offspring per age cohort'''
                str_Key_AgeNe__Bx = globalsSS.Colnames_AgeNe_Results.static_str_Colname_Bx
                str_Col_Name_AgeNe__Bx = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Bx)
                str_Y_Axis_df_1_Colname = str_Col_Name_AgeNe__Bx 
                list_Bx = df_1[str_Y_Axis_df_1_Colname].tolist()
                '''NOTE ~~~ Bx value s are decimals from AgeNe, so rounding to whole numbers for presentation purposes '''
                list_Bx = [int(round(x,0)) for x in list_Bx]
                ''' Dx Y-axis - Dx - Deaths per age cohort'''
                str_Key_AgeNe__Dx = globalsSS.Colnames_AgeNe_Results.static_str_Colname_Dx
                str_Col_Name_AgeNe__Dx = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Dx)
                str_Y_Axis_df_1_Colname = str_Col_Name_AgeNe__Dx 
                list_Dx = df_1[str_Y_Axis_df_1_Colname].tolist()
                
                
                ''' Life-history parameters '''
                df_In = df_3
                ''' MaxAge '''
                str_Key_str_LifeHist__Max_Age = globalsSS.Colnames_BATCH_PARAMETERS.static_str_Colname_Max_age
                str_Colname__str_LifeHist__Max_Age = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_In, str_Key_str_LifeHist__Max_Age)
                ''' Max Mating Age '''
                str_Key_str_LifeHist__Max_Mating_Age = globalsSS.Colnames_BATCH_PARAMETERS.static_str_Colname_Max_mating_age
                str_Colname__str_LifeHist__Max_Mating_Age = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_In, str_Key_str_LifeHist__Max_Mating_Age)
                ''' Min Mating Age '''
                str_Key_str_LifeHist__Min_Mating_Age = globalsSS.Colnames_BATCH_PARAMETERS.static_str_Colname_Min_mating_age
                str_Colname__str_LifeHist__Min_Mating_Age = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_In, str_Key_str_LifeHist__Min_Mating_Age)
                
            pass
            
            '''
            -----------------------------
            Plot 1
            -----------------------------
            '''
            int_Bar_Width = 0.80         
            str_Plot_Line_Color = 'blue' #'red'
            #pyplot_Line_3, = matplotlib__pyplot.plot(df_1[str_X_Axis_df_1_Colname], df_1[str_Y_Axis_df_1_Colname], color=str_Plot_Line_Color, linewidth=int_Plot_Line_Width, figure=pyplot_Fig)
            pyplot_Line_3 = matplotlib__pyplot.bar(list_Primary_X_Axis, list_Nx, width=int_Bar_Width, align='center', color=str_Plot_Line_Color, figure=pyplot_Fig)
            #DEBUG_ON
            #matplotlib__pyplot.show()
            #DEBUG_OFF                        
            '''
            -----------------------------
            Plot 2
            -----------------------------
            '''         
            if bool_Plot_Theme__Dark_Blue_1:
                str_Plot_Line_Color = 'white'
            else:
                str_Plot_Line_Color = 'grey'
            pass
        
            
            #pyplot_Line_2, = matplotlib__pyplot.plot(df_1[str_X_Axis_df_1_Colname], df_1[str_Y_Axis_df_1_Colname], color=str_Plot_Line_Color, linewidth=int_Plot_Line_Width, figure=pyplot_Fig)
            pyplot_Line_2 = matplotlib__pyplot.bar(list_Primary_X_Axis, list_Bx, bottom=list_Nx, width=int_Bar_Width, align='center', color=str_Plot_Line_Color, figure=pyplot_Fig)
            #DEBUG_ON
            #matplotlib__pyplot.show()
            #DEBUG_OFF    
            '''
            -----------------------------
            Plot 3
            -----------------------------
            ''' 
            str_Plot_Line_Color = 'red' #'blue'
            #pyplot_Line_1, = matplotlib__pyplot.plot(df_1[str_X_Axis_df_1_Colname], df_1[str_Y_Axis_df_1_Colname], color=str_Plot_Line_Color, linewidth=int_Plot_Line_Width, figure=pyplot_Fig)
            pyplot_Line_1 = matplotlib__pyplot.bar(list_Primary_X_Axis, list_Dx, bottom=[list_Nx[j] + list_Bx[j] for j in range(len(list_Nx))], width=int_Bar_Width, align='center', color=str_Plot_Line_Color, figure=pyplot_Fig)
            #DEBUG_ON
            #matplotlib__pyplot.show()
            #DEBUG_OFF
        pass
    
        '''
        -----------------------------
        Specify Y-Axis Max
        -----------------------------
        '''
        bool_Specify_Y_Axis_Max = True
        if bool_Specify_Y_Axis_Max:
            
            list_All = [x+y+z for x,y,z in zip(list_Nx, list_Bx, list_Dx)]
            int_All_Max = max(list_All)
            def roundup(int_X, int_Round_Up_To_Nearest):
                return int_X if int_X % int_Round_Up_To_Nearest == 0 else int_X + int_Round_Up_To_Nearest - int_X % int_Round_Up_To_Nearest       
            
            int_Y_Axis_Max = int(roundup(int_All_Max, 10)) 

        pass  
     
        '''
        -----------------------------
        Format Plot
        -----------------------------
        '''


        '''
        ~~~~~~~~~~~~~~~~~~
        Grid and ticks details
        ~~~~~~~~~~~~~~~~~~
        '''
        matplotlib__pyplot.grid(True, which='both', figure=pyplot_Fig)
        #ax1.grid(which='both')
        #DEBUG_ON
        #matplotlib__pyplot.show()
        #DEBUG_OFF          
        '''
        ~~~~~~~~~~~~~~~~~~
        Legend details
        ~~~~~~~~~~~~~~~~~~
        '''
        bool_Add_Legend = True
        if bool_Add_Legend:
            
            float_Bbox_X_Pos = 0.5
            #float_Bbox_Y_Pos = 1.01 #-0.07
            float_Bbox_Y_Pos = -0.15 # -0.1 #-0.07 #D
            
            '''
            Place legend longways under the x-axis '''
            # Shrink current axis's height by 10% on the bottom
            box = ax1.get_position()
            ax1.set_position([box.x0, box.y0 + box.height * 0.1,
                             box.width, box.height * 0.9])
            
            # Put a legend below current axis
            pyplot_Fig_Legend = ax1.legend([
                               pyplot_Line_1
                               , pyplot_Line_2
                               , pyplot_Line_3
                               ]
                              ,[
                                'Dx - Deaths per age'
                                ,'Bx - Offspring per age'
                                ,'Nx - Survivors per age'
                                ]
                              ,bbox_to_anchor=(float_Bbox_X_Pos, float_Bbox_Y_Pos)
                              ,frameon = 1
                              ,loc='upper center'
                              ,fancybox=False
                              ,shadow=False
                              , ncol=5)                            
       
    
            '''
            ~~~~~~~~~~~~~~~~~~~~~~~~~~
            Format Legend
            ~~~~~~~~~~~~~~~~~~~~~~~~~~
            '''
            pyplot_Fig_Legend_Frame = pyplot_Fig_Legend.get_frame()
            
            pyplot_Fig_Legend_Frame.set_color('white')
            ''' Legend frame background '''
            #pyplot_Fig_Legend_Frame.set_facecolor('green')
            ''' Legend frame border '''
            #pyplot_Fig_Legend_Frame.set_edgecolor('red')
            
            ''' Turn off frame outline '''
            pyplot_Fig_Legend_Frame.set_linewidth(0)
            
            # set the alpha value of the legend: it will be translucent
            pyplot_Fig_Legend_Frame.set_alpha(0.3)                  
            
        pass
                    
        '''
        ~~~~~~~~~~~~~~~~~~
        Plot Shading
        ~~~~~~~~~~~~~~~~~~
        '''
        bool_Plot_Background_Points = True
        if bool_Plot_Background_Points:            
            ''' Plot the Background X-axis points '''

            int_LifeHist__Min_Mating_Age = df_3[str_Colname__str_LifeHist__Min_Mating_Age].iloc[0]                            
            int_LifeHist__Max_Mating_Age = df_3[str_Colname__str_LifeHist__Max_Mating_Age].iloc[0]                            
            
            str_Panel_Color = 'lightgrey'            
            ax1.axvspan(int_LifeHist__Min_Mating_Age-0.4, (int_LifeHist__Max_Mating_Age-1)+0.4, color=str_Panel_Color, edgecolor=None, alpha=0.3, zorder=0)
    
            #DEBUG_ON
            #matplotlib__pyplot.show()
            #DEBUG_OFF   
        pass

       
        '''
        ~~~~~~~~~~~~~~~~~~
        Label details
        ~~~~~~~~~~~~~~~~~~
        '''
        '''
        -----------------------------
        Plot Line - AgeNe N - ALL Adults 
        -----------------------------
        '''
        '''
        Font properties for subsequent text
        '''
        
        with SSResults(self.obj_SSParams) as obj_Results:
            str_Key_AgeNe__Adult_Pop_Size__Nx_N_Adults = globalsSS.Colnames_AgeNe_Results.static_str_Colname_Nx_N_Adults
            str_Col_Name_AgeNe__Adult_Pop_Size__Nx_N_Adults = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Adult_Pop_Size__Nx_N_Adults)
            ''' AgeNe Nc - Fertile Adults '''
            str_Key_AgeNe__Adult_Pop_Size__Nx_Nc_Adults = globalsSS.Colnames_AgeNe_Results.static_str_Colname_Nx_Nc_Adults
            str_Col_Name_AgeNe__Adult_Pop_Size__Nx_Nc_Adults = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Adult_Pop_Size__Nx_Nc_Adults)
            ''' AgeNe Ne Demographic '''
            str_Key_AgeNe__Ne_Demo = globalsSS.Colnames_AgeNe_Results.static_str_Colname_NeDemo
            str_Col_Name_AgeNe__Ne_Demo = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Ne_Demo)
            ''' AgeNe Nb Demographic '''
            str_Key_AgeNe__Nb_Demo = globalsSS.Colnames_AgeNe_Results.static_str_Colname_NbDemo
            str_Col_Name_AgeNe__Nb_Demo = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Nb_Demo)
#             '''Exp1 Potential Parents '''
#             str_Key_Exp1__Potential_Parents_PP = globalsSS.Colnames_Parent_Offspring_Stats_METHOD_2.static_Str_Colname_Potential_Parents_PP
#             str_Col_Name_Exp1__Potential_Parents_PP = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__Potential_Parents_PP)

        pass

        int_AgeNe__Adult_Pop_Size__Nx_Adults__N = int(df_1[str_Col_Name_AgeNe__Adult_Pop_Size__Nx_N_Adults].iloc[0])
        int_AgeNe__Adult_Pop_Size__Nx_Adults__Nc = round((df_1[str_Col_Name_AgeNe__Adult_Pop_Size__Nx_Nc_Adults].iloc[0]),2)
        #int_AgeNe__Adult_Pop_Size__Nx_Adults__Nc = int(df_1[str_Col_Name_AgeNe__Adult_Pop_Size__Nx_Nc_Adults].iloc[0])
        #int_AgeNe__Ne = int(round(Decimal(df_1[str_Col_Name_AgeNe__Ne_Demo].iloc[0])))
        #int_AgeNe__Nb = int(round(Decimal(df_1[str_Col_Name_AgeNe__Nb_Demo].iloc[0])))
        #int_Exp1__Potential_Parents_PP = int(round(df_2[str_Col_Name_Exp1__Potential_Parents_PP].iloc[0]))

        ''' Get colnames in order to get data from df_1 '''
        with SSResults(self.obj_SSParams) as obj_Results:
            str_Key_AgeNe__Sim_Pop_Size = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Pop_Size
            str_Col_Name_AgeNe__Sim_Pop_Size = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Sim_Pop_Size)
            str_Key_AgeNe__Sim_Replicates = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Sim_Replicates
            str_Col_Name_AgeNe__Sim_Replicates = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Sim_Replicates)
            str_Key_AgeNe__Loci = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Loci
            str_Col_Name_AgeNe__Loci = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Loci)
            str_Key_Sim__Run_User_Defined_Folder = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Run_User_Defined_Folder
            str_Col_Name_Sim__Run_User_Defined_Folder = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Sim__Run_User_Defined_Folder)
        pass

        ''' Get values from df_1 '''
        str_Mating_Count_Replicate_Total = str(int_Mating_Count_Replicate_Total)
        int_Pop_Size__N = df_1[str_Col_Name_AgeNe__Sim_Pop_Size].iloc[0]
        str_Pop_Size__N = str(int_Pop_Size__N)
        str_Adult_Pop_Size__Nc = str(int_AgeNe__Adult_Pop_Size__Nx_Adults__Nc)
        #str_AgeNe__Ne = str(int_AgeNe__Ne)
        #str_AgeNe__Nb = str(int_AgeNe__Nb)
        int_Pop_Replicates = df_1[str_Col_Name_AgeNe__Sim_Replicates].iloc[0]
        str_Replicates = str(int_Pop_Replicates)
        str_Loci = str(df_1[str_Col_Name_AgeNe__Loci].iloc[0])
        str_Sim__Run_User_Defined_Folder = str(df_1[str_Col_Name_Sim__Run_User_Defined_Folder].iloc[0])

        ''' Get values from parameter object '''
        str_Simulation_Batch_Replicate_Length_Burn_In = str(self.obj_SSParams.int_Simulation_Batch_Replicate_Length_Burn_In)
        str_Simulation_Batch_Replicate_Length_Temporal_Evolution = str(self.obj_SSParams.int_Simulation_Batch_Replicate_Length_Temporal_Evolution)
        str_Scenario_Project_Name = self.obj_SSParams.str_Scenario_Project_Name
        str_Scenario_Project_Species_Name = self.obj_SSParams.str_Scenario_Project_Species_Name
        str_Scenario_Name = self.obj_SSParams.str_Scenario_Name
        str_Scenario_Project_UID = str(self.obj_SSParams.int_Scenario_Project_UID)
        str_Scenario_UID = str(self.obj_SSParams.int_Scenario_UID)
        
        str_Fig_Title = str('Population demographic profile by age')

        ''' Title spacing '''
        matplotlib__pyplot.subplots_adjust(top=0.87)
        ''' Font details '''          
        int_Plot_SupTitle_Size = 16
        if bool_Plot_Theme__Dark_Blue_1:
            str_Font_Colour = 'white'
        else:
            str_Font_Colour = 'blue'


        matplotlib__pyplot.suptitle(str_Fig_Title, fontsize=int_Plot_SupTitle_Size, color=str_Font_Colour, figure=pyplot_Fig)

        ''' Font details '''          
        #int_Plot_SupTitle_Size = 16
        #str_Font_Colour = 'blue'
                
        str_Plot_Title = str(
                            '' #Conveniant placeholder
                            + 'Pop Replicates: ' + str_Replicates + ', '
                            + 'Annual matings (Burn-in \\ Post Burn-in): ' + str_Simulation_Batch_Replicate_Length_Burn_In + ' \\ ' + str_Simulation_Batch_Replicate_Length_Temporal_Evolution + ', '
                            + '\n'
                            + 'N: ' + '{:,}'.format(int_Pop_Size__N).replace(',',' ') + ', '
                            + 'Nc: ' + '{:,}'.format(int_AgeNe__Adult_Pop_Size__Nx_Adults__Nc).replace(',',' ') + ', '
                            #+ 'AgeNe: ' + str_AgeNe__Ne + ', '
                            #+ 'AgeNb: ' + str_AgeNe__Nb + ', '
                            #+ 'Loci: ' + str_Loci + ', '
                            + '\n'
                            #+ 'Run: ' + str_Sim__Run_User_Defined_Folder
                            + 'Species: ' + str_Scenario_Project_Species_Name  + ', '
                            + 'Project \\ Scenario: ' + str_Scenario_Project_Name + ' \\ ' + str_Scenario_Name
                            )

        ''' Font details '''          
        int_Plot_Title_Size = 14
        if bool_Plot_Theme__Dark_Blue_1:
            str_Font_Colour = 'grey'
        else:
            str_Font_Colour = 'blue'
                
        matplotlib__pyplot_title = matplotlib__pyplot.title(str_Plot_Title, fontsize=int_Plot_Title_Size, color=str_Font_Colour, figure=pyplot_Fig)
        ''' Fine adjust title position '''
        y = 1.05 #1.02
        matplotlib__pyplot_title.set_y(y)
        
        ''' Font details '''          
        int_PLot_Y_Label_Size = 14
        if bool_Plot_Theme__Dark_Blue_1:
            str_Font_Colour = 'white'
        else:
            str_Font_Colour = 'blue'
                                        
        matplotlib__pyplot.xlabel('Cohort age (years)', fontsize=int_PLot_Y_Label_Size, color=str_Font_Colour, figure=pyplot_Fig)
        matplotlib__pyplot.ylabel('Individuals', fontsize=int_PLot_Y_Label_Size, color=str_Font_Colour, figure=pyplot_Fig)
        
        
        bool_UID_Label = True
        if bool_UID_Label:
            '''
            ~~~~~~~~~~~~~~~~~~
            Label Unique Identifier details
            ~~~~~~~~~~~~~~~~~~
            '''
            ''' Get colnames in order to get data from df_1 '''
            with SSResults(self.obj_SSParams) as obj_Results:
                str_Key_Sim__Run_User_Defined_Folder = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Run_User_Defined_Folder
                str_Col_Name_Sim__Run_User_Defined_Folder = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Sim__Run_User_Defined_Folder)
                str_Key_Sim__Unique_Run_ID = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Unique_Run_ID
                str_Col_Name_Sim__Unique_Run_ID = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Sim__Unique_Run_ID)
    
            pass
    
            ''' Project/Scenario UIDs '''
            str_Scenario_Project__And_Scenario_UID = 'P_' + str_Scenario_Project_UID + '_B_' + str_Scenario_UID 
            #str_Sim__Run_User_Defined_Folder = str(df_1[str_Col_Name_Sim__Run_User_Defined_Folder].iloc[0])
    
            ''' Font details '''          
            int_Font_Size = 6
            str_Font_Colour = 'darkgrey'
            
            ''' Add figure text '''
            ''' Bottom Right '''
            #matplotlib__pyplot.figtext(.70,.025,str_Scenario_Project__And_Scenario_UID, fontsize=int_Font_Size, color=str_Font_Colour, figure=pyplot_Fig)    
            ''' Top Right '''
            x = .80 
            y = .975 #.835 
            matplotlib__pyplot.figtext(x,y,str_Scenario_Project__And_Scenario_UID, fontsize=int_Font_Size, color=str_Font_Colour, figure=pyplot_Fig)
            
            ''' Get values from df_1 '''
            str_Sim__Unique_Run_ID = str(df_1[str_Col_Name_Sim__Unique_Run_ID].iloc[0])
            str_UID_Text = str(str_Sim__Unique_Run_ID)
    
            ''' Font details '''          
            int_Font_Size = 6
            str_Font_Colour = 'darkgrey'
            
            ''' Add figure text '''
            ''' Bottom Right '''
            #matplotlib__pyplot.figtext(.70,.015,str_UID_Text, fontsize=int_Font_Size, color=str_Font_Colour, figure=pyplot_Fig)
            ''' Top Right '''
            x = .80
            y = .955 #.815
            matplotlib__pyplot.figtext(x,y,str_UID_Text, fontsize=int_Font_Size, color=str_Font_Colour, figure=pyplot_Fig)
            
        pass
        

        '''
        ~~~~~~~~~~~~~~~~~~
        Axis details
        ~~~~~~~~~~~~~~~~~~
        '''
        bool_Format_Axis = True
        if bool_Format_Axis:

            ''' X-Axis limits '''
            matplotlib__pyplot.xlim(min(list_Primary_X_Axis)-0.5, max(list_Primary_X_Axis)+0.5)
                        
            ''' int_Y_Axis_Max passed into function '''
            matplotlib__pyplot.ylim(0, int_Y_Axis_Max)
    
            #DEBUG_ON
            #matplotlib__pyplot.show()
            #DEBUG_OFF  
        pass
    
        '''
        ~~~~~~~~~~~~~~~~~~
        Colours - Axis & Tick
        ~~~~~~~~~~~~~~~~~~
        '''
        bool_Format_Ticks = True
        if bool_Format_Ticks:
            if bool_Plot_Theme__Dark_Blue_1:
                str_Colour = 'darkblue'
    
            else:
                str_Colour = 'white'
            pass        
            #ax1 = pyplot_Fig.add_subplot(111, axisbg=str_Colour)
            #ax1 = pyplot_Fig.add_subplot(111)
            
    #         ax.plot(range(10))
    #         ax.set_xlabel('X-axis')
    #         ax.set_ylabel('Y-axis')
            
    #         ax.spines['bottom'].set_color('red')
    #         ax.spines['top'].set_color('red')
    #         ax.xaxis.label.set_color('red')
            if bool_Plot_Theme__Dark_Blue_1:
                int_Tick_Label_Size = 16
                str_X_Axis_Tick_Labels_Colour = 'white'
                str_Y_Axis_Tick_Labels_Colour = 'white'
                str_X_Axis_Tick_Major_Colour = 'white'
                str_X_Axis_Tick_Minor_Colour = 'grey'
                str_Y_Axis_Tick_Major_Colour = 'white'
                str_Y_Axis_Tick_Minor_Colour = 'grey'
            pass
        
            if bool_Plot_Theme__Default == False:
                ax1.tick_params(axis='x', colors=str_X_Axis_Tick_Labels_Colour)
                ax1.tick_params(axis='y', colors=str_Y_Axis_Tick_Labels_Colour)
        
                # We change the fontsize of minor ticks label 
                ax1.tick_params(axis='x', which='major', labelsize=int_Tick_Label_Size, color=str_X_Axis_Tick_Major_Colour)
                ax1.tick_params(axis='x', which='minor', labelsize=int_Tick_Label_Size, color=str_X_Axis_Tick_Minor_Colour)
                ax1.tick_params(axis='y', which='major', labelsize=int_Tick_Label_Size, color=str_Y_Axis_Tick_Major_Colour)
                ax1.tick_params(axis='y', which='minor', labelsize=int_Tick_Label_Size, color=str_Y_Axis_Tick_Minor_Colour) 
            pass 
        
            ''' Axis tick pointing direction '''
#             ax1.tick_params(axis='x', direction='out')
#             ax1.tick_params(axis='y', direction='out')
            ax1.tick_params(axis='x', which='both', direction='out')
            ax1.tick_params(axis='y', which='major', direction='out')
            
            ''' Specify axis ticks to be plotted '''
#             ax1.xaxis.tick_bottom() 
#             ax1.yaxis.tick_left() 
            ax1.tick_params(axis='x',which='both',bottom='on', top='off')
            ax1.tick_params(axis='y',which='major',left='on', right='off')
    
            #DEBUG_ON
            #matplotlib__pyplot.show()
            #DEBUG_OFF             
        pass

        bool_Change_Axis_Spines = True
        if bool_Change_Axis_Spines:
            if bool_Plot_Theme__Dark_Blue_1:
                str_Colour = 'white'
    
            else:
                str_Colour = 'black'
            pass
            for axis in ['top','bottom','left','right']:
                ax1.spines[axis].set_linewidth(1)
                ax1.spines[axis].set_color(str_Colour)
            pass
        
            ax1.spines['top'].set_visible(False)
            ax1.spines['right'].set_visible(False) 
        pass          


        bool_Format_Ticks = True
        if bool_Format_Ticks:
            nparray_Major_Ticks_X = ax1.xaxis.get_majorticklocs() 
            nparray_Major_Ticks_X_Location = nparray_Major_Ticks_X + 1     
            if len(nparray_Major_Ticks_X) > 1: 
                float_Major_Ticks_X_First = list_Primary_X_Axis[0] #nparray_Major_Ticks_X[0]
                float_Major_Ticks_X_Last = nparray_Major_Ticks_X[-1]
                float_Major_Ticks_X_Interval = 5
                nparray_Major_Ticks_X = numpy.arange(float_Major_Ticks_X_First, float_Major_Ticks_X_Last, float_Major_Ticks_X_Interval)   
                ''' Add extra ticks '''
                int_LifeHist__Min_Mating_Age = df_3[str_Colname__str_LifeHist__Min_Mating_Age].iloc[0]  
                nparray_New_Tick = numpy.array([int_LifeHist__Min_Mating_Age])
                if nparray_New_Tick not in nparray_Major_Ticks_X:
                    nparray_Major_Ticks_X = numpy.concatenate((nparray_Major_Ticks_X, nparray_New_Tick), axis=0)
                pass 
                int_LifeHist__Max_Mating_Age = df_3[str_Colname__str_LifeHist__Max_Mating_Age].iloc[0]  
                nparray_New_Tick = numpy.array([int_LifeHist__Max_Mating_Age])
                if nparray_New_Tick not in nparray_Major_Ticks_X:
                    nparray_Major_Ticks_X = numpy.concatenate((nparray_Major_Ticks_X, nparray_New_Tick), axis=0)
                pass
                int_LifeHist__Max_Age = df_3[str_Colname__str_LifeHist__Max_Age].iloc[0]
                nparray_New_Tick = numpy.array([int_LifeHist__Max_Age])
                if nparray_New_Tick not in nparray_Major_Ticks_X:
                    nparray_Major_Ticks_X = numpy.concatenate((nparray_Major_Ticks_X, nparray_New_Tick), axis=0)
                pass
                ''' Sort the ticks in numeric order '''
                nparray_Major_Ticks_X.sort()
                ''' Set the tick POSTION '''
                ''' Shift all ticks to the left so that the columns fall inbetween the ticks '''
                float_Offset = -0.5                           
                ax1.set_xticks(nparray_Major_Ticks_X + float_Offset) 
                ''' Set X-Axis Max & Min variables '''
                int_X_Axis_Min = nparray_Major_Ticks_X[0]
                int_X_Axis_Max = nparray_Major_Ticks_X[-1]
                int_X_Axis_Interval = float_Major_Ticks_X_Interval
            
                bool_Change_Tick_Labels = True
                if bool_Change_Tick_Labels:
                    list_Tick_Labels = [str(int(x)) for x in nparray_Major_Ticks_X]
                    ax1.set_xticklabels(list_Tick_Labels, rotation=0)
                    
                    bool_Change_Tick_Colours = True
                    if bool_Change_Tick_Colours:
                        str_Colour = 'black'
                        #list_Tick_Colors = [str_Colour]
                        list_Tick_Label_Obj = ax1.get_xticklabels()
                        #for str_Tick_Label in zip(ax1.get_xticklabels(), list_Tick_Colors):
                        #for tick_Label in list_Tick_Labels:
                        int_Count = 0
                        for str_Label in list_Tick_Labels:
                            bool_Tick_Label_Found = False
                            if str_Label == str(int_LifeHist__Min_Mating_Age):
                                str_Tick_Color = 'darkgrey'
                                bool_Tick_Label_Found = True
                            if str_Label == str(int_LifeHist__Max_Mating_Age):
                                str_Tick_Color = 'darkgrey'
                                bool_Tick_Label_Found = True
                            if str_Label == str(int_LifeHist__Max_Age):
                                str_Tick_Color = 'red'
                                bool_Tick_Label_Found = True
                            if not bool_Tick_Label_Found:
                                str_Tick_Color = 'black'
                            pass
                            list_Tick_Label_Obj[int_Count].set_color(str_Tick_Color) 
                            int_Count += 1               
                        pass
                    pass
                pass
            pass
            
            nparray_Minor_Ticks_X = ax1.xaxis.get_minorticklocs()
            #nparray_Minor_Ticks_X = ax1.xaxis.get_majorticklocs()
            if len(nparray_Minor_Ticks_X) > 1:     
                float_Minor_Ticks_X_First = nparray_Minor_Ticks_X[0]
                float_Minor_Ticks_X_Last = nparray_Minor_Ticks_X[-1]
                float_Minor_Ticks_X_Interval = 1
                nparray_Minor_Ticks_X = numpy.arange(float_Minor_Ticks_X_First, float_Minor_Ticks_X_Last, float_Minor_Ticks_X_Interval)                                              
                ax1.set_xticks(nparray_Minor_Ticks_X, minor=True)
            pass
            nparray_Major_Ticks_Y = ax1.yaxis.get_majorticklocs()
            if len(nparray_Major_Ticks_Y) > 1: 
                float_Major_Ticks_Y_First = nparray_Major_Ticks_Y[0]
                float_Major_Ticks_Y_Last = nparray_Major_Ticks_Y[-1] #nparray_Major_Ticks_Y[-1]
                int_Y_Axis_Max_Digits = len(str(int(int_Y_Axis_Max)))
                float_Major_Ticks_Y_Interval = 10
                if int_Y_Axis_Max_Digits <= 2:
                    float_Major_Ticks_Y_Interval = 1
                elif int_Y_Axis_Max_Digits <= 3:
                    if int_Y_Axis_Max <= 250:
                        float_Major_Ticks_Y_Interval = 25
                    elif int_Y_Axis_Max <= 500:
                        float_Major_Ticks_Y_Interval = 50
                    elif int_Y_Axis_Max < 1000:
                        float_Major_Ticks_Y_Interval = 100
                elif int_Y_Axis_Max_Digits <= 4:
                    if int_Y_Axis_Max <= 2500:
                        float_Major_Ticks_Y_Interval = 250
                    if int_Y_Axis_Max <= 5000:
                        float_Major_Ticks_Y_Interval = 500
                    elif int_Y_Axis_Max < 10000:
                        float_Major_Ticks_Y_Interval = 1000
                elif int_Y_Axis_Max_Digits <= 5:
                    if int_Y_Axis_Max <= 50000:
                        float_Major_Ticks_Y_Interval = 2000
                    elif int_Y_Axis_Max < 100000:
                        float_Major_Ticks_Y_Interval = 5000
                elif int_Y_Axis_Max_Digits <= 6:
                    if int_Y_Axis_Max <= 500000:
                        float_Major_Ticks_Y_Interval = 20000
                    elif int_Y_Axis_Max < 1000000:
                        float_Major_Ticks_Y_Interval = 50000
                elif int_Y_Axis_Max_Digits <= 7:
                    if int_Y_Axis_Max <= 5000000:
                        float_Major_Ticks_Y_Interval = 2000000
                    elif int_Y_Axis_Max < 10000000:
                        float_Major_Ticks_Y_Interval = 5000000
                elif int_Y_Axis_Max_Digits <= 8:
                    if int_Y_Axis_Max <= 50000000:
                        float_Major_Ticks_Y_Interval = 20000000
                    elif int_Y_Axis_Max < 100000000:
                        float_Major_Ticks_Y_Interval = 50000000
                pass
                float_Major_Ticks_Y_Last = float_Major_Ticks_Y_Last + float_Major_Ticks_Y_Interval
                nparray_Major_Ticks_Y = numpy.arange(float_Major_Ticks_Y_First, float_Major_Ticks_Y_Last, float_Major_Ticks_Y_Interval)                                              
                ax1.set_yticks(nparray_Major_Ticks_Y)  
                ''' Set Y-Axis Max & Min variables '''
                int_Y_Axis_Min = nparray_Major_Ticks_Y[0]
                int_Y_Axis_Max = nparray_Major_Ticks_Y[-1]
                int_Y_Axis_Interval = float_Major_Ticks_Y_Interval
                                
            nparray_Minor_Ticks_Y = ax1.yaxis.get_minorticklocs()      
            if len(nparray_Minor_Ticks_Y) > 1: 
                float_Minor_Ticks_Y_First = nparray_Minor_Ticks_Y[0]
                float_Minor_Ticks_Y_Last = nparray_Minor_Ticks_Y[-1]
                float_Minor_Ticks_Y_Interval = 1
                nparray_Minor_Ticks_Y = numpy.arange(float_Minor_Ticks_Y_First, float_Minor_Ticks_Y_Last, float_Minor_Ticks_Y_Interval)                                              
                ax1.set_yticks(nparray_Minor_Ticks_Y, minor=True)                                  
            
                                                                  
                                                               
        pass
                                                  
        bool_Change_Grid = False
        if bool_Change_Grid:
            # and a corresponding grid                                                       
            
            ax1.grid(which='both')                                                            
            
            # or if you want differnet settings for the grids:                               
            ax1.grid(which='minor', alpha=0.2)                                                
            ax1.grid(which='major', alpha=0.5)   
        pass
    
        '''
        ~~~~~~~~~~~~~~~~~~
        Annotate points
        ~~~~~~~~~~~~~~~~~~
        '''
        bool_Annotate_Points = True
        if bool_Annotate_Points:
    
#             ''' Annotate Primary Y-Axis points '''
#             list_X_Axis_Primary = list(list_Primary_X_Axis)
#             #list_Y_Axis_Primary = list(list_Nx)
#             if int_Pop_Replicates == 1:
#                 ''' Not an average '''
#                 list_Y_Axis_Primary = list(list_Nx)
#             else:
#                 ''' An Average over multiple pop replicates '''
#                 list_Y_Axis_Primary = [round(x,2) for x in list_Nx]
#             pass
#             for a, b in zip(list_X_Axis_Primary, list_Y_Axis_Primary):    
#                 
#                 str_Annotation_colour = 'white'
#                 str_Annotation = '{:,}'.format(b).replace(',',' ')
#                 ax1.annotate(str_Annotation, fontsize=8, fontweight='bold', xy=(a,b), rotation=0, xytext=(0, -8), ha='center', textcoords='offset points', color=str_Annotation_colour)
#             pass
#     
            ''' Annotate Primary Y-Axis DX points '''
            list_X_Axis_Primary = list(list_Primary_X_Axis)
            #list_Y_Axis_Primary = list(list_Nx)
            list_Y_Axis_Primary = list(list_All)
            #list_Value = list(list_Dx)
            if int_Pop_Replicates == 1:
                ''' Not an average '''
                #list_Y_Axis_Primary = list(list_All)
                list_Value = list(list_Dx)
            else:
                ''' An Average over multiple pop replicates '''
                #list_Y_Axis_Primary = [round(x,2) for x in list_Nx]
                list_Value = [round(x,2) for x in list_Dx]
            pass
            for a, b, c in zip(list_X_Axis_Primary, list_Y_Axis_Primary, list_Value):    
                
                str_Annotation_colour = 'red'
                str_Annotation = '{:,}'.format(c).replace(',',' ')
                ax1.annotate(str_Annotation, fontsize=8, fontweight='bold', xy=(a,b), rotation=0, xytext=(0, +26), ha='center', textcoords='offset points', color=str_Annotation_colour)
            pass
            ''' Annotate Primary Y-Axis BX points '''
            list_X_Axis_Primary = list(list_Primary_X_Axis)
            #list_Y_Axis_Primary = list(list_Nx)
            #list_Value = list(list_Bx)
            if int_Pop_Replicates == 1:
                ''' Not an average '''
                #list_Y_Axis_Primary = list(list_All)
                list_Value = list(list_Bx)
            else:
                ''' An Average over multiple pop replicates '''
                #list_Y_Axis_Primary = [round(x,2) for x in list_Nx]
                list_Value = [round(x,2) for x in list_Bx]
            pass
            for a, b, c in zip(list_X_Axis_Primary, list_Y_Axis_Primary, list_Value):    
                
                str_Annotation_colour = 'grey'
                str_Annotation = '{:,}'.format(c).replace(',',' ')
                ax1.annotate(str_Annotation, fontsize=8, fontweight='bold', xy=(a,b), rotation=0, xytext=(0, +16), ha='center', textcoords='offset points', color=str_Annotation_colour)
            pass
            ''' Annotate Primary Y-Axis NX points '''
            list_X_Axis_Primary = list(list_Primary_X_Axis)
            #list_Y_Axis_Primary = list(list_Nx)
            #list_Value = list(list_Nx)
            if int_Pop_Replicates == 1:
                ''' Not an average '''
                #list_Y_Axis_Primary = list(list_All)
                list_Value = list(list_Nx)
            else:
                ''' An Average over multiple pop replicates '''
                #list_Y_Axis_Primary = [round(x,2) for x in list_Nx]
                list_Value = [round(x,2) for x in list_Nx]
            pass
            for a, b, c in zip(list_X_Axis_Primary, list_Y_Axis_Primary, list_Value):    
                
                str_Annotation_colour = 'blue'
                str_Annotation = '{:,}'.format(c).replace(',',' ')
                ax1.annotate(str_Annotation, fontsize=8, fontweight='bold', xy=(a,b), rotation=0, xytext=(0, +6), ha='center', textcoords='offset points', color=str_Annotation_colour)
            pass
        pass
    
        bool_Annotation_Headings = False
        if bool_Annotation_Headings:
            ''' Annotate - Pop Size N '''
            int_Pop_Size__N = df_1[str_Col_Name_AgeNe__Sim_Pop_Size].iloc[0]  
            int_X_Axis_Primary = int_X_Axis_Max / 2   
            int_Y_Axis_Primary_Offset = (int_Y_Axis_Interval / 3)*-1 #int_Y_Axis_Interval*1                    
            int_Y_Axis_Primary = int_Y_Axis_Max + int_Y_Axis_Primary_Offset
            a, b = int_X_Axis_Primary, int_Y_Axis_Primary        
            str_Annotation_colour = 'darkgrey'
            str_Value = '{:,}'.format(int_Pop_Size__N).replace(',',' ')
            str_Text = 'Total population size (N): ' + str_Value
            str_Annotation = '{:}'.format(str_Text)
            ax1.annotate(str_Annotation, fontsize=12, fontweight='bold', xy=(a,b), rotation=0, xytext=(0, 0), ha='center', textcoords='offset points', color=str_Annotation_colour)
       
            ''' Annotate - Adult Po Size Nc '''
            int_AgeNe__Adult_Pop_Size__Nx_Adults__Nc = int(df_1[str_Col_Name_AgeNe__Adult_Pop_Size__Nx_Nc_Adults].iloc[0])  
            int_X_Axis_Primary = int_X_Axis_Max / 2   
            int_Y_Axis_Primary_Offset = (int_Y_Axis_Interval / 1.0)*-1 #int_Y_Axis_Interval*1                    
            int_Y_Axis_Primary = int_Y_Axis_Max + int_Y_Axis_Primary_Offset
            a, b = int_X_Axis_Primary, int_Y_Axis_Primary        
            str_Annotation_colour = 'darkgrey'
            str_Value = '{:,}'.format(int_AgeNe__Adult_Pop_Size__Nx_Adults__Nc).replace(',',' ')
            str_Text = 'Adult population size (Nc): ' + str_Value
            str_Annotation = '{:}'.format(str_Text)
            ax1.annotate(str_Annotation, fontsize=12, fontweight='bold', xy=(a,b), rotation=0, xytext=(0, 0), ha='center', textcoords='offset points', color=str_Annotation_colour)
       
        pass
    
        bool_Text_Boxes = False
        if bool_Text_Boxes:
      
            ''' Annotate Primary X-Axis points - Min Mating age '''
            int_LifeHist__Min_Mating_Age = df_3[str_Colname__str_LifeHist__Min_Mating_Age].iloc[0]
            int_X_Axis_Primary_Offset = 0  
            list_X_Axis_Primary = int_LifeHist__Min_Mating_Age + int_X_Axis_Primary_Offset 
            int_Y_Axis_Primary_Offset = -18                         
            list_Y_Axis_Primary = 0 + int_Y_Axis_Primary_Offset
            a, b = list_X_Axis_Primary, list_Y_Axis_Primary        
            str_Annotation_colour = 'darkgrey'
            str_Text = a #' Min. mating age: ' + str(int(int_LifeHist__Min_Mating_Age))
            str_Annotation = '{:}'.format(str_Text)
            #ax1.annotate(str_Annotation, fontsize=14, fontweight='bold', xy=(a,b), rotation=0, xytext=(0, -14), ha='center', textcoords='offset points', color=str_Annotation_colour)
            ax1.text(a, b, str_Annotation, fontsize=13, fontweight='bold', color=str_Annotation_colour, ha='center', bbox=dict(facecolor='white', edgecolor='none'))

            ''' Annotate Primary X-Axis points - Max Mating age '''
            int_LifeHist__Max_Mating_Age = df_3[str_Colname__str_LifeHist__Max_Mating_Age].iloc[0]
            int_X_Axis_Primary_Offset = 0  
            list_X_Axis_Primary = int_LifeHist__Max_Mating_Age + int_X_Axis_Primary_Offset
            int_Y_Axis_Primary_Offset = -18                         
            list_Y_Axis_Primary = 0 + int_Y_Axis_Primary_Offset
            a, b = list_X_Axis_Primary, list_Y_Axis_Primary        
            str_Annotation_colour = 'darkgrey'
            str_Text = a
            str_Annotation = '{:}'.format(str_Text)
            ax1.text(a, b, str_Annotation, fontsize=13, fontweight='bold', color=str_Annotation_colour, ha='center', bbox=dict(facecolor='white', edgecolor='none'))

            ''' Annotate Primary X-Axis points - Max age '''
            int_LifeHist__Max_Age = df_3[str_Colname__str_LifeHist__Max_Age].iloc[0]
            int_X_Axis_Primary_Offset = 0
            int_X_Axis_Primary = int_LifeHist__Max_Age + int_X_Axis_Primary_Offset
            int_Y_Axis_Primary_Offset = -18                       
            int_Y_Axis_Primary = 0 + int_Y_Axis_Primary_Offset
            a, b = int_X_Axis_Primary, int_Y_Axis_Primary        
            str_Annotation_colour = 'red'
            str_Text = a
            str_Annotation = '{:}'.format(str_Text)
            ax1.text(a, b, str_Annotation, fontsize=13, fontweight='bold', color=str_Annotation_colour, ha='center', bbox=dict(facecolor='white', edgecolor='none'))            
        pass              
        #DEBUG_ON
        ''' Required to change background of INTERACTIVE WINDOW only'''
        if bool_Plot_Theme__Dark_Blue_1:
            pyplot_Fig_Patch = pyplot_Fig.patch
            pyplot_Fig_Patch.set_facecolor('darkblue') # works with plt.show().  
        pass
        #matplotlib__pyplot.show()
        #DEBUG_OFF
        
                                
        return pyplot_Fig

    
    '''
    -------------------------------------------------------------
    Plot EXPERIMENT_Parent_Offspring_Ne_2 & AgeNe Sim Per Replicate EOR SUMMARISED Results
    -------------------------------------------------------------
    '''

    def func__Plot_EXPERIMENT_Parent_Offspring_Ne_2_And_AgeNe_Sim_Demographic_Population_Profile__Get_Data(self, str_Search_Path):

        boolSuccess = False
       
        '''
        -------------------------------
        Specify Final Output File
        -------------------------------
        '''
        ''' Output plot '''
        str_Excel_Input_Colname_Prefix = globalsSS.Excel_Results_File_Details.static_Excel_Colname_Prefix__AgeNe_Sim_Summarise_ALL_PF__Summary_Results
        str_Excel_Input_FileName =  globalsSS.Excel_Results_File_Details.static_Excel_FileName__AgeNe_Sim_Summarise_ALL_PF__Summary_Results
        
#         str_Plot_Output_File_1 = self.obj_SSParams.strOutputLocation_CumulativeRun_Path + '\\' + self.obj_SSParams.strUniqueRunID + '_' + str_Excel_Input_FileName + '_' + str_Excel_Input_Colname_Prefix + '.png'
#         str_Plot_Output_File_2 = self.obj_SSParams.strOutputLocation_CumulativeRun_Path + '\\' + self.obj_SSParams.strUniqueRunID + '_' + str_Excel_Input_FileName + '_' + str_Excel_Input_Colname_Prefix + '.pdf'
        str_Plot_Output_File_1 = str_Search_Path + '\\' + self.obj_SSParams.strUniqueRunID + '_' + str_Excel_Input_FileName + '_' + str_Excel_Input_Colname_Prefix + '.png'
        str_Plot_Output_File_2 = str_Search_Path + '\\' + self.obj_SSParams.strUniqueRunID + '_' + str_Excel_Input_FileName + '_' + str_Excel_Input_Colname_Prefix + '.pdf'

        '''
        -------------------------------
        Specify Excel Input file
        -------------------------------
        '''        
        str_Input_FileName = '*' + str_Excel_Input_FileName + '*.xlsx'
        str_File_Search_Pattern = str_Input_FileName
        
        '''
        -------------------------------
        Import Excel Data to dataframee
        -------------------------------
        '''
        '''
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~
        Get & Process Input SHEET
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~
        '''
        str_Input_Excel_Sheet_Name = globalsSS.Excel_Results_File_Details.static_Excel_Colname_Prefix__AgeNe_Sim_Summarise_ALL_PF__Summary_Results

        self.obj_Log_Default.info('Dataframing results for: ' + str_Input_FileName + ' and for SHEET: ' + str_Input_Excel_Sheet_Name) 

        bool_File_1_Located = False
        with FileHandler() as obj_FileHandler:
            bool_File_1_Located, list_Path_And_Files = obj_FileHandler.func_Locate_Files(str_Search_Path, str_File_Search_Pattern)
       
        if bool_File_1_Located:
            
            '''Process Results'''
            list_DF_1s = []            
            for str_Path_And_File in list_Path_And_Files:
                
                '''Get the data from the excel files with the specified sheet'''
                xl = pandas.ExcelFile(str_Path_And_File)
                df_1 = xl.parse(str_Input_Excel_Sheet_Name)
                list_DF_1s.append(df_1)
                
            pass

            ''' concatinate the dfs '''
            df_Aggregate = pandas.DataFrame()
            for df_New in list_DF_1s:
                '''log the results'''
                #str_Df = df_New.to_string()
                #self.obj_Log_Debug.debug('Results dataframe NEW: %s' % str_Df)
                
                #Concat DFs - Tried df.append() but it wont work
                df_Aggregate = pandas.concat([df_Aggregate,df_New], ignore_index=True)
                
                #str_Df = df_Aggregate.to_string()
                #self.obj_Log_Debug.debug('Results dataframe AGGREGATE: %s' % str_Df)

            pass

            #DEBUG_ON
            #str_Df = df_Aggregate.to_string()
            #self.obj_Log_Debug.debug('Results dataframe AGGREGATE 1: %s' % str_Df)
            #DEBUG_OFF
            
            df1 = df_Aggregate 
        else:
            self.obj_Log_Default.error('File specified could not be located; str_Search_Path = ' + str_Search_Path + '; strFileSearchPattern = ' + str_File_Search_Pattern)
        pass
    
        '''
        -------------------------------
        Get More Data
        -------------------------------
        '''
        '''
        -------------------------------
        Specify Excel Input file 2
        -------------------------------
        '''        
        #str_Excel_Input_Colname_Prefix = globalsSS.Excel_Results_File_Details.static_Excel_Colname_Prefix__EXPERIMENT_Parent_Offspring_Ne_1__Summary_Results
        str_Excel_Input_FileName =  globalsSS.Excel_Results_File_Details.static_Excel_FileName__EXPERIMENT_Parent_Offspring_Ne_2__Summary_Results
 
        str_Input_FileName = '*' + str_Excel_Input_FileName + '*.xlsx'
        str_File_Search_Pattern = str_Input_FileName
        
        '''
        -------------------------------
        Import Excel Data to dataframee
        -------------------------------
        '''
        '''
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~
        Get & Process Input SHEET
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~
        '''
        str_Input_Excel_Sheet_Name = globalsSS.Excel_Results_File_Details.static_Excel_SheetName__EXPERIMENT_Parent_Offspring_Ne_2__Summary_Results

        self.obj_Log_Default.info('Dataframing results for: ' + str_Input_FileName + ' and for SHEET: ' + str_Input_Excel_Sheet_Name) 

        bool_File_2_Located = False
        with FileHandler() as obj_FileHandler:
            bool_File_2_Located, list_Path_And_Files = obj_FileHandler.func_Locate_Files(str_Search_Path, str_File_Search_Pattern)
       
        if bool_File_2_Located:
            
            '''Process Results'''
            list_DF_2s = []            
            for str_Path_And_File in list_Path_And_Files:
                
                '''Get the data from the excel files with the specified sheet'''
                xl = pandas.ExcelFile(str_Path_And_File)
                df_2 = xl.parse(str_Input_Excel_Sheet_Name)
                list_DF_2s.append(df_2)
                
            pass

            ''' concatinate the dfs '''
            df_Aggregate = pandas.DataFrame()
            for df_New in list_DF_2s:
                '''log the results'''
                #str_Df = df_New.to_string()
                #self.obj_Log_Debug.debug('Results dataframe NEW: %s' % str_Df)
                
                #Concat DFs - Tried df.append() but it wont work
                df_Aggregate = pandas.concat([df_Aggregate,df_New], ignore_index=True)
                
                #str_Df = df_Aggregate.to_string()
                #self.obj_Log_Debug.debug('Results dataframe AGGREGATE: %s' % str_Df)

            pass

            #DEBUG_ON
            #str_Df = df_Aggregate.to_string()
            #self.obj_Log_Debug.debug('Results dataframe AGGREGATE 1: %s' % str_Df)
            #DEBUG_OFF
            
            df2 = df_Aggregate 
        else:
            self.obj_Log_Default.error('File specified could not be located; str_Search_Path = ' + str_Search_Path + '; strFileSearchPattern = ' + str_File_Search_Pattern)
        pass


        '''
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~
        Transform the data
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~
        '''  
        if bool_File_1_Located and bool_File_2_Located:
            
            ''' Send the relevent DFs  '''
            list_DFs = [df1, df2]
     
            list_DFs = self.func__Plot_EXPERIMENT_Parent_Offspring_Ne_2_And_AgeNe_Sim_Demographic_Population_Profile__Transform_And_Process(str_Excel_Input_FileName, str_Excel_Input_Colname_Prefix, list_DFs)
            
        pass
    
                    
        return boolSuccess

    def func__Plot_EXPERIMENT_Parent_Offspring_Ne_2_And_AgeNe_Sim_Demographic_Population_Profile__Transform_And_Process(self, str_Excel_Input_FileName, str_Excel_Input_Colname_Prefix, list_DFs):
        
        self.obj_Log_Default.info('Transforming data')

        '''
        -----------------------------
        Specify DFs
        -----------------------------
        '''
        df_1 = list_DFs[0]
        df_2 = list_DFs[1]
           
        with SSResults(self.obj_SSParams) as obj_Results:
            str_Group_Key_Mating_Count_Replicate_Total = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Mating_Count_Replicate_Total
            str_Col_Name_Mating_Count_Replicate_Total_DF1 = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Group_Key_Mating_Count_Replicate_Total)
            str_Col_Name_Mating_Count_Replicate_Total_DF2 = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Group_Key_Mating_Count_Replicate_Total)
        pass

        ''' Get all the UNIQUE Mating_Count_Replicate_Total values '''
        nparray_Mating_Count_Replicate_Total = numpy.unique(df_1[str_Col_Name_Mating_Count_Replicate_Total_DF1])
        
        for int_Mating_Count_Replicate_Total in nparray_Mating_Count_Replicate_Total:

            '''
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~
            Transform
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~
            '''  
            self.obj_Log_Default.info('Transforming data for int_Mating_Count_Replicate_Total :' + str(int_Mating_Count_Replicate_Total))
                      
            ''' Subset the DF to get the correct value '''
            df_1_Subset = df_1[(df_1[str_Col_Name_Mating_Count_Replicate_Total_DF1]==int_Mating_Count_Replicate_Total)]
            
            #DEBUG_ON
            #str_Df = df_1_Subset.to_string()
            #self.obj_Log_Debug.debug('Results dataframe df 1: %s' % str_Df)
            #raw_input('pausing')
            #DEBUG_OFF    
            
            df_2_Subset = df_2[(df_2[str_Col_Name_Mating_Count_Replicate_Total_DF2]==int_Mating_Count_Replicate_Total)]
            
            #DEBUG_ON
            #str_Df = df_2_Subset.to_string()
            #self.obj_Log_Debug.debug('Results dataframe df 2: %s' % str_Df)
            #raw_input('pausing')
            #DEBUG_OFF            

            list_DFs = [df_1_Subset, df_2_Subset] 
            
            '''
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~
            Plot
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~
            '''    
            
            ''' Send the relevent DFs to the plotter '''
            #list_DFs = [df1, df2]
            
            bool_Interactive_Display = False
            ''' Specify the number of figure copies and their specs '''
            dict_Fig_Copies = {
                                1:{'ColourScheme':'Default', 'Transparent':False, 'Interactive_Display':bool_Interactive_Display, 'Save_PNG': True, 'Save_PDF': False}
                               #,2:{'ColourScheme':'Dark_Blue', 'Transparent':True, 'Interactive_Display':bool_Interactive_Display,'Save_PNG': True, 'Save_PDF': False}
                               }
            
            for key_Dict_Fig_Copy_Params, value_Dict_Fig_Copy_Params in dict_Fig_Copies.iteritems():
                ''' Plot the figure '''
                pyplot_Fig_1 = self.func__Plot_EXPERIMENT_Parent_Offspring_Ne_2_And_AgeNe_Sim_Demographic_Population_Profile__Plot(list_DFs, int_Mating_Count_Replicate_Total, value_Dict_Fig_Copy_Params)            

                '''
                ~~~~~~~~~~~~~~~~~~~~~~~~~~~
                Save results
                ~~~~~~~~~~~~~~~~~~~~~~~~~~~
                '''    
                str_Plot_Output_Path = self.obj_SSParams.strOutputLocation_CumulativeRun_Path + '\\EXP2_Plots\\'
                ''' Create path if it doesnt exist '''
                with FileHandler() as obj_File_Op:
                    obj_File_Op.method_Create_Path(str_Plot_Output_Path)
                pass                
                str_Plot_Output_FileName = self.obj_SSParams.strUniqueRunID + '_' + str_Excel_Input_FileName + '_' + str_Excel_Input_Colname_Prefix + '_' + str(int_Mating_Count_Replicate_Total)
                str_Plot_Output_Path_And_FileName = str_Plot_Output_Path + str_Plot_Output_FileName
                if value_Dict_Fig_Copy_Params['Save_PNG'] == True:
                    str_Plot_Output_Path_And_FileName += '_' + str(key_Dict_Fig_Copy_Params) + '.png'
                    bool_Transparent = value_Dict_Fig_Copy_Params['Transparent']
                    pyplot_Fig_1.savefig(str_Plot_Output_Path_And_FileName, bbox_inches='tight', dpi=400, transparent=bool_Transparent)
                pass
                if value_Dict_Fig_Copy_Params['Save_PDF'] == True:
                    str_Plot_Output_Path_And_FileName += '_' + str(key_Dict_Fig_Copy_Params) + '.pdf'
                    pyplot_Fig_1.savefig(str_Plot_Output_Path_And_FileName, bbox_inches='tight')
                pass
        
                '''
                ~~~~~~~~~~~~~~~~~~~~~~~~~~~
                Display results
                ~~~~~~~~~~~~~~~~~~~~~~~~~~~
                '''
                if value_Dict_Fig_Copy_Params['Interactive_Display'] == True:           
                    matplotlib__pyplot.show()
                pass
            pass
            ''' Close the plot '''
            matplotlib__pyplot.close(pyplot_Fig_1) 
        pass
                  
        pass        
        
        
        return list_DFs
    
    def func__Plot_EXPERIMENT_Parent_Offspring_Ne_2_And_AgeNe_Sim_Demographic_Population_Profile__Plot(self, list_DFs, int_Mating_Count_Replicate_Total, dict_Fig_Copy):
        
        self.obj_Log_Default.info('Creating figure')
        
        bool_Plot_Theme__Default = False
        bool_Plot_Theme__Dark_Blue_1 = False
        
        if dict_Fig_Copy['ColourScheme'] == 'Dark_Blue':
            bool_Plot_Theme__Dark_Blue_1 = True
        else:
            bool_Plot_Theme__Default = True
        pass
    
#         if bool_Plot_Theme__Dark_Blue_1:
#             bool_Plot_Theme__Default = False
#         else:
#             bool_Plot_Theme__Default = True
#         pass
            
        int_Plot_Line_Width = 4
        '''
        -----------------------------
        Specify DFs
        -----------------------------
        '''
        df_1 = list_DFs[0]
        df_2 = list_DFs[1]
        
        
        '''
        -----------------------------
        Specify X-Axis
        -----------------------------
        '''
        with SSResults(self.obj_SSParams) as obj_Results:
            str_Key_AgeNe__Age = globalsSS.Colnames_AgeNe_Results.static_str_Colname_Age
            str_Col_Name_AgeNe__Age = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Age)
        pass
        str_X_Axis_df_1_Colname = str_Col_Name_AgeNe__Age

        '''
        -----------------------------
        Create figure
        -----------------------------
        '''
        # default scale is 1 in your original case, scales with other cases:
        int_X_Axis_Length = len(df_1[str_X_Axis_df_1_Colname])
        int_Width_Scale = int_X_Axis_Length/10 
        int_Width_Control = 6  #6 - About perfect for PowerPoint
        int_Height_Control = 8 #8 - About perfect for PowerPoint
        figsize = (int_Width_Control*int_Width_Scale,int_Height_Control) # fig size in inches (width,height)
        pyplot_Fig = matplotlib__pyplot.figure(figsize = figsize)       
        
        #pyplot_Fig = matplotlib__pyplot.figure()
        
        '''
        -----------------------------
        Plot Line - Nx - Survivors per age cohort
        -----------------------------
        ''' 
        with SSResults(self.obj_SSParams) as obj_Results:
            str_Key_AgeNe__Nx = globalsSS.Colnames_AgeNe_Results.static_str_Colname_Nx
            str_Col_Name_AgeNe__Nx = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Nx)
        pass
        str_Y_Axis_df_1_Colname = str_Col_Name_AgeNe__Nx 
        
        str_Plot_Line_Color = 'blue'
        pyplot_Line_1, = matplotlib__pyplot.plot(df_1[str_X_Axis_df_1_Colname], df_1[str_Y_Axis_df_1_Colname], color=str_Plot_Line_Color, linewidth=int_Plot_Line_Width, figure=pyplot_Fig)

        '''
        -----------------------------
        Plot Line - Bx - Offspring per age cohort
        -----------------------------
        '''         
        with SSResults(self.obj_SSParams) as obj_Results:
            str_Key_AgeNe__Bx = globalsSS.Colnames_AgeNe_Results.static_str_Colname_Bx
            str_Col_Name_AgeNe__Bx = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Bx)
        pass
        str_Y_Axis_df_1_Colname = str_Col_Name_AgeNe__Bx 
        
        if bool_Plot_Theme__Dark_Blue_1:
            str_Plot_Line_Color = 'white'
        else:
            str_Plot_Line_Color = 'grey'
        pass
        pyplot_Line_2, = matplotlib__pyplot.plot(df_1[str_X_Axis_df_1_Colname], df_1[str_Y_Axis_df_1_Colname], color=str_Plot_Line_Color, linewidth=int_Plot_Line_Width, figure=pyplot_Fig)

        '''
        -----------------------------
        Plot Line - Dx - Deaths per age cohort
        -----------------------------
        '''         
        with SSResults(self.obj_SSParams) as obj_Results:
            str_Key_AgeNe__Dx = globalsSS.Colnames_AgeNe_Results.static_str_Colname_Dx
            str_Col_Name_AgeNe__Dx = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Dx)
        pass
        str_Y_Axis_df_1_Colname = str_Col_Name_AgeNe__Dx 
        
        str_Plot_Line_Color = 'red'
        pyplot_Line_3, = matplotlib__pyplot.plot(df_1[str_X_Axis_df_1_Colname], df_1[str_Y_Axis_df_1_Colname], color=str_Plot_Line_Color, linewidth=int_Plot_Line_Width, figure=pyplot_Fig)

        '''
        -----------------------------
        Plot Line - AgeNe N Adults - ALL Adults 
        -----------------------------
        '''
        '''
        Font properties for subsequent text
        '''
        pyplot_Fig_FontProperties__Base = matplotlib__fontmanager.FontProperties(size=16)
                 
        with SSResults(self.obj_SSParams) as obj_Results:
            str_Key_AgeNe__Adult_Pop_Size__Nx_N_Adults = globalsSS.Colnames_AgeNe_Results.static_str_Colname_Nx_N_Adults
            str_Col_Name_AgeNe__Adult_Pop_Size__Nx_N_Adults = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Adult_Pop_Size__Nx_N_Adults)

        pass
        str_Y_Axis_df_1_Colname = str_Col_Name_AgeNe__Adult_Pop_Size__Nx_N_Adults 

#         pyplot_Line_4, = matplotlib__pyplot.plot(df_1[str_X_Axis_df_1_Colname], df_1[str_Y_Axis_df_1_Colname], linestyle='--', linewidth=2, figure=pyplot_Fig)
#         
#         ''' Get the value for display '''
#         int_AgeNe__Adult_Pop_Size__Nx_Adults__Nc = df_1[str_Y_Axis_df_1_Colname].iloc[0]
# 
#         ''' Add the description to the end of the line '''
#         str_Line_Ending_Text = 'AgeNe Nc (' + str(int(int_AgeNe__Adult_Pop_Size__Nx_Adults__Nc)) + ')'                             
#         matplotlib__pyplot.text(df_1[str_X_Axis_df_1_Colname].iloc[-1], df_1[str_Y_Axis_df_1_Colname].iloc[-1], str_Line_Ending_Text)

        ''' if a horizontal plot line - Get the value for plotting and display '''
        int_AgeNe__Adult_Pop_Size__Nx_Adults__N = int(df_1[str_Y_Axis_df_1_Colname].iloc[0])
        y_Value = int_AgeNe__Adult_Pop_Size__Nx_Adults__N
        
        ''' if a horizontal plot line - Get the X and Y values to actually plot ''' 
        list_X_Values = df_1[str_X_Axis_df_1_Colname].tolist()
        int_X_Values_Count = len(list_X_Values)
        int_X_Values_To_Remove = int(int_X_Values_Count*0.8) #Remove a % of the X-Axis values
        list_X_Values = list_X_Values[:-1*int_X_Values_To_Remove] #Cut the list down to size
        list_Y_Values = [y_Value for x in list_X_Values] #Create the Y-Values list

        ''' Produce the plot line '''
        pyplot_Line_4, = matplotlib__pyplot.plot(list_X_Values, list_Y_Values, linestyle='-', linewidth=int_Plot_Line_Width, figure=pyplot_Fig)
        
        ''' Add the description to the end of the line '''
        x_Pos = len(list_X_Values) + 0.25
        y_Pos = y_Value
        str_Line_Ending_Text = 'AgeNe N Adults (' + str(int(y_Value)) + ')'        
        
        if bool_Plot_Theme__Dark_Blue_1:
            str_Font_Colour = 'white'
            pyplot_Fig_FontProperties = pyplot_Fig_FontProperties__Base.copy()
        pass
        
        if bool_Plot_Theme__Default:                             
            matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text)
        else:
            matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text, color=str_Font_Colour, fontproperties=pyplot_Fig_FontProperties)
        pass
    
        '''
        -----------------------------
        Plot Line - AgeNe Nc - Fertile Adults 
        -----------------------------
        '''
        '''
        Font properties for subsequent text
        '''
        pyplot_Fig_FontProperties__Base = matplotlib__fontmanager.FontProperties(size=16)
                 
        with SSResults(self.obj_SSParams) as obj_Results:
            str_Key_AgeNe__Adult_Pop_Size__Nx_Nc_Adults = globalsSS.Colnames_AgeNe_Results.static_str_Colname_Nx_Nc_Adults
            str_Col_Name_AgeNe__Adult_Pop_Size__Nx_Nc_Adults = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Adult_Pop_Size__Nx_Nc_Adults)

        pass
        str_Y_Axis_df_1_Colname = str_Col_Name_AgeNe__Adult_Pop_Size__Nx_Nc_Adults 

#         pyplot_Line_4, = matplotlib__pyplot.plot(df_1[str_X_Axis_df_1_Colname], df_1[str_Y_Axis_df_1_Colname], linestyle='--', linewidth=2, figure=pyplot_Fig)
#         
#         ''' Get the value for display '''
#         int_AgeNe__Adult_Pop_Size__Nx_Adults__Nc = df_1[str_Y_Axis_df_1_Colname].iloc[0]
# 
#         ''' Add the description to the end of the line '''
#         str_Line_Ending_Text = 'AgeNe Nc (' + str(int(int_AgeNe__Adult_Pop_Size__Nx_Adults__Nc)) + ')'                             
#         matplotlib__pyplot.text(df_1[str_X_Axis_df_1_Colname].iloc[-1], df_1[str_Y_Axis_df_1_Colname].iloc[-1], str_Line_Ending_Text)

        ''' if a horizontal plot line - Get the value for plotting and display '''
        int_AgeNe__Adult_Pop_Size__Nx_Adults__Nc = int(df_1[str_Y_Axis_df_1_Colname].iloc[0])
        y_Value = int_AgeNe__Adult_Pop_Size__Nx_Adults__Nc
        
        ''' if a horizontal plot line - Get the X and Y values to actually plot ''' 
        list_X_Values = df_1[str_X_Axis_df_1_Colname].tolist()
        int_X_Values_Count = len(list_X_Values)
        int_X_Values_To_Remove = int(int_X_Values_Count*0.8) #Remove a % of the X-Axis values
        list_X_Values = list_X_Values[:-1*int_X_Values_To_Remove] #Cut the list down to size
        list_Y_Values = [y_Value for x in list_X_Values] #Create the Y-Values list

        ''' Produce the plot line '''
        pyplot_Line_4, = matplotlib__pyplot.plot(list_X_Values, list_Y_Values, linestyle='-', linewidth=int_Plot_Line_Width, figure=pyplot_Fig)
        
        ''' Add the description to the end of the line '''
        x_Pos = len(list_X_Values) + 0.25
        y_Pos = y_Value
        str_Line_Ending_Text = 'AgeNe Nc (' + str(int(y_Value)) + ')'        
        
        if bool_Plot_Theme__Dark_Blue_1:
            str_Font_Colour = 'white'
            pyplot_Fig_FontProperties = pyplot_Fig_FontProperties__Base.copy()
        pass
        
        if bool_Plot_Theme__Default:                             
            matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text)
        else:
            matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text, color=str_Font_Colour, fontproperties=pyplot_Fig_FontProperties)
        pass
    
        '''
        -----------------------------
        Plot Line - AgeNe Ne Demographic
        -----------------------------
        '''         
        with SSResults(self.obj_SSParams) as obj_Results:
            str_Key_AgeNe__Ne_Demo = globalsSS.Colnames_AgeNe_Results.static_str_Colname_NeDemo
            str_Col_Name_AgeNe__Ne_Demo = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Ne_Demo)
        pass
        str_Y_Axis_df_1_Colname = str_Col_Name_AgeNe__Ne_Demo 

#         pyplot_Line_5, = matplotlib__pyplot.plot(df_1[str_X_Axis_df_1_Colname], df_1[str_Y_Axis_df_1_Colname], linestyle='--', linewidth=2, figure=pyplot_Fig)
#         
#         ''' Get the value for display '''
#         float_NeDemo = df_1[str_Y_Axis_df_1_Colname].iloc[0]
# 
#         ''' Add the description to the end of the line '''
#         str_Line_Ending_Text = 'AgeNe Ne Demo (' + str(int(float_NeDemo)) + ')'                             
#         matplotlib__pyplot.text(df_1[str_X_Axis_df_1_Colname].iloc[-1], df_1[str_Y_Axis_df_1_Colname].iloc[-1], str_Line_Ending_Text)

        ''' if a horizontal plot line - Get the value for plotting and display '''
        float_NeDemo = df_1[str_Y_Axis_df_1_Colname].iloc[0]
        y_Value = Decimal(float_NeDemo)
        
        ''' if a horizontal plot line - Get the X and Y values to actually plot ''' 
        list_X_Values = df_1[str_X_Axis_df_1_Colname].tolist()
        int_X_Values_Count = len(list_X_Values)
        int_X_Values_To_Remove = int(int_X_Values_Count*0.2) #Remove 20% of the X-Axis values
        list_X_Values = list_X_Values[:-1*int_X_Values_To_Remove] #Cut the list down to size
        list_Y_Values = [y_Value for x in list_X_Values] #Create the Y-Values list

        ''' Produce the plot line '''
        pyplot_Line_5, = matplotlib__pyplot.plot(list_X_Values, list_Y_Values, linestyle='-.', linewidth=int_Plot_Line_Width, figure=pyplot_Fig)
        
        ''' Add the description to the end of the line '''
        x_Pos = len(list_X_Values) + 0.25
        y_Pos = y_Value
        str_Line_Ending_Text = 'AgeNe Ne Demo (' + str(int(round(y_Value))) + ')'                             

        if bool_Plot_Theme__Dark_Blue_1:
            str_Font_Colour = 'white'
            pyplot_Fig_FontProperties = pyplot_Fig_FontProperties__Base.copy()
        pass
        
        if bool_Plot_Theme__Default:                             
            matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text)
        else:
            matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text, color=str_Font_Colour, fontproperties=pyplot_Fig_FontProperties)
 
        '''
        -----------------------------
        Plot Line - AgeNe Nb Demographic
        -----------------------------
        '''         
        with SSResults(self.obj_SSParams) as obj_Results:
            str_Key_AgeNe__Nb_Demo = globalsSS.Colnames_AgeNe_Results.static_str_Colname_NbDemo
            str_Col_Name_AgeNe__Nb_Demo = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Nb_Demo)
        pass
        str_Y_Axis_df_1_Colname = str_Col_Name_AgeNe__Nb_Demo 
        
        ''' if a horizontal plot line - Get the value for plotting and display '''
        float_NbDemo = df_1[str_Y_Axis_df_1_Colname].iloc[0]
        y_Value = Decimal(float_NbDemo)
        
        ''' if a horizontal plot line - Get the X and Y values to actually plot ''' 
        list_X_Values = df_1[str_X_Axis_df_1_Colname].tolist()
        int_X_Values_Count = len(list_X_Values)
        int_X_Values_To_Remove = int(int_X_Values_Count*0.2) #Remove 20% of the X-Axis values
        list_X_Values = list_X_Values[:-1*int_X_Values_To_Remove] #Cut the list down to size
        list_Y_Values = [y_Value for x in list_X_Values] #Create the Y-Values list

        ''' Produce the plot line '''
        pyplot_Line_6, = matplotlib__pyplot.plot(list_X_Values, list_Y_Values, linestyle='-.', linewidth=int_Plot_Line_Width, figure=pyplot_Fig)
        
        ''' Add the description to the end of the line '''
        x_Pos = len(list_X_Values) + 0.25
        y_Pos = y_Value
        str_Line_Ending_Text = 'AgeNe Nb Demo (' + str(int(round(y_Value))) + ')'                             

        if bool_Plot_Theme__Dark_Blue_1:
            str_Font_Colour = 'white'
            pyplot_Fig_FontProperties = pyplot_Fig_FontProperties__Base.copy()
        pass
        
        if bool_Plot_Theme__Default:                             
            matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text)
        else:
            matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text, color=str_Font_Colour, fontproperties=pyplot_Fig_FontProperties)
 
        '''
        -----------------------------
        Plot Line - Exp1 Potential Parents
        -----------------------------
        '''         
        with SSResults(self.obj_SSParams) as obj_Results:
            str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category
            str_Col_Name_Exp1__Exp1__str_Stats_Category = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__str_Stats_Category)

            str_Key_Exp1__Potential_Parents_PP = globalsSS.Colnames_Parent_Offspring_Stats_METHOD_2.static_Str_Colname_Potential_Parents_PP
            str_Col_Name_Exp1__Potential_Parents_PP = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__Potential_Parents_PP)

        pass
        str_Y_Axis_df_1_Colname = str_Col_Name_Exp1__Potential_Parents_PP 
            
        ''' Subset the DF to get the correct value '''
        str_Stats_Category = 'Full'
        df_2_Subset = df_2[(df_2[str_Col_Name_Exp1__Exp1__str_Stats_Category]==str_Stats_Category)]
        #float_PCrit = 0
        #df_2_Subset = df_2_Subset[(df_2[str_Col_Name_Exp1__Ne2_floatPCrit]==float_PCrit)]

        ''' if a horizontal plot line - Get the value for plotting and display '''        
        float_Exp1__Potential_Parents_PP = float(df_2_Subset[str_Y_Axis_df_1_Colname].iloc[0])
        y_Value = Decimal(float_Exp1__Potential_Parents_PP)
        
        ''' if a horizontal plot line - Get the X and Y values to actually plot ''' 
        list_X_Values = df_1[str_X_Axis_df_1_Colname].tolist()
        int_X_Values_Count = len(list_X_Values)
        int_X_Values_To_Remove = int(int_X_Values_Count*0.50) #Remove 20% of the X-Axis values
        list_X_Values = list_X_Values[:-1*int_X_Values_To_Remove] #Cut the list down to size
        list_Y_Values = [y_Value for x in list_X_Values] #Create the Y-Values list

        ''' Produce the plot line '''
        pyplot_Line_7, = matplotlib__pyplot.plot(list_X_Values, list_Y_Values, linestyle='-.', linewidth=int_Plot_Line_Width, figure=pyplot_Fig)
        
        ''' Add the description to the end of the line '''
        x_Pos = len(list_X_Values) + 0.25
        y_Pos = y_Value
        str_Line_Ending_Text = 'Exp1 NcPP ' + str(int(round(y_Value))) + ')'                             

        if bool_Plot_Theme__Dark_Blue_1:
            str_Font_Colour = 'white'
            pyplot_Fig_FontProperties = pyplot_Fig_FontProperties__Base.copy()
        pass
        
        if bool_Plot_Theme__Default:                             
            matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text)
        else:
            matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text, color=str_Font_Colour, fontproperties=pyplot_Fig_FontProperties)
 
        '''
        -----------------------------
        Plot Line - LDNe Full PCrit 0
        -----------------------------
        '''         
        with SSResults(self.obj_SSParams) as obj_Results:
            str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category
            str_Col_Name_Exp1__Exp1__str_Stats_Category = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__str_Stats_Category)

            str_Key_Exp1__Ne2_floatPCrit = globalsSS.Colnames_Ne2_Output.static_Str_Colname_Ne2_floatPCrit
            str_Col_Name_Exp1__Ne2_floatPCrit = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__Ne2_floatPCrit)

            str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe = globalsSS.Colnames_Ne2_Aggregation.static_Str_Colname_float_Total_Ne2_r_Sqrd_LDNe
            str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe)
        pass
        str_Y_Axis_df_1_Colname = str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe 

        ''' Subset the DF to get the correct value '''
        str_Stats_Category = 'Full'
        df_2_Subset = df_2[(df_2[str_Col_Name_Exp1__Exp1__str_Stats_Category]==str_Stats_Category)]
        float_PCrit = 0
        df_2_Subset = df_2_Subset[(df_2[str_Col_Name_Exp1__Ne2_floatPCrit]==float_PCrit)]

        ''' if a horizontal plot line - Get the value for plotting and display '''        
        float_Total_Ne2_r_Sqrd_LDNe = df_2_Subset[str_Y_Axis_df_1_Colname].iloc[0]
        y_Value = Decimal(float_Total_Ne2_r_Sqrd_LDNe)
        
        ''' if a horizontal plot line - Get the X and Y values to actually plot ''' 
        list_X_Values = df_1[str_X_Axis_df_1_Colname].tolist()
        int_X_Values_Count = len(list_X_Values)
        int_X_Values_To_Remove = int(int_X_Values_Count*0.1) #Remove 20% of the X-Axis values
        list_X_Values = list_X_Values[:-1*int_X_Values_To_Remove] #Cut the list down to size
        list_Y_Values = [y_Value for x in list_X_Values] #Create the Y-Values list

        ''' Produce the plot line '''
        pyplot_Line_8, = matplotlib__pyplot.plot(list_X_Values, list_Y_Values, linestyle='-.', linewidth=int_Plot_Line_Width, figure=pyplot_Fig)
        
        ''' Add the description to the end of the line '''
        x_Pos = len(list_X_Values) + 0.25
        y_Pos = y_Value
        str_Line_Ending_Text = 'LDNe ' + str_Stats_Category + ' (PC ' + str(float_PCrit) + '; ' + str(int(round(y_Value))) + ')'                             

        if bool_Plot_Theme__Dark_Blue_1:
            str_Font_Colour = 'white'
            pyplot_Fig_FontProperties = pyplot_Fig_FontProperties__Base.copy()
        pass
        
        if bool_Plot_Theme__Default:                             
            matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text)
        else:
            matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text, color=str_Font_Colour, fontproperties=pyplot_Fig_FontProperties)
 
        '''
        -----------------------------
        Plot Line - LDNe Large Mature PCrit 0
        -----------------------------
        '''         
        with SSResults(self.obj_SSParams) as obj_Results:
            str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category
            str_Col_Name_Exp1__Exp1__str_Stats_Category = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__str_Stats_Category)

            str_Key_Exp1__Ne2_floatPCrit = globalsSS.Colnames_Ne2_Output.static_Str_Colname_Ne2_floatPCrit
            str_Col_Name_Exp1__Ne2_floatPCrit = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__Ne2_floatPCrit)

            str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe = globalsSS.Colnames_Ne2_Aggregation.static_Str_Colname_float_Total_Ne2_r_Sqrd_LDNe
            str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe)
        pass
        str_Y_Axis_df_1_Colname = str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe 

        ''' Subset the DF to get the correct value '''
        str_Stats_Category = 'Large_Mature'
        df_2_Subset = df_2[(df_2[str_Col_Name_Exp1__Exp1__str_Stats_Category]==str_Stats_Category)]
        float_PCrit = 0
        df_2_Subset = df_2_Subset[(df_2[str_Col_Name_Exp1__Ne2_floatPCrit]==float_PCrit)]

        ''' if a horizontal plot line - Get the value for plotting and display '''        
        float_Total_Ne2_r_Sqrd_LDNe = df_2_Subset[str_Y_Axis_df_1_Colname].iloc[0]
        float_Total_Ne2_r_Sqrd_LDNe_LM = df_2_Subset[str_Y_Axis_df_1_Colname].iloc[0]
        y_Value = Decimal(float_Total_Ne2_r_Sqrd_LDNe)
        
        ''' if a horizontal plot line - Get the X and Y values to actually plot ''' 
        list_X_Values = df_1[str_X_Axis_df_1_Colname].tolist()
        int_X_Values_Count = len(list_X_Values)
        int_X_Values_To_Remove = int(int_X_Values_Count*0.5) #Remove 20% of the X-Axis values
        list_X_Values = list_X_Values[:-1*int_X_Values_To_Remove] #Cut the list down to size
        list_Y_Values = [y_Value for x in list_X_Values] #Create the Y-Values list

        ''' Produce the plot line '''
        pyplot_Line_9, = matplotlib__pyplot.plot(list_X_Values, list_Y_Values, linestyle='-.', linewidth=int_Plot_Line_Width, figure=pyplot_Fig)
        
        ''' Add the description to the end of the line '''
        x_Pos = len(list_X_Values) + 0.25
        y_Pos = y_Value
        str_Line_Ending_Text = 'LDNe ' + str_Stats_Category + ' (PC ' + str(float_PCrit) + '; ' + str(int(round(y_Value))) + ')'                             

        if bool_Plot_Theme__Dark_Blue_1:
            str_Font_Colour = 'white'
            pyplot_Fig_FontProperties = pyplot_Fig_FontProperties__Base.copy()
        pass
        
        if bool_Plot_Theme__Default:                             
            matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text)
        else:
            matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text, color=str_Font_Colour, fontproperties=pyplot_Fig_FontProperties)
     
        '''
        -----------------------------
        Plot Line - LDNe Large Embryo PCrit 0
        -----------------------------
        '''         
        with SSResults(self.obj_SSParams) as obj_Results:
            str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category
            str_Col_Name_Exp1__Exp1__str_Stats_Category = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__str_Stats_Category)

            str_Key_Exp1__Ne2_floatPCrit = globalsSS.Colnames_Ne2_Output.static_Str_Colname_Ne2_floatPCrit
            str_Col_Name_Exp1__Ne2_floatPCrit = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__Ne2_floatPCrit)

            str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe = globalsSS.Colnames_Ne2_Aggregation.static_Str_Colname_float_Total_Ne2_r_Sqrd_LDNe
            str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe)
        pass
        str_Y_Axis_df_1_Colname = str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe 

        ''' Subset the DF to get the correct value '''
        str_Stats_Category = 'Large_Embryo'
        df_2_Subset = df_2[(df_2[str_Col_Name_Exp1__Exp1__str_Stats_Category]=='Large_Embryo')]
        float_PCrit = 0
        df_2_Subset = df_2_Subset[(df_2[str_Col_Name_Exp1__Ne2_floatPCrit]==float_PCrit)]

        ''' if a horizontal plot line - Get the value for plotting and display '''
        float_Total_Ne2_r_Sqrd_LDNe = df_2_Subset[str_Y_Axis_df_1_Colname].iloc[0]
        y_Value = Decimal(float_Total_Ne2_r_Sqrd_LDNe)
        
        ''' if a horizontal plot line - Get the X and Y values to actually plot ''' 
        list_X_Values = df_1[str_X_Axis_df_1_Colname].tolist()
        int_X_Values_Count = len(list_X_Values)
        int_X_Values_To_Remove = int(int_X_Values_Count*0.9) #Remove 20% of the X-Axis values
        list_X_Values = list_X_Values[:-1*int_X_Values_To_Remove] #Cut the list down to size
        list_Y_Values = [y_Value for x in list_X_Values] #Create the Y-Values list

        ''' Produce the plot line '''
        pyplot_Line_10, = matplotlib__pyplot.plot(list_X_Values, list_Y_Values, linestyle='-.', linewidth=int_Plot_Line_Width, figure=pyplot_Fig)
        
        ''' Add the description to the end of the line '''
        x_Pos = len(list_X_Values) + 0.25
        y_Pos = y_Value
        str_Line_Ending_Text = 'LDNe ' + str_Stats_Category + ' (PC ' + str(float_PCrit) + '; ' + str(int(round(y_Value))) + ')'                             

        if bool_Plot_Theme__Dark_Blue_1:
            str_Font_Colour = 'white'
            pyplot_Fig_FontProperties = pyplot_Fig_FontProperties__Base.copy()
        pass
        
        if bool_Plot_Theme__Default:                             
            matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text)
        else:
            matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text, color=str_Font_Colour, fontproperties=pyplot_Fig_FontProperties)
     
        '''
        -----------------------------
        Plot Line - LDNe Small Mature PCrit 0
        -----------------------------
        '''         
        with SSResults(self.obj_SSParams) as obj_Results:
            str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category
            str_Col_Name_Exp1__Exp1__str_Stats_Category = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__str_Stats_Category)

            str_Key_Exp1__Ne2_floatPCrit = globalsSS.Colnames_Ne2_Output.static_Str_Colname_Ne2_floatPCrit
            str_Col_Name_Exp1__Ne2_floatPCrit = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__Ne2_floatPCrit)

            str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe = globalsSS.Colnames_Ne2_Aggregation.static_Str_Colname_float_Total_Ne2_r_Sqrd_LDNe
            str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe)
        pass
        str_Y_Axis_df_1_Colname = str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe 

        ''' Subset the DF to get the correct value '''
        str_Stats_Category = 'Small_Mature'
        df_2_Subset = df_2[(df_2[str_Col_Name_Exp1__Exp1__str_Stats_Category]==str_Stats_Category)]
        float_PCrit = 0
        df_2_Subset = df_2_Subset[(df_2[str_Col_Name_Exp1__Ne2_floatPCrit]==float_PCrit)]

        ''' if a horizontal plot line - Get the value for plotting and display '''        
        float_Total_Ne2_r_Sqrd_LDNe = df_2_Subset[str_Y_Axis_df_1_Colname].iloc[0]
        float_Total_Ne2_r_Sqrd_LDNe_LM = df_2_Subset[str_Y_Axis_df_1_Colname].iloc[0]
        y_Value = Decimal(float_Total_Ne2_r_Sqrd_LDNe)
        
        ''' if a horizontal plot line - Get the X and Y values to actually plot ''' 
        list_X_Values = df_1[str_X_Axis_df_1_Colname].tolist()
        int_X_Values_Count = len(list_X_Values)
        int_X_Values_To_Remove = int(int_X_Values_Count*0.5) #Remove 20% of the X-Axis values
        list_X_Values = list_X_Values[:-1*int_X_Values_To_Remove] #Cut the list down to size
        list_Y_Values = [y_Value for x in list_X_Values] #Create the Y-Values list

        ''' Produce the plot line '''
        pyplot_Line_9, = matplotlib__pyplot.plot(list_X_Values, list_Y_Values, linestyle='-.', linewidth=int_Plot_Line_Width, figure=pyplot_Fig)
        
        ''' Add the description to the end of the line '''
        x_Pos = len(list_X_Values) + 0.25
        y_Pos = y_Value
        str_Line_Ending_Text = 'LDNe ' + str_Stats_Category + ' (PC ' + str(float_PCrit) + '; ' + str(int(round(y_Value))) + ')'                             

        if bool_Plot_Theme__Dark_Blue_1:
            str_Font_Colour = 'white'
            pyplot_Fig_FontProperties = pyplot_Fig_FontProperties__Base.copy()
        pass
        
        if bool_Plot_Theme__Default:                             
            matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text)
        else:
            matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text, color=str_Font_Colour, fontproperties=pyplot_Fig_FontProperties)
     
        '''
        -----------------------------
        Plot Line - LDNe Small Embryo PCrit 0
        -----------------------------
        '''         
        with SSResults(self.obj_SSParams) as obj_Results:
            str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category
            str_Col_Name_Exp1__Exp1__str_Stats_Category = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__str_Stats_Category)

            str_Key_Exp1__Ne2_floatPCrit = globalsSS.Colnames_Ne2_Output.static_Str_Colname_Ne2_floatPCrit
            str_Col_Name_Exp1__Ne2_floatPCrit = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__Ne2_floatPCrit)

            str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe = globalsSS.Colnames_Ne2_Aggregation.static_Str_Colname_float_Total_Ne2_r_Sqrd_LDNe
            str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe)
        pass
        str_Y_Axis_df_1_Colname = str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe 

        ''' Subset the DF to get the correct value '''
        str_Stats_Category = 'Small_Embryo'
        df_2_Subset = df_2[(df_2[str_Col_Name_Exp1__Exp1__str_Stats_Category]=='Small_Embryo')]
        float_PCrit = 0
        df_2_Subset = df_2_Subset[(df_2[str_Col_Name_Exp1__Ne2_floatPCrit]==float_PCrit)]

        ''' if a horizontal plot line - Get the value for plotting and display '''
        float_Total_Ne2_r_Sqrd_LDNe = df_2_Subset[str_Y_Axis_df_1_Colname].iloc[0]
        y_Value = Decimal(float_Total_Ne2_r_Sqrd_LDNe)
        
        ''' if a horizontal plot line - Get the X and Y values to actually plot ''' 
        list_X_Values = df_1[str_X_Axis_df_1_Colname].tolist()
        int_X_Values_Count = len(list_X_Values)
        int_X_Values_To_Remove = int(int_X_Values_Count*0.9) #Remove 20% of the X-Axis values
        list_X_Values = list_X_Values[:-1*int_X_Values_To_Remove] #Cut the list down to size
        list_Y_Values = [y_Value for x in list_X_Values] #Create the Y-Values list

        ''' Produce the plot line '''
        pyplot_Line_10, = matplotlib__pyplot.plot(list_X_Values, list_Y_Values, linestyle='-.', linewidth=int_Plot_Line_Width, figure=pyplot_Fig)
        
        ''' Add the description to the end of the line '''
        x_Pos = len(list_X_Values) + 0.25
        y_Pos = y_Value
        str_Line_Ending_Text = 'LDNe ' + str_Stats_Category + ' (PC ' + str(float_PCrit) + '; ' + str(int(round(y_Value))) + ')'                             

        if bool_Plot_Theme__Dark_Blue_1:
            str_Font_Colour = 'white'
            pyplot_Fig_FontProperties = pyplot_Fig_FontProperties__Base.copy()
        pass
        
        if bool_Plot_Theme__Default:                             
            matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text)
        else:
            matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text, color=str_Font_Colour, fontproperties=pyplot_Fig_FontProperties)
     

        '''
        -----------------------------
        Format Plot
        -----------------------------
        '''


        '''
        ~~~~~~~~~~~~~~~~~~
        Grid and ticks details
        ~~~~~~~~~~~~~~~~~~
        '''
        matplotlib__pyplot.grid(True, figure=pyplot_Fig)
        

        
        '''
        ~~~~~~~~~~~~~~~~~~
        Legend details
        ~~~~~~~~~~~~~~~~~~
        '''
        float_Bbox_X_Pos = 0.80
        float_Bbox_Y_Pos = 0.35
        pyplot_Fig_Legend = pyplot_Fig.legend([
                           pyplot_Line_1
                           , pyplot_Line_2
                           , pyplot_Line_3
#                            , pyplot_Line_4
#                            , pyplot_Line_5
#                            , pyplot_Line_6
#                            , pyplot_Line_7
                           ]
                          ,[
                            'Dx - Deaths per year'
                            ,'Bx - Offspring per year'
                            ,'Nx - Survivors per year'
#                             ,'Adults - Nc (' + str(int(str_Adult_Pop_Size__Nc)) + ')'
#                             ,'Ne Demo (' + str(int(float_NeDemo)) + ')'
#                             ,'Nb Demo (' + str(int(float_NbDemo)) + ')'
#                             ,'LDNe Full (PC ' + str(float_PCrit) + '; ' + str(int(float_Total_Ne2_r_Sqrd_LDNe)) + ')'
                            ]
                          ,bbox_to_anchor=(float_Bbox_X_Pos, float_Bbox_Y_Pos)
                          ,frameon = 1)
        
        
        '''
        ~~~~~~~~~~~~~~~~~~
        Label details
        ~~~~~~~~~~~~~~~~~~
        '''
        ''' Get colnames in order to get data from df_1 '''
        with SSResults(self.obj_SSParams) as obj_Results:
            str_Key_AgeNe__Sim_Pop_Size = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Pop_Size
            str_Col_Name_AgeNe__Sim_Pop_Size = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Sim_Pop_Size)
#             str_Key_AgeNe__Adult_Pop_Size = globalsSS.Colnames_AgeNe_Results.static_str_Colname_Nx_Adults
#             str_Col_Name_AgeNe__Adult_Pop_Size = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Adult_Pop_Size)
            str_Key_AgeNe__Sim_Replicates = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Sim_Replicates
            str_Col_Name_AgeNe__Sim_Replicates = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Sim_Replicates)
            str_Key_AgeNe__Loci = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Loci
            str_Col_Name_AgeNe__Loci = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Loci)
            str_Key_Sim__Run_User_Defined_Folder = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Run_User_Defined_Folder
            str_Col_Name_Sim__Run_User_Defined_Folder = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Sim__Run_User_Defined_Folder)
        pass

        ''' Get values from df_1 '''
        str_Mating_Count_Replicate_Total = str(int_Mating_Count_Replicate_Total)
        int_Pop_Size__N = df_1[str_Col_Name_AgeNe__Sim_Pop_Size].iloc[0]
        str_Pop_Size__N = str(int_Pop_Size__N)
        str_Adult_Pop_Size__N = str(int_AgeNe__Adult_Pop_Size__Nx_Adults__N)
        str_Adult_Pop_Size__Nc = str(int_AgeNe__Adult_Pop_Size__Nx_Adults__Nc)
        str_Replicates = str(df_1[str_Col_Name_AgeNe__Sim_Replicates].iloc[0])
        str_Loci = str(df_1[str_Col_Name_AgeNe__Loci].iloc[0])
        str_Sim__Run_User_Defined_Folder = str(df_1[str_Col_Name_Sim__Run_User_Defined_Folder].iloc[0])

        str_Fig_Title = str('Population Demographic Profile by Mating, AgeNe Ne & Nb Demo vs LDNe from Embryo & Mature Cohorts')

        ''' Title spacing '''
        matplotlib__pyplot.subplots_adjust(top=0.87)
        ''' Font details '''          
        int_Plot_SupTitle_Size = 18
        if bool_Plot_Theme__Dark_Blue_1:
            str_Font_Colour = 'white'
        else:
            str_Font_Colour = 'blue'


        matplotlib__pyplot.suptitle(str_Fig_Title, fontsize=int_Plot_SupTitle_Size, color=str_Font_Colour, figure=pyplot_Fig)

        ''' Font details '''          
#         int_Plot_SupTitle_Size = 16
#         str_Font_Colour = 'blue'
                
        str_Plot_Title = str(
                             'Mating: ' + str_Mating_Count_Replicate_Total + ', '
                            + 'N :' + str_Pop_Size__N + ', '
                            #+ 'Nc: ' + str_Adult_Pop_Size__Nc + ', '
                            + 'Loci: ' + str_Loci + ', '
                            + 'Reps: ' + str_Replicates
                            + '\n'
                            + 'Run: ' + str_Sim__Run_User_Defined_Folder)

        ''' Font details '''          
        int_Plot_Title_Size = 16
        if bool_Plot_Theme__Dark_Blue_1:
            str_Font_Colour = 'grey'
        else:
            str_Font_Colour = 'blue'
                
        matplotlib__pyplot.title(str_Plot_Title, fontsize=int_Plot_Title_Size, color=str_Font_Colour, figure=pyplot_Fig)

        ''' Font details '''          
        int_PLot_Y_Label_Size = 16
        if bool_Plot_Theme__Dark_Blue_1:
            str_Font_Colour = 'white'
        else:
            str_Font_Colour = 'blue'
                                        
        matplotlib__pyplot.xlabel('Age Cohort (years)', fontsize=int_PLot_Y_Label_Size, color=str_Font_Colour, figure=pyplot_Fig)
        matplotlib__pyplot.ylabel('Individuals', fontsize=int_PLot_Y_Label_Size, color=str_Font_Colour, figure=pyplot_Fig)
        
        
        '''
        ~~~~~~~~~~~~~~~~~~
        Label Unique Identifier details
        ~~~~~~~~~~~~~~~~~~
        '''
        ''' Get colnames in order to get data from df_1 '''
        with SSResults(self.obj_SSParams) as obj_Results:
            str_Key_Sim__Run_User_Defined_Folder = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Run_User_Defined_Folder
            str_Col_Name_Sim__Run_User_Defined_Folder = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Sim__Run_User_Defined_Folder)
            str_Key_Sim__Unique_Run_ID = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Unique_Run_ID
            str_Col_Name_Sim__Unique_Run_ID = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Sim__Unique_Run_ID)

        pass

        
        ''' Get values from df_1 '''
        str_Sim__Unique_Run_ID = str(df_1[str_Col_Name_Sim__Unique_Run_ID].iloc[0])
        
        str_UID_Text = str(str_Sim__Unique_Run_ID)

        ''' Font details '''          
        int_Font_Size = 6
        str_Font_Colour = 'darkgrey'
        
        ''' Add figure text '''
        #matplotlib__pyplot.figtext(.75,.99,str_UID_Text, fontsize=int_Font_Size, color=str_Font_Colour, figure=pyplot_Fig)
        matplotlib__pyplot.figtext(.70,.005,str_UID_Text, fontsize=int_Font_Size, color=str_Font_Colour, figure=pyplot_Fig)

        str_Sim__Run_User_Defined_Folder = str(df_1[str_Col_Name_Sim__Run_User_Defined_Folder].iloc[0])

        str_RUDF_Text = str(str_Sim__Run_User_Defined_Folder)

        ''' Font details '''          
        int_Font_Size = 6
        str_Font_Colour = 'darkgrey'
        
        ''' Add figure text '''
        #matplotlib__pyplot.figtext(.75,.91,str_RUDF_Text, fontsize=int_Font_Size, color=str_Font_Colour, figure=pyplot_Fig)
        matplotlib__pyplot.figtext(.70,.015,str_RUDF_Text, fontsize=int_Font_Size, color=str_Font_Colour, figure=pyplot_Fig)

        '''
        ~~~~~~~~~~~~~~~~~~
        Axis details
        ~~~~~~~~~~~~~~~~~~
        '''
#         [xmin, xmax, ymin, ymax] = matplotlib__pyplot.axis()
#         matplotlib__pyplot.xlim(1, xmax)
        
        #int_Y_Axis_Max = int_Pop_Size__N / 2
        
        #dec_Total_Ne2_r_Sqrd_LDNe_LM = Decimal(float_Total_Ne2_r_Sqrd_LDNe_LM)
        #int_Y_Axis_Max = int(math.ceil(dec_Total_Ne2_r_Sqrd_LDNe_LM / 1000)) * 1000
        
        int_Y_Axis_Max = int(math.ceil(int_Pop_Size__N * 0.1 * 2.1 / 500)) * 500
        
        matplotlib__pyplot.ylim(0, int_Y_Axis_Max)
        
        '''
        ~~~~~~~~~~~~~~~~~~
        Colours - Axis & Tick
        ~~~~~~~~~~~~~~~~~~
        '''

        if bool_Plot_Theme__Dark_Blue_1:
            str_Colour = 'darkblue'

        else:
            str_Colour = 'white'
        pass        
        #ax1 = pyplot_Fig.add_subplot(111, axisbg=str_Colour)
        ax1 = pyplot_Fig.add_subplot(111)
        
#         ax.plot(range(10))
#         ax.set_xlabel('X-axis')
#         ax.set_ylabel('Y-axis')
        
#         ax.spines['bottom'].set_color('red')
#         ax.spines['top'].set_color('red')
#         ax.xaxis.label.set_color('red')
        if bool_Plot_Theme__Dark_Blue_1:
            int_Tick_Label_Size = 16
            str_X_Axis_Tick_Labels_Colour = 'white'
            str_Y_Axis_Tick_Labels_Colour = 'white'
            str_X_Axis_Tick_Major_Colour = 'white'
            str_X_Axis_Tick_Minor_Colour = 'grey'
            str_Y_Axis_Tick_Major_Colour = 'white'
            str_Y_Axis_Tick_Minor_Colour = 'grey'
        pass
    
        if bool_Plot_Theme__Default == False:
            ax1.tick_params(axis='x', colors=str_X_Axis_Tick_Labels_Colour)
            ax1.tick_params(axis='y', colors=str_Y_Axis_Tick_Labels_Colour)
    
            # We change the fontsize of minor ticks label 
            ax1.tick_params(axis='x', which='major', labelsize=int_Tick_Label_Size, color=str_X_Axis_Tick_Major_Colour)
            ax1.tick_params(axis='x', which='minor', labelsize=int_Tick_Label_Size, color=str_X_Axis_Tick_Minor_Colour)
            ax1.tick_params(axis='y', which='major', labelsize=int_Tick_Label_Size, color=str_Y_Axis_Tick_Major_Colour)
            ax1.tick_params(axis='y', which='minor', labelsize=int_Tick_Label_Size, color=str_Y_Axis_Tick_Minor_Colour) 
        pass 
    
        ''' Axis tick pointing direction '''
        ax1.tick_params(axis='x', direction='out')
        ax1.tick_params(axis='y', direction='out')
        
        ''' Specify axis ticks to be plotted '''
        ax1.xaxis.tick_bottom() 
        ax1.yaxis.tick_left() 
             
#         for ax, color in zip([ax1], ['white']):
#             matplotlib__pyplot.setp(ax.spines.values(), color=color)
#             matplotlib__pyplot.setp([ax.get_xticklines(), ax1.get_yticklines()], color=color)        
#         
#         ax1.axhline(linewidth=4, color="w") # inc. width of x-axis and color it
#         ax1.axvline(linewidth=4, color="w") # inc. width of y-axis and color it

        if bool_Plot_Theme__Dark_Blue_1:
            str_Colour = 'white'

        else:
            str_Colour = 'black'
        pass
        for axis in ['top','bottom','left','right']:
            ax1.spines[axis].set_linewidth(4)
            ax1.spines[axis].set_color(str_Colour)
 
        ax1.spines['top'].set_visible(False)
        ax1.spines['right'].set_visible(False)           

        ''' Legend '''
        
        
        pyplot_Fig_Legend_Frame = pyplot_Fig_Legend.get_frame()
        
        pyplot_Fig_Legend_Frame.set_color('white')
        ''' Legend frame background '''
        #pyplot_Fig_Legend_Frame.set_facecolor('green')
        ''' Legend frame border '''
        #pyplot_Fig_Legend_Frame.set_edgecolor('red')
        
        ''' Turn off frame outline '''
        pyplot_Fig_Legend_Frame.set_linewidth(0)
        
        # set the alpha value of the legend: it will be translucent
        pyplot_Fig_Legend_Frame.set_alpha(0.5)                                                    
        

        #ax1.grid(True, figure=pyplot_Fig)

        bool_Format_Ticks = False
        if bool_Format_Ticks:
            nparray_Major_Ticks_X = ax1.xaxis.get_majorticklocs()      
            if len(nparray_Major_Ticks_X) > 1: 
                float_Major_Ticks_X_First = nparray_Major_Ticks_X[0]
                float_Major_Ticks_X_Last = nparray_Major_Ticks_X[-1]
                float_Major_Ticks_X_Interval = 5
                nparray_Major_Ticks_X = numpy.arange(float_Major_Ticks_X_First, float_Major_Ticks_X_Last, float_Major_Ticks_X_Interval)                                              
                ax1.set_xticks(nparray_Major_Ticks_X) 
            nparray_Minor_Ticks_X = ax1.xaxis.get_minorticklocs()
            if len(nparray_Minor_Ticks_X) > 1:     
                float_Minor_Ticks_X_First = nparray_Minor_Ticks_X[0]
                float_Minor_Ticks_X_Last = nparray_Minor_Ticks_X[-1]
                float_Minor_Ticks_X_Interval = 1
                nparray_Minor_Ticks_X = numpy.arange(float_Minor_Ticks_X_First, float_Minor_Ticks_X_Last, float_Minor_Ticks_X_Interval)                                              
                ax1.set_xticks(nparray_Minor_Ticks_X, minor=True)
            
            nparray_Major_Ticks_Y = ax1.yaxis.get_majorticklocs()      
            if len(nparray_Major_Ticks_Y) > 1: 
                float_Major_Ticks_Y_First = nparray_Major_Ticks_Y[0]
                float_Major_Ticks_Y_Last = nparray_Major_Ticks_Y[-1]
                float_Major_Ticks_Y_Interval = 50
                nparray_Major_Ticks_Y = numpy.arange(float_Major_Ticks_Y_First, float_Major_Ticks_Y_Last, float_Major_Ticks_Y_Interval)                                              
                ax1.set_yticks(nparray_Major_Ticks_Y)  
                
            nparray_Minor_Ticks_Y = ax1.yaxis.get_minorticklocs()      
            if len(nparray_Minor_Ticks_Y) > 1: 
                float_Minor_Ticks_Y_First = nparray_Minor_Ticks_Y[0]
                float_Minor_Ticks_Y_Last = nparray_Minor_Ticks_Y[-1]
                float_Minor_Ticks_Y_Interval = 1
                nparray_Minor_Ticks_Y = numpy.arange(float_Minor_Ticks_Y_First, float_Minor_Ticks_Y_Last, float_Minor_Ticks_Y_Interval)                                              
                ax1.set_yticks(nparray_Minor_Ticks_Y, minor=True)                                  
            
                                                                  
            ax1.grid(which='both')                                                   
        pass
                                                  
        
        # and a corresponding grid                                                       
        
        ax1.grid(which='both')                                                            
        
        # or if you want differnet settings for the grids:                               
        ax1.grid(which='minor', alpha=0.2)                                                
        ax1.grid(which='major', alpha=0.5)   
        
              
        #DEBUG_ON
        ''' Required to change background of INTERACTIVE WINDOW only'''
        if bool_Plot_Theme__Dark_Blue_1:
            pyplot_Fig_Patch = pyplot_Fig.patch
            pyplot_Fig_Patch.set_facecolor('darkblue') # works with plt.show().  
        pass
        #matplotlib__pyplot.show()
        #DEBUG_OFF
        
                                
        return pyplot_Fig


    '''
    -------------------------------------------------------------
    Plot POST SIM EXP2 AgeNe Demographic Population Profile Per Replicate EOR SUMMARISED Results
    -------------------------------------------------------------
    '''   
    def func__Plot_EXP2_AgeNe_Sim_Demographic_Population_Profile_EOR_SUMM__Get_Data(self, list_int_Mating_Count_Replicate_Totals_To_Process, list_Search_Paths):

        boolSuccess = False
       
        '''
        -------------------------------
        Specify Final Output File
        -------------------------------
        '''
        ''' Output plot '''
        str_Excel_Input_Colname_Prefix = globalsSS.Excel_Results_File_Details.static_Excel_Colname_Prefix__AgeNe_Sim_Summarise_ALL_PF__Summary_Results
        str_Excel_Input_FileName =  globalsSS.Excel_Results_File_Details.static_Excel_FileName__AgeNe_Sim_Summarise_ALL_PF__Summary_Results
        
#         str_Plot_Output_File_1 = self.obj_SSParams.strOutputLocation_CumulativeRun_Path + '\\' + self.obj_SSParams.strUniqueRunID + '_' + str_Excel_Input_FileName + '_' + str_Excel_Input_Colname_Prefix + '.png'
#         str_Plot_Output_File_2 = self.obj_SSParams.strOutputLocation_CumulativeRun_Path + '\\' + self.obj_SSParams.strUniqueRunID + '_' + str_Excel_Input_FileName + '_' + str_Excel_Input_Colname_Prefix + '.pdf'
#         str_Plot_Output_File_1 = str_Search_Path + '\\' + self.obj_SSParams.strUniqueRunID + '_' + str_Excel_Input_FileName + '_' + str_Excel_Input_Colname_Prefix + '.png'
#         str_Plot_Output_File_2 = str_Search_Path + '\\' + self.obj_SSParams.strUniqueRunID + '_' + str_Excel_Input_FileName + '_' + str_Excel_Input_Colname_Prefix + '.pdf'

        '''
        -------------------------------
        Specify Excel Input file
        -------------------------------
        '''        
        str_Input_FileName = '*' + str_Excel_Input_FileName + '*.xlsx'
        str_File_Search_Pattern = str_Input_FileName

        ''' Get ALL the files to plot from list of search paths '''
        list_Path_And_ALL_Files = []
        with FileHandler() as obj_FileHandler:
            bool_Files_Located = False
            for str_Search_Path in list_Search_Paths:
        
                bool_Files_Located, list_Path_And_Files = obj_FileHandler.func_Locate_Files(str_Search_Path, str_File_Search_Pattern)
                list_Path_And_ALL_Files.extend(list_Path_And_Files)
            pass
        pass
    
        if bool_Files_Located == False:
            self.obj_Log_Default.error('File specified could not be located; str_Search_Path = ' + str_Search_Path + '; strFileSearchPattern = ' + str_File_Search_Pattern)
            '''Exit the function prematurely '''
            boolSuccess = False
            return boolSuccess
        pass    
        '''
        -------------------------------
        Process each file found adding a line to the plot for each
        -------------------------------
        '''   
        list_DFs = []
        for str_Path_And_File in list_Path_And_ALL_Files:
            '''
            -------------------------------
            Import Excel Data to dataframe
            -------------------------------
            '''
            '''
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~
            Get & Process Input SHEET
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~
            '''
            str_Input_Excel_Sheet_Name = globalsSS.Excel_Results_File_Details.static_Excel_Colname_Prefix__AgeNe_Sim_Summarise_ALL_PF__Summary_Results
    
            self.obj_Log_Default.info('Dataframing results for: ' + str_Input_FileName + ' and for SHEET: ' + str_Input_Excel_Sheet_Name) 
    
            '''Get the data from the excel files with the specified sheet'''
            xl = pandas.ExcelFile(str_Path_And_File)
            df = xl.parse(str_Input_Excel_Sheet_Name)
            '''Get only the data needed '''
            df = self.func__Plot_EXP2_AgeNe_Sim_Demographic_Population_Profile_EOR_SUMM__Initial_Subset(list_int_Mating_Count_Replicate_Totals_To_Process, df)
            '''Append the df to a list of dfs for plotting'''
            list_DFs.append(df)
        pass
        '''
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~
        Concatinate the dfs
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~
        '''  
        df_Aggregate = pandas.DataFrame()
        for df in list_DFs:
            '''log the results'''
            #str_Df = df_New.to_string()
            #self.obj_Log_Debug.debug('Results dataframe NEW: %s' % str_Df)
            
            #Concat DFs - Tried df.append() but it wont work
            df_Aggregate = pandas.concat([df_Aggregate,df], ignore_index=True)
            
            #str_Df = df_Aggregate.to_string()
            #self.obj_Log_Debug.debug('Results dataframe AGGREGATE: %s' % str_Df)

        pass

        #DEBUG_ON
        #str_Df = df_Aggregate.to_string()
        #self.obj_Log_Debug.debug('Results dataframe AGGREGATE 1: %s' % str_Df)
        #DEBUG_OFF
        
        df = df_Aggregate     
        '''
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~
        Transform the data
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~
        '''
        ''' Send the relevent DFs  '''
        list_DFs_To_Process = [df]          
        list_DFs_Processed = self.func__Plot_EXP2_AgeNe_Sim_Demographic_Population_Profile_EOR_SUMM__Transform_And_Process(str_Excel_Input_FileName, str_Excel_Input_Colname_Prefix, list_DFs_To_Process)
            
        pass
                    
        return boolSuccess
    
    
    def func__Plot_EXP2_AgeNe_Sim_Demographic_Population_Profile_EOR_SUMM__Initial_Subset(self, list_int_Mating_Count_Replicate_Totals_To_Process, df):
        
        self.obj_Log_Debug.debug('Initial subset of data')

        with SSResults(self.obj_SSParams) as obj_Results:
            str_Group_Key_Mating_Count_Replicate_Total = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Mating_Count_Replicate_Total
            str_Col_Name_Mating_Count_Replicate_Total = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df, str_Group_Key_Mating_Count_Replicate_Total)
        pass
    
        '''
        -----------------------------
        Subset df
        -----------------------------
        '''
        df_Subset = df[df[str_Col_Name_Mating_Count_Replicate_Total].isin(list_int_Mating_Count_Replicate_Totals_To_Process)]
        
        return df_Subset

    def func__Plot_EXP2_AgeNe_Sim_Demographic_Population_Profile_EOR_SUMM__Transform_And_Process(self, str_Excel_Input_FileName, str_Excel_Input_Colname_Prefix, list_DFs_To_Process):
        
        self.obj_Log_Default.info('Transforming data')

        '''
        -----------------------------
        Specify DFs
        -----------------------------
        '''
        df_1 = list_DFs_To_Process[0]
           
        '''
        -----------------------------
        Specify X-Axis
        -----------------------------
        '''
        with SSResults(self.obj_SSParams) as obj_Results:
            str_Key_AgeNe__Age = globalsSS.Colnames_AgeNe_Results.static_str_Colname_Age
            str_Col_Name_AgeNe__Age = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Age)
        pass
        str_X_Axis_Colname = str_Col_Name_AgeNe__Age

        '''
        -----------------------------
        Specify Primary Y-Axis
        -----------------------------
        '''        
        with SSResults(self.obj_SSParams) as obj_Results:
            str_Key_AgeNe__Nx = globalsSS.Colnames_AgeNe_Results.static_str_Colname_Nx
            str_Col_Name_AgeNe__Nx = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Nx)
        pass
        '''
        -----------------------------
        Get the Primary Y-Axis Max
        -----------------------------
        '''

        ''' Get Y-Axis Max '''

        df_Temp = pandas.DataFrame()
        df_Temp["Max"] = df_1[[str_Col_Name_AgeNe__Age]].max(axis=1)
        int_Y_Axis_Max = df_Temp["Max"].max(axis=0)
        int_Y_Axis_Max = int(math.ceil(int_Y_Axis_Max / 500)) * 500
        del df_Temp     
        pass 

        '''
        -----------------------------
        Get the Experiments required
        -----------------------------
        '''
        with SSResults(self.obj_SSParams) as obj_Results:
            str_Group_Key_Run_UDF_Replicate_Total = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Run_User_Defined_Folder
            str_Col_Name_Run_UDF_Replicate_Total = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Group_Key_Run_UDF_Replicate_Total)
        pass   
        ''' Get all the UNIQUE Run_User_Defined_Folder values '''
        nparray_Run_UDF_List = numpy.unique(df_1[str_Col_Name_Run_UDF_Replicate_Total])

        '''
        -----------------------------
        Get the matings required
        -----------------------------
        '''    
        with SSResults(self.obj_SSParams) as obj_Results:
            str_Group_Key_Mating_Count_Replicate_Total = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Mating_Count_Replicate_Total
            str_Col_Name_Mating_Count_Replicate_Total = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Group_Key_Mating_Count_Replicate_Total)
        pass
        ''' Get all the UNIQUE Mating_Count_Replicate_Total values '''
        nparray_Mating_Count_Replicate_Total = numpy.unique(df_1[str_Col_Name_Mating_Count_Replicate_Total])
  
        '''
        -----------------------------
        Define the Figures required
        -----------------------------
        '''
        bool_Interactive_Display = False
        ''' Specify the number of figure copies and their specs '''
        dict_Fig_Copies = {
                            1:{'ColourScheme':'Default', 'Transparent':False, 'Interactive_Display':bool_Interactive_Display, 'Save_PNG': True, 'Save_PDF': False}
                           #,2:{'ColourScheme':'Dark_Blue', 'Transparent':True, 'Interactive_Display':bool_Interactive_Display,'Save_PNG': True, 'Save_PDF': False}
                           }

        '''
        -----------------------------
        Process for each Figure required
        -----------------------------
        '''        
        for key_Dict_Fig_Copy_Params, value_Dict_Fig_Copy_Params in dict_Fig_Copies.iteritems():
            
            str_Figure_Colour_Scheme = value_Dict_Fig_Copy_Params['ColourScheme']
            
            '''
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~
            Create Figure
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~
            '''
            pyplot_Fig = self.func__Plot_EXP2_AgeNe_Sim_Demographic_Population_Profile_EOR_SUMM__Create_Figure(list_DFs_To_Process, str_X_Axis_Colname)

            '''
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~
            Plot lines for each Experiment specified
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~
            '''
            dict_pyplot_Legend_Lines = OrderedDict()   
            for str_Experiment_Path in nparray_Run_UDF_List: 
                 
                ''' Get Experiment detail from Experiment path '''
                dict_Experiment_Details = OrderedDict()
                #print(repr(str_Experiment_Path)) 
                #';'.split(str_Experiment_Path.replace('\\', ';'))
                list_Experiment_Details = str_Experiment_Path.split('\\')
                dict_Experiment_Details['Species_Code'] = list_Experiment_Details[0]
                dict_Experiment_Details['Scenario_Code'] = list_Experiment_Details[1]
                dict_Experiment_Details['Pop_Replicates'] = list_Experiment_Details[2]
                dict_Experiment_Details['Experiment_Label'] = list_Experiment_Details[3]
                str_Experiment_Label = dict_Experiment_Details['Experiment_Label']
                str_Experiment_Scenario_Code = dict_Experiment_Details['Scenario_Code']
                '''
                ~~~~~~~~~~~~~~~~~~~~~~~~~~~
                Plot lines for each mating count required
                ~~~~~~~~~~~~~~~~~~~~~~~~~~~
                '''    
                for int_Mating_Count_Replicate_Total in nparray_Mating_Count_Replicate_Total:
        
                    '''
                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~
                    Transform
                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~
                    '''  
                    self.obj_Log_Default.info('Transforming data for int_Mating_Count_Replicate_Total :' + str(int_Mating_Count_Replicate_Total))
                              
                    ''' Subset the DF to get the correct value '''
                    df_1_Subset = df_1[(df_1[str_Col_Name_Mating_Count_Replicate_Total]==int_Mating_Count_Replicate_Total)]
                    
                    #DEBUG_ON
                    #str_Df = df_1_Subset.to_string()
                    #self.obj_Log_Debug.debug('Results dataframe df 1: %s' % str_Df)
                    #raw_input('pausing')
                    #DEBUG_OFF    
        
                    list_DFs = [df_1_Subset] 
                    
                    ''' Plot the line '''
                    pyplot_Fig, list_Pyplot_Lines = self.func__Plot_EXP2_AgeNe_Sim_Demographic_Population_Profile_EOR_SUMM__Plot(str_Figure_Colour_Scheme, list_DFs, str_X_Axis_Colname, int_Mating_Count_Replicate_Total, int_Y_Axis_Max, value_Dict_Fig_Copy_Params, pyplot_Fig)
                    
                    dict_pyplot_Legend_Lines = OrderedDict([(str_Experiment_Scenario_Code, list_Pyplot_Lines)])
                pass
            pass

            '''
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~
            Format the Figure
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~
            '''  
            pyplot_Fig = self.func__Plot_EXP2_AgeNe_Sim_Demographic_Population_Profile_EOR_SUMM__Format_Figure(str_Figure_Colour_Scheme, list_DFs, pyplot_Fig, int_Y_Axis_Max, dict_pyplot_Legend_Lines, nparray_Mating_Count_Replicate_Total, value_Dict_Fig_Copy_Params)
            
            '''
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~
            Save results
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~
            '''    
            str_Plot_Output_Path = self.obj_SSParams.strOutputLocation_CumulativeRun_Path + '\\EXP2_New_Plots\\'
            ''' Create path if it doesnt exist '''
            with FileHandler() as obj_File_Op:
                obj_File_Op.method_Create_Path(str_Plot_Output_Path)
            pass                
            str_Plot_Output_FileName = self.obj_SSParams.strUniqueRunID + '_' + str_Excel_Input_FileName + '_' + str_Excel_Input_Colname_Prefix + '_' + str(int_Mating_Count_Replicate_Total)
            str_Plot_Output_Path_And_FileName = str_Plot_Output_Path + str_Plot_Output_FileName
            if value_Dict_Fig_Copy_Params['Save_PNG'] == True:
                str_Plot_Output_Path_And_FileName_PNG = str_Plot_Output_Path_And_FileName + '_' + str(key_Dict_Fig_Copy_Params) + '.png'
                bool_Transparent = value_Dict_Fig_Copy_Params['Transparent']
                pyplot_Fig.savefig(str_Plot_Output_Path_And_FileName_PNG, bbox_inches='tight', dpi=400, transparent=bool_Transparent)
            pass
            if value_Dict_Fig_Copy_Params['Save_PDF'] == True:
                str_Plot_Output_Path_And_FileName_PDF = str_Plot_Output_Path_And_FileName + '_' + str(key_Dict_Fig_Copy_Params) + '.pdf'
                pyplot_Fig.savefig(str_Plot_Output_Path_And_FileName_PDF, bbox_inches='tight')
            pass
        
            '''
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~
            Display results
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~
            '''
            if value_Dict_Fig_Copy_Params['Interactive_Display'] == True:           
                matplotlib__pyplot.show()
            pass

            ''' Close the plot '''
            matplotlib__pyplot.close(pyplot_Fig) 
        pass
                  
        pass        
        
        
        return list_DFs
    
    def func__Plot_EXP2_AgeNe_Sim_Demographic_Population_Profile_EOR_SUMM__Create_Figure(self, list_DFs, str_X_Axis_Colname):

        self.obj_Log_Default.info('Creating figure')
        
        '''
        -----------------------------
        Specify DFs
        -----------------------------
        '''
        df_1 = list_DFs[0]

        '''
        -----------------------------
        Create figure
        -----------------------------
        '''
        # default scale is 1 in your original case, scales with other cases:
        int_X_Axis_Length = len(df_1[str_X_Axis_Colname])
        int_Width_Scale = int_X_Axis_Length/10 
        if  int_Width_Scale < 10:
           int_Width_Scale = 2
        pass        
        int_Width_Control = 6  #6 - About perfect for PowerPoint
        int_Height_Control = 8 #8 - About perfect for PowerPoint
        figsize = (int_Width_Control*int_Width_Scale,int_Height_Control) # fig size in inches (width,height)
        pyplot_Fig = matplotlib__pyplot.figure(figsize = figsize)       
        
        #pyplot_Fig = matplotlib__pyplot.figure()
        return pyplot_Fig
    
    def func__Plot_EXP2_AgeNe_Sim_Demographic_Population_Profile_EOR_SUMM__Plot(self, str_Figure_Colour_Scheme, list_DFs, str_X_Axis_Colname, int_Mating_Count_Replicate_Total, int_Y_Axis_Max, dict_Fig_Copy, pyplot_Fig):
        
        self.obj_Log_Default.info('Creating plot')

        list_pyplot_Lines = []
        
        int_Plot_Line_Width = 4
        '''
        -----------------------------
        Specify DFs
        -----------------------------
        '''
        df_1 = list_DFs[0]
        
        '''
        -----------------------------
        Plot Line - Nx - Survivors per age cohort
        -----------------------------
        ''' 
        with SSResults(self.obj_SSParams) as obj_Results:
            str_Key_AgeNe__Nx = globalsSS.Colnames_AgeNe_Results.static_str_Colname_Nx
            str_Col_Name_AgeNe__Nx = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Nx)
        pass
        str_Y_Axis_df_1_Colname = str_Col_Name_AgeNe__Nx 
        
        str_Plot_Line_Color = 'blue'
        #pyplot_Line_1, = matplotlib__pyplot.plot(df_1[str_X_Axis_Colname], df_1[str_Y_Axis_df_1_Colname], color=str_Plot_Line_Color, linewidth=int_Plot_Line_Width, figure=pyplot_Fig)
        pyplot_Line_1 = matplotlib__pyplot.plot(df_1[str_X_Axis_Colname], df_1[str_Y_Axis_df_1_Colname], color=str_Plot_Line_Color, linewidth=int_Plot_Line_Width, figure=pyplot_Fig)
        
        list_pyplot_Lines.append(pyplot_Line_1)

        
        return pyplot_Fig, list_pyplot_Lines
    
    def func__Plot_EXP2_AgeNe_Sim_Demographic_Population_Profile_EOR_SUMM__Format_Figure(self, str_Figure_Colour_Scheme, list_DFs, pyplot_Fig, int_Y_Axis_Max, dict_pyplot_Legend_Lines, list_int_Mating_Count_Replicate_Totals_To_Process, dict_Fig_Copy):                  
        
        '''
        -----------------------------
        Format Plot
        -----------------------------
        '''
        '''
        -----------------------------
        Specify DFs
        -----------------------------
        '''
        df_1 = list_DFs[0]
        '''
        Font properties for subsequent text
        '''
        pyplot_Fig_FontProperties__Base = matplotlib__fontmanager.FontProperties(size=16)

        '''
        ~~~~~~~~~~~~~~~~~~
        Grid and ticks details
        ~~~~~~~~~~~~~~~~~~
        '''
        matplotlib__pyplot.grid(True, figure=pyplot_Fig)
        
        '''
        ~~~~~~~~~~~~~~~~~~
        Legend details
        ~~~~~~~~~~~~~~~~~~
        '''

        list_pyplot_Lines = []
        list_str_Experiment_Text = []
        for key_str_Experiment, value_pyplot_Line in dict_pyplot_Legend_Lines.items():
            list_pyplot_Lines.append(value_pyplot_Line)
            list_str_Experiment_Text.append(key_str_Experiment)
        pass

        float_Bbox_X_Pos = 0.80
        float_Bbox_Y_Pos = 0.35    
        pyplot_Fig_Legend = pyplot_Fig.legend(list_pyplot_Lines
                                              ,list_str_Experiment_Text
                                              ,bbox_to_anchor=(float_Bbox_X_Pos, float_Bbox_Y_Pos)
                                              ,frameon = 1)
        
        '''
        ~~~~~~~~~~~~~~~~~~
        Label details
        ~~~~~~~~~~~~~~~~~~
        '''
        ''' Get colnames in order to get data from df_1 '''
        with SSResults(self.obj_SSParams) as obj_Results:
            str_Key_AgeNe__Sim_Pop_Size = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Pop_Size
            str_Col_Name_AgeNe__Sim_Pop_Size = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Sim_Pop_Size)
#             str_Key_AgeNe__Nc_Adult_Pop_Size = globalsSS.Colnames_AgeNe_Results.static_str_Colname_Nx_Nc_Adults
#             str_Col_Name_AgeNe__Nc_Adult_Pop_Size = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Nc_Adult_Pop_Size)
            str_Key_AgeNe__Sim_Replicates = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Sim_Replicates
            str_Col_Name_AgeNe__Sim_Replicates = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Sim_Replicates)
            str_Key_AgeNe__Loci = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Loci
            str_Col_Name_AgeNe__Loci = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Loci)
            str_Key_Sim__Run_User_Defined_Folder = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Run_User_Defined_Folder
            str_Col_Name_Sim__Run_User_Defined_Folder = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Sim__Run_User_Defined_Folder)
        pass

        ''' Get values from df_1 '''
        str_Mating_Count_Replicate_Total = str(list_int_Mating_Count_Replicate_Totals_To_Process)
        int_Pop_Size__N = df_1[str_Col_Name_AgeNe__Sim_Pop_Size].iloc[0]
        str_Pop_Size__N = str(int_Pop_Size__N)
#         str_Adult_Pop_Size__N = str(int_AgeNe__Adult_Pop_Size__Nx_Adults__N)
#         str_Adult_Pop_Size__Nc = str(int_AgeNe__Adult_Pop_Size__Nx_Adults__Nc)
        str_Replicates = str(df_1[str_Col_Name_AgeNe__Sim_Replicates].iloc[0])
        str_Loci = str(df_1[str_Col_Name_AgeNe__Loci].iloc[0])
        str_Sim__Run_User_Defined_Folder = str(df_1[str_Col_Name_Sim__Run_User_Defined_Folder].iloc[0])

        str_Fig_Title = str('Population Demographic Profile by Mating, AgeNe Ne & Nb Demo vs LDNe from Embryo & Mature Cohorts')

        ''' Title spacing '''
        matplotlib__pyplot.subplots_adjust(top=0.87)
        ''' Font details '''          
        int_Plot_SupTitle_Size = 18
        if str_Figure_Colour_Scheme == globalsSS.Figure_Colour_Schemes.static_str_Figure_Colour_Scheme__Dark_Blue:
            str_Font_Colour = 'white'
        else:
            str_Font_Colour = 'blue'


        matplotlib__pyplot.suptitle(str_Fig_Title, fontsize=int_Plot_SupTitle_Size, color=str_Font_Colour, figure=pyplot_Fig)

        ''' Font details '''          
#         int_Plot_SupTitle_Size = 16
#         str_Font_Colour = 'blue'
                
        str_Plot_Title = str(
                             'Mating: ' + str_Mating_Count_Replicate_Total + ', '
                            + 'N :' + str_Pop_Size__N + ', '
                            #+ 'Nc: ' + str_Adult_Pop_Size__Nc + ', '
                            + 'Loci: ' + str_Loci + ', '
                            + 'Reps: ' + str_Replicates
                            + '\n'
                            + 'Run: ' + str_Sim__Run_User_Defined_Folder)

        ''' Font details '''          
        int_Plot_Title_Size = 16
        if str_Figure_Colour_Scheme == globalsSS.Figure_Colour_Schemes.static_str_Figure_Colour_Scheme__Dark_Blue:
            str_Font_Colour = 'grey'
        else:
            str_Font_Colour = 'blue'
                
        matplotlib__pyplot.title(str_Plot_Title, fontsize=int_Plot_Title_Size, color=str_Font_Colour, figure=pyplot_Fig)

        ''' Font details '''          
        int_PLot_Y_Label_Size = 16
        if str_Figure_Colour_Scheme == globalsSS.Figure_Colour_Schemes.static_str_Figure_Colour_Scheme__Dark_Blue:
            str_Font_Colour = 'white'
        else:
            str_Font_Colour = 'blue'
                                        
        matplotlib__pyplot.xlabel('Age Cohort (years)', fontsize=int_PLot_Y_Label_Size, color=str_Font_Colour, figure=pyplot_Fig)
        matplotlib__pyplot.ylabel('Individuals', fontsize=int_PLot_Y_Label_Size, color=str_Font_Colour, figure=pyplot_Fig)
        
        
        '''
        ~~~~~~~~~~~~~~~~~~
        Label Unique Identifier details
        ~~~~~~~~~~~~~~~~~~
        '''
        ''' Get colnames in order to get data from df_1 '''
        with SSResults(self.obj_SSParams) as obj_Results:
            str_Key_Sim__Run_User_Defined_Folder = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Run_User_Defined_Folder
            str_Col_Name_Sim__Run_User_Defined_Folder = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Sim__Run_User_Defined_Folder)
            str_Key_Sim__Unique_Run_ID = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Unique_Run_ID
            str_Col_Name_Sim__Unique_Run_ID = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Sim__Unique_Run_ID)

        pass

        
        ''' Get values from df_1 '''
        str_Sim__Unique_Run_ID = str(df_1[str_Col_Name_Sim__Unique_Run_ID].iloc[0])
        
        str_UID_Text = str(str_Sim__Unique_Run_ID)

        ''' Font details '''          
        int_Font_Size = 6
        str_Font_Colour = 'darkgrey'
        
        ''' Add figure text '''
        #matplotlib__pyplot.figtext(.75,.99,str_UID_Text, fontsize=int_Font_Size, color=str_Font_Colour, figure=pyplot_Fig)
        matplotlib__pyplot.figtext(.70,.005,str_UID_Text, fontsize=int_Font_Size, color=str_Font_Colour, figure=pyplot_Fig)

        str_Sim__Run_User_Defined_Folder = str(df_1[str_Col_Name_Sim__Run_User_Defined_Folder].iloc[0])

        str_RUDF_Text = str(str_Sim__Run_User_Defined_Folder)

        ''' Font details '''          
        int_Font_Size = 6
        str_Font_Colour = 'darkgrey'
        
        ''' Add figure text '''
        #matplotlib__pyplot.figtext(.75,.91,str_RUDF_Text, fontsize=int_Font_Size, color=str_Font_Colour, figure=pyplot_Fig)
        matplotlib__pyplot.figtext(.70,.015,str_RUDF_Text, fontsize=int_Font_Size, color=str_Font_Colour, figure=pyplot_Fig)

        '''
        ~~~~~~~~~~~~~~~~~~
        Axis details
        ~~~~~~~~~~~~~~~~~~
        '''
#         [xmin, xmax, ymin, ymax] = matplotlib__pyplot.axis()
#         matplotlib__pyplot.xlim(1, xmax)
        
        #int_Y_Axis_Max = int_Pop_Size__N / 2
        
        #dec_Total_Ne2_r_Sqrd_LDNe_LM = Decimal(float_Total_Ne2_r_Sqrd_LDNe_LM)
        #int_Y_Axis_Max = int(math.ceil(dec_Total_Ne2_r_Sqrd_LDNe_LM / 1000)) * 1000
        
        #int_Y_Axis_Max = int(math.ceil(int_Pop_Size__N * 0.1 * 2.1 / 500)) * 500
#         df_Temp = pandas.DataFrame()
#         df_Temp["Max"] = df_2[[str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe]].max(axis=1)
#         int_Y_Axis_Max = df_Temp["Max"].max(axis=0)
#         int_Y_Axis_Max = int(math.ceil(int_Y_Axis_Max / 500)) * 500
        
        ''' int_Y_Axis_Max passed into function '''
        matplotlib__pyplot.ylim(0, int_Y_Axis_Max)
        
        '''
        ~~~~~~~~~~~~~~~~~~
        Colours - Axis & Tick
        ~~~~~~~~~~~~~~~~~~
        '''

        if str_Figure_Colour_Scheme == globalsSS.Figure_Colour_Schemes.static_str_Figure_Colour_Scheme__Dark_Blue:
            str_Colour = 'darkblue'

        else:
            str_Colour = 'white'
        pass        
        #ax1 = pyplot_Fig.add_subplot(111, axisbg=str_Colour)
        ax1 = pyplot_Fig.add_subplot(111)
        
#         ax.plot(range(10))
#         ax.set_xlabel('X-axis')
#         ax.set_ylabel('Y-axis')
        
#         ax.spines['bottom'].set_color('red')
#         ax.spines['top'].set_color('red')
#         ax.xaxis.label.set_color('red')
        if str_Figure_Colour_Scheme == globalsSS.Figure_Colour_Schemes.static_str_Figure_Colour_Scheme__Dark_Blue:
            int_Tick_Label_Size = 16
            str_X_Axis_Tick_Labels_Colour = 'white'
            str_Y_Axis_Tick_Labels_Colour = 'white'
            str_X_Axis_Tick_Major_Colour = 'white'
            str_X_Axis_Tick_Minor_Colour = 'grey'
            str_Y_Axis_Tick_Major_Colour = 'white'
            str_Y_Axis_Tick_Minor_Colour = 'grey'
        pass
    
        if str_Figure_Colour_Scheme == globalsSS.Figure_Colour_Schemes.static_str_Figure_Colour_Scheme__Dark_Blue:
            ax1.tick_params(axis='x', colors=str_X_Axis_Tick_Labels_Colour)
            ax1.tick_params(axis='y', colors=str_Y_Axis_Tick_Labels_Colour)
    
            # We change the fontsize of minor ticks label 
            ax1.tick_params(axis='x', which='major', labelsize=int_Tick_Label_Size, color=str_X_Axis_Tick_Major_Colour)
            ax1.tick_params(axis='x', which='minor', labelsize=int_Tick_Label_Size, color=str_X_Axis_Tick_Minor_Colour)
            ax1.tick_params(axis='y', which='major', labelsize=int_Tick_Label_Size, color=str_Y_Axis_Tick_Major_Colour)
            ax1.tick_params(axis='y', which='minor', labelsize=int_Tick_Label_Size, color=str_Y_Axis_Tick_Minor_Colour) 
        pass 
    
        ''' Axis tick pointing direction '''
        ax1.tick_params(axis='x', direction='out')
        ax1.tick_params(axis='y', direction='out')
        
        ''' Specify axis ticks to be plotted '''
        ax1.xaxis.tick_bottom() 
        ax1.yaxis.tick_left() 
             
#         for ax, color in zip([ax1], ['white']):
#             matplotlib__pyplot.setp(ax.spines.values(), color=color)
#             matplotlib__pyplot.setp([ax.get_xticklines(), ax1.get_yticklines()], color=color)        
#         
#         ax1.axhline(linewidth=4, color="w") # inc. width of x-axis and color it
#         ax1.axvline(linewidth=4, color="w") # inc. width of y-axis and color it

        if str_Figure_Colour_Scheme == globalsSS.Figure_Colour_Schemes.static_str_Figure_Colour_Scheme__Dark_Blue:
            str_Colour = 'white'

        else:
            str_Colour = 'black'
        pass
        for axis in ['top','bottom','left','right']:
            ax1.spines[axis].set_linewidth(4)
            ax1.spines[axis].set_color(str_Colour)
 
        ax1.spines['top'].set_visible(False)
        ax1.spines['right'].set_visible(False)           

        ''' Legend '''
        
        
        pyplot_Fig_Legend_Frame = pyplot_Fig_Legend.get_frame()
        
        pyplot_Fig_Legend_Frame.set_color('white')
        ''' Legend frame background '''
        #pyplot_Fig_Legend_Frame.set_facecolor('green')
        ''' Legend frame border '''
        #pyplot_Fig_Legend_Frame.set_edgecolor('red')
        
        ''' Turn off frame outline '''
        pyplot_Fig_Legend_Frame.set_linewidth(0)
        
        # set the alpha value of the legend: it will be translucent
        pyplot_Fig_Legend_Frame.set_alpha(0.5)                                                    
        

        #ax1.grid(True, figure=pyplot_Fig)

        bool_Format_Ticks = False
        if bool_Format_Ticks:
            nparray_Major_Ticks_X = ax1.xaxis.get_majorticklocs()      
            if len(nparray_Major_Ticks_X) > 1: 
                float_Major_Ticks_X_First = nparray_Major_Ticks_X[0]
                float_Major_Ticks_X_Last = nparray_Major_Ticks_X[-1]
                float_Major_Ticks_X_Interval = 5
                nparray_Major_Ticks_X = numpy.arange(float_Major_Ticks_X_First, float_Major_Ticks_X_Last, float_Major_Ticks_X_Interval)                                              
                ax1.set_xticks(nparray_Major_Ticks_X) 
            nparray_Minor_Ticks_X = ax1.xaxis.get_minorticklocs()
            if len(nparray_Minor_Ticks_X) > 1:     
                float_Minor_Ticks_X_First = nparray_Minor_Ticks_X[0]
                float_Minor_Ticks_X_Last = nparray_Minor_Ticks_X[-1]
                float_Minor_Ticks_X_Interval = 1
                nparray_Minor_Ticks_X = numpy.arange(float_Minor_Ticks_X_First, float_Minor_Ticks_X_Last, float_Minor_Ticks_X_Interval)                                              
                ax1.set_xticks(nparray_Minor_Ticks_X, minor=True)
            
            nparray_Major_Ticks_Y = ax1.yaxis.get_majorticklocs()      
            if len(nparray_Major_Ticks_Y) > 1: 
                float_Major_Ticks_Y_First = nparray_Major_Ticks_Y[0]
                float_Major_Ticks_Y_Last = nparray_Major_Ticks_Y[-1]
                float_Major_Ticks_Y_Interval = 50
                nparray_Major_Ticks_Y = numpy.arange(float_Major_Ticks_Y_First, float_Major_Ticks_Y_Last, float_Major_Ticks_Y_Interval)                                              
                ax1.set_yticks(nparray_Major_Ticks_Y)  
                
            nparray_Minor_Ticks_Y = ax1.yaxis.get_minorticklocs()      
            if len(nparray_Minor_Ticks_Y) > 1: 
                float_Minor_Ticks_Y_First = nparray_Minor_Ticks_Y[0]
                float_Minor_Ticks_Y_Last = nparray_Minor_Ticks_Y[-1]
                float_Minor_Ticks_Y_Interval = 1
                nparray_Minor_Ticks_Y = numpy.arange(float_Minor_Ticks_Y_First, float_Minor_Ticks_Y_Last, float_Minor_Ticks_Y_Interval)                                              
                ax1.set_yticks(nparray_Minor_Ticks_Y, minor=True)                                  
            
                                                                  
            ax1.grid(which='both')                                                   
        pass
                                                  
        
        # and a corresponding grid                                                       
        
        ax1.grid(which='both')                                                            
        
        # or if you want differnet settings for the grids:                               
        ax1.grid(which='minor', alpha=0.2)                                                
        ax1.grid(which='major', alpha=0.5)   
        
              
        #DEBUG_ON
        ''' Required to change background of INTERACTIVE WINDOW only'''
        if str_Figure_Colour_Scheme == globalsSS.Figure_Colour_Schemes.static_str_Figure_Colour_Scheme__Dark_Blue:
            pyplot_Fig_Patch = pyplot_Fig.patch
            pyplot_Fig_Patch.set_facecolor('darkblue') # works with plt.show().  
        pass
        #matplotlib__pyplot.show()
        #DEBUG_OFF
        
                                
        return pyplot_Fig

    '''
    -------------------------------------------------------------
    Plot Genepop_Allele_Freqs_By_Allele_PF_Results
    -------------------------------------------------------------
    '''   
    def func__Plot_Genepop_Allele_Freqs_By_Allele_PF_Results__Get_Data(self, str_Search_Path, str_Excel_Sheet_To_Plot):

        boolSuccess = False
       
        '''
        -------------------------------
        Specify Final Output File
        -------------------------------
        '''
        ''' Output plot '''
        str_Excel_Input_Colname_Prefix = globalsSS.Excel_Results_File_Details.static_Excel_Colname_Prefix__Genepop_Allele_Freqs_By_Allele__Aggregate_ALL__Summary_Results
        str_Excel_Input_FileName =  globalsSS.Excel_Results_File_Details.static_Excel_FileName__Genepop_Allele_Freqs_By_Allele__Aggregate_ALL__Summary_Results
        
#         str_Plot_Output_File_1 = str_Search_Path + '\\' + self.obj_SSParams.strUniqueRunID + '_' + str_Excel_Input_FileName + '_' + str_Excel_Input_Colname_Prefix + '.png'
#         str_Plot_Output_File_2 = str_Search_Path + '\\' + self.obj_SSParams.strUniqueRunID + '_' + str_Excel_Input_FileName + '_' + str_Excel_Input_Colname_Prefix + '.pdf'

        '''
        -------------------------------
        Specify Excel Input file
        -------------------------------
        '''        
        str_Input_FileName = '*' + str_Excel_Input_FileName + '*.xlsx'
        str_File_Search_Pattern = str_Input_FileName
        
        '''
        -------------------------------
        Import Excel Data to dataframe
        -------------------------------
        '''
        '''
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~
        Get & Process Input SHEET - Embryo VSP Genepop_Allele_Freqs_By_Allele_Results
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~
        '''
        #str_Input_Excel_Sheet_Name = globalsSS.Excel_Results_File_Details.static_Excel_FileName__Genepop_Allele_Freqs_By_Allele__Embryo_PF__Aggregate_ALL__Summary_Results_Sheet_Name
        str_Input_Excel_Sheet_Name = str_Excel_Sheet_To_Plot

        self.obj_Log_Default.info('Dataframing results for: ' + str_Input_FileName + ' and for SHEET: ' + str_Input_Excel_Sheet_Name) 

        bool_File_1_Located = False
        with FileHandler() as obj_FileHandler:
            bool_File_1_Located, list_Path_And_Files = obj_FileHandler.func_Locate_Files(str_Search_Path, str_File_Search_Pattern)
       
        if bool_File_1_Located:
            
            '''Process Results'''
            list_DF_1s = []            
            for str_Path_And_File in list_Path_And_Files:
                
                '''Get the data from the excel files with the specified sheet'''
                xl = pandas.ExcelFile(str_Path_And_File)
                df_1 = xl.parse(str_Input_Excel_Sheet_Name)
                list_DF_1s.append(df_1)
                
            pass

            ''' concatinate the dfs '''
            df_Aggregate = pandas.DataFrame()
            for df_New in list_DF_1s:
                '''log the results'''
                #str_Df = df_New.to_string()
                #self.obj_Log_Debug.debug('Results dataframe NEW: %s' % str_Df)
                
                #Concat DFs - Tried df.append() but it wont work
                df_Aggregate = pandas.concat([df_Aggregate,df_New], ignore_index=True)
                
                #str_Df = df_Aggregate.to_string()
                #self.obj_Log_Debug.debug('Results dataframe AGGREGATE: %s' % str_Df)

            pass

            #DEBUG_ON
            #str_Df = df_Aggregate.to_string()
            #self.obj_Log_Debug.debug('Results dataframe AGGREGATE 1: %s' % str_Df)
            #DEBUG_OFF
            
            df1 = df_Aggregate 
        else:
            self.obj_Log_Default.error('File specified could not be located; str_Search_Path = ' + str_Search_Path + '; strFileSearchPattern = ' + str_File_Search_Pattern)
        pass
    

        '''
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~
        Transform & Plot
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~
        '''    
        if bool_File_1_Located:
            '''
            Transform the dataframes & Plot
            '''
            dict_Fig_Copies = {
                                1:{'ColourScheme':'Default',  'Interactive_Display':False, 'Save_PNG': True, 'Save_PDF': True}
                               ,2:{'ColourScheme':'Dark_Blue','Interactive_Display':False,'Save_PNG': True, 'Save_PDF': True}
                               }
            
            for key_Dict_Fig_Copy_Params, value_Dict_Fig_Copy_Params in dict_Fig_Copies.iteritems():
                pyplot_Fig_1 = self.func__Plot_Genepop_Allele_Freqs_By_Allele_PF_Results__Process(df1, dict_Fig_Copies)            

                '''
                ~~~~~~~~~~~~~~~~~~~~~~~~~~~
                Display results
                ~~~~~~~~~~~~~~~~~~~~~~~~~~~
                '''
                if value_Dict_Fig_Copy_Params['Interactive_Display'] == True:           
                    matplotlib__pyplot.show()
                pass
            
                '''
                ~~~~~~~~~~~~~~~~~~~~~~~~~~~
                Save results
                ~~~~~~~~~~~~~~~~~~~~~~~~~~~
                '''    
                str_Plot_Output_File = self.obj_SSParams.strOutputLocation_CumulativeRun_Path + '\\' + self.obj_SSParams.strUniqueRunID + '_' + str_Excel_Input_FileName + '_' + str_Excel_Input_Colname_Prefix
                if value_Dict_Fig_Copy_Params['Save_PNG'] == True:
                    str_Plot_Output_File_PNG = str_Plot_Output_File + '_' + str(key_Dict_Fig_Copy_Params) + '.png'
                    bool_Transparent = value_Dict_Fig_Copy_Params['Transparent']
                    pyplot_Fig_1.savefig(str_Plot_Output_File_PNG, bbox_inches='tight', dpi=400, transparent=bool_Transparent)
                pass
                if value_Dict_Fig_Copy_Params['Save_PDF'] == True:
                    str_Plot_Output_File_PDF = str_Plot_Output_File + '_' + str(key_Dict_Fig_Copy_Params) + '.pdf'
                    pyplot_Fig_1.savefig(str_Plot_Output_File_PDF, bbox_inches='tight')
                pass
            pass
        pass
                    
        return boolSuccess

    def func__Plot_Genepop_Allele_Freqs_By_Allele_PF_Results__Process(self, list_DFs, dict_Fig_Copies):
        
        self.obj_Log_Default.info('Creating figure')
        
        bool_Plot_Theme__Default = True
        
        bool_Plot_Theme__Dark_Blue_1 = False
        if bool_Plot_Theme__Dark_Blue_1:
            bool_Plot_Theme__Default = False
        else:
            bool_Plot_Theme__Default = True
        pass
            
        int_Plot_Line_Width = 4
        '''
        -----------------------------
        Specify DFs
        -----------------------------
        '''
        df_1 = list_DFs[0]
        #df_2 = list_DFs[1]
        
        
        '''
        -----------------------------
        Specify X-Axis
        -----------------------------
        '''
        with SSResults(self.obj_SSParams) as obj_Results:
            str_Key_Source_Data_Sim_Current_Replicate_Mating = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Source_Data_Sim_Current_Replicate_Mating
            str_Col_Name_Source_Data_Sim_Current_Replicate_Mating = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Source_Data_Sim_Current_Replicate_Mating)
        pass
        str_X_Axis_df_1_Colname = str_Col_Name_Source_Data_Sim_Current_Replicate_Mating

        '''
        -----------------------------
        Create figure
        -----------------------------
        '''
        # default scale is 1 in your original case, scales with other cases:
        int_X_Axis_Length = len(df_1[str_X_Axis_df_1_Colname])
        int_Width_Scale = int_X_Axis_Length/10 
        int_Width_Control = 6  #6 - About perfect for PowerPoint
        int_Height_Control = 8 #8 - About perfect for PowerPoint
        figsize = (int_Width_Control*int_Width_Scale,int_Height_Control) # fig size in inches (width,height)
        pyplot_Fig = matplotlib__pyplot.figure(figsize = figsize)       
        
        #pyplot_Fig = matplotlib__pyplot.figure()
        
        '''
        -----------------------------
        Plot Line - Locus Allele Freq
        -----------------------------
        ''' 
        with SSResults(self.obj_SSParams) as obj_Results:
            str_Key_Source_Data_Sim_Current_Replicate = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Source_Data_Sim_Current_Replicate
            str_Col_Name_Source_Data_Sim_Current_Replicate = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Source_Data_Sim_Current_Replicate)

            str_Key_AFBA__Locus_Name = globalsSS.Colnames_Genepop_Allele_Freqs_By_Allele_Results.static_str_Colname_Locus_Name
            str_Col_Name_AFBA__Locus_Name = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AFBA__Locus_Name)

            str_Key_AFBA__Allele_Name = globalsSS.Colnames_Genepop_Allele_Freqs_By_Allele_Results.static_str_Colname_Allele_Name
            str_Col_Name_AFBA__Allele_Name = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AFBA__Allele_Name)
 
            str_Key_AFBA__Allele_Freq = globalsSS.Colnames_Genepop_Allele_Freqs_By_Allele_Results.static_str_Colname_Allele_Freq
            str_Col_Name_AFBA__Allele_Freq = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AFBA__Allele_Freq)
        pass
        str_Y_Axis_df_1_Colname = str_Col_Name_AFBA__Allele_Freq 

        ''' Subset the DF to get the correct value '''
#         str_Locus_Name = 'Locus-10'
#         df_1_Subset = df_1[(df_1[str_Col_Name_AFBA__Locus_Name]==str_Locus_Name)]
#         str_Allele_Name = 1
#         df_1_Subset = df_1_Subset[(df_1_Subset[str_Col_Name_AFBA__Allele_Name]==str_Allele_Name)]

        int_Source_Data_Sim_Current_Replicate = 1
        str_Locus_Name = 'Locus-10'
        int_Allele_Name = 1
        
        df_1_Subset = df_1[(df_1[str_Col_Name_Source_Data_Sim_Current_Replicate]==int_Source_Data_Sim_Current_Replicate) & (df_1[str_Col_Name_AFBA__Locus_Name]==str_Locus_Name) & (df_1[str_Col_Name_AFBA__Allele_Name]==int_Allele_Name)]
        
        str_Plot_Line_Color = 'blue'
        pyplot_Line_1, = matplotlib__pyplot.plot(df_1_Subset[str_X_Axis_df_1_Colname], df_1_Subset[str_Y_Axis_df_1_Colname], color=str_Plot_Line_Color, linewidth=int_Plot_Line_Width, figure=pyplot_Fig)

        int_Source_Data_Sim_Current_Replicate = 1
        str_Locus_Name = 'Locus-10'
        int_Allele_Name = 2
        
        df_1_Subset = df_1[(df_1[str_Col_Name_Source_Data_Sim_Current_Replicate]==int_Source_Data_Sim_Current_Replicate) & (df_1[str_Col_Name_AFBA__Locus_Name]==str_Locus_Name) & (df_1[str_Col_Name_AFBA__Allele_Name]==int_Allele_Name)]
        
        str_Plot_Line_Color = 'red'
        pyplot_Line_1, = matplotlib__pyplot.plot(df_1_Subset[str_X_Axis_df_1_Colname], df_1_Subset[str_Y_Axis_df_1_Colname], color=str_Plot_Line_Color, linewidth=int_Plot_Line_Width, figure=pyplot_Fig)


        '''
        -----------------------------
        Format Plot
        -----------------------------
        '''


        '''
        ~~~~~~~~~~~~~~~~~~
        Grid and ticks details
        ~~~~~~~~~~~~~~~~~~
        '''
        matplotlib__pyplot.grid(True, figure=pyplot_Fig)
        
        '''
        ~~~~~~~~~~~~~~~~~~
        Axis details
        ~~~~~~~~~~~~~~~~~~
        '''
#         [xmin, xmax, ymin, ymax] = matplotlib__pyplot.axis()
        matplotlib__pyplot.ylim(0, 1)

        '''
        ~~~~~~~~~~~~~~~~~~
        Legend details
        ~~~~~~~~~~~~~~~~~~
        '''
        float_Bbox_X_Pos = 0.80
        float_Bbox_Y_Pos = 0.35
        pyplot_Fig_Legend = pyplot_Fig.legend([
                           pyplot_Line_1
#                            , pyplot_Line_2
#                            , pyplot_Line_3
#                            , pyplot_Line_4
#                            , pyplot_Line_5
#                            , pyplot_Line_6
#                            , pyplot_Line_7
                           ]
                          ,[
                            'Locus-10 Allele 1 Freq'
#                             ,'Bx - Offspring per year'
#                             ,'Dx - Deaths per year'
#                             ,'Adults - Nc (' + str(int(str_Adult_Pop_Size__Nc)) + ')'
#                             ,'Ne Demo (' + str(int(float_NeDemo)) + ')'
#                             ,'Nb Demo (' + str(int(float_NbDemo)) + ')'
#                             ,'LDNe Full (PC ' + str(float_PCrit) + '; ' + str(int(float_Total_Ne2_r_Sqrd_LDNe)) + ')'
                            ]
                          ,bbox_to_anchor=(float_Bbox_X_Pos, float_Bbox_Y_Pos)
                          ,frameon = 1)
        
        
        '''
        ~~~~~~~~~~~~~~~~~~
        Label details
        ~~~~~~~~~~~~~~~~~~
        '''
        ''' Get colnames in order to get data from df_1 '''
#         with SSResults(self.obj_SSParams) as obj_Results:
#             str_Key_AgeNe__Sim_Pop_Size = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Pop_Size
#             str_Col_Name_AgeNe__Sim_Pop_Size = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Sim_Pop_Size)
#             str_Key_AgeNe__Adult_Pop_Size = globalsSS.Colnames_AgeNe_Results.static_str_Colname_Nx_N_Adults
#             str_Key_AgeNe__Adult_Pop_Size = globalsSS.Colnames_AgeNe_Results.static_str_Colname_Nx_Nc_Adults
#             str_Col_Name_AgeNe__Adult_Pop_Size = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Adult_Pop_Size)
#             str_Key_AgeNe__Sim_Replicates = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Sim_Replicates
#             str_Col_Name_AgeNe__Sim_Replicates = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Sim_Replicates)
#             str_Key_AgeNe__Loci = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Loci
#             str_Col_Name_AgeNe__Loci = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Loci)
#             str_Key_Sim__Run_User_Defined_Folder = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Run_User_Defined_Folder
#             str_Col_Name_Sim__Run_User_Defined_Folder = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Sim__Run_User_Defined_Folder)
#         pass
# 
#         ''' Get values from df_1 '''
#         str_Pop_Size__N = str(df_1[str_Col_Name_AgeNe__Sim_Pop_Size].iloc[0])
#         str_Adult_Pop_Size__Nc = str(int_AgeNe__Adult_Pop_Size__Nx_Adults__Nc)
#         str_Replicates = str(df_1[str_Col_Name_AgeNe__Sim_Replicates].iloc[0])
#         str_Loci = str(df_1[str_Col_Name_AgeNe__Loci].iloc[0])
#         str_Sim__Run_User_Defined_Folder = str(df_1[str_Col_Name_Sim__Run_User_Defined_Folder].iloc[0])

        str_Fig_Title = str('Allele Freqs')

        ''' Title spacing '''
        matplotlib__pyplot.subplots_adjust(top=0.87)
        ''' Font details '''          
        int_Plot_SupTitle_Size = 18
        if bool_Plot_Theme__Dark_Blue_1:
            str_Font_Colour = 'white'
        else:
            str_Font_Colour = 'blue'


        matplotlib__pyplot.suptitle(str_Fig_Title, fontsize=int_Plot_SupTitle_Size, color=str_Font_Colour, figure=pyplot_Fig)

        ''' Font details '''          
#         int_Plot_SupTitle_Size = 16
#         str_Font_Colour = 'blue'
           
        str_Plot_Title = ''     
#         str_Plot_Title = str('N:' + str_Pop_Size__N + ', '
#                         #+ 'Nc: ' + str_Adult_Pop_Size__Nc + ', '
#                         + 'Loci: ' + str_Loci + ', '
#                         + 'Reps: ' + str_Replicates
#                         + '\n'
#                         + 'Run: ' + str_Sim__Run_User_Defined_Folder)

        ''' Font details '''          
        int_Plot_Title_Size = 16
        if bool_Plot_Theme__Dark_Blue_1:
            str_Font_Colour = 'grey'
        else:
            str_Font_Colour = 'blue'
                
        matplotlib__pyplot.title(str_Plot_Title, fontsize=int_Plot_Title_Size, color=str_Font_Colour, figure=pyplot_Fig)

        ''' Font details '''          
        int_PLot_Y_Label_Size = 16
        if bool_Plot_Theme__Dark_Blue_1:
            str_Font_Colour = 'white'
        else:
            str_Font_Colour = 'blue'
                                        
        matplotlib__pyplot.xlabel('Age Cohort (years)', fontsize=int_PLot_Y_Label_Size, color=str_Font_Colour, figure=pyplot_Fig)
        matplotlib__pyplot.ylabel('Individuals', fontsize=int_PLot_Y_Label_Size, color=str_Font_Colour, figure=pyplot_Fig)
        
        
        '''
        ~~~~~~~~~~~~~~~~~~
        Label Unique Identifier details
        ~~~~~~~~~~~~~~~~~~
        '''
        ''' Get colnames in order to get data from df_1 '''
        with SSResults(self.obj_SSParams) as obj_Results:
#             str_Key_Sim__Run_User_Defined_Folder = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Run_User_Defined_Folder
#             str_Col_Name_Sim__Run_User_Defined_Folder = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Sim__Run_User_Defined_Folder)
            str_Colname_Prefix = globalsSS.Excel_Results_File_Details.static_Excel_Colname_Prefix__Genepop_Allele_Freqs_By_Allele__Aggregate_ALL__Summary_Results + '_'
            str_Key_Sim__Source_Data_Unique_Run_ID = str_Colname_Prefix + globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Source_Data_Unique_Run_ID
            str_Col_Name_Sim__Source_Data_Unique_Run_ID = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Sim__Source_Data_Unique_Run_ID)

        pass

        
        ''' Get values from df_1 '''
        str_Sim__Source_Data_Unique_Run_ID = str(df_1[str_Col_Name_Sim__Source_Data_Unique_Run_ID].iloc[0])
        
        str_UID_Text = str(str_Sim__Source_Data_Unique_Run_ID)

        ''' Font details '''          
        int_Font_Size = 6
        str_Font_Colour = 'darkgrey'
        
        ''' Add figure text '''
        #matplotlib__pyplot.figtext(.75,.99,str_UID_Text, fontsize=int_Font_Size, color=str_Font_Colour, figure=pyplot_Fig)
        matplotlib__pyplot.figtext(.70,.005,str_UID_Text, fontsize=int_Font_Size, color=str_Font_Colour, figure=pyplot_Fig)

        #str_Sim__Run_User_Defined_Folder = str(df_1[str_Col_Name_Sim__Run_User_Defined_Folder].iloc[0])

        #str_RUDF_Text = str(str_Sim__Run_User_Defined_Folder)
        str_RUDF_Text = ''

        ''' Font details '''          
        int_Font_Size = 6
        str_Font_Colour = 'darkgrey'
        
        ''' Add figure text '''
        #matplotlib__pyplot.figtext(.75,.91,str_RUDF_Text, fontsize=int_Font_Size, color=str_Font_Colour, figure=pyplot_Fig)
        matplotlib__pyplot.figtext(.70,.015,str_RUDF_Text, fontsize=int_Font_Size, color=str_Font_Colour, figure=pyplot_Fig)


        '''
        ~~~~~~~~~~~~~~~~~~
        Colours - Axis & Tick
        ~~~~~~~~~~~~~~~~~~
        '''

        if bool_Plot_Theme__Dark_Blue_1:
            str_Colour = 'darkblue'

        else:
            str_Colour = 'white'
        pass        
        #ax1 = pyplot_Fig.add_subplot(111, axisbg=str_Colour)
        ax1 = pyplot_Fig.add_subplot(111)
        
#         ax.plot(range(10))
#         ax.set_xlabel('X-axis')
#         ax.set_ylabel('Y-axis')
        
#         ax.spines['bottom'].set_color('red')
#         ax.spines['top'].set_color('red')
#         ax.xaxis.label.set_color('red')
        if bool_Plot_Theme__Dark_Blue_1:
            int_Tick_Label_Size = 16
            str_X_Axis_Tick_Labels_Colour = 'white'
            str_Y_Axis_Tick_Labels_Colour = 'white'
            str_X_Axis_Tick_Major_Colour = 'white'
            str_X_Axis_Tick_Minor_Colour = 'grey'
            str_Y_Axis_Tick_Major_Colour = 'white'
            str_Y_Axis_Tick_Minor_Colour = 'grey'
        pass
    
        if bool_Plot_Theme__Default == False:
            ax1.tick_params(axis='x', colors=str_X_Axis_Tick_Labels_Colour)
            ax1.tick_params(axis='y', colors=str_Y_Axis_Tick_Labels_Colour)
    
            # We change the fontsize of minor ticks label 
            ax1.tick_params(axis='x', which='major', labelsize=int_Tick_Label_Size, color=str_X_Axis_Tick_Major_Colour)
            ax1.tick_params(axis='x', which='minor', labelsize=int_Tick_Label_Size, color=str_X_Axis_Tick_Minor_Colour)
            ax1.tick_params(axis='y', which='major', labelsize=int_Tick_Label_Size, color=str_Y_Axis_Tick_Major_Colour)
            ax1.tick_params(axis='y', which='minor', labelsize=int_Tick_Label_Size, color=str_Y_Axis_Tick_Minor_Colour) 
        pass 
    
        ''' Axis tick pointing direction '''
        ax1.tick_params(axis='x', direction='out')
        ax1.tick_params(axis='y', direction='out')
        
        ''' Specify axis ticks to be plotted '''
        ax1.xaxis.tick_bottom() 
        ax1.yaxis.tick_left() 
             
#         for ax, color in zip([ax1], ['white']):
#             matplotlib__pyplot.setp(ax.spines.values(), color=color)
#             matplotlib__pyplot.setp([ax.get_xticklines(), ax1.get_yticklines()], color=color)        
#         
#         ax1.axhline(linewidth=4, color="w") # inc. width of x-axis and color it
#         ax1.axvline(linewidth=4, color="w") # inc. width of y-axis and color it

        if bool_Plot_Theme__Dark_Blue_1:
            str_Colour = 'white'

        else:
            str_Colour = 'black'
        pass
        for axis in ['top','bottom','left','right']:
            ax1.spines[axis].set_linewidth(4)
            ax1.spines[axis].set_color(str_Colour)
 
        ax1.spines['top'].set_visible(False)
        ax1.spines['right'].set_visible(False)           

        ''' Legend '''
        
        
        pyplot_Fig_Legend_Frame = pyplot_Fig_Legend.get_frame()
        
        pyplot_Fig_Legend_Frame.set_color('white')
        ''' Legend frame background '''
        #pyplot_Fig_Legend_Frame.set_facecolor('green')
        ''' Legend frame border '''
        #pyplot_Fig_Legend_Frame.set_edgecolor('red')
        
        ''' Turn off frame outline '''
        pyplot_Fig_Legend_Frame.set_linewidth(0)
        
        # set the alpha value of the legend: it will be translucent
        pyplot_Fig_Legend_Frame.set_alpha(0.5)                                                    
        

        #ax1.grid(True, figure=pyplot_Fig)

        bool_Format_Ticks = False
        if bool_Format_Ticks:
            nparray_Major_Ticks_X = ax1.xaxis.get_majorticklocs()      
            if len(nparray_Major_Ticks_X) > 1: 
                float_Major_Ticks_X_First = nparray_Major_Ticks_X[0]
                float_Major_Ticks_X_Last = nparray_Major_Ticks_X[-1]
                float_Major_Ticks_X_Interval = 5
                nparray_Major_Ticks_X = numpy.arange(float_Major_Ticks_X_First, float_Major_Ticks_X_Last, float_Major_Ticks_X_Interval)                                              
                ax1.set_xticks(nparray_Major_Ticks_X) 
            nparray_Minor_Ticks_X = ax1.xaxis.get_minorticklocs()
            if len(nparray_Minor_Ticks_X) > 1:     
                float_Minor_Ticks_X_First = nparray_Minor_Ticks_X[0]
                float_Minor_Ticks_X_Last = nparray_Minor_Ticks_X[-1]
                float_Minor_Ticks_X_Interval = 1
                nparray_Minor_Ticks_X = numpy.arange(float_Minor_Ticks_X_First, float_Minor_Ticks_X_Last, float_Minor_Ticks_X_Interval)                                              
                ax1.set_xticks(nparray_Minor_Ticks_X, minor=True)
            
            nparray_Major_Ticks_Y = ax1.yaxis.get_majorticklocs()      
            if len(nparray_Major_Ticks_Y) > 1: 
                float_Major_Ticks_Y_First = nparray_Major_Ticks_Y[0]
                float_Major_Ticks_Y_Last = nparray_Major_Ticks_Y[-1]
                float_Major_Ticks_Y_Interval = 50
                nparray_Major_Ticks_Y = numpy.arange(float_Major_Ticks_Y_First, float_Major_Ticks_Y_Last, float_Major_Ticks_Y_Interval)                                              
                ax1.set_yticks(nparray_Major_Ticks_Y)  
                
            nparray_Minor_Ticks_Y = ax1.yaxis.get_minorticklocs()      
            if len(nparray_Minor_Ticks_Y) > 1: 
                float_Minor_Ticks_Y_First = nparray_Minor_Ticks_Y[0]
                float_Minor_Ticks_Y_Last = nparray_Minor_Ticks_Y[-1]
                float_Minor_Ticks_Y_Interval = 1
                nparray_Minor_Ticks_Y = numpy.arange(float_Minor_Ticks_Y_First, float_Minor_Ticks_Y_Last, float_Minor_Ticks_Y_Interval)                                              
                ax1.set_yticks(nparray_Minor_Ticks_Y, minor=True)                                  
            
                                                                  
            ax1.grid(which='both')                                                   
        pass
                                                  
        
        # and a corresponding grid                                                       
        
        ax1.grid(which='both')                                                            
        
        # or if you want differnet settings for the grids:                               
        ax1.grid(which='minor', alpha=0.2)                                                
        ax1.grid(which='major', alpha=0.5)   
        
              
        #DEBUG_ON
        ''' Required to change background of INTERACTIVE WINDOW only'''
        if bool_Plot_Theme__Dark_Blue_1:
            pyplot_Fig_Patch = pyplot_Fig.patch
            pyplot_Fig_Patch.set_facecolor('darkblue') # works with plt.show().  
        pass
        #matplotlib__pyplot.show()
        #DEBUG_OFF
        
                                
        return pyplot_Fig
    
    '''
    -------------------------------------------------------------
    Plot EXPERIMENT_Parent_Offspring_Ne_1 & AgeNe Sim Per Replicate EOR SUMMARISED Results
    -------------------------------------------------------------
    '''   
    def func__Plot_EXPERIMENT_Parent_Offspring_Ne_1_And_AgeNe_Sim_Demographic_Population_Profile__Get_Data(self, str_Search_Path):

        boolSuccess = False
       
        '''
        -------------------------------
        Specify Final Output File
        -------------------------------
        '''
        ''' Output plot '''
        str_Excel_Input_Colname_Prefix = globalsSS.Excel_Results_File_Details.static_Excel_Colname_Prefix__AgeNe_Sim_Summarise_ALL_EOR__Summary_Results
        str_Excel_Input_FileName =  globalsSS.Excel_Results_File_Details.static_Excel_FileName__AgeNe_Sim_Summarise_ALL_EOR__Summary_Results
        
#         str_Plot_Output_File_1 = self.obj_SSParams.strOutputLocation_CumulativeRun_Path + '\\' + self.obj_SSParams.strUniqueRunID + '_' + str_Excel_Input_FileName + '_' + str_Excel_Input_Colname_Prefix + '.png'
#         str_Plot_Output_File_2 = self.obj_SSParams.strOutputLocation_CumulativeRun_Path + '\\' + self.obj_SSParams.strUniqueRunID + '_' + str_Excel_Input_FileName + '_' + str_Excel_Input_Colname_Prefix + '.pdf'
        str_Plot_Output_File_1 = str_Search_Path + '\\' + self.obj_SSParams.strUniqueRunID + '_' + str_Excel_Input_FileName + '_' + str_Excel_Input_Colname_Prefix + '.png'
        str_Plot_Output_File_2 = str_Search_Path + '\\' + self.obj_SSParams.strUniqueRunID + '_' + str_Excel_Input_FileName + '_' + str_Excel_Input_Colname_Prefix + '.pdf'

        '''
        -------------------------------
        Specify Excel Input file
        -------------------------------
        '''        
        str_Input_FileName = '*' + str_Excel_Input_FileName + '*.xlsx'
        str_File_Search_Pattern = str_Input_FileName
        
        '''
        -------------------------------
        Import Excel Data to dataframee
        -------------------------------
        '''
        '''
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~
        Get & Process Input SHEET
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~
        '''
        str_Input_Excel_Sheet_Name = globalsSS.Excel_Results_File_Details.static_Excel_Colname_Prefix__AgeNe_Sim_Summarise_ALL_EOR__Summary_Results

        self.obj_Log_Default.info('Dataframing results for: ' + str_Input_FileName + ' and for SHEET: ' + str_Input_Excel_Sheet_Name) 

        bool_File_1_Located = False
        with FileHandler() as obj_FileHandler:
            bool_File_1_Located, list_Path_And_Files = obj_FileHandler.func_Locate_Files(str_Search_Path, str_File_Search_Pattern)
       
        if bool_File_1_Located:
            
            '''Process Results'''
            list_DF_1s = []            
            for str_Path_And_File in list_Path_And_Files:
                
                '''Get the data from the excel files with the specified sheet'''
                xl = pandas.ExcelFile(str_Path_And_File)
                df_1 = xl.parse(str_Input_Excel_Sheet_Name)
                list_DF_1s.append(df_1)
                
            pass

            ''' concatinate the dfs '''
            df_Aggregate = pandas.DataFrame()
            for df_New in list_DF_1s:
                '''log the results'''
                #str_Df = df_New.to_string()
                #self.obj_Log_Debug.debug('Results dataframe NEW: %s' % str_Df)
                
                #Concat DFs - Tried df.append() but it wont work
                df_Aggregate = pandas.concat([df_Aggregate,df_New], ignore_index=True)
                
                #str_Df = df_Aggregate.to_string()
                #self.obj_Log_Debug.debug('Results dataframe AGGREGATE: %s' % str_Df)

            pass

            #DEBUG_ON
            #str_Df = df_Aggregate.to_string()
            #self.obj_Log_Debug.debug('Results dataframe AGGREGATE 1: %s' % str_Df)
            #DEBUG_OFF
            
            df1 = df_Aggregate 
        else:
            self.obj_Log_Default.error('File specified could not be located; str_Search_Path = ' + str_Search_Path + '; strFileSearchPattern = ' + str_File_Search_Pattern)
        pass
    
        '''
        -------------------------------
        Get More Data
        -------------------------------
        '''
        '''
        -------------------------------
        Specify Excel Input file 2
        -------------------------------
        '''        
        #str_Excel_Input_Colname_Prefix = globalsSS.Excel_Results_File_Details.static_Excel_Colname_Prefix__EXPERIMENT_Parent_Offspring_Ne_1__Summary_Results
        str_Excel_Input_FileName =  globalsSS.Excel_Results_File_Details.static_Excel_FileName__EXPERIMENT_Parent_Offspring_Ne_1__Summary_Results
 
        str_Input_FileName = '*' + str_Excel_Input_FileName + '*.xlsx'
        str_File_Search_Pattern = str_Input_FileName
        
        '''
        -------------------------------
        Import Excel Data to dataframee
        -------------------------------
        '''
        '''
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~
        Get & Process Input SHEET
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~
        '''
        str_Input_Excel_Sheet_Name = globalsSS.Excel_Results_File_Details.static_Excel_SheetName__EXPERIMENT_Parent_Offspring_Ne_1__Summary_Results

        self.obj_Log_Default.info('Dataframing results for: ' + str_Input_FileName + ' and for SHEET: ' + str_Input_Excel_Sheet_Name) 

        bool_File_2_Located = False
        with FileHandler() as obj_FileHandler:
            bool_File_2_Located, list_Path_And_Files = obj_FileHandler.func_Locate_Files(str_Search_Path, str_File_Search_Pattern)
       
        if bool_File_2_Located:
            
            '''Process Results'''
            list_DF_2s = []            
            for str_Path_And_File in list_Path_And_Files:
                
                '''Get the data from the excel files with the specified sheet'''
                xl = pandas.ExcelFile(str_Path_And_File)
                df_2 = xl.parse(str_Input_Excel_Sheet_Name)
                list_DF_2s.append(df_2)
                
            pass

            ''' concatinate the dfs '''
            df_Aggregate = pandas.DataFrame()
            for df_New in list_DF_2s:
                '''log the results'''
                #str_Df = df_New.to_string()
                #self.obj_Log_Debug.debug('Results dataframe NEW: %s' % str_Df)
                
                #Concat DFs - Tried df.append() but it wont work
                df_Aggregate = pandas.concat([df_Aggregate,df_New], ignore_index=True)
                
                #str_Df = df_Aggregate.to_string()
                #self.obj_Log_Debug.debug('Results dataframe AGGREGATE: %s' % str_Df)

            pass

            #DEBUG_ON
            #str_Df = df_Aggregate.to_string()
            #self.obj_Log_Debug.debug('Results dataframe AGGREGATE 1: %s' % str_Df)
            #DEBUG_OFF
            
            df2 = df_Aggregate 
        else:
            self.obj_Log_Default.error('File specified could not be located; str_Search_Path = ' + str_Search_Path + '; strFileSearchPattern = ' + str_File_Search_Pattern)
        pass


        '''
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~
        Transform & Plot
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~
        '''    
        if bool_File_1_Located and bool_File_2_Located:
            
            ''' Send the relevent DFs to the plotter '''
            list_DFs = [df1, df2]
            
            ''' Specify the number of figure copies and their specs '''
            dict_Fig_Copies = {
                                1:{'ColourScheme':'Default', 'Transparent':True, 'Interactive_Display':False, 'Save_PNG': True, 'Save_PDF': True}
                               ,2:{'ColourScheme':'Dark_Blue', 'Transparent':False, 'Interactive_Display':False,'Save_PNG': True, 'Save_PDF': False}
                               }
            
            for key_Dict_Fig_Copy_Params, value_Dict_Fig_Copy_Params in dict_Fig_Copies.iteritems():
                ''' Plot the figure '''
                pyplot_Fig_1 = self.func__Plot_EXPERIMENT_Parent_Offspring_Ne_1_And_AgeNe_Sim_Demographic_Population_Profile__Process(list_DFs, value_Dict_Fig_Copy_Params)            

                '''
                ~~~~~~~~~~~~~~~~~~~~~~~~~~~
                Display results
                ~~~~~~~~~~~~~~~~~~~~~~~~~~~
                '''
                if value_Dict_Fig_Copy_Params['Interactive_Display'] == True:           
                    matplotlib__pyplot.show()
                pass
            
                '''
                ~~~~~~~~~~~~~~~~~~~~~~~~~~~
                Save results
                ~~~~~~~~~~~~~~~~~~~~~~~~~~~
                '''    
                str_Plot_Output_File = self.obj_SSParams.strOutputLocation_CumulativeRun_Path + '\\' + self.obj_SSParams.strUniqueRunID + '_' + str_Excel_Input_FileName + '_' + str_Excel_Input_Colname_Prefix
                if value_Dict_Fig_Copy_Params['Save_PNG'] == True:
                    str_Plot_Output_File_PNG = str_Plot_Output_File + '_' + str(key_Dict_Fig_Copy_Params) + '.png'
                    bool_Transparent = value_Dict_Fig_Copy_Params['Transparent']
                    pyplot_Fig_1.savefig(str_Plot_Output_File_PNG, bbox_inches='tight', dpi=400, transparent=bool_Transparent)
                pass
                if value_Dict_Fig_Copy_Params['Save_PDF'] == True:
                    str_Plot_Output_File_PDF = str_Plot_Output_File + '_' + str(key_Dict_Fig_Copy_Params) + '.pdf'
                    pyplot_Fig_1.savefig(str_Plot_Output_File_PDF, bbox_inches='tight')
                pass
        

            pass
        pass
                    
        return boolSuccess

    def func__Plot_EXPERIMENT_Parent_Offspring_Ne_1_And_AgeNe_Sim_Demographic_Population_Profile__Process(self, list_DFs, dict_Fig_Copy):
        
        self.obj_Log_Default.info('Creating figure')
        
        bool_Plot_Theme__Default = False
        bool_Plot_Theme__Dark_Blue_1 = False
        
        if dict_Fig_Copy['ColourScheme'] == 'Dark_Blue':
            bool_Plot_Theme__Dark_Blue_1 = True
        else:
            bool_Plot_Theme__Default = True
        pass
    
#         if bool_Plot_Theme__Dark_Blue_1:
#             bool_Plot_Theme__Default = False
#         else:
#             bool_Plot_Theme__Default = True
#         pass
            
        int_Plot_Line_Width = 4
        '''
        -----------------------------
        Specify DFs
        -----------------------------
        '''
        df_1 = list_DFs[0]
        df_2 = list_DFs[1]
        
        
        '''
        -----------------------------
        Specify X-Axis
        -----------------------------
        '''
        with SSResults(self.obj_SSParams) as obj_Results:
            str_Key_AgeNe__Age = globalsSS.Colnames_AgeNe_Results.static_str_Colname_Age
            str_Col_Name_AgeNe__Age = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Age)
        pass
        str_X_Axis_df_1_Colname = str_Col_Name_AgeNe__Age

        '''
        -----------------------------
        Create figure
        -----------------------------
        '''
        # default scale is 1 in your original case, scales with other cases:
        int_X_Axis_Length = len(df_1[str_X_Axis_df_1_Colname])
        int_Width_Scale = int_X_Axis_Length/10 
        int_Width_Control = 6  #6 - About perfect for PowerPoint
        int_Height_Control = 8 #8 - About perfect for PowerPoint
        figsize = (int_Width_Control*int_Width_Scale,int_Height_Control) # fig size in inches (width,height)
        pyplot_Fig = matplotlib__pyplot.figure(figsize = figsize)       
        
        #pyplot_Fig = matplotlib__pyplot.figure()
        
        '''
        -----------------------------
        Plot Line - Nx - Survivors per age cohort
        -----------------------------
        ''' 
        with SSResults(self.obj_SSParams) as obj_Results:
            str_Key_AgeNe__Nx = globalsSS.Colnames_AgeNe_Results.static_str_Colname_Nx
            str_Col_Name_AgeNe__Nx = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Nx)
        pass
        str_Y_Axis_df_1_Colname = str_Col_Name_AgeNe__Nx 
        
        str_Plot_Line_Color = 'blue'
        pyplot_Line_1, = matplotlib__pyplot.plot(df_1[str_X_Axis_df_1_Colname], df_1[str_Y_Axis_df_1_Colname], color=str_Plot_Line_Color, linewidth=int_Plot_Line_Width, figure=pyplot_Fig)

        '''
        -----------------------------
        Plot Line - Bx - Offspring per age cohort
        -----------------------------
        '''         
        with SSResults(self.obj_SSParams) as obj_Results:
            str_Key_AgeNe__Bx = globalsSS.Colnames_AgeNe_Results.static_str_Colname_Bx
            str_Col_Name_AgeNe__Bx = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Bx)
        pass
        str_Y_Axis_df_1_Colname = str_Col_Name_AgeNe__Bx 
        
        if bool_Plot_Theme__Dark_Blue_1:
            str_Plot_Line_Color = 'white'
        else:
            str_Plot_Line_Color = 'grey'
        pass
        pyplot_Line_2, = matplotlib__pyplot.plot(df_1[str_X_Axis_df_1_Colname], df_1[str_Y_Axis_df_1_Colname], color=str_Plot_Line_Color, linewidth=int_Plot_Line_Width, figure=pyplot_Fig)

        '''
        -----------------------------
        Plot Line - Dx - Deaths per age cohort
        -----------------------------
        '''         
        with SSResults(self.obj_SSParams) as obj_Results:
            str_Key_AgeNe__Dx = globalsSS.Colnames_AgeNe_Results.static_str_Colname_Dx
            str_Col_Name_AgeNe__Dx = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Dx)
        pass
        str_Y_Axis_df_1_Colname = str_Col_Name_AgeNe__Dx 
        
        str_Plot_Line_Color = 'red'
        pyplot_Line_3, = matplotlib__pyplot.plot(df_1[str_X_Axis_df_1_Colname], df_1[str_Y_Axis_df_1_Colname], color=str_Plot_Line_Color, linewidth=int_Plot_Line_Width, figure=pyplot_Fig)

        '''
        -----------------------------
        Plot Line - AgeNe N - ALL Adults 
        -----------------------------
        '''
        '''
        Font properties for subsequent text
        '''
        pyplot_Fig_FontProperties__Base = matplotlib__fontmanager.FontProperties(size=16)
                 
        with SSResults(self.obj_SSParams) as obj_Results:
            str_Key_AgeNe__Adult_Pop_Size__Nx_N_Adults = globalsSS.Colnames_AgeNe_Results.static_str_Colname_Nx_N_Adults
            str_Col_Name_AgeNe__Adult_Pop_Size__Nx_N_Adults = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Adult_Pop_Size__Nx_N_Adults)

        pass
        str_Y_Axis_df_1_Colname = str_Col_Name_AgeNe__Adult_Pop_Size__Nx_N_Adults 

#         pyplot_Line_4, = matplotlib__pyplot.plot(df_1[str_X_Axis_df_1_Colname], df_1[str_Y_Axis_df_1_Colname], linestyle='--', linewidth=2, figure=pyplot_Fig)
#         
#         ''' Get the value for display '''
#         int_AgeNe__Adult_Pop_Size__Nx_Adults__Nc = df_1[str_Y_Axis_df_1_Colname].iloc[0]
# 
#         ''' Add the description to the end of the line '''
#         str_Line_Ending_Text = 'AgeNe Nc (' + str(int(int_AgeNe__Adult_Pop_Size__Nx_Adults__Nc)) + ')'                             
#         matplotlib__pyplot.text(df_1[str_X_Axis_df_1_Colname].iloc[-1], df_1[str_Y_Axis_df_1_Colname].iloc[-1], str_Line_Ending_Text)

        ''' if a horizontal plot line - Get the value for plotting and display '''
        int_AgeNe__Adult_Pop_Size__Nx_Adults__N = int(df_1[str_Y_Axis_df_1_Colname].iloc[0])
        y_Value = int_AgeNe__Adult_Pop_Size__Nx_Adults__N
        
        ''' if a horizontal plot line - Get the X and Y values to actually plot ''' 
        list_X_Values = df_1[str_X_Axis_df_1_Colname].tolist()
        int_X_Values_Count = len(list_X_Values)
        int_X_Values_To_Remove = int(int_X_Values_Count*0.8) #Remove a % of the X-Axis values
        list_X_Values = list_X_Values[:-1*int_X_Values_To_Remove] #Cut the list down to size
        list_Y_Values = [y_Value for x in list_X_Values] #Create the Y-Values list

        ''' Produce the plot line '''
        pyplot_Line_4, = matplotlib__pyplot.plot(list_X_Values, list_Y_Values, linestyle='-', linewidth=int_Plot_Line_Width, figure=pyplot_Fig)
        
        ''' Add the description to the end of the line '''
        x_Pos = len(list_X_Values) + 0.25
        y_Pos = y_Value
        str_Line_Ending_Text = 'AgeNe N Adults (' + str(int(y_Value)) + ')'        
        
        if bool_Plot_Theme__Dark_Blue_1:
            str_Font_Colour = 'white'
            pyplot_Fig_FontProperties = pyplot_Fig_FontProperties__Base.copy()
        pass
        
        if bool_Plot_Theme__Default:                             
            matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text)
        else:
            matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text, color=str_Font_Colour, fontproperties=pyplot_Fig_FontProperties)
        pass
    
        '''
        -----------------------------
        Plot Line - AgeNe Nc - Fertile Adults 
        -----------------------------
        '''
        '''
        Font properties for subsequent text
        '''
        pyplot_Fig_FontProperties__Base = matplotlib__fontmanager.FontProperties(size=16)
                 
        with SSResults(self.obj_SSParams) as obj_Results:
            str_Key_AgeNe__Adult_Pop_Size__Nx_Nc_Adults = globalsSS.Colnames_AgeNe_Results.static_str_Colname_Nx_Nc_Adults
            str_Col_Name_AgeNe__Adult_Pop_Size__Nx_Nc_Adults = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Adult_Pop_Size__Nx_Nc_Adults)

        pass
        str_Y_Axis_df_1_Colname = str_Col_Name_AgeNe__Adult_Pop_Size__Nx_Nc_Adults 

#         pyplot_Line_4, = matplotlib__pyplot.plot(df_1[str_X_Axis_df_1_Colname], df_1[str_Y_Axis_df_1_Colname], linestyle='--', linewidth=2, figure=pyplot_Fig)
#         
#         ''' Get the value for display '''
#         int_AgeNe__Adult_Pop_Size__Nx_Adults__Nc = df_1[str_Y_Axis_df_1_Colname].iloc[0]
# 
#         ''' Add the description to the end of the line '''
#         str_Line_Ending_Text = 'AgeNe Nc (' + str(int(int_AgeNe__Adult_Pop_Size__Nx_Adults__Nc)) + ')'                             
#         matplotlib__pyplot.text(df_1[str_X_Axis_df_1_Colname].iloc[-1], df_1[str_Y_Axis_df_1_Colname].iloc[-1], str_Line_Ending_Text)

        ''' if a horizontal plot line - Get the value for plotting and display '''
        int_AgeNe__Adult_Pop_Size__Nx_Adults__Nc = int(df_1[str_Y_Axis_df_1_Colname].iloc[0])
        y_Value = int_AgeNe__Adult_Pop_Size__Nx_Adults__Nc
        
        ''' if a horizontal plot line - Get the X and Y values to actually plot ''' 
        list_X_Values = df_1[str_X_Axis_df_1_Colname].tolist()
        int_X_Values_Count = len(list_X_Values)
        int_X_Values_To_Remove = int(int_X_Values_Count*0.8) #Remove a % of the X-Axis values
        list_X_Values = list_X_Values[:-1*int_X_Values_To_Remove] #Cut the list down to size
        list_Y_Values = [y_Value for x in list_X_Values] #Create the Y-Values list

        ''' Produce the plot line '''
        pyplot_Line_4, = matplotlib__pyplot.plot(list_X_Values, list_Y_Values, linestyle='-', linewidth=int_Plot_Line_Width, figure=pyplot_Fig)
        
        ''' Add the description to the end of the line '''
        x_Pos = len(list_X_Values) + 0.25
        y_Pos = y_Value
        str_Line_Ending_Text = 'AgeNe Nc (' + str(int(y_Value)) + ')'        
        
        if bool_Plot_Theme__Dark_Blue_1:
            str_Font_Colour = 'white'
            pyplot_Fig_FontProperties = pyplot_Fig_FontProperties__Base.copy()
        pass
        
        if bool_Plot_Theme__Default:                             
            matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text)
        else:
            matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text, color=str_Font_Colour, fontproperties=pyplot_Fig_FontProperties)
        pass
    
        '''
        -----------------------------
        Plot Line - AgeNe Ne Demographic
        -----------------------------
        '''         
        with SSResults(self.obj_SSParams) as obj_Results:
            str_Key_AgeNe__Ne_Demo = globalsSS.Colnames_AgeNe_Results.static_str_Colname_NeDemo
            str_Col_Name_AgeNe__Ne_Demo = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Ne_Demo)
        pass
        str_Y_Axis_df_1_Colname = str_Col_Name_AgeNe__Ne_Demo 

#         pyplot_Line_5, = matplotlib__pyplot.plot(df_1[str_X_Axis_df_1_Colname], df_1[str_Y_Axis_df_1_Colname], linestyle='--', linewidth=2, figure=pyplot_Fig)
#         
#         ''' Get the value for display '''
#         float_NeDemo = df_1[str_Y_Axis_df_1_Colname].iloc[0]
# 
#         ''' Add the description to the end of the line '''
#         str_Line_Ending_Text = 'AgeNe Ne Demo (' + str(int(float_NeDemo)) + ')'                             
#         matplotlib__pyplot.text(df_1[str_X_Axis_df_1_Colname].iloc[-1], df_1[str_Y_Axis_df_1_Colname].iloc[-1], str_Line_Ending_Text)

        ''' if a horizontal plot line - Get the value for plotting and display '''
        float_NeDemo = df_1[str_Y_Axis_df_1_Colname].iloc[0]
        y_Value = Decimal(float_NeDemo)
        
        ''' if a horizontal plot line - Get the X and Y values to actually plot ''' 
        list_X_Values = df_1[str_X_Axis_df_1_Colname].tolist()
        int_X_Values_Count = len(list_X_Values)
        int_X_Values_To_Remove = int(int_X_Values_Count*0.2) #Remove 20% of the X-Axis values
        list_X_Values = list_X_Values[:-1*int_X_Values_To_Remove] #Cut the list down to size
        list_Y_Values = [y_Value for x in list_X_Values] #Create the Y-Values list

        ''' Produce the plot line '''
        pyplot_Line_5, = matplotlib__pyplot.plot(list_X_Values, list_Y_Values, linestyle='-.', linewidth=int_Plot_Line_Width, figure=pyplot_Fig)
        
        ''' Add the description to the end of the line '''
        x_Pos = len(list_X_Values) + 0.25
        y_Pos = y_Value
        str_Line_Ending_Text = 'AgeNe Ne Demo (' + str(int(round(y_Value))) + ')'                             

        if bool_Plot_Theme__Dark_Blue_1:
            str_Font_Colour = 'white'
            pyplot_Fig_FontProperties = pyplot_Fig_FontProperties__Base.copy()
        pass
        
        if bool_Plot_Theme__Default:                             
            matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text)
        else:
            matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text, color=str_Font_Colour, fontproperties=pyplot_Fig_FontProperties)
 
        '''
        -----------------------------
        Plot Line - AgeNe Nb Demographic
        -----------------------------
        '''         
        with SSResults(self.obj_SSParams) as obj_Results:
            str_Key_AgeNe__Nb_Demo = globalsSS.Colnames_AgeNe_Results.static_str_Colname_NbDemo
            str_Col_Name_AgeNe__Nb_Demo = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Nb_Demo)
        pass
        str_Y_Axis_df_1_Colname = str_Col_Name_AgeNe__Nb_Demo 
        
        ''' if a horizontal plot line - Get the value for plotting and display '''
        float_NbDemo = df_1[str_Y_Axis_df_1_Colname].iloc[0]
        y_Value = Decimal(float_NbDemo)
        
        ''' if a horizontal plot line - Get the X and Y values to actually plot ''' 
        list_X_Values = df_1[str_X_Axis_df_1_Colname].tolist()
        int_X_Values_Count = len(list_X_Values)
        int_X_Values_To_Remove = int(int_X_Values_Count*0.2) #Remove 20% of the X-Axis values
        list_X_Values = list_X_Values[:-1*int_X_Values_To_Remove] #Cut the list down to size
        list_Y_Values = [y_Value for x in list_X_Values] #Create the Y-Values list

        ''' Produce the plot line '''
        pyplot_Line_6, = matplotlib__pyplot.plot(list_X_Values, list_Y_Values, linestyle='-.', linewidth=int_Plot_Line_Width, figure=pyplot_Fig)
        
        ''' Add the description to the end of the line '''
        x_Pos = len(list_X_Values) + 0.25
        y_Pos = y_Value
        str_Line_Ending_Text = 'AgeNe Nb Demo (' + str(int(round(y_Value))) + ')'                             

        if bool_Plot_Theme__Dark_Blue_1:
            str_Font_Colour = 'white'
            pyplot_Fig_FontProperties = pyplot_Fig_FontProperties__Base.copy()
        pass
        
        if bool_Plot_Theme__Default:                             
            matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text)
        else:
            matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text, color=str_Font_Colour, fontproperties=pyplot_Fig_FontProperties)
 
        '''
        -----------------------------
        Plot Line - Exp1 Potential Parents
        -----------------------------
        '''         
        with SSResults(self.obj_SSParams) as obj_Results:
            str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category
            str_Col_Name_Exp1__Exp1__str_Stats_Category = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__str_Stats_Category)

            str_Key_Exp1__Potential_Parents_PP = globalsSS.Colnames_Parent_Offspring_Stats_METHOD_2.static_Str_Colname_Potential_Parents_PP
            str_Col_Name_Exp1__Potential_Parents_PP = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__Potential_Parents_PP)

        pass
        str_Y_Axis_df_1_Colname = str_Col_Name_Exp1__Potential_Parents_PP 

        ''' if a horizontal plot line - Get the value for plotting and display '''        
        float_Exp1__Potential_Parents_PP = float(df_2[str_Y_Axis_df_1_Colname].iloc[0])
        y_Value = Decimal(float_Exp1__Potential_Parents_PP)
        
        ''' if a horizontal plot line - Get the X and Y values to actually plot ''' 
        list_X_Values = df_1[str_X_Axis_df_1_Colname].tolist()
        int_X_Values_Count = len(list_X_Values)
        int_X_Values_To_Remove = int(int_X_Values_Count*0.50) #Remove 20% of the X-Axis values
        list_X_Values = list_X_Values[:-1*int_X_Values_To_Remove] #Cut the list down to size
        list_Y_Values = [y_Value for x in list_X_Values] #Create the Y-Values list

        ''' Produce the plot line '''
        pyplot_Line_7, = matplotlib__pyplot.plot(list_X_Values, list_Y_Values, linestyle='-.', linewidth=int_Plot_Line_Width, figure=pyplot_Fig)
        
        ''' Add the description to the end of the line '''
        x_Pos = len(list_X_Values) + 0.25
        y_Pos = y_Value
        str_Line_Ending_Text = 'Exp1 NcPP ' + str(int(round(y_Value))) + ')'                             

        if bool_Plot_Theme__Dark_Blue_1:
            str_Font_Colour = 'white'
            pyplot_Fig_FontProperties = pyplot_Fig_FontProperties__Base.copy()
        pass
        
        if bool_Plot_Theme__Default:                             
            matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text)
        else:
            matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text, color=str_Font_Colour, fontproperties=pyplot_Fig_FontProperties)
 
        '''
        -----------------------------
        Plot Line - LDNe Full PCrit 0
        -----------------------------
        '''         
        bool_FUL = True
        if bool_FUL:                     
            with SSResults(self.obj_SSParams) as obj_Results:
                str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category
                str_Col_Name_Exp1__Exp1__str_Stats_Category = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__str_Stats_Category)
    
                str_Key_Exp1__Ne2_floatPCrit = globalsSS.Colnames_Ne2_Output.static_Str_Colname_Ne2_floatPCrit
                str_Col_Name_Exp1__Ne2_floatPCrit = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__Ne2_floatPCrit)
    
                str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe = globalsSS.Colnames_Ne2_Aggregation.static_Str_Colname_float_Total_Ne2_r_Sqrd_LDNe
                str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe)
            pass
            str_Y_Axis_df_1_Colname = str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe 
    
            ''' Subset the DF to get the correct value '''
            str_Stats_Category = 'Full'
            df_2_Subset = df_2[(df_2[str_Col_Name_Exp1__Exp1__str_Stats_Category]==str_Stats_Category)]
            float_PCrit = 0
            df_2_Subset = df_2_Subset[(df_2[str_Col_Name_Exp1__Ne2_floatPCrit]==float_PCrit)]
    
            ''' if a horizontal plot line - Get the value for plotting and display '''        
            float_Total_Ne2_r_Sqrd_LDNe = df_2_Subset[str_Y_Axis_df_1_Colname].iloc[0]
            y_Value = Decimal(float_Total_Ne2_r_Sqrd_LDNe)

            ''' if a horizontal plot line - Get the X and Y values to actually plot ''' 
            list_X_Values = df_1[str_X_Axis_df_1_Colname].tolist()
            int_X_Values_Count = len(list_X_Values)
            int_X_Values_To_Remove = int(int_X_Values_Count*0.1) #Remove 20% of the X-Axis values
            list_X_Values = list_X_Values[:-1*int_X_Values_To_Remove] #Cut the list down to size
            list_Y_Values = [y_Value for x in list_X_Values] #Create the Y-Values list
    
            ''' Produce the plot line '''
            pyplot_Line_8, = matplotlib__pyplot.plot(list_X_Values, list_Y_Values, linestyle='-.', linewidth=int_Plot_Line_Width, figure=pyplot_Fig)
            
            ''' Add the description to the end of the line '''
            x_Pos = len(list_X_Values) + 0.25
            y_Pos = y_Value
            str_Line_Ending_Text = 'LDNe ' + str_Stats_Category + ' (PC ' + str(float_PCrit) + '; ' + str(int(round(y_Value))) + ')'                             
    
            if bool_Plot_Theme__Dark_Blue_1:
                str_Font_Colour = 'white'
                pyplot_Fig_FontProperties = pyplot_Fig_FontProperties__Base.copy()
            pass
            
            if bool_Plot_Theme__Default:                             
                matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text)
            else:
                matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text, color=str_Font_Colour, fontproperties=pyplot_Fig_FontProperties)
            pass
        pass
        '''
        -----------------------------
        Plot Line - LDNe Full PCrit 0.05
        -----------------------------
        '''         
        bool_FUL = True
        if bool_FUL:                     
            with SSResults(self.obj_SSParams) as obj_Results:
                str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category
                str_Col_Name_Exp1__Exp1__str_Stats_Category = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__str_Stats_Category)
    
                str_Key_Exp1__Ne2_floatPCrit = globalsSS.Colnames_Ne2_Output.static_Str_Colname_Ne2_floatPCrit
                str_Col_Name_Exp1__Ne2_floatPCrit = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__Ne2_floatPCrit)
    
                str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe = globalsSS.Colnames_Ne2_Aggregation.static_Str_Colname_float_Total_Ne2_r_Sqrd_LDNe
                str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe)
            pass
            str_Y_Axis_df_1_Colname = str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe 
    
            ''' Subset the DF to get the correct value '''
            str_Stats_Category = 'Full'
            df_2_Subset = df_2[(df_2[str_Col_Name_Exp1__Exp1__str_Stats_Category]==str_Stats_Category)]
            float_PCrit_Match = 0.0500000007451
            float_PCrit = 0.05
            df_2_Subset = df_2_Subset[(df_2[str_Col_Name_Exp1__Ne2_floatPCrit]==float_PCrit_Match)]
    
            ''' if a horizontal plot line - Get the value for plotting and display '''        
            float_Total_Ne2_r_Sqrd_LDNe = df_2_Subset[str_Y_Axis_df_1_Colname].iloc[0]
            y_Value = Decimal(float_Total_Ne2_r_Sqrd_LDNe)

            ''' if a horizontal plot line - Get the X and Y values to actually plot ''' 
            list_X_Values = df_1[str_X_Axis_df_1_Colname].tolist()
            int_X_Values_Count = len(list_X_Values)
            int_X_Values_To_Remove = int(int_X_Values_Count*0.1) #Remove 20% of the X-Axis values
            list_X_Values = list_X_Values[:-1*int_X_Values_To_Remove] #Cut the list down to size
            list_Y_Values = [y_Value for x in list_X_Values] #Create the Y-Values list
    
            ''' Produce the plot line '''
            pyplot_Line_8, = matplotlib__pyplot.plot(list_X_Values, list_Y_Values, linestyle='-.', linewidth=int_Plot_Line_Width, figure=pyplot_Fig)
            
            ''' Add the description to the end of the line '''
            x_Pos = len(list_X_Values) + 0.25
            y_Pos = y_Value
            str_Line_Ending_Text = 'LDNe ' + str_Stats_Category + ' (PC ' + str(float_PCrit) + '; ' + str(int(round(y_Value))) + ')'                             
    
            if bool_Plot_Theme__Dark_Blue_1:
                str_Font_Colour = 'white'
                pyplot_Fig_FontProperties = pyplot_Fig_FontProperties__Base.copy()
            pass
            
            if bool_Plot_Theme__Default:                             
                matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text)
            else:
                matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text, color=str_Font_Colour, fontproperties=pyplot_Fig_FontProperties)
            pass
        pass
        '''
        -----------------------------
        Plot Line - LDNe Large Mature PCrit 0.05
        -----------------------------
        '''
        bool_LMT = True
        if bool_LMT:                     
            with SSResults(self.obj_SSParams) as obj_Results:
                str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category
                str_Col_Name_Exp1__Exp1__str_Stats_Category = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__str_Stats_Category)
    
                str_Key_Exp1__Ne2_floatPCrit = globalsSS.Colnames_Ne2_Output.static_Str_Colname_Ne2_floatPCrit
                str_Col_Name_Exp1__Ne2_floatPCrit = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__Ne2_floatPCrit)
    
                str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe = globalsSS.Colnames_Ne2_Aggregation.static_Str_Colname_float_Total_Ne2_r_Sqrd_LDNe
                str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe)
            pass
            str_Y_Axis_df_1_Colname = str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe 
    
            ''' Subset the DF to get the correct value '''
            str_Stats_Category = 'Large_Mature'
            df_2_Subset = df_2[(df_2[str_Col_Name_Exp1__Exp1__str_Stats_Category]==str_Stats_Category)]
            float_PCrit_Match = 0.0500000007451
            float_PCrit = 0.05
            df_2_Subset = df_2_Subset[(df_2[str_Col_Name_Exp1__Ne2_floatPCrit]==float_PCrit_Match)]
    
            ''' if a horizontal plot line - Get the value for plotting and display '''        
            float_Total_Ne2_r_Sqrd_LDNe = df_2_Subset[str_Y_Axis_df_1_Colname].iloc[0]
            y_Value = Decimal(float_Total_Ne2_r_Sqrd_LDNe)
            
            ''' if a horizontal plot line - Get the X and Y values to actually plot ''' 
            list_X_Values = df_1[str_X_Axis_df_1_Colname].tolist()
            int_X_Values_Count = len(list_X_Values)
            int_X_Values_To_Remove = int(int_X_Values_Count*0.5) #Remove 20% of the X-Axis values
            list_X_Values = list_X_Values[:-1*int_X_Values_To_Remove] #Cut the list down to size
            list_Y_Values = [y_Value for x in list_X_Values] #Create the Y-Values list
    
            ''' Produce the plot line '''
            pyplot_Line_9, = matplotlib__pyplot.plot(list_X_Values, list_Y_Values, linestyle='-.', linewidth=int_Plot_Line_Width, figure=pyplot_Fig)
            
            ''' Add the description to the end of the line '''
            x_Pos = len(list_X_Values) + 0.25
            y_Pos = y_Value
            str_Line_Ending_Text = 'LDNe ' + str_Stats_Category + ' (PC ' + str(float_PCrit) + '; ' + str(int(round(y_Value))) + ')'                             
    
            if bool_Plot_Theme__Dark_Blue_1:
                str_Font_Colour = 'white'
                pyplot_Fig_FontProperties = pyplot_Fig_FontProperties__Base.copy()
            pass
            
            if bool_Plot_Theme__Default:                             
                matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text)
            else:
                matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text, color=str_Font_Colour, fontproperties=pyplot_Fig_FontProperties)
            pass
        pass 
        '''
        -----------------------------
        Plot Line - LDNe Large Embryo PCrit 0.05
        -----------------------------
        '''         
        with SSResults(self.obj_SSParams) as obj_Results:
            str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category
            str_Col_Name_Exp1__Exp1__str_Stats_Category = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__str_Stats_Category)

            str_Key_Exp1__Ne2_floatPCrit = globalsSS.Colnames_Ne2_Output.static_Str_Colname_Ne2_floatPCrit
            str_Col_Name_Exp1__Ne2_floatPCrit = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__Ne2_floatPCrit)

            str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe = globalsSS.Colnames_Ne2_Aggregation.static_Str_Colname_float_Total_Ne2_r_Sqrd_LDNe
            str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe)
        pass
        str_Y_Axis_df_1_Colname = str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe 

        ''' Subset the DF to get the correct value '''
        str_Stats_Category = 'Large_Embryo'
        df_2_Subset = df_2[(df_2[str_Col_Name_Exp1__Exp1__str_Stats_Category]=='Large_Embryo')]
        float_PCrit_Match = 0.0500000007451
        float_PCrit = 0.05
        df_2_Subset = df_2_Subset[(df_2[str_Col_Name_Exp1__Ne2_floatPCrit]==float_PCrit_Match)]

        ''' if a horizontal plot line - Get the value for plotting and display '''
        float_Total_Ne2_r_Sqrd_LDNe = df_2_Subset[str_Y_Axis_df_1_Colname].iloc[0]
        y_Value = Decimal(float_Total_Ne2_r_Sqrd_LDNe)
        
        ''' if a horizontal plot line - Get the X and Y values to actually plot ''' 
        list_X_Values = df_1[str_X_Axis_df_1_Colname].tolist()
        int_X_Values_Count = len(list_X_Values)
        int_X_Values_To_Remove = int(int_X_Values_Count*0.9) #Remove 20% of the X-Axis values
        list_X_Values = list_X_Values[:-1*int_X_Values_To_Remove] #Cut the list down to size
        list_Y_Values = [y_Value for x in list_X_Values] #Create the Y-Values list

        ''' Produce the plot line '''
        pyplot_Line_10, = matplotlib__pyplot.plot(list_X_Values, list_Y_Values, linestyle='-.', linewidth=int_Plot_Line_Width, figure=pyplot_Fig)
        
        ''' Add the description to the end of the line '''
        x_Pos = len(list_X_Values) + 0.25
        y_Pos = y_Value
        str_Line_Ending_Text = 'LDNe ' + str_Stats_Category + ' (PC ' + str(float_PCrit) + '; ' + str(int(round(y_Value))) + ')'                             

        if bool_Plot_Theme__Dark_Blue_1:
            str_Font_Colour = 'white'
            pyplot_Fig_FontProperties = pyplot_Fig_FontProperties__Base.copy()
        pass
        
        if bool_Plot_Theme__Default:                             
            matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text)
        else:
            matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text, color=str_Font_Colour, fontproperties=pyplot_Fig_FontProperties)
     
      
        # lines.lineStyles.keys()
        # ['', ' ', 'None', '--', '-.', '-', ':']        
        #matplotlib__pyplot.annotate('Ne Demo', xy=(100, 15), xytext=(100, 18))
#         ,
#             arrowprops=dict(facecolor='black', shrink=0.05),
#             )

        '''
        -----------------------------
        Format Plot
        -----------------------------
        '''


        '''
        ~~~~~~~~~~~~~~~~~~
        Grid and ticks details
        ~~~~~~~~~~~~~~~~~~
        '''
        matplotlib__pyplot.grid(True, figure=pyplot_Fig)
        
        '''
        ~~~~~~~~~~~~~~~~~~
        Axis details
        ~~~~~~~~~~~~~~~~~~
        '''
#         [xmin, xmax, ymin, ymax] = matplotlib__pyplot.axis()
#         matplotlib__pyplot.xlim(1, xmax)

        '''
        ~~~~~~~~~~~~~~~~~~
        Legend details
        ~~~~~~~~~~~~~~~~~~
        '''
        float_Bbox_X_Pos = 0.80
        float_Bbox_Y_Pos = 0.35
        pyplot_Fig_Legend = pyplot_Fig.legend([
                           pyplot_Line_1
                           , pyplot_Line_2
                           , pyplot_Line_3
#                            , pyplot_Line_4
#                            , pyplot_Line_5
#                            , pyplot_Line_6
#                            , pyplot_Line_7
                           ]
                          ,[
                            'Nx - Survivors per year'
                            ,'Bx - Offspring per year'
                            ,'Dx - Deaths per year'
#                             ,'Adults - Nc (' + str(int(str_Adult_Pop_Size__Nc)) + ')'
#                             ,'Ne Demo (' + str(int(float_NeDemo)) + ')'
#                             ,'Nb Demo (' + str(int(float_NbDemo)) + ')'
#                             ,'LDNe Full (PC ' + str(float_PCrit) + '; ' + str(int(float_Total_Ne2_r_Sqrd_LDNe)) + ')'
                            ]
                          ,bbox_to_anchor=(float_Bbox_X_Pos, float_Bbox_Y_Pos)
                          ,frameon = 1)
        
        
        '''
        ~~~~~~~~~~~~~~~~~~
        Label details
        ~~~~~~~~~~~~~~~~~~
        '''
        ''' Get colnames in order to get data from df_1 '''
        with SSResults(self.obj_SSParams) as obj_Results:
            str_Key_AgeNe__Sim_Pop_Size = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Pop_Size
            str_Col_Name_AgeNe__Sim_Pop_Size = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Sim_Pop_Size)
            str_Key_AgeNe__N_Adult_Pop_Size = globalsSS.Colnames_AgeNe_Results.static_str_Colname_Nx_N_Adults
            str_Col_Name_AgeNe__N_Adult_Pop_Size = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__N_Adult_Pop_Size)
            str_Key_AgeNe__Nc_Adult_Pop_Size = globalsSS.Colnames_AgeNe_Results.static_str_Colname_Nx_Nc_Adults
            str_Col_Name_AgeNe__Nc_Adult_Pop_Size = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Nc_Adult_Pop_Size)
            str_Key_AgeNe__Sim_Replicates = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Sim_Replicates
            str_Col_Name_AgeNe__Sim_Replicates = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Sim_Replicates)
            str_Key_AgeNe__Loci = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Loci
            str_Col_Name_AgeNe__Loci = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Loci)
            str_Key_Sim__Run_User_Defined_Folder = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Run_User_Defined_Folder
            str_Col_Name_Sim__Run_User_Defined_Folder = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Sim__Run_User_Defined_Folder)
        pass

        ''' Get values from df_1 '''
        str_Pop_Size__N = str(df_1[str_Col_Name_AgeNe__Sim_Pop_Size].iloc[0])
        str_Adult_Pop_Size__N = str(int_AgeNe__Adult_Pop_Size__Nx_Adults__N)
        str_Adult_Pop_Size__Nc = str(int_AgeNe__Adult_Pop_Size__Nx_Adults__Nc)
        str_Replicates = str(df_1[str_Col_Name_AgeNe__Sim_Replicates].iloc[0])
        str_Loci = str(df_1[str_Col_Name_AgeNe__Loci].iloc[0])
        str_Sim__Run_User_Defined_Folder = str(df_1[str_Col_Name_Sim__Run_User_Defined_Folder].iloc[0])

        str_Fig_Title = str('Population Demographic Profile, AgeNe Ne & Nb Demo vs LDNe from Embryo & Mature Cohorts')

        ''' Title spacing '''
        matplotlib__pyplot.subplots_adjust(top=0.87)
        ''' Font details '''          
        int_Plot_SupTitle_Size = 18
        if bool_Plot_Theme__Dark_Blue_1:
            str_Font_Colour = 'white'
        else:
            str_Font_Colour = 'blue'


        matplotlib__pyplot.suptitle(str_Fig_Title, fontsize=int_Plot_SupTitle_Size, color=str_Font_Colour, figure=pyplot_Fig)

        ''' Font details '''          
#         int_Plot_SupTitle_Size = 16
#         str_Font_Colour = 'blue'
                
        str_Plot_Title = str('N:' + str_Pop_Size__N + ', '
                        #+ 'Nc: ' + str_Adult_Pop_Size__Nc + ', '
                        + 'Loci: ' + str_Loci + ', '
                        + 'Reps: ' + str_Replicates
                        + '\n'
                        + 'Run: ' + str_Sim__Run_User_Defined_Folder)

        ''' Font details '''          
        int_Plot_Title_Size = 16
        if bool_Plot_Theme__Dark_Blue_1:
            str_Font_Colour = 'grey'
        else:
            str_Font_Colour = 'blue'
                
        matplotlib__pyplot.title(str_Plot_Title, fontsize=int_Plot_Title_Size, color=str_Font_Colour, figure=pyplot_Fig)

        ''' Font details '''          
        int_PLot_Y_Label_Size = 16
        if bool_Plot_Theme__Dark_Blue_1:
            str_Font_Colour = 'white'
        else:
            str_Font_Colour = 'blue'
                                        
        matplotlib__pyplot.xlabel('Age Cohort (years)', fontsize=int_PLot_Y_Label_Size, color=str_Font_Colour, figure=pyplot_Fig)
        matplotlib__pyplot.ylabel('Individuals', fontsize=int_PLot_Y_Label_Size, color=str_Font_Colour, figure=pyplot_Fig)
        
        
        '''
        ~~~~~~~~~~~~~~~~~~
        Label Unique Identifier details
        ~~~~~~~~~~~~~~~~~~
        '''
        ''' Get colnames in order to get data from df_1 '''
        with SSResults(self.obj_SSParams) as obj_Results:
            str_Key_Sim__Run_User_Defined_Folder = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Run_User_Defined_Folder
            str_Col_Name_Sim__Run_User_Defined_Folder = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Sim__Run_User_Defined_Folder)
            str_Key_Sim__Unique_Run_ID = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Unique_Run_ID
            str_Col_Name_Sim__Unique_Run_ID = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Sim__Unique_Run_ID)

        pass

        
        ''' Get values from df_1 '''
        str_Sim__Unique_Run_ID = str(df_1[str_Col_Name_Sim__Unique_Run_ID].iloc[0])
        
        str_UID_Text = str(str_Sim__Unique_Run_ID)

        ''' Font details '''          
        int_Font_Size = 6
        str_Font_Colour = 'darkgrey'
        
        ''' Add figure text '''
        #matplotlib__pyplot.figtext(.75,.99,str_UID_Text, fontsize=int_Font_Size, color=str_Font_Colour, figure=pyplot_Fig)
        matplotlib__pyplot.figtext(.70,.005,str_UID_Text, fontsize=int_Font_Size, color=str_Font_Colour, figure=pyplot_Fig)

        str_Sim__Run_User_Defined_Folder = str(df_1[str_Col_Name_Sim__Run_User_Defined_Folder].iloc[0])

        str_RUDF_Text = str(str_Sim__Run_User_Defined_Folder)

        ''' Font details '''          
        int_Font_Size = 6
        str_Font_Colour = 'darkgrey'
        
        ''' Add figure text '''
        #matplotlib__pyplot.figtext(.75,.91,str_RUDF_Text, fontsize=int_Font_Size, color=str_Font_Colour, figure=pyplot_Fig)
        matplotlib__pyplot.figtext(.70,.015,str_RUDF_Text, fontsize=int_Font_Size, color=str_Font_Colour, figure=pyplot_Fig)


        '''
        ~~~~~~~~~~~~~~~~~~
        Colours - Axis & Tick
        ~~~~~~~~~~~~~~~~~~
        '''

        if bool_Plot_Theme__Dark_Blue_1:
            str_Colour = 'darkblue'

        else:
            str_Colour = 'white'
        pass        
        #ax1 = pyplot_Fig.add_subplot(111, axisbg=str_Colour)
        ax1 = pyplot_Fig.add_subplot(111)
        
#         ax.plot(range(10))
#         ax.set_xlabel('X-axis')
#         ax.set_ylabel('Y-axis')
        
#         ax.spines['bottom'].set_color('red')
#         ax.spines['top'].set_color('red')
#         ax.xaxis.label.set_color('red')
        if bool_Plot_Theme__Dark_Blue_1:
            int_Tick_Label_Size = 16
            str_X_Axis_Tick_Labels_Colour = 'white'
            str_Y_Axis_Tick_Labels_Colour = 'white'
            str_X_Axis_Tick_Major_Colour = 'white'
            str_X_Axis_Tick_Minor_Colour = 'grey'
            str_Y_Axis_Tick_Major_Colour = 'white'
            str_Y_Axis_Tick_Minor_Colour = 'grey'
        pass
    
        if bool_Plot_Theme__Default == False:
            ax1.tick_params(axis='x', colors=str_X_Axis_Tick_Labels_Colour)
            ax1.tick_params(axis='y', colors=str_Y_Axis_Tick_Labels_Colour)
    
            # We change the fontsize of minor ticks label 
            ax1.tick_params(axis='x', which='major', labelsize=int_Tick_Label_Size, color=str_X_Axis_Tick_Major_Colour)
            ax1.tick_params(axis='x', which='minor', labelsize=int_Tick_Label_Size, color=str_X_Axis_Tick_Minor_Colour)
            ax1.tick_params(axis='y', which='major', labelsize=int_Tick_Label_Size, color=str_Y_Axis_Tick_Major_Colour)
            ax1.tick_params(axis='y', which='minor', labelsize=int_Tick_Label_Size, color=str_Y_Axis_Tick_Minor_Colour) 
        pass 
    
        ''' Axis tick pointing direction '''
        ax1.tick_params(axis='x', direction='out')
        ax1.tick_params(axis='y', direction='out')
        
        ''' Specify axis ticks to be plotted '''
        ax1.xaxis.tick_bottom() 
        ax1.yaxis.tick_left() 
             
#         for ax, color in zip([ax1], ['white']):
#             matplotlib__pyplot.setp(ax.spines.values(), color=color)
#             matplotlib__pyplot.setp([ax.get_xticklines(), ax1.get_yticklines()], color=color)        
#         
#         ax1.axhline(linewidth=4, color="w") # inc. width of x-axis and color it
#         ax1.axvline(linewidth=4, color="w") # inc. width of y-axis and color it

        if bool_Plot_Theme__Dark_Blue_1:
            str_Colour = 'white'

        else:
            str_Colour = 'black'
        pass
        for axis in ['top','bottom','left','right']:
            ax1.spines[axis].set_linewidth(4)
            ax1.spines[axis].set_color(str_Colour)
 
        ax1.spines['top'].set_visible(False)
        ax1.spines['right'].set_visible(False)           

        ''' Legend '''
        
        
        pyplot_Fig_Legend_Frame = pyplot_Fig_Legend.get_frame()
        
        pyplot_Fig_Legend_Frame.set_color('white')
        ''' Legend frame background '''
        #pyplot_Fig_Legend_Frame.set_facecolor('green')
        ''' Legend frame border '''
        #pyplot_Fig_Legend_Frame.set_edgecolor('red')
        
        ''' Turn off frame outline '''
        pyplot_Fig_Legend_Frame.set_linewidth(0)
        
        # set the alpha value of the legend: it will be translucent
        pyplot_Fig_Legend_Frame.set_alpha(0.5)                                                    
        

        #ax1.grid(True, figure=pyplot_Fig)

        bool_Format_Ticks = False
        if bool_Format_Ticks:
            nparray_Major_Ticks_X = ax1.xaxis.get_majorticklocs()      
            if len(nparray_Major_Ticks_X) > 1: 
                float_Major_Ticks_X_First = nparray_Major_Ticks_X[0]
                float_Major_Ticks_X_Last = nparray_Major_Ticks_X[-1]
                float_Major_Ticks_X_Interval = 5
                nparray_Major_Ticks_X = numpy.arange(float_Major_Ticks_X_First, float_Major_Ticks_X_Last, float_Major_Ticks_X_Interval)                                              
                ax1.set_xticks(nparray_Major_Ticks_X) 
            nparray_Minor_Ticks_X = ax1.xaxis.get_minorticklocs()
            if len(nparray_Minor_Ticks_X) > 1:     
                float_Minor_Ticks_X_First = nparray_Minor_Ticks_X[0]
                float_Minor_Ticks_X_Last = nparray_Minor_Ticks_X[-1]
                float_Minor_Ticks_X_Interval = 1
                nparray_Minor_Ticks_X = numpy.arange(float_Minor_Ticks_X_First, float_Minor_Ticks_X_Last, float_Minor_Ticks_X_Interval)                                              
                ax1.set_xticks(nparray_Minor_Ticks_X, minor=True)
            
            nparray_Major_Ticks_Y = ax1.yaxis.get_majorticklocs()      
            if len(nparray_Major_Ticks_Y) > 1: 
                float_Major_Ticks_Y_First = nparray_Major_Ticks_Y[0]
                float_Major_Ticks_Y_Last = nparray_Major_Ticks_Y[-1]
                float_Major_Ticks_Y_Interval = 50
                nparray_Major_Ticks_Y = numpy.arange(float_Major_Ticks_Y_First, float_Major_Ticks_Y_Last, float_Major_Ticks_Y_Interval)                                              
                ax1.set_yticks(nparray_Major_Ticks_Y)  
                
            nparray_Minor_Ticks_Y = ax1.yaxis.get_minorticklocs()      
            if len(nparray_Minor_Ticks_Y) > 1: 
                float_Minor_Ticks_Y_First = nparray_Minor_Ticks_Y[0]
                float_Minor_Ticks_Y_Last = nparray_Minor_Ticks_Y[-1]
                float_Minor_Ticks_Y_Interval = 1
                nparray_Minor_Ticks_Y = numpy.arange(float_Minor_Ticks_Y_First, float_Minor_Ticks_Y_Last, float_Minor_Ticks_Y_Interval)                                              
                ax1.set_yticks(nparray_Minor_Ticks_Y, minor=True)                                  
            
                                                                  
            ax1.grid(which='both')                                                   
        pass
                                                  
        
        # and a corresponding grid                                                       
        
        ax1.grid(which='both')                                                            
        
        # or if you want differnet settings for the grids:                               
        ax1.grid(which='minor', alpha=0.2)                                                
        ax1.grid(which='major', alpha=0.5)   
        
              
        #DEBUG_ON
        ''' Required to change background of INTERACTIVE WINDOW only'''
        if bool_Plot_Theme__Dark_Blue_1:
            pyplot_Fig_Patch = pyplot_Fig.patch
            pyplot_Fig_Patch.set_facecolor('darkblue') # works with plt.show().  
        pass
        #matplotlib__pyplot.show()
        #DEBUG_OFF
        
                                
        return pyplot_Fig

    '''
    -------------------------------------------------------------
    Plot EXPERIMENT POST SIM & AGENE_DEMOGRAPHIC PROFILE Per Replicate EOR SUMMARISED Results
    -------------------------------------------------------------
    '''   
    def func__Plot_EXPERIMENT_AgeNe_Sim_Demographic_Population_Profile__Get_Data_OLD(self, str_Search_Path):

        boolSuccess = False
       
        '''
        -------------------------------
        Specify Final Output File
        -------------------------------
        '''
        ''' Output plot '''
        str_Excel_Input_Colname_Prefix = globalsSS.Excel_Results_File_Details.static_Excel_Colname_Prefix__AgeNe_Sim_Summarise_ALL_EOR__Summary_Results
        str_Excel_Input_FileName =  globalsSS.Excel_Results_File_Details.static_Excel_FileName__AgeNe_Sim_Summarise_ALL_EOR__Summary_Results
        
#         str_Plot_Output_File_1 = self.obj_SSParams.strOutputLocation_CumulativeRun_Path + '\\' + self.obj_SSParams.strUniqueRunID + '_' + str_Excel_Input_FileName + '_' + str_Excel_Input_Colname_Prefix + '.png'
#         str_Plot_Output_File_2 = self.obj_SSParams.strOutputLocation_CumulativeRun_Path + '\\' + self.obj_SSParams.strUniqueRunID + '_' + str_Excel_Input_FileName + '_' + str_Excel_Input_Colname_Prefix + '.pdf'
        str_Plot_Output_File_1 = str_Search_Path + '\\' + self.obj_SSParams.strUniqueRunID + '_' + str_Excel_Input_FileName + '_' + str_Excel_Input_Colname_Prefix + '.png'
        str_Plot_Output_File_2 = str_Search_Path + '\\' + self.obj_SSParams.strUniqueRunID + '_' + str_Excel_Input_FileName + '_' + str_Excel_Input_Colname_Prefix + '.pdf'

        '''
        -------------------------------
        Specify Excel Input file
        -------------------------------
        '''        
        str_Input_FileName = '*' + str_Excel_Input_FileName + '*.xlsx'
        str_File_Search_Pattern = str_Input_FileName
        
        '''
        -------------------------------
        Import Excel Data to dataframee
        -------------------------------
        '''
        '''
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~
        Get & Process Input SHEET
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~
        '''
        str_Input_Excel_Sheet_Name = globalsSS.Excel_Results_File_Details.static_Excel_Colname_Prefix__AgeNe_Sim_Summarise_ALL_EOR__Summary_Results

        self.obj_Log_Default.info('Dataframing results for: ' + str_Input_FileName + ' and for SHEET: ' + str_Input_Excel_Sheet_Name) 

        bool_File_1_Located = False
        with FileHandler() as obj_FileHandler:
            bool_File_1_Located, list_Path_And_Files = obj_FileHandler.func_Locate_Files(str_Search_Path, str_File_Search_Pattern)
       
        if bool_File_1_Located:
            
            '''Process Results'''
            list_DF_1s = []            
            for str_Path_And_File in list_Path_And_Files:
                
                '''Get the data from the excel files with the specified sheet'''
                xl = pandas.ExcelFile(str_Path_And_File)
                df_1 = xl.parse(str_Input_Excel_Sheet_Name)
                list_DF_1s.append(df_1)
                
            pass

            ''' concatinate the dfs '''
            df_Aggregate = pandas.DataFrame()
            for df_New in list_DF_1s:
                '''log the results'''
                #str_Df = df_New.to_string()
                #self.obj_Log_Debug.debug('Results dataframe NEW: %s' % str_Df)
                
                #Concat DFs - Tried df.append() but it wont work
                df_Aggregate = pandas.concat([df_Aggregate,df_New], ignore_index=True)
                
                #str_Df = df_Aggregate.to_string()
                #self.obj_Log_Debug.debug('Results dataframe AGGREGATE: %s' % str_Df)

            pass

            #DEBUG_ON
            #str_Df = df_Aggregate.to_string()
            #self.obj_Log_Debug.debug('Results dataframe AGGREGATE 1: %s' % str_Df)
            #DEBUG_OFF
            
            df1 = df_Aggregate 
        else:
            self.obj_Log_Default.error('File specified could not be located; str_Search_Path = ' + str_Search_Path + '; strFileSearchPattern = ' + str_File_Search_Pattern)
        pass
    
        '''
        -------------------------------
        Get More Data
        -------------------------------
        '''
        '''
        -------------------------------
        Specify Excel Input file 2
        -------------------------------
        '''        
        #str_Excel_Input_Colname_Prefix = globalsSS.Excel_Results_File_Details.static_Excel_Colname_Prefix__EXPERIMENT_Parent_Offspring_Ne_1__Summary_Results
        str_Excel_Input_FileName =  globalsSS.Excel_Results_File_Details.static_Excel_FileName__Ne2_LDNe__Summary_EOR_Results
 
        str_Input_FileName = '*' + str_Excel_Input_FileName + '*.xlsx'
        str_File_Search_Pattern = str_Input_FileName
        
        '''
        -------------------------------
        Import Excel Data to dataframee
        -------------------------------
        '''
        '''
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~
        Get & Process Input SHEET
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~
        '''
        str_Input_Excel_Sheet_Name = globalsSS.Excel_Results_File_Details.static_Excel_SheetName__Ne2_LDNe__Summary_EOR_Results

        self.obj_Log_Default.info('Dataframing results for: ' + str_Input_FileName + ' and for SHEET: ' + str_Input_Excel_Sheet_Name) 

        bool_File_2_Located = False
        with FileHandler() as obj_FileHandler:
            bool_File_2_Located, list_Path_And_Files = obj_FileHandler.func_Locate_Files(str_Search_Path, str_File_Search_Pattern)
       
        if bool_File_2_Located:
            
            '''Process Results'''
            list_DF_2s = []            
            for str_Path_And_File in list_Path_And_Files:
                
                '''Get the data from the excel files with the specified sheet'''
                xl = pandas.ExcelFile(str_Path_And_File)
                df_2 = xl.parse(str_Input_Excel_Sheet_Name)
                list_DF_2s.append(df_2)
                
            pass

            ''' concatinate the dfs '''
            df_Aggregate = pandas.DataFrame()
            for df_New in list_DF_2s:
                '''log the results'''
                #str_Df = df_New.to_string()
                #self.obj_Log_Debug.debug('Results dataframe NEW: %s' % str_Df)
                
                #Concat DFs - Tried df.append() but it wont work
                df_Aggregate = pandas.concat([df_Aggregate,df_New], ignore_index=True)
                
                #str_Df = df_Aggregate.to_string()
                #self.obj_Log_Debug.debug('Results dataframe AGGREGATE: %s' % str_Df)

            pass

            #DEBUG_ON
            #str_Df = df_Aggregate.to_string()
            #self.obj_Log_Debug.debug('Results dataframe AGGREGATE 1: %s' % str_Df)
            #DEBUG_OFF
            
            df2 = df_Aggregate 
        else:
            self.obj_Log_Default.error('File specified could not be located; str_Search_Path = ' + str_Search_Path + '; strFileSearchPattern = ' + str_File_Search_Pattern)
        pass


        '''
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~
        Transform the data
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~
        '''  
        if bool_File_1_Located and bool_File_2_Located:
            
            ''' Send the relevent DFs  '''
            list_DFs = [df1, df2]
     
            list_DFs = self.func__Plot_EXPERIMENT_AgeNe_Sim_Demographic_Population_Profile__Transform_And_Process(str_Excel_Input_FileName, str_Excel_Input_Colname_Prefix, list_DFs)
            
        pass
    
                    
        return boolSuccess


    def func__Plot_EXPERIMENT_AgeNe_Sim_Demographic_Population_Profile__Transform_And_Process_OLD(self, str_Excel_Input_FileName, str_Excel_Input_Colname_Prefix, list_DFs):
        
        self.obj_Log_Default.info('Transforming data')

        '''
        -----------------------------
        Specify DFs
        -----------------------------
        '''
        df_1 = list_DFs[0]
        df_2 = list_DFs[1]
           
        with SSResults(self.obj_SSParams) as obj_Results:
            str_Group_Key_Mating_Count_Replicate_Total = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Mating_Count_Replicate_Total
            str_Col_Name_Mating_Count_Replicate_Total_DF1 = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Group_Key_Mating_Count_Replicate_Total)
            str_Col_Name_Mating_Count_Replicate_Total_DF2 = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Group_Key_Mating_Count_Replicate_Total)
        pass

        ''' Get all the UNIQUE Mating_Count_Replicate_Total values '''
        #nparray_Mating_Count_Replicate_Total = numpy.unique(df_1[str_Col_Name_Mating_Count_Replicate_Total_DF1])
        nparray_Mating_Count_Replicate_Total = numpy.unique(df_2[str_Col_Name_Mating_Count_Replicate_Total_DF2])

        ''' Get Y-Axis Max '''
        with SSResults(self.obj_SSParams) as obj_Results:
            str_Key_AgeNe__Ne_Demo = globalsSS.Colnames_AgeNe_Results.static_str_Colname_NeDemo
            str_Col_Name_AgeNe__Ne_Demo = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Ne_Demo)
            str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe = globalsSS.Colnames_Ne2_Aggregation.static_Str_Colname_float_Total_Ne2_r_Sqrd_LDNe
            str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe)
            df_Temp = pandas.DataFrame()
            df_Temp_1 = pandas.DataFrame()
            df_Temp_2 = pandas.DataFrame()
            df_Temp_1["Max"] = df_1[[str_Col_Name_AgeNe__Ne_Demo]].max(axis=1)
#             df_Temp_2["Max"] = df_2[[str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe]].max(axis=1)
#             df_Temp = pandas.concat([df_Temp_1,df_Temp_2], ignore_index=True)
            df_Temp = df_Temp_1
            int_Y_Axis_Max = df_Temp["Max"].max(axis=0)
            int_Y_Axis_Max = int(math.ceil(int_Y_Axis_Max / 500)) * 500
            del df_Temp_1     
            del df_Temp_2     
            del df_Temp     
        pass 
                
        for int_Mating_Count_Replicate_Total in nparray_Mating_Count_Replicate_Total:

            '''
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~
            Transform
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~
            '''  
            self.obj_Log_Default.info('Transforming data for int_Mating_Count_Replicate_Total :' + str(int_Mating_Count_Replicate_Total))
                      
            ''' Subset the DF to get the correct value '''
            df_1_Subset = df_1[(df_1[str_Col_Name_Mating_Count_Replicate_Total_DF1]==int_Mating_Count_Replicate_Total)]
            
            #DEBUG_ON
            #str_Df = df_1_Subset.to_string()
            #self.obj_Log_Debug.debug('Results dataframe df 1: %s' % str_Df)
            #raw_input('pausing')
            #DEBUG_OFF    
            
            df_2_Subset = df_2[(df_2[str_Col_Name_Mating_Count_Replicate_Total_DF2]==int_Mating_Count_Replicate_Total)]
            
            #DEBUG_ON
            #str_Df = df_2_Subset.to_string()
            #self.obj_Log_Debug.debug('Results dataframe df 2: %s' % str_Df)
            #raw_input('pausing')
            #DEBUG_OFF            

            list_DFs = [df_1_Subset, df_2_Subset] 
            
            '''
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~
            Plot
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~
            '''    
            
            ''' Send the relevent DFs to the plotter '''
            #list_DFs = [df1, df2]
            
            bool_Interactive_Display = False
            ''' Specify the number of figure copies and their specs '''
            dict_Fig_Copies = {
                                1:{'ColourScheme':'Default', 'Transparent':False, 'Interactive_Display':bool_Interactive_Display, 'Save_PNG': True, 'Save_PDF': False}
                               #,2:{'ColourScheme':'Dark_Blue', 'Transparent':True, 'Interactive_Display':bool_Interactive_Display,'Save_PNG': True, 'Save_PDF': False}
                               }
            
            pyplot_Fig_1 = None
            for key_Dict_Fig_Copy_Params, value_Dict_Fig_Copy_Params in dict_Fig_Copies.iteritems():
                
                pyplot_Fig_1 = self.func__Plot_EXPERIMENT_AgeNe_Sim_Demographic_Population_Profile__Plot(list_DFs, int_Mating_Count_Replicate_Total, int_Y_Axis_Max, value_Dict_Fig_Copy_Params)
                
                '''
                ~~~~~~~~~~~~~~~~~~~~~~~~~~~
                Save results
                ~~~~~~~~~~~~~~~~~~~~~~~~~~~
                '''    
                str_Plot_Output_Path = self.obj_SSParams.strOutputLocation_CumulativeRun_Path + '\\AGENE_DEM_Plots\\'
                ''' Create path if it doesnt exist '''
                with FileHandler() as obj_File_Op:
                    obj_File_Op.method_Create_Path(str_Plot_Output_Path)
                pass                
                str_Plot_Output_FileName = self.obj_SSParams.strUniqueRunID + '_' + str_Excel_Input_FileName + '_' + str_Excel_Input_Colname_Prefix + '_' + str(int_Mating_Count_Replicate_Total)
                str_Plot_Output_Path_And_FileName = str_Plot_Output_Path + str_Plot_Output_FileName
                if value_Dict_Fig_Copy_Params['Save_PNG'] == True:
                    str_Plot_Output_Path_And_FileName_PNG = str_Plot_Output_Path_And_FileName + '_' + str(key_Dict_Fig_Copy_Params) + '.png'
                    bool_Transparent = value_Dict_Fig_Copy_Params['Transparent']
                    pyplot_Fig_1.savefig(str_Plot_Output_Path_And_FileName_PNG, bbox_inches='tight', dpi=400, transparent=bool_Transparent)
                pass
                if value_Dict_Fig_Copy_Params['Save_PDF'] == True:
                    str_Plot_Output_Path_And_FileName_PDF = str_Plot_Output_Path_And_FileName + '_' + str(key_Dict_Fig_Copy_Params) + '.pdf'
                    pyplot_Fig_1.savefig(str_Plot_Output_Path_And_FileName_PDF, bbox_inches='tight')
                pass
        
                '''
                ~~~~~~~~~~~~~~~~~~~~~~~~~~~
                Display results
                ~~~~~~~~~~~~~~~~~~~~~~~~~~~
                '''
                if value_Dict_Fig_Copy_Params['Interactive_Display'] == True:           
                    matplotlib__pyplot.show()
                pass
            pass
            ''' Close the plot '''
            matplotlib__pyplot.close(pyplot_Fig_1) 
        pass
                  
        pass        
        
        
        return list_DFs


    def func__Plot_EXPERIMENT_AgeNe_Sim_Demographic_Population_Profile__Plot_OLD(self, list_DFs, int_Mating_Count_Replicate_Total, int_Y_Axis_Max, dict_Fig_Copy):
        
        self.obj_Log_Default.info('Creating figure')
        
        bool_Plot_Theme__Default = False
        bool_Plot_Theme__Dark_Blue_1 = False
        
        if dict_Fig_Copy['ColourScheme'] == 'Dark_Blue':
            bool_Plot_Theme__Dark_Blue_1 = True
        else:
            bool_Plot_Theme__Default = True
        pass

        int_Plot_Line_Width = 4
        '''
        -----------------------------
        Specify DFs
        -----------------------------
        '''
        df_1 = list_DFs[0]
        #df_2 = list_DFs[1]
        
        
        '''
        -----------------------------
        Specify X-Axis
        -----------------------------
        '''
        with SSResults(self.obj_SSParams) as obj_Results:
            str_Key_AgeNe__Age = globalsSS.Colnames_AgeNe_Results.static_str_Colname_Age
            str_Col_Name_AgeNe__Age = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Age)
        pass
        str_X_Axis_df_1_Colname = str_Col_Name_AgeNe__Age
        list_Primary_X_Axis = df_1[str_X_Axis_df_1_Colname].tolist()

        '''
        -----------------------------
        Specify Y-Axis Max
        -----------------------------
        '''
        with SSResults(self.obj_SSParams) as obj_Results:
            str_Key_AgeNe__Nx = globalsSS.Colnames_AgeNe_Results.static_str_Colname_Nx
            str_Col_Name_AgeNe__Nx = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Nx)
        pass
  
        
        ''' Get Y-Axis Max '''
        with SSResults(self.obj_SSParams) as obj_Results:
            df_Temp_1 = pandas.DataFrame()
            df_Temp_1["Max"] = df_1[[str_Col_Name_AgeNe__Nx]].max(axis=1)
            df_Temp = df_Temp_1
            int_Y_Axis_Max = df_Temp["Max"].max(axis=0)
            int_Y_Axis_Max = int(math.ceil(int_Y_Axis_Max / 500)) * 1000
            del df_Temp_1     
            del df_Temp     
        pass         
            
        '''
        -----------------------------
        Create figure
        -----------------------------
        '''
        # default scale is 1 in your original case, scales with other cases:
        int_X_Axis_Length = len(df_1[str_X_Axis_df_1_Colname])
        int_Width_Scale = int_X_Axis_Length/10 
        int_Width_Control = 6  #6 - About perfect for PowerPoint
        int_Height_Control = 8 #8 - About perfect for PowerPoint
        figsize = (int_Width_Control*int_Width_Scale,int_Height_Control) # fig size in inches (width,height)
        pyplot_Fig = matplotlib__pyplot.figure(figsize = figsize)       
        
        ax1 = pyplot_Fig.add_subplot(111)
        
        
        bool_Dx_Bx_Nx_Stacked_Bar_Plot = True
        if bool_Dx_Bx_Nx_Stacked_Bar_Plot:
            
            with SSResults(self.obj_SSParams) as obj_Results:
                ''' Nx Y-axis - Nx - Survivors per age cohort'''
                str_Key_AgeNe__Nx = globalsSS.Colnames_AgeNe_Results.static_str_Colname_Nx
                str_Col_Name_AgeNe__Nx = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Nx)
                str_Y_Axis_df_1_Colname = str_Col_Name_AgeNe__Nx 
                list_Nx = df_1[str_Y_Axis_df_1_Colname].tolist()                
                ''' Bx Y-axis - Bx - Offspring per age cohort'''
                str_Key_AgeNe__Bx = globalsSS.Colnames_AgeNe_Results.static_str_Colname_Bx
                str_Col_Name_AgeNe__Bx = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Bx)
                str_Y_Axis_df_1_Colname = str_Col_Name_AgeNe__Bx 
                list_Bx = df_1[str_Y_Axis_df_1_Colname].tolist()
                ''' Dx Y-axis - Dx - Deaths per age cohort'''
                str_Key_AgeNe__Dx = globalsSS.Colnames_AgeNe_Results.static_str_Colname_Dx
                str_Col_Name_AgeNe__Dx = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Dx)
                str_Y_Axis_df_1_Colname = str_Col_Name_AgeNe__Dx 
                list_Dx = df_1[str_Y_Axis_df_1_Colname].tolist()
            pass
            
            '''
            -----------------------------
            Plot 1
            -----------------------------
            '''         
            str_Plot_Line_Color = 'blue' #'red'
            #pyplot_Line_3, = matplotlib__pyplot.plot(df_1[str_X_Axis_df_1_Colname], df_1[str_Y_Axis_df_1_Colname], color=str_Plot_Line_Color, linewidth=int_Plot_Line_Width, figure=pyplot_Fig)
            pyplot_Line_3 = matplotlib__pyplot.bar(list_Primary_X_Axis, list_Nx, align='center', color=str_Plot_Line_Color, figure=pyplot_Fig)
            #DEBUG_ON
            #matplotlib__pyplot.show()
            #DEBUG_OFF                        
            '''
            -----------------------------
            Plot 2
            -----------------------------
            '''         
            if bool_Plot_Theme__Dark_Blue_1:
                str_Plot_Line_Color = 'white'
            else:
                str_Plot_Line_Color = 'grey'
            pass
            #pyplot_Line_2, = matplotlib__pyplot.plot(df_1[str_X_Axis_df_1_Colname], df_1[str_Y_Axis_df_1_Colname], color=str_Plot_Line_Color, linewidth=int_Plot_Line_Width, figure=pyplot_Fig)
            pyplot_Line_2 = matplotlib__pyplot.bar(list_Primary_X_Axis, list_Bx, bottom=list_Nx, align='center', color=str_Plot_Line_Color, figure=pyplot_Fig)
            #DEBUG_ON
            #matplotlib__pyplot.show()
            #DEBUG_OFF    
            '''
            -----------------------------
            Plot 3
            -----------------------------
            ''' 
            str_Plot_Line_Color = 'red' #'blue'
            #pyplot_Line_1, = matplotlib__pyplot.plot(df_1[str_X_Axis_df_1_Colname], df_1[str_Y_Axis_df_1_Colname], color=str_Plot_Line_Color, linewidth=int_Plot_Line_Width, figure=pyplot_Fig)
            pyplot_Line_1 = matplotlib__pyplot.bar(list_Primary_X_Axis, list_Dx, bottom=[list_Nx[j] + list_Bx[j] for j in range(len(list_Nx))], align='center', color=str_Plot_Line_Color, figure=pyplot_Fig)
            #DEBUG_ON
            #matplotlib__pyplot.show()
            #DEBUG_OFF
        pass
    
    
        '''
        -----------------------------
        Format Plot
        -----------------------------
        '''


        '''
        ~~~~~~~~~~~~~~~~~~
        Grid and ticks details
        ~~~~~~~~~~~~~~~~~~
        '''
        matplotlib__pyplot.grid(True, figure=pyplot_Fig)
        

        
        '''
        ~~~~~~~~~~~~~~~~~~
        Legend details
        ~~~~~~~~~~~~~~~~~~
        '''
        bool_Add_Legend = True
        if bool_Add_Legend:
            
            float_Bbox_X_Pos = 0.5
            float_Bbox_Y_Pos = 1.01 #-0.07
            
#             '''
#             Place legend longways under the x-axis '''
#             # Shrink current axis's height by 10% on the bottom
#             box = ax1.get_position()
#             ax1.set_position([box.x0, box.y0 + box.height * 0.1,
#                              box.width, box.height * 0.9])
            
            # Put a legend below current axis
            pyplot_Fig_Legend = ax1.legend([
                               pyplot_Line_1
                               , pyplot_Line_2
                               , pyplot_Line_3
                               ]
                              ,[
                                'Nx - Survivors per age'
                                ,'Bx - Offspring per age'
                                ,'Dx - Deaths per age'
                                ]
                              ,bbox_to_anchor=(float_Bbox_X_Pos, float_Bbox_Y_Pos)
                              ,frameon = 1
                              ,loc='upper center'
                              ,fancybox=False
                              ,shadow=False
                              , ncol=5)                            
       
    
            '''
            ~~~~~~~~~~~~~~~~~~~~~~~~~~
            Format Legend
            ~~~~~~~~~~~~~~~~~~~~~~~~~~
            '''
            pyplot_Fig_Legend_Frame = pyplot_Fig_Legend.get_frame()
            
            pyplot_Fig_Legend_Frame.set_color('white')
            ''' Legend frame background '''
            #pyplot_Fig_Legend_Frame.set_facecolor('green')
            ''' Legend frame border '''
            #pyplot_Fig_Legend_Frame.set_edgecolor('red')
            
            ''' Turn off frame outline '''
            pyplot_Fig_Legend_Frame.set_linewidth(0)
            
            # set the alpha value of the legend: it will be translucent
            pyplot_Fig_Legend_Frame.set_alpha(0.3)                  
            
        pass
                    
       
        '''
        ~~~~~~~~~~~~~~~~~~
        Label details
        ~~~~~~~~~~~~~~~~~~
        '''
        '''
        -----------------------------
        Plot Line - AgeNe N - ALL Adults 
        -----------------------------
        '''
        '''
        Font properties for subsequent text
        '''
        
        with SSResults(self.obj_SSParams) as obj_Results:
            str_Key_AgeNe__Adult_Pop_Size__Nx_N_Adults = globalsSS.Colnames_AgeNe_Results.static_str_Colname_Nx_N_Adults
            str_Col_Name_AgeNe__Adult_Pop_Size__Nx_N_Adults = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Adult_Pop_Size__Nx_N_Adults)
            ''' AgeNe Nc - Fertile Adults '''
            str_Key_AgeNe__Adult_Pop_Size__Nx_Nc_Adults = globalsSS.Colnames_AgeNe_Results.static_str_Colname_Nx_Nc_Adults
            str_Col_Name_AgeNe__Adult_Pop_Size__Nx_Nc_Adults = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Adult_Pop_Size__Nx_Nc_Adults)
            ''' AgeNe Ne Demographic '''
            str_Key_AgeNe__Ne_Demo = globalsSS.Colnames_AgeNe_Results.static_str_Colname_NeDemo
            str_Col_Name_AgeNe__Ne_Demo = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Ne_Demo)
            ''' AgeNe Nb Demographic '''
            str_Key_AgeNe__Nb_Demo = globalsSS.Colnames_AgeNe_Results.static_str_Colname_NbDemo
            str_Col_Name_AgeNe__Nb_Demo = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Nb_Demo)
#             '''Exp1 Potential Parents '''
#             str_Key_Exp1__Potential_Parents_PP = globalsSS.Colnames_Parent_Offspring_Stats_METHOD_2.static_Str_Colname_Potential_Parents_PP
#             str_Col_Name_Exp1__Potential_Parents_PP = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__Potential_Parents_PP)

        pass

        int_AgeNe__Adult_Pop_Size__Nx_Adults__N = int(df_1[str_Col_Name_AgeNe__Adult_Pop_Size__Nx_N_Adults].iloc[0])
        int_AgeNe__Adult_Pop_Size__Nx_Adults__Nc = int(df_1[str_Col_Name_AgeNe__Adult_Pop_Size__Nx_Nc_Adults].iloc[0])
        int_AgeNe__Ne = int(round(Decimal(df_1[str_Col_Name_AgeNe__Ne_Demo].iloc[0])))
        int_AgeNe__Nb = int(round(Decimal(df_1[str_Col_Name_AgeNe__Nb_Demo].iloc[0])))
        #int_Exp1__Potential_Parents_PP = int(round(df_2[str_Col_Name_Exp1__Potential_Parents_PP].iloc[0]))

        ''' Get colnames in order to get data from df_1 '''
        with SSResults(self.obj_SSParams) as obj_Results:
            str_Key_AgeNe__Sim_Pop_Size = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Pop_Size
            str_Col_Name_AgeNe__Sim_Pop_Size = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Sim_Pop_Size)
            str_Key_AgeNe__Sim_Replicates = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Sim_Replicates
            str_Col_Name_AgeNe__Sim_Replicates = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Sim_Replicates)
            str_Key_AgeNe__Loci = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Loci
            str_Col_Name_AgeNe__Loci = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Loci)
            str_Key_Sim__Run_User_Defined_Folder = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Run_User_Defined_Folder
            str_Col_Name_Sim__Run_User_Defined_Folder = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Sim__Run_User_Defined_Folder)
        pass

        ''' Get values from df_1 '''
        str_Mating_Count_Replicate_Total = str(int_Mating_Count_Replicate_Total)
        int_Pop_Size__N = df_1[str_Col_Name_AgeNe__Sim_Pop_Size].iloc[0]
        str_Pop_Size__N = str(int_Pop_Size__N)
        str_Adult_Pop_Size__Nc = str(int_AgeNe__Adult_Pop_Size__Nx_Adults__Nc)
        str_AgeNe__Ne = str(int_AgeNe__Ne)
        str_AgeNe__Nb = str(int_AgeNe__Nb)
        str_Replicates = str(df_1[str_Col_Name_AgeNe__Sim_Replicates].iloc[0])
        str_Loci = str(df_1[str_Col_Name_AgeNe__Loci].iloc[0])
        str_Sim__Run_User_Defined_Folder = str(df_1[str_Col_Name_Sim__Run_User_Defined_Folder].iloc[0])

        str_Fig_Title = str('Population Demographic Profile by age')

        ''' Title spacing '''
        matplotlib__pyplot.subplots_adjust(top=0.87)
        ''' Font details '''          
        int_Plot_SupTitle_Size = 18
        if bool_Plot_Theme__Dark_Blue_1:
            str_Font_Colour = 'white'
        else:
            str_Font_Colour = 'blue'


        matplotlib__pyplot.suptitle(str_Fig_Title, fontsize=int_Plot_SupTitle_Size, color=str_Font_Colour, figure=pyplot_Fig)

        ''' Font details '''          
#         int_Plot_SupTitle_Size = 16
#         str_Font_Colour = 'blue'
                
        str_Plot_Title = str(
                             'Mating: ' + str_Mating_Count_Replicate_Total + ', '
                            + 'N:' + str_Pop_Size__N + ', '
                            + 'Nc: ' + str_Adult_Pop_Size__Nc + ', '
                            + 'AgeNe: ' + str_AgeNe__Ne + ', '
                            + 'AgeNb: ' + str_AgeNe__Nb + ', '
                            + 'Loci: ' + str_Loci + ', '
                            + 'Reps: ' + str_Replicates
                            + '\n'
                            + 'Run: ' + str_Sim__Run_User_Defined_Folder)

        ''' Font details '''          
        int_Plot_Title_Size = 16
        if bool_Plot_Theme__Dark_Blue_1:
            str_Font_Colour = 'grey'
        else:
            str_Font_Colour = 'blue'
                
        matplotlib__pyplot.title(str_Plot_Title, fontsize=int_Plot_Title_Size, color=str_Font_Colour, figure=pyplot_Fig)

        ''' Font details '''          
        int_PLot_Y_Label_Size = 16
        if bool_Plot_Theme__Dark_Blue_1:
            str_Font_Colour = 'white'
        else:
            str_Font_Colour = 'blue'
                                        
        matplotlib__pyplot.xlabel('Cohort age (years)', fontsize=int_PLot_Y_Label_Size, color=str_Font_Colour, figure=pyplot_Fig)
        matplotlib__pyplot.ylabel('Individuals', fontsize=int_PLot_Y_Label_Size, color=str_Font_Colour, figure=pyplot_Fig)
        
        '''
        ~~~~~~~~~~~~~~~~~~
        Label Unique Identifier details
        ~~~~~~~~~~~~~~~~~~
        '''
        ''' Get colnames in order to get data from df_1 '''
        with SSResults(self.obj_SSParams) as obj_Results:
            str_Key_Sim__Run_User_Defined_Folder = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Run_User_Defined_Folder
            str_Col_Name_Sim__Run_User_Defined_Folder = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Sim__Run_User_Defined_Folder)
            str_Key_Sim__Unique_Run_ID = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Unique_Run_ID
            str_Col_Name_Sim__Unique_Run_ID = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Sim__Unique_Run_ID)

        pass

        
        ''' Get values from df_1 '''
        str_Sim__Unique_Run_ID = str(df_1[str_Col_Name_Sim__Unique_Run_ID].iloc[0])
        
        str_UID_Text = str(str_Sim__Unique_Run_ID)

        ''' Font details '''          
        int_Font_Size = 6
        str_Font_Colour = 'darkgrey'
        
        ''' Add figure text '''
        #matplotlib__pyplot.figtext(.75,.99,str_UID_Text, fontsize=int_Font_Size, color=str_Font_Colour, figure=pyplot_Fig)
        matplotlib__pyplot.figtext(.70,.005,str_UID_Text, fontsize=int_Font_Size, color=str_Font_Colour, figure=pyplot_Fig)

        str_Sim__Run_User_Defined_Folder = str(df_1[str_Col_Name_Sim__Run_User_Defined_Folder].iloc[0])

        str_RUDF_Text = str(str_Sim__Run_User_Defined_Folder)

        ''' Font details '''          
        int_Font_Size = 6
        str_Font_Colour = 'darkgrey'
        
        ''' Add figure text '''
        #matplotlib__pyplot.figtext(.75,.91,str_RUDF_Text, fontsize=int_Font_Size, color=str_Font_Colour, figure=pyplot_Fig)
        matplotlib__pyplot.figtext(.70,.015,str_RUDF_Text, fontsize=int_Font_Size, color=str_Font_Colour, figure=pyplot_Fig)

        

        '''
        ~~~~~~~~~~~~~~~~~~
        Axis details
        ~~~~~~~~~~~~~~~~~~
        '''
        bool_Format_Axis = False
        if bool_Format_Axis:
    #         [xmin, xmax, ymin, ymax] = matplotlib__pyplot.axis()
    #         matplotlib__pyplot.xlim(1, xmax)
            
            #int_Y_Axis_Max = int_Pop_Size__N / 2
            
            #dec_Total_Ne2_r_Sqrd_LDNe_LM = Decimal(float_Total_Ne2_r_Sqrd_LDNe_LM)
            #int_Y_Axis_Max = int(math.ceil(dec_Total_Ne2_r_Sqrd_LDNe_LM / 1000)) * 1000
            
            #int_Y_Axis_Max = int(math.ceil(int_Pop_Size__N * 0.1 * 2.1 / 500)) * 500
    #         df_Temp = pandas.DataFrame()
    #         df_Temp["Max"] = df_2[[str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe]].max(axis=1)
    #         int_Y_Axis_Max = df_Temp["Max"].max(axis=0)
    #         int_Y_Axis_Max = int(math.ceil(int_Y_Axis_Max / 500)) * 500
            
            ''' int_Y_Axis_Max passed into function '''
            matplotlib__pyplot.ylim(0, int_Y_Axis_Max)
    
    
            #DEBUG_ON
            #matplotlib__pyplot.show()
            #DEBUG_OFF  
        pass
    
        '''
        ~~~~~~~~~~~~~~~~~~
        Colours - Axis & Tick
        ~~~~~~~~~~~~~~~~~~
        '''
        bool_Format_Ticks = False
        if bool_Format_Ticks:
            if bool_Plot_Theme__Dark_Blue_1:
                str_Colour = 'darkblue'
    
            else:
                str_Colour = 'white'
            pass        
            #ax1 = pyplot_Fig.add_subplot(111, axisbg=str_Colour)
            #ax1 = pyplot_Fig.add_subplot(111)
            
    #         ax.plot(range(10))
    #         ax.set_xlabel('X-axis')
    #         ax.set_ylabel('Y-axis')
            
    #         ax.spines['bottom'].set_color('red')
    #         ax.spines['top'].set_color('red')
    #         ax.xaxis.label.set_color('red')
            if bool_Plot_Theme__Dark_Blue_1:
                int_Tick_Label_Size = 16
                str_X_Axis_Tick_Labels_Colour = 'white'
                str_Y_Axis_Tick_Labels_Colour = 'white'
                str_X_Axis_Tick_Major_Colour = 'white'
                str_X_Axis_Tick_Minor_Colour = 'grey'
                str_Y_Axis_Tick_Major_Colour = 'white'
                str_Y_Axis_Tick_Minor_Colour = 'grey'
            pass
        
            if bool_Plot_Theme__Default == False:
                ax1.tick_params(axis='x', colors=str_X_Axis_Tick_Labels_Colour)
                ax1.tick_params(axis='y', colors=str_Y_Axis_Tick_Labels_Colour)
        
                # We change the fontsize of minor ticks label 
                ax1.tick_params(axis='x', which='major', labelsize=int_Tick_Label_Size, color=str_X_Axis_Tick_Major_Colour)
                ax1.tick_params(axis='x', which='minor', labelsize=int_Tick_Label_Size, color=str_X_Axis_Tick_Minor_Colour)
                ax1.tick_params(axis='y', which='major', labelsize=int_Tick_Label_Size, color=str_Y_Axis_Tick_Major_Colour)
                ax1.tick_params(axis='y', which='minor', labelsize=int_Tick_Label_Size, color=str_Y_Axis_Tick_Minor_Colour) 
            pass 
        
            ''' Axis tick pointing direction '''
            ax1.tick_params(axis='x', direction='out')
            ax1.tick_params(axis='y', direction='out')
            
            ''' Specify axis ticks to be plotted '''
            ax1.xaxis.tick_bottom() 
            ax1.yaxis.tick_left() 
    
            #DEBUG_ON
            #matplotlib__pyplot.show()
            #DEBUG_OFF             
        pass

        
        if bool_Plot_Theme__Dark_Blue_1:
            str_Colour = 'white'

        else:
            str_Colour = 'black'
        pass
        for axis in ['top','bottom','left','right']:
            ax1.spines[axis].set_linewidth(4)
            ax1.spines[axis].set_color(str_Colour)
 
        ax1.spines['top'].set_visible(False)
        ax1.spines['right'].set_visible(False)           

#         ''' Legend '''
#         
#         
#         pyplot_Fig_Legend_Frame = pyplot_Fig_Legend.get_frame()
#         
#         pyplot_Fig_Legend_Frame.set_color('white')
#         ''' Legend frame background '''
#         #pyplot_Fig_Legend_Frame.set_facecolor('green')
#         ''' Legend frame border '''
#         #pyplot_Fig_Legend_Frame.set_edgecolor('red')
#         
#         ''' Turn off frame outline '''
#         pyplot_Fig_Legend_Frame.set_linewidth(0)
#         
#         # set the alpha value of the legend: it will be translucent
#         pyplot_Fig_Legend_Frame.set_alpha(0.5)                                                    
        

        #ax1.grid(True, figure=pyplot_Fig)

        bool_Format_Ticks = False
        if bool_Format_Ticks:
            nparray_Major_Ticks_X = ax1.xaxis.get_majorticklocs()      
            if len(nparray_Major_Ticks_X) > 1: 
                float_Major_Ticks_X_First = nparray_Major_Ticks_X[0]
                float_Major_Ticks_X_Last = nparray_Major_Ticks_X[-1]
                float_Major_Ticks_X_Interval = 5
                nparray_Major_Ticks_X = numpy.arange(float_Major_Ticks_X_First, float_Major_Ticks_X_Last, float_Major_Ticks_X_Interval)                                              
                ax1.set_xticks(nparray_Major_Ticks_X) 
            nparray_Minor_Ticks_X = ax1.xaxis.get_minorticklocs()
            if len(nparray_Minor_Ticks_X) > 1:     
                float_Minor_Ticks_X_First = nparray_Minor_Ticks_X[0]
                float_Minor_Ticks_X_Last = nparray_Minor_Ticks_X[-1]
                float_Minor_Ticks_X_Interval = 1
                nparray_Minor_Ticks_X = numpy.arange(float_Minor_Ticks_X_First, float_Minor_Ticks_X_Last, float_Minor_Ticks_X_Interval)                                              
                ax1.set_xticks(nparray_Minor_Ticks_X, minor=True)
            
            nparray_Major_Ticks_Y = ax1.yaxis.get_majorticklocs()      
            if len(nparray_Major_Ticks_Y) > 1: 
                float_Major_Ticks_Y_First = nparray_Major_Ticks_Y[0]
                float_Major_Ticks_Y_Last = nparray_Major_Ticks_Y[-1]
                float_Major_Ticks_Y_Interval = 50
                nparray_Major_Ticks_Y = numpy.arange(float_Major_Ticks_Y_First, float_Major_Ticks_Y_Last, float_Major_Ticks_Y_Interval)                                              
                ax1.set_yticks(nparray_Major_Ticks_Y)  
                
            nparray_Minor_Ticks_Y = ax1.yaxis.get_minorticklocs()      
            if len(nparray_Minor_Ticks_Y) > 1: 
                float_Minor_Ticks_Y_First = nparray_Minor_Ticks_Y[0]
                float_Minor_Ticks_Y_Last = nparray_Minor_Ticks_Y[-1]
                float_Minor_Ticks_Y_Interval = 1
                nparray_Minor_Ticks_Y = numpy.arange(float_Minor_Ticks_Y_First, float_Minor_Ticks_Y_Last, float_Minor_Ticks_Y_Interval)                                              
                ax1.set_yticks(nparray_Minor_Ticks_Y, minor=True)                                  
            
                                                                  
            ax1.grid(which='both')                                                   
        pass
                                                  
        
        # and a corresponding grid                                                       
        
        ax1.grid(which='both')                                                            
        
        # or if you want differnet settings for the grids:                               
        ax1.grid(which='minor', alpha=0.2)                                                
        ax1.grid(which='major', alpha=0.5)   
        
              
        #DEBUG_ON
        ''' Required to change background of INTERACTIVE WINDOW only'''
        if bool_Plot_Theme__Dark_Blue_1:
            pyplot_Fig_Patch = pyplot_Fig.patch
            pyplot_Fig_Patch.set_facecolor('darkblue') # works with plt.show().  
        pass
        #matplotlib__pyplot.show()
        #DEBUG_OFF
        
                                
        return pyplot_Fig

    '''
    -------------------------------------------------------------
    Plot EXPERIMENT POST SIM & AGENE_DEMOGRAPHIC SUMMARY Per Replicate EOR SUMMARISED Results
    -------------------------------------------------------------
    '''   
    def func__Plot_EXPERIMENT_AgeNe_Sim_Demographic_Population_Summary__Get_Data(self, str_Search_Path):

        boolSuccess = False
       
        '''
        -------------------------------
        Specify Final Output File
        -------------------------------
        '''
        ''' Output plot '''
        str_Excel_Input_Colname_Prefix = globalsSS.Excel_Results_File_Details.static_Excel_Colname_Prefix__AgeNe_Sim_Summarise_ALL_EOR__Summary_Results
        str_Excel_Input_FileName =  globalsSS.Excel_Results_File_Details.static_Excel_FileName__AgeNe_Sim_Summarise_ALL_EOR__Summary_Results
        
#         str_Plot_Output_File_1 = self.obj_SSParams.strOutputLocation_CumulativeRun_Path + '\\' + self.obj_SSParams.strUniqueRunID + '_' + str_Excel_Input_FileName + '_' + str_Excel_Input_Colname_Prefix + '.png'
#         str_Plot_Output_File_2 = self.obj_SSParams.strOutputLocation_CumulativeRun_Path + '\\' + self.obj_SSParams.strUniqueRunID + '_' + str_Excel_Input_FileName + '_' + str_Excel_Input_Colname_Prefix + '.pdf'
        str_Plot_Output_File_1 = str_Search_Path + '\\' + self.obj_SSParams.strUniqueRunID + '_' + str_Excel_Input_FileName + '_' + str_Excel_Input_Colname_Prefix + '.png'
        str_Plot_Output_File_2 = str_Search_Path + '\\' + self.obj_SSParams.strUniqueRunID + '_' + str_Excel_Input_FileName + '_' + str_Excel_Input_Colname_Prefix + '.pdf'

        '''
        -------------------------------
        Specify Excel Input file
        -------------------------------
        '''        
        str_Input_FileName = '*' + str_Excel_Input_FileName + '*.xlsx'
        str_File_Search_Pattern = str_Input_FileName
        
        '''
        -------------------------------
        Import Excel Data to dataframee
        -------------------------------
        '''
        '''
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~
        Get & Process Input SHEET
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~
        '''
        str_Input_Excel_Sheet_Name = globalsSS.Excel_Results_File_Details.static_Excel_Colname_Prefix__AgeNe_Sim_Summarise_ALL_EOR__Summary_Results

        self.obj_Log_Default.info('Dataframing results for: ' + str_Input_FileName + ' and for SHEET: ' + str_Input_Excel_Sheet_Name) 

        bool_File_1_Located = False
        with FileHandler() as obj_FileHandler:
            bool_File_1_Located, list_Path_And_Files = obj_FileHandler.func_Locate_Files(str_Search_Path, str_File_Search_Pattern)
       
        if bool_File_1_Located:
            
            '''Process Results'''
            list_DF_1s = []            
            for str_Path_And_File in list_Path_And_Files:
                
                '''Get the data from the excel files with the specified sheet'''
                xl = pandas.ExcelFile(str_Path_And_File)
                df_1 = xl.parse(str_Input_Excel_Sheet_Name)
                list_DF_1s.append(df_1)
                
            pass

            ''' concatinate the dfs '''
            df_Aggregate = pandas.DataFrame()
            for df_New in list_DF_1s:
                '''log the results'''
                #str_Df = df_New.to_string()
                #self.obj_Log_Debug.debug('Results dataframe NEW: %s' % str_Df)
                
                #Concat DFs - Tried df.append() but it wont work
                df_Aggregate = pandas.concat([df_Aggregate,df_New], ignore_index=True)
                
                #str_Df = df_Aggregate.to_string()
                #self.obj_Log_Debug.debug('Results dataframe AGGREGATE: %s' % str_Df)

            pass

            #DEBUG_ON
            #str_Df = df_Aggregate.to_string()
            #self.obj_Log_Debug.debug('Results dataframe AGGREGATE 1: %s' % str_Df)
            #DEBUG_OFF
            
            df1 = df_Aggregate 
        else:
            self.obj_Log_Default.error('File specified could not be located; str_Search_Path = ' + str_Search_Path + '; strFileSearchPattern = ' + str_File_Search_Pattern)
        pass
    
        '''
        -------------------------------
        Get More Data
        -------------------------------
        '''
        '''
        -------------------------------
        Specify Excel Input file 2
        -------------------------------
        '''        
        #str_Excel_Input_Colname_Prefix = globalsSS.Excel_Results_File_Details.static_Excel_Colname_Prefix__EXPERIMENT_Parent_Offspring_Ne_1__Summary_Results
        str_Excel_Input_FileName =  globalsSS.Excel_Results_File_Details.static_Excel_FileName__Ne2_LDNe__Summary_EOR_Results
 
        str_Input_FileName = '*' + str_Excel_Input_FileName + '*.xlsx'
        str_File_Search_Pattern = str_Input_FileName
        
        '''
        -------------------------------
        Import Excel Data to dataframee
        -------------------------------
        '''
        '''
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~
        Get & Process Input SHEET
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~
        '''
        str_Input_Excel_Sheet_Name = globalsSS.Excel_Results_File_Details.static_Excel_SheetName__Ne2_LDNe__Summary_EOR_Results

        self.obj_Log_Default.info('Dataframing results for: ' + str_Input_FileName + ' and for SHEET: ' + str_Input_Excel_Sheet_Name) 

        bool_File_2_Located = False
        with FileHandler() as obj_FileHandler:
            bool_File_2_Located, list_Path_And_Files = obj_FileHandler.func_Locate_Files(str_Search_Path, str_File_Search_Pattern)
       
        if bool_File_2_Located:
            
            '''Process Results'''
            list_DF_2s = []            
            for str_Path_And_File in list_Path_And_Files:
                
                '''Get the data from the excel files with the specified sheet'''
                xl = pandas.ExcelFile(str_Path_And_File)
                df_2 = xl.parse(str_Input_Excel_Sheet_Name)
                list_DF_2s.append(df_2)
                
            pass

            ''' concatinate the dfs '''
            df_Aggregate = pandas.DataFrame()
            for df_New in list_DF_2s:
                '''log the results'''
                #str_Df = df_New.to_string()
                #self.obj_Log_Debug.debug('Results dataframe NEW: %s' % str_Df)
                
                #Concat DFs - Tried df.append() but it wont work
                df_Aggregate = pandas.concat([df_Aggregate,df_New], ignore_index=True)
                
                #str_Df = df_Aggregate.to_string()
                #self.obj_Log_Debug.debug('Results dataframe AGGREGATE: %s' % str_Df)

            pass

            #DEBUG_ON
            #str_Df = df_Aggregate.to_string()
            #self.obj_Log_Debug.debug('Results dataframe AGGREGATE 1: %s' % str_Df)
            #DEBUG_OFF
            
            df2 = df_Aggregate 
        else:
            self.obj_Log_Default.error('File specified could not be located; str_Search_Path = ' + str_Search_Path + '; strFileSearchPattern = ' + str_File_Search_Pattern)
        pass

        '''
        -------------------------------
        Get More Data
        -------------------------------
        '''
        '''
        -------------------------------
        Specify Excel Input file 3
        -------------------------------
        '''        
        str_Excel_Input_FileName =  globalsSS.Excel_Results_File_Details.static_Excel_FileName__SS_LEVEL_Results
 
        str_Input_FileName = '*' + str_Excel_Input_FileName + '*.xlsx'
        str_File_Search_Pattern = str_Input_FileName
        
        '''
        -------------------------------
        Import Excel Data to dataframee
        -------------------------------
        '''
        '''
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~
        Get & Process Input SHEET
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~
        '''
        str_Input_Excel_Sheet_Name = globalsSS.Excel_Results_File_Details.static_Excel_SheetName__SS_LEVEL_BATCH_Results

        self.obj_Log_Default.info('Dataframing results for: ' + str_Input_FileName + ' and for SHEET: ' + str_Input_Excel_Sheet_Name) 

        bool_File_3_Located = False
        with FileHandler() as obj_FileHandler:
            bool_File_3_Located, list_Path_And_Files = obj_FileHandler.func_Locate_Files(str_Search_Path, str_File_Search_Pattern)
       
        if bool_File_3_Located:
            
            '''Process Results'''
            list_DF_3s = []            
            for str_Path_And_File in list_Path_And_Files:
                
                '''Get the data from the excel files with the specified sheet'''
                xl = pandas.ExcelFile(str_Path_And_File)
                df_3 = xl.parse(str_Input_Excel_Sheet_Name)
                list_DF_3s.append(df_3)
                
            pass

            ''' concatinate the dfs '''
            df_Aggregate = pandas.DataFrame()
            for df_New in list_DF_3s:
                '''log the results'''
                #str_Df = df_New.to_string()
                #self.obj_Log_Debug.debug('Results dataframe NEW: %s' % str_Df)
                
                #Concat DFs - Tried df.append() but it wont work
                df_Aggregate = pandas.concat([df_Aggregate,df_New], ignore_index=True)
                
                #str_Df = df_Aggregate.to_string()
                #self.obj_Log_Debug.debug('Results dataframe AGGREGATE: %s' % str_Df)

            pass

            #DEBUG_ON
            #str_Df = df_Aggregate.to_string()
            #self.obj_Log_Debug.debug('Results dataframe AGGREGATE 1: %s' % str_Df)
            #DEBUG_OFF
            
            df3 = df_Aggregate 
        else:
            self.obj_Log_Default.error('File specified could not be located; str_Search_Path = ' + str_Search_Path + '; strFileSearchPattern = ' + str_File_Search_Pattern)
        pass


        '''
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~
        Transform the data
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~
        '''  
        if bool_File_1_Located and bool_File_2_Located and bool_File_3_Located:
            
            ''' Send the relevent DFs  '''
            list_DFs = [df1, df2, df3]
     
            list_DFs = self.func__Plot_EXPERIMENT_AgeNe_Sim_Demographic_Population_Summary__Transform_And_Process(str_Excel_Input_FileName, str_Excel_Input_Colname_Prefix, list_DFs)
            
        pass
    
                    
        return boolSuccess


    def func__Plot_EXPERIMENT_AgeNe_Sim_Demographic_Population_Summary__Transform_And_Process(self, str_Excel_Input_FileName, str_Excel_Input_Colname_Prefix, list_DFs):
        
        self.obj_Log_Default.info('Transforming data')

        '''
        -----------------------------
        Specify DFs
        -----------------------------
        '''
        df_1 = list_DFs[0]
        df_2 = list_DFs[1]
        df_3 = list_DFs[2]
           
        with SSResults(self.obj_SSParams) as obj_Results:
            str_Group_Key_Mating_Count_Replicate_Total = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Mating_Count_Replicate_Total
            str_Col_Name_Mating_Count_Replicate_Total_DF1 = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Group_Key_Mating_Count_Replicate_Total)
            str_Col_Name_Mating_Count_Replicate_Total_DF2 = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Group_Key_Mating_Count_Replicate_Total)
        pass

        ''' Get all the UNIQUE Mating_Count_Replicate_Total values '''
        #nparray_Mating_Count_Replicate_Total = numpy.unique(df_1[str_Col_Name_Mating_Count_Replicate_Total_DF1])
        nparray_Mating_Count_Replicate_Total = numpy.unique(df_2[str_Col_Name_Mating_Count_Replicate_Total_DF2])

        ''' Get Y-Axis Max '''
        with SSResults(self.obj_SSParams) as obj_Results:
            str_Key_AgeNe__Ne_Demo = globalsSS.Colnames_AgeNe_Results.static_str_Colname_NeDemo
            str_Col_Name_AgeNe__Ne_Demo = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Ne_Demo)
            str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe = globalsSS.Colnames_Ne2_Aggregation.static_Str_Colname_float_Total_Ne2_r_Sqrd_LDNe
            str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe)
            df_Temp = pandas.DataFrame()
            df_Temp_1 = pandas.DataFrame()
            df_Temp_2 = pandas.DataFrame()
            df_Temp_1["Max"] = df_1[[str_Col_Name_AgeNe__Ne_Demo]].max(axis=1)
#             df_Temp_2["Max"] = df_2[[str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe]].max(axis=1)
#             df_Temp = pandas.concat([df_Temp_1,df_Temp_2], ignore_index=True)
            df_Temp = df_Temp_1
            int_Y_Axis_Max = df_Temp["Max"].max(axis=0)
            int_Y_Axis_Max = int(math.ceil(int_Y_Axis_Max / 500)) * 500
            del df_Temp_1     
            del df_Temp_2     
            del df_Temp     
        pass 
                
        for int_Mating_Count_Replicate_Total in nparray_Mating_Count_Replicate_Total:

            '''
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~
            Transform
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~
            '''  
            self.obj_Log_Default.info('Transforming data for int_Mating_Count_Replicate_Total :' + str(int_Mating_Count_Replicate_Total))
                      
            ''' Subset the DF to get the correct value '''
            df_1_Subset = df_1[(df_1[str_Col_Name_Mating_Count_Replicate_Total_DF1]==int_Mating_Count_Replicate_Total)]
            
            #DEBUG_ON
            #str_Df = df_1_Subset.to_string()
            #self.obj_Log_Debug.debug('Results dataframe df 1: %s' % str_Df)
            #raw_input('pausing')
            #DEBUG_OFF    
            
            df_2_Subset = df_2[(df_2[str_Col_Name_Mating_Count_Replicate_Total_DF2]==int_Mating_Count_Replicate_Total)]
            
            #DEBUG_ON
            #str_Df = df_2_Subset.to_string()
            #self.obj_Log_Debug.debug('Results dataframe df 2: %s' % str_Df)
            #raw_input('pausing')
            #DEBUG_OFF            

            list_DFs = [df_1_Subset, df_2_Subset, df_3] 
            
            '''
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~
            Plot
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~
            '''    
            
            ''' Send the relevent DFs to the plotter '''
            #list_DFs = [df1, df2]
            
            bool_Interactive_Display = False
            ''' Specify the number of figure copies and their specs '''
            dict_Fig_Copies = {
                                1:{'ColourScheme':'Default', 'Transparent':False, 'Interactive_Display':bool_Interactive_Display, 'Save_PNG': True, 'Save_PDF': False}
                               #,2:{'ColourScheme':'Dark_Blue', 'Transparent':True, 'Interactive_Display':bool_Interactive_Display,'Save_PNG': True, 'Save_PDF': False}
                               }
            
            pyplot_Fig_1 = None
            for key_Dict_Fig_Copy_Params, value_Dict_Fig_Copy_Params in dict_Fig_Copies.iteritems():
                
                pyplot_Fig_1 = self.func__Plot_EXPERIMENT_AgeNe_Sim_Demographic_Population_Summary__Plot(list_DFs, int_Mating_Count_Replicate_Total, int_Y_Axis_Max, value_Dict_Fig_Copy_Params, pyplot_Fig_1)
                
                '''
                ~~~~~~~~~~~~~~~~~~~~~~~~~~~
                Save results
                ~~~~~~~~~~~~~~~~~~~~~~~~~~~
                '''    
                str_Plot_Output_Path = self.obj_SSParams.strOutputLocation_CumulativeRun_Path + '\\EXP2_Plots\\'
                ''' Create path if it doesnt exist '''
                with FileHandler() as obj_File_Op:
                    obj_File_Op.method_Create_Path(str_Plot_Output_Path)
                pass                
                str_Plot_Output_FileName = self.obj_SSParams.strUniqueRunID + '_' + str_Excel_Input_FileName + '_' + str_Excel_Input_Colname_Prefix + '_' + str(int_Mating_Count_Replicate_Total)
                str_Plot_Output_Path_And_FileName = str_Plot_Output_Path + str_Plot_Output_FileName
                if value_Dict_Fig_Copy_Params['Save_PNG'] == True:
                    str_Plot_Output_Path_And_FileName_PNG = str_Plot_Output_Path_And_FileName + '_' + str(key_Dict_Fig_Copy_Params) + '.png'
                    bool_Transparent = value_Dict_Fig_Copy_Params['Transparent']
                    pyplot_Fig_1.savefig(str_Plot_Output_Path_And_FileName_PNG, bbox_inches='tight', dpi=400, transparent=bool_Transparent)
                pass
                if value_Dict_Fig_Copy_Params['Save_PDF'] == True:
                    str_Plot_Output_Path_And_FileName_PDF = str_Plot_Output_Path_And_FileName + '_' + str(key_Dict_Fig_Copy_Params) + '.pdf'
                    pyplot_Fig_1.savefig(str_Plot_Output_Path_And_FileName_PDF, bbox_inches='tight')
                pass
        
                '''
                ~~~~~~~~~~~~~~~~~~~~~~~~~~~
                Display results
                ~~~~~~~~~~~~~~~~~~~~~~~~~~~
                '''
                if value_Dict_Fig_Copy_Params['Interactive_Display'] == True:           
                    matplotlib__pyplot.show()
                pass
            pass
            ''' Close the plot '''
            matplotlib__pyplot.close(pyplot_Fig_1) 
        pass
                  
        pass        
        
        
        return list_DFs


    def func__Plot_EXPERIMENT_AgeNe_Sim_Demographic_Population_Summary__Plot(self, list_DFs, int_Mating_Count_Replicate_Total, int_Y_Axis_Max, dict_Fig_Copy, pyplot_Fig_1):
        
        self.obj_Log_Default.info('Creating figure')

        str_Stat_Category_Code_Full = object_SSConfigSamplingStrategy.static_str_Value__Sampling_Strategy_Run_LDNe_Sampling_Plan_Code_FUL
        str_Stat_Category_Code_Full_Mature = object_SSConfigSamplingStrategy.static_str_Value__Sampling_Strategy_Run_LDNe_Sampling_Plan_Code_FMT
        str_Stat_Category_Code_Full_Juvenile = object_SSConfigSamplingStrategy.static_str_Value__Sampling_Strategy_Run_LDNe_Sampling_Plan_Code_FJV
        str_Stat_Category_Code_Full_Embryo = object_SSConfigSamplingStrategy.static_str_Value__Sampling_Strategy_Run_LDNe_Sampling_Plan_Code_FEM
                
        bool_Plot_Theme__Default = False
        bool_Plot_Theme__Dark_Blue_1 = False
        
        if dict_Fig_Copy['ColourScheme'] == 'Dark_Blue':
            bool_Plot_Theme__Dark_Blue_1 = True
        else:
            bool_Plot_Theme__Default = True
        pass
    
#         if bool_Plot_Theme__Dark_Blue_1:
#             bool_Plot_Theme__Default = False
#         else:
#             bool_Plot_Theme__Default = True
#         pass
            
        int_Plot_Line_Width = 4
        '''
        -----------------------------
        Specify DFs
        -----------------------------
        '''
        df_1 = list_DFs[0]
        df_2 = list_DFs[1]
        df_3 = list_DFs[2]
        
        
        '''
        -----------------------------
        Specify X-Axis
        -----------------------------
        '''
        with SSResults(self.obj_SSParams) as obj_Results:
            str_Key_AgeNe__Age = globalsSS.Colnames_AgeNe_Results.static_str_Colname_Age
            str_Col_Name_AgeNe__Age = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Age)
        pass
        str_X_Axis_df_1_Colname = str_Col_Name_AgeNe__Age
        list_Primary_X_Axis = df_1[str_X_Axis_df_1_Colname].tolist()

        '''
        -----------------------------
        Specify Y-Axis Max
        -----------------------------
        '''
        with SSResults(self.obj_SSParams) as obj_Results:
            str_Key_AgeNe__Nx_All = globalsSS.Colnames_AgeNe_Results.static_str_Colname_Nx_All
            str_Col_Name_AgeNe__Nx_All = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Nx_All)
        pass
  
        ''' Get Y-Axis Max '''
        with SSResults(self.obj_SSParams) as obj_Results:
#             str_Key_AgeNe__Ne_Demo = globalsSS.Colnames_AgeNe_Results.static_str_Colname_NeDemo
#             str_Col_Name_AgeNe__Ne_Demo = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Ne_Demo)
#             str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe = globalsSS.Colnames_Ne2_Aggregation.static_Str_Colname_float_Total_Ne2_r_Sqrd_LDNe
#             str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe)
            df_Temp = pandas.DataFrame()
            df_Temp_1 = pandas.DataFrame()
            df_Temp_2 = pandas.DataFrame()
            df_Temp_1["Max"] = df_1[[str_Col_Name_AgeNe__Nx_All]].max(axis=1)
#             df_Temp_2["Max"] = df_2[[str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe]].max(axis=1)
#             df_Temp = pandas.concat([df_Temp_1,df_Temp_2], ignore_index=True)
            df_Temp = df_Temp_1
            int_Y_Axis_Max = df_Temp["Max"].max(axis=0)
            int_Y_Axis_Max = int(math.ceil(int_Y_Axis_Max / 500)) * 510
            del df_Temp_1     
            del df_Temp_2     
            del df_Temp     
        pass         
            
        '''
        -----------------------------
        Define figure
        -----------------------------
        '''
        bool_make_Inset_plot = False
        if bool_make_Inset_plot:
            '''
            -----------------------------
            Add Plot as inset subplot
            -----------------------------
            '''            
            pyplot_Fig = pyplot_Fig_1 
            left, bottom, width, height = [0.45, 0.45, 0.45, 0.45]
            ax1 = pyplot_Fig.add_axes([left, bottom, width, height])
        else:
            '''
            -----------------------------
            Create new figure
            -----------------------------
            '''                   
            # default scale is 1 in your original case, scales with other cases:
            int_X_Axis_Length = len(df_1[str_X_Axis_df_1_Colname])
            int_Width_Scale = int_X_Axis_Length/10 
            int_Width_Control = 6  #6 - About perfect for PowerPoint
            int_Height_Control = 8 #8 - About perfect for PowerPoint
            figsize = (int_Width_Control*int_Width_Scale,int_Height_Control) # fig size in inches (width,height)
            pyplot_Fig = matplotlib__pyplot.figure(figsize = figsize)       
            
            ax1 = pyplot_Fig.add_subplot(111)        
        pass

        '''
        -----------------------------
        Plot Line - AgeNe N - ALL Adults 
        -----------------------------
        '''
#         '''
#         Font properties for subsequent text
#         '''
#         
#         with SSResults(self.obj_SSParams) as obj_Results:
#             str_Key_AgeNe__Adult_Pop_Size__Nx_N_Adults = globalsSS.Colnames_AgeNe_Results.static_str_Colname_Nx_N_Adults
#             str_Col_Name_AgeNe__Adult_Pop_Size__Nx_N_Adults = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Adult_Pop_Size__Nx_N_Adults)
# 
#         pass
#         str_Y_Axis_df_1_Colname = str_Col_Name_AgeNe__Adult_Pop_Size__Nx_N_Adults 
# 
#         ''' if a horizontal plot line - Get the value for plotting and display '''
#         int_AgeNe__Adult_Pop_Size__Nx_Adults__N = int(df_1[str_Y_Axis_df_1_Colname].iloc[0])
        
        dict_Colnames = OrderedDict()
            
        bool_Plot_Key_Metrics = True
        if bool_Plot_Key_Metrics:
            
            with SSResults(self.obj_SSParams) as obj_Results:
                ''' AgeNe Results '''
                df_In = df_1 
                ''' AgeNe Nx - Pop size (total survivors at age = 1) '''             
                str_Key_AgeNe__Pop_Size__N = globalsSS.Colnames_AgeNe_Results.static_str_Colname_Nx_All
                str_Colname_AgeNe__Pop_Size__N = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_In, str_Key_AgeNe__Pop_Size__N)
                ''' AgeNe Nc - Reproductively Avaialble Adults '''
                str_Key_AgeNe__Adult_Pop_Size__Nc_Adults = globalsSS.Colnames_AgeNe_Results.static_str_Colname_Nx_Nc_Adults
                str_Colname_AgeNe__Adult_Pop_Size__Nc_Adults = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_In, str_Key_AgeNe__Adult_Pop_Size__Nc_Adults)
                ''' AgeNe Ne Demographic '''
                str_Key_AgeNe__Ne_Demo = globalsSS.Colnames_AgeNe_Results.static_str_Colname_NeDemo
                str_Colname_AgeNe__Ne_Demo = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_In, str_Key_AgeNe__Ne_Demo)
                ''' AgeNe Nb Demographic '''
                str_Key_AgeNe__Nb_Demo = globalsSS.Colnames_AgeNe_Results.static_str_Colname_NbDemo
                str_Colname_AgeNe__Nb_Demo = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_In, str_Key_AgeNe__Nb_Demo)

                ''' LDNe Results '''
                df_In = df_2 
                ''' Stat Category Code '''
                str_Key_str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category
                str_Colname__str_Stats_Category = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_In, str_Key_str_Stats_Category)
                ''' Stat Category Code '''     
                str_Key_str_Stats_Category_Code = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category_Code
                str_Colname__str_Stats_Category_Code = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_In, str_Key_str_Stats_Category_Code)
                ''' LDNe PCrit '''
                str_Key_Ne2_floatPCrit = globalsSS.Colnames_Ne2_Output.static_Str_Colname_Ne2_floatPCrit
                str_Colname__Ne2_floatPCrit = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_In, str_Key_Ne2_floatPCrit)
                ''' LDNe Mean Point Estimate (non-harmonic mean)'''
                ''' Present mean Ne as primary axis as this number incorporates the uncertainty of the LDNe method which is what researcher are trying to avoid with a good sampling strategy '''
                str_Key_Colname_Ne2_floatLDNe = globalsSS.Colnames_Ne2_Output.static_Str_Colname_Ne2_floatLDNe
                str_Colname__Ne2_floatLDNe = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_In, str_Key_Colname_Ne2_floatLDNe)
                ''' LDNe Mean r2 Point Est (Harmonic mean LDNe) '''
                ''' Present harmonic mean Ne (= mean rSquared Ne) as secondary Y-axis as this is not the number researchers are aiming to obtain '''    
                str_Key_float_Total_Ne2_r_Sqrd_LDNe = globalsSS.Colnames_Ne2_Aggregation.static_Str_Colname_float_Total_Ne2_r_Sqrd_LDNe
                str_Colname__float_Total_Ne2_r_Sqrd_LDNe = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_In, str_Key_float_Total_Ne2_r_Sqrd_LDNe)                
                ''' LDNe Mean error bars (non-harmonic mean) '''
                ''' LDNe Mean error bar Lwr CI'''
                str_Key_Colname_Ne2_floatLDNeJackknife_Lwr_CI = globalsSS.Colnames_Ne2_Output.static_Str_Colname_Ne2_floatLDNeJackknife_Lwr_CI
                str_Colname__Ne2_floatLDNeJackknife_Lwr_CI = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_In, str_Key_Colname_Ne2_floatLDNeJackknife_Lwr_CI)
                ''' LDNe Mean error bar Upr CI'''
                str_Key_Colname_Ne2_floatLDNeJackknife_Upr_CI = globalsSS.Colnames_Ne2_Output.static_Str_Colname_Ne2_floatLDNeJackknife_Upr_CI
                str_Colname__Ne2_floatLDNeJackknife_Upr_CI = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_In, str_Key_Colname_Ne2_floatLDNeJackknife_Upr_CI)

                ''' Life-history parameters '''
                df_In = df_3
                ''' MaxAge '''
                str_Key_str_LifeHist__Max_Age = globalsSS.Colnames_BATCH_PARAMETERS.static_str_Colname_Max_age
                str_Colname__str_LifeHist__Max_Age = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_In, str_Key_str_LifeHist__Max_Age)
                ''' Max Mating Age '''
                str_Key_str_LifeHist__Max_Mating_Age = globalsSS.Colnames_BATCH_PARAMETERS.static_str_Colname_Max_mating_age
                str_Colname__str_LifeHist__Max_Mating_Age = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_In, str_Key_str_LifeHist__Max_Mating_Age)
                ''' Min Mating Age '''
                str_Key_str_LifeHist__Min_Mating_Age = globalsSS.Colnames_BATCH_PARAMETERS.static_str_Colname_Min_mating_age
                str_Colname__str_LifeHist__Min_Mating_Age = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_In, str_Key_str_LifeHist__Min_Mating_Age)

            pass
        
            '''
            ~~~~~~~~~~~~~~~~~
            Plot Value Set - AgeNe Demographics Metrics
            ~~~~~~~~~~~~~~~~~
            '''
            df_Key_Values = OrderedDict()
            dict_Plot_X_Values_And_Labels = OrderedDict()
            int_X_Axis_Value_Order = 0
            ''' AgeNe Nx - Pop size (total survivors at age = 1) '''
            str_df_Colname = str_Colname_AgeNe__Pop_Size__N
            str_Dict_Key = 'int_AgeNe__Pop_Size__N'
            df_Key_Values[str_Dict_Key] = int(df_1[str_df_Colname].iloc[0])
            int_X_Axis_Value_Order += 1
            str_X_Axis_Label = 'N'
            value_Y_Axis = df_Key_Values[str_Dict_Key]
            dict_Plot_X_Values_And_Labels[int_X_Axis_Value_Order] = (str_X_Axis_Label, value_Y_Axis)
            
            ''' AgeNe Nc - Reproductively Avaialble Adults '''
            str_df_Colname = str_Colname_AgeNe__Adult_Pop_Size__Nc_Adults
            str_Dict_Key = 'int_AgeNe__Adult_Pop_Size__Nc_Adults'
            df_Key_Values[str_Dict_Key] = int(df_1[str_df_Colname].iloc[0])
            int_X_Axis_Value_Order += 1
            str_X_Axis_Label = 'Nc'
            value_Y_Axis = df_Key_Values[str_Dict_Key]
            dict_Plot_X_Values_And_Labels[int_X_Axis_Value_Order] = (str_X_Axis_Label, value_Y_Axis)
            
            ''' AgeNe Ne Demographic '''
            str_df_Colname = str_Colname_AgeNe__Ne_Demo
            str_Dict_Key = 'int_AgeNe__Ne_Demo'
            df_Key_Values[str_Dict_Key] = int(df_1[str_df_Colname].iloc[0])
            int_X_Axis_Value_Order += 1
            str_X_Axis_Label = 'AgeNe'
            value_Y_Axis = df_Key_Values[str_Dict_Key]
            dict_Plot_X_Values_And_Labels[int_X_Axis_Value_Order] = (str_X_Axis_Label, value_Y_Axis)
            
            ''' AgeNe Nb Demographic '''
            str_df_Colname = str_Colname_AgeNe__Nb_Demo
            str_Dict_Key = 'int_AgeNe__Nb_Demo'
            df_Key_Values[str_Dict_Key] = int(df_1[str_df_Colname].iloc[0])
            int_X_Axis_Value_Order += 1
            str_X_Axis_Label = 'AgeNb'
            value_Y_Axis = df_Key_Values[str_Dict_Key]
            dict_Plot_X_Values_And_Labels[int_X_Axis_Value_Order] = (str_X_Axis_Label, value_Y_Axis)

            '''
            ~~~~~~~~~~~~~~~~~
            Plot Value Set - Harmonic Mean LDNe
            ~~~~~~~~~~~~~~~~~
            '''
            bool_Plot_Harmonic_Mean_LDNe = False
            if bool_Plot_Harmonic_Mean_LDNe:
                float_PCrit_Match = 0.05
                ''' LDNe Mean r2 Point Est (Harmonic mean LDNe) '''
                ''' Present harmonic mean Ne (= mean rSquared Ne) as secondary Y-axis as this is not the number researchers are aiming to obtain '''    
                str_df_Colname = str_Colname__float_Total_Ne2_r_Sqrd_LDNe
                str_Dict_Key = str_Key_float_Total_Ne2_r_Sqrd_LDNe + '_'
                ''' Category Code = FUL '''            
                ''' Subset the DF to get the correct value '''
                str_Stats_Category_Code = str_Stat_Category_Code_Full
                df_2_Subset = df_2[(df_2[str_Colname__str_Stats_Category]==str_Stats_Category_Code)]
                df_2_Subset = df_2_Subset[(df_2[str_Colname__Ne2_floatPCrit]==float_PCrit_Match)]
                df_Key_Values[str_Dict_Key + str_Stats_Category_Code] = df_2_Subset[str_df_Colname].iloc[0]
                int_X_Axis_Value_Order += 1
                str_X_Axis_Label = 'HMean LDNe' + ' ' + str_Stats_Category_Code
                value_Y_Axis = df_Key_Values[str_Dict_Key + str_Stats_Category_Code]
                dict_Plot_X_Values_And_Labels[int_X_Axis_Value_Order] = (str_X_Axis_Label, value_Y_Axis)            
                ''' Category Code = FMT '''
                ''' Subset the DF to get the correct value '''
                str_Stats_Category_Code = str_Stat_Category_Code_Full_Mature
                df_2_Subset = df_2[(df_2[str_Colname__str_Stats_Category]==str_Stats_Category_Code)]
                df_2_Subset = df_2_Subset[(df_2[str_Colname__Ne2_floatPCrit]==float_PCrit_Match)]
                df_Key_Values[str_Dict_Key + str_Stats_Category_Code] = df_2_Subset[str_df_Colname].iloc[0]
                int_X_Axis_Value_Order += 1
                str_X_Axis_Label = 'HMean LDNe' + ' ' + str_Stats_Category_Code
                value_Y_Axis = df_Key_Values[str_Dict_Key + str_Stats_Category_Code]
                dict_Plot_X_Values_And_Labels[int_X_Axis_Value_Order] = (str_X_Axis_Label, value_Y_Axis)            
                ''' Category Code = FMT '''
                ''' Subset the DF to get the correct value '''
                str_Stats_Category_Code = str_Stat_Category_Code_Full_Juvenile
                df_2_Subset = df_2[(df_2[str_Colname__str_Stats_Category]==str_Stats_Category_Code)]
                df_2_Subset = df_2_Subset[(df_2[str_Colname__Ne2_floatPCrit]==float_PCrit_Match)]
                df_Key_Values[str_Dict_Key + str_Stats_Category_Code] = df_2_Subset[str_df_Colname].iloc[0]
                int_X_Axis_Value_Order += 1
                str_X_Axis_Label = 'HMean LDNe' + ' ' + str_Stats_Category_Code
                value_Y_Axis = df_Key_Values[str_Dict_Key + str_Stats_Category_Code]
                dict_Plot_X_Values_And_Labels[int_X_Axis_Value_Order] = (str_X_Axis_Label, value_Y_Axis)            
                ''' Category Code = FMT '''
                ''' Subset the DF to get the correct value '''
                str_Stats_Category_Code = str_Stat_Category_Code_Full_Embryo
                df_2_Subset = df_2[(df_2[str_Colname__str_Stats_Category]==str_Stats_Category_Code)]
                df_2_Subset = df_2_Subset[(df_2[str_Colname__Ne2_floatPCrit]==float_PCrit_Match)]
                df_Key_Values[str_Dict_Key + str_Stats_Category_Code] = df_2_Subset[str_df_Colname].iloc[0]
                int_X_Axis_Value_Order += 1
                str_X_Axis_Label = 'HMean LDNe' + ' ' + str_Stats_Category_Code
                value_Y_Axis = df_Key_Values[str_Dict_Key + str_Stats_Category_Code]
                dict_Plot_X_Values_And_Labels[int_X_Axis_Value_Order] = (str_X_Axis_Label, value_Y_Axis)
            pass
            
            '''
            ~~~~~~~~~~~~~~~~~
            Plot Value Set  - NON-Harmonic Mean LDNe with Jackknife Confidence Intervals
            ~~~~~~~~~~~~~~~~~
            '''     
            bool_Plot_NON_Harmonic_Mean_LDNe = True
            if bool_Plot_NON_Harmonic_Mean_LDNe:
                dict_Plot_X_Values_And_Labels__NON_Harmonic_Mean_LDNe = OrderedDict()
                
                float_PCrit_Match = 0.05
                '''
                ~~~~~~~~~~~~~~~~~~
                LDNe Mean Point Estimate (non-harmonic mean)
                ~~~~~~~~~~~~~~~~~~
                '''
                ''' Present mean Ne as primary axis as this number incorporates the uncertainty of the LDNe method which is what researcher are trying to avoid with a good sampling strategy '''

                ''' Category Code = FUL '''
                ''' Subset the DF to get the correct value '''
                str_Stats_Category_Code = str_Stat_Category_Code_Full
                df_2_Subset = df_2[(df_2[str_Colname__str_Stats_Category_Code]==str_Stats_Category_Code)]
                df_2_Subset = df_2_Subset[(df_2[str_Colname__Ne2_floatPCrit]==float_PCrit_Match)]
                str_df_Colname = str_Colname__Ne2_floatLDNe
                str_Dict_Key = str_Key_Colname_Ne2_floatLDNe + '_'        
                df_Key_Values[str_Dict_Key + str_Stats_Category_Code] = df_2_Subset[str_df_Colname].iloc[0]
                int_X_Axis_Value_Order += 1
                str_X_Axis_Label = 'Mean LDNe' + ' ' + str_Stats_Category_Code
                value_Y_Axis = df_Key_Values[str_Dict_Key + str_Stats_Category_Code]
                ''' NON-Harmonic Mean LDNe Jackknife Lwr CI ''' 
                str_df_Colname = str_Colname__Ne2_floatLDNeJackknife_Lwr_CI
                str_Dict_Key = str_Key_Colname_Ne2_floatLDNeJackknife_Lwr_CI + '_'
                df_Key_Values[str_Dict_Key + str_Stats_Category_Code] = df_2_Subset[str_df_Colname].iloc[0]
                #int_X_Axis_Value_Order += 1
                #str_X_Axis_Label = 'Mean LDNe Lwr JK CI' + ' ' + str_Stats_Category_Code
                value_Y_Axis_Lwr_CI = df_Key_Values[str_Dict_Key + str_Stats_Category_Code]
                ''' NON-Harmonic Mean LDNe Jackknife Upr CI ''' 
                str_df_Colname = str_Colname__Ne2_floatLDNeJackknife_Upr_CI
                str_Dict_Key = str_Key_Colname_Ne2_floatLDNeJackknife_Upr_CI + '_'
                df_Key_Values[str_Dict_Key + str_Stats_Category_Code] = df_2_Subset[str_df_Colname].iloc[0]
                #int_X_Axis_Value_Order += 1
                #str_X_Axis_Label = 'Mean LDNe Upr JK CI' + ' ' + str_Stats_Category_Code
                value_Y_Axis_Upr_CI = df_Key_Values[str_Dict_Key + str_Stats_Category_Code]
                dict_Plot_X_Values_And_Labels__NON_Harmonic_Mean_LDNe[int_X_Axis_Value_Order] = (str_X_Axis_Label, value_Y_Axis, value_Y_Axis_Lwr_CI, value_Y_Axis_Upr_CI)
                
                ''' Category Code = FMT '''
                ''' Subset the DF to get the correct value '''
                str_Stats_Category_Code = str_Stat_Category_Code_Full_Mature
                df_2_Subset = df_2[(df_2[str_Colname__str_Stats_Category_Code]==str_Stats_Category_Code)]
                df_2_Subset = df_2_Subset[(df_2[str_Colname__Ne2_floatPCrit]==float_PCrit_Match)]
                str_df_Colname = str_Colname__Ne2_floatLDNe
                str_Dict_Key = str_Key_Colname_Ne2_floatLDNe + '_' 
                df_Key_Values[str_Dict_Key + str_Stats_Category_Code] = df_2_Subset[str_df_Colname].iloc[0]
                int_X_Axis_Value_Order += 1
                str_X_Axis_Label = 'Mean LDNe' + ' ' + str_Stats_Category_Code
                value_Y_Axis = df_Key_Values[str_Dict_Key + str_Stats_Category_Code]
                ''' NON-Harmonic Mean LDNe Jackknife Lwr CI ''' 
                str_df_Colname = str_Colname__Ne2_floatLDNeJackknife_Lwr_CI
                str_Dict_Key = str_Key_Colname_Ne2_floatLDNeJackknife_Lwr_CI + '_'
                df_Key_Values[str_Dict_Key + str_Stats_Category_Code] = df_2_Subset[str_df_Colname].iloc[0]
                #int_X_Axis_Value_Order += 1
                #str_X_Axis_Label = 'Mean LDNe Lwr JK CI' + ' ' + str_Stats_Category_Code
                value_Y_Axis_Lwr_CI = df_Key_Values[str_Dict_Key + str_Stats_Category_Code]
                ''' NON-Harmonic Mean LDNe Jackknife Upr CI ''' 
                str_df_Colname = str_Colname__Ne2_floatLDNeJackknife_Upr_CI
                str_Dict_Key = str_Key_Colname_Ne2_floatLDNeJackknife_Upr_CI + '_'
                df_Key_Values[str_Dict_Key + str_Stats_Category_Code] = df_2_Subset[str_df_Colname].iloc[0]
                #int_X_Axis_Value_Order += 1
                #str_X_Axis_Label = 'Mean LDNe Upr JK CI' + ' ' + str_Stats_Category_Code
                value_Y_Axis_Upr_CI = df_Key_Values[str_Dict_Key + str_Stats_Category_Code]
                dict_Plot_X_Values_And_Labels__NON_Harmonic_Mean_LDNe[int_X_Axis_Value_Order] = (str_X_Axis_Label, value_Y_Axis, value_Y_Axis_Lwr_CI, value_Y_Axis_Upr_CI)
                ''' Category Code = FJV '''           
                ''' Subset the DF to get the correct value '''
                str_Stats_Category_Code = str_Stat_Category_Code_Full_Juvenile
                df_2_Subset = df_2[(df_2[str_Colname__str_Stats_Category_Code]==str_Stats_Category_Code)]
                df_2_Subset = df_2_Subset[(df_2[str_Colname__Ne2_floatPCrit]==float_PCrit_Match)]
                str_df_Colname = str_Colname__Ne2_floatLDNe
                str_Dict_Key = str_Key_Colname_Ne2_floatLDNe + '_' 
                df_Key_Values[str_Dict_Key + str_Stats_Category_Code] = df_2_Subset[str_df_Colname].iloc[0]
                int_X_Axis_Value_Order += 1
                str_X_Axis_Label = 'Mean LDNe' + ' ' + str_Stats_Category_Code
                value_Y_Axis = df_Key_Values[str_Dict_Key + str_Stats_Category_Code]
                ''' NON-Harmonic Mean LDNe Jackknife Lwr CI ''' 
                str_df_Colname = str_Colname__Ne2_floatLDNeJackknife_Lwr_CI
                str_Dict_Key = str_Key_Colname_Ne2_floatLDNeJackknife_Lwr_CI + '_'
                df_Key_Values[str_Dict_Key + str_Stats_Category_Code] = df_2_Subset[str_df_Colname].iloc[0]
                #int_X_Axis_Value_Order += 1
                #str_X_Axis_Label = 'Mean LDNe Lwr JK CI' + ' ' + str_Stats_Category_Code
                value_Y_Axis_Lwr_CI = df_Key_Values[str_Dict_Key + str_Stats_Category_Code]
                ''' NON-Harmonic Mean LDNe Jackknife Upr CI ''' 
                str_df_Colname = str_Colname__Ne2_floatLDNeJackknife_Upr_CI
                str_Dict_Key = str_Key_Colname_Ne2_floatLDNeJackknife_Upr_CI + '_'
                df_Key_Values[str_Dict_Key + str_Stats_Category_Code] = df_2_Subset[str_df_Colname].iloc[0]
                #int_X_Axis_Value_Order += 1
                #str_X_Axis_Label = 'Mean LDNe Upr JK CI' + ' ' + str_Stats_Category_Code
                value_Y_Axis_Upr_CI = df_Key_Values[str_Dict_Key + str_Stats_Category_Code]
                dict_Plot_X_Values_And_Labels__NON_Harmonic_Mean_LDNe[int_X_Axis_Value_Order] = (str_X_Axis_Label, value_Y_Axis, value_Y_Axis_Lwr_CI, value_Y_Axis_Upr_CI)
                ''' Category Code = FEM '''
                ''' Subset the DF to get the correct value '''
                str_Stats_Category_Code = str_Stat_Category_Code_Full_Embryo
                df_2_Subset = df_2[(df_2[str_Colname__str_Stats_Category_Code]==str_Stats_Category_Code)]
                df_2_Subset = df_2_Subset[(df_2[str_Colname__Ne2_floatPCrit]==float_PCrit_Match)]
                str_df_Colname = str_Colname__Ne2_floatLDNe
                str_Dict_Key = str_Key_Colname_Ne2_floatLDNe + '_' 
                df_Key_Values[str_Dict_Key + str_Stats_Category_Code] = df_2_Subset[str_df_Colname].iloc[0]
                int_X_Axis_Value_Order += 1
                str_X_Axis_Label = 'Mean LDNe' + ' ' + str_Stats_Category_Code
                value_Y_Axis = df_Key_Values[str_Dict_Key + str_Stats_Category_Code]
                ''' NON-Harmonic Mean LDNe Jackknife Lwr CI ''' 
                str_df_Colname = str_Colname__Ne2_floatLDNeJackknife_Lwr_CI
                str_Dict_Key = str_Key_Colname_Ne2_floatLDNeJackknife_Lwr_CI + '_'
                df_Key_Values[str_Dict_Key + str_Stats_Category_Code] = df_2_Subset[str_df_Colname].iloc[0]
                #int_X_Axis_Value_Order += 1
                #str_X_Axis_Label = 'Mean LDNe Lwr JK CI' + ' ' + str_Stats_Category_Code
                value_Y_Axis_Lwr_CI = df_Key_Values[str_Dict_Key + str_Stats_Category_Code]
                ''' NON-Harmonic Mean LDNe Jackknife Upr CI ''' 
                str_df_Colname = str_Colname__Ne2_floatLDNeJackknife_Upr_CI
                str_Dict_Key = str_Key_Colname_Ne2_floatLDNeJackknife_Upr_CI + '_'
                df_Key_Values[str_Dict_Key + str_Stats_Category_Code] = df_2_Subset[str_df_Colname].iloc[0]
                #int_X_Axis_Value_Order += 1
                #str_X_Axis_Label = 'Mean LDNe Upr JK CI' + ' ' + str_Stats_Category_Code
                value_Y_Axis_Upr_CI = df_Key_Values[str_Dict_Key + str_Stats_Category_Code]
                dict_Plot_X_Values_And_Labels__NON_Harmonic_Mean_LDNe[int_X_Axis_Value_Order] = (str_X_Axis_Label, value_Y_Axis, value_Y_Axis_Lwr_CI, value_Y_Axis_Upr_CI)

            pass
        
            if bool_Plot_Key_Metrics:                
                
                ''' Get the X Axis Values '''
                
                #dict_Plot_X_Values_And_Labels_Sorted = OrderedDict(sorted(dict_Plot_X_Values_And_Labels.keys(), key=lambda x: x))
                dict_Plot_X_Values_And_Labels_Sorted = OrderedDict(sorted(dict_Plot_X_Values_And_Labels.items()))
                list_X_Values = [int_X_Value_Order for int_X_Value_Order in dict_Plot_X_Values_And_Labels_Sorted.keys()]
                list_X_Value_Labels = [int_X_Value_Label for (int_X_Value_Order,(int_X_Value_Label, value_Y_Axis)) in dict_Plot_X_Values_And_Labels_Sorted.items()]
                #width = 0.35
                #int_X_Values_Count = len(list_X_Values)
                ''' Get the Y Axis Values '''
                list_Y_Values = [value_Y_Axis for (int_X_Value_Order,(int_X_Value_Label, value_Y_Axis)) in dict_Plot_X_Values_And_Labels_Sorted.items()]
        
                ''' Produce the plot points'''
                #pyplot_Line_4, = ax1.plot(list_X_Values, list_Y_Values, linestyle='.', marker='o', linewidth=int_Plot_Line_Width, figure=pyplot_Fig)
                pyplot_Line_4 = ax1.bar(list_X_Values, list_Y_Values, align='center', figure=pyplot_Fig)
                
                #DEBUG_ON
                #matplotlib__pyplot.show()
                #DEBUG_OFF            
            pass

            if bool_Plot_NON_Harmonic_Mean_LDNe: 
                               
                dict_Plot_X_Values_And_Labels_Sorted = OrderedDict(sorted(dict_Plot_X_Values_And_Labels__NON_Harmonic_Mean_LDNe.items()))
                
                if not bool_Plot_Key_Metrics:
                    list_X_Values=[]
                    list_X_Value_Labels = []
                pass
                list_X_Values_LDNe = []
                #list_X_Value_Labels_LDNe = []
                list_Y_Values = []
                list_Y_Values_Lwr_CI = []
                list_Y_Values_Upr_CI = []
                
                for (int_X_Value_Order, (int_X_Value_Label, value_Y_Axis, value_Y_Axis_Lwr_CI, value_Y_Axis_Upr_CI)) in dict_Plot_X_Values_And_Labels_Sorted.items():                    
                #for key, int_X_Value_Label, value_Y_Axis, value_Y_Axis_Lwr_CI, value_Y_Axis_Upr_CI in dict_Plot_X_Values_And_Labels_Sorted.items():
                    list_X_Values.append(int_X_Value_Order)
                    list_X_Value_Labels.append(int_X_Value_Label)
                    list_X_Values_LDNe.append(int_X_Value_Order)
                    #list_X_Value_Labels_LDNe.append(int_X_Value_Label)                    
                    list_Y_Values.append(value_Y_Axis)
                    list_Y_Values_Lwr_CI.append(value_Y_Axis - value_Y_Axis_Lwr_CI)
                    list_Y_Values_Upr_CI.append(value_Y_Axis_Upr_CI - value_Y_Axis)
                pass

                str_Plot_Primary_Line_Color = 'grey'
                int_Capsize = 10   #<-- If you change these you will have to change the formating of the Caps in the formatting section to match.
                int_Capthick = 2  #<-- If you change these you will have to change the formating of the Caps in the formatting section to match.
                int_Linethick = 5
                int_Err_Bar_Colour = 'black' #'Tomato'
                dict_Error_kw={'ecolor':int_Err_Bar_Colour  # error-bars colour
                               ,'linewidth':int_Linethick   # error-bar width
                               ,'capthick':int_Capthick}    # error-bar cap thickness  
                            
                #list_X_Values = [int_X_Value_Order for int_X_Value_Order in dict_Plot_X_Values_And_Labels_Sorted.keys()]
                #list_X_Value_Labels = [int_X_Value_Label for (int_X_Value_Label, value_Y_Axis, value_Y_Axis_Lwr_CI, value_Y_Axis_Upr_CI) in dict_Plot_X_Values_And_Labels_Sorted.items()]
                
                #list_Y_Values = [int_Y_Value_Label for (int_X_Value_Label, value_Y_Axis, value_Y_Axis_Lwr_CI, value_Y_Axis_Upr_CI) in dict_Plot_X_Values_And_Labels_Sorted.items()]
                
                list_Error_Bars_CIs = [numpy.array(list_Y_Values_Lwr_CI),numpy.array(list_Y_Values_Upr_CI)]
                #list_Error_Bars_CIs = [numpy.array([30,10,0]),numpy.array([150,130,0])]
                #pyplot_Line_4 = ax1.errorbar(list_X_Values_LDNe, list_Y_Values, linestyle='.', marker='o', yerr=list_Error_Bars_CIs, figure=pyplot_Fig)
                pyplot_Line_4 = ax1.bar(list_X_Values_LDNe
                                        ,list_Y_Values
                                        ,yerr=list_Error_Bars_CIs
                                        #, makeredgewidth=int_Capthick
                                        , capsize=int_Capsize
                                        , error_kw=dict_Error_kw
                                        , color=str_Plot_Primary_Line_Color
                                        , align='center'
                                        , figure=pyplot_Fig)

         
#                 list_Horiz_Align = ['right', 'center', 'left']
#                 int_Label_Rotation = 45
#                 ax1.set_xticks(list_X_Values)
#                 ax1.set_xticklabels(list_X_Value_Labels, rotation=int_Label_Rotation, ha=list_Horiz_Align[1])
#               
                float_Offset = 20   
                ax1.set_ylim([0 - float_Offset,int_Y_Axis_Max - float_Offset])
                
                #DEBUG_ON
                #matplotlib__pyplot.show()
                #DEBUG_OFF

            pass

        '''
        -----------------------------
        Format Plot
        -----------------------------
        '''
        #pyplot_Line_1 = dict_pyplot_Legend_Lines.values()[0][0]
        '''
        Font properties for subsequent text
        '''
        pyplot_Fig_FontProperties__Base = matplotlib__fontmanager.FontProperties(size=16)

        '''
        ~~~~~~~~~~~~~~~~~~
        Colours - Axis & Tick
        ~~~~~~~~~~~~~~~~~~
        '''
        str_Figure_Colour_Scheme = ''
        if str_Figure_Colour_Scheme == globalsSS.Figure_Colour_Schemes.static_str_Figure_Colour_Scheme__Dark_Blue:
            str_Colour = 'darkblue'

        else:
            str_Colour = 'white'
        pass        
        #ax1 = pyplot_Fig.add_subplot(111, axisbg=str_Colour)
        #ax1 = pyplot_Fig.add_subplot(111)
        
        '''
        ~~~~~~~~~~~~~~~~~~~~~~
        Set axis limits
        ~~~~~~~~~~~~~~~~~~~~~~
        '''
        bool_Change_Axis_Limits = False
        if bool_Change_Axis_Limits:
            with SSResults(self.obj_SSParams) as obj_Results:
                str_Key_Colname_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category
                str_Col_Name_Stats_Category = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Colname_Stats_Category)
            pass
    
            list_Major_Ticks_X = list(df_1[str_Col_Name_Stats_Category])        
            ''' Add spacing at beginning and end of x-axis '''                                          
            ax1.set_xlim(-0.30, len(list_Major_Ticks_X)+1)
            #ax1.set_xlim((0, 10))
           
            #DEBUG_ON
            #matplotlib__pyplot.show()
            #DEBUG_OFF 
        pass


        '''
        ~~~~~~~~~~~~~~~~~~
        Grid and ticks details
        ~~~~~~~~~~~~~~~~~~
        '''
        bool_Add_Grid = True
        if bool_Add_Grid:
            matplotlib__pyplot.grid(True, figure=pyplot_Fig)

            #DEBUG_ON
            #matplotlib__pyplot.show()
            #DEBUG_OFF 

            '''
            ~~~~~~~~~~~~~~~~~~
            Format Grid
            ~~~~~~~~~~~~~~~~~~
            '''            
            # and a corresponding grid                                                       
            #ax1.grid(which='both')
            ax1.xaxis.grid(False)
            ax1.yaxis.grid(True)        

            # or if you want differnet settings for the grids:                               
            #ax1.grid(which='minor', alpha=0.2)                                                
            #ax1.grid(which='major', alpha=0.5)  

            #DEBUG_ON
            #matplotlib__pyplot.show()
            #DEBUG_OFF                          
        pass        
                
        
        '''
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        Label details
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        '''
        '''
        ~~~~~~~~~~~~~~~
        Label - SubTitle
        ~~~~~~~~~~~~~~~
        '''   
        bool_Add_SubTitle = False
        if bool_Add_SubTitle:
            ''' Get colnames in order to get data from df_1 '''
            with SSResults(self.obj_SSParams) as obj_Results:
                str_Key_AgeNe__Sim_Pop_Size = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Pop_Size
                str_Col_Name_AgeNe__Sim_Pop_Size = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Sim_Pop_Size)
    #             str_Key_AgeNe__Nc_Adult_Pop_Size = globalsSS.Colnames_AgeNe_Results.static_str_Colname_Nx_Nc_Adults
    #             str_Col_Name_AgeNe__Nc_Adult_Pop_Size = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Nc_Adult_Pop_Size)
                str_Key_AgeNe__Sim_Replicates = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Sim_Replicates
                str_Col_Name_AgeNe__Sim_Replicates = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Sim_Replicates)
                str_Key_AgeNe__Loci = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Loci
                str_Col_Name_AgeNe__Loci = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Loci)
                str_Key_Sim__Run_User_Defined_Folder = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Run_User_Defined_Folder
                str_Col_Name_Sim__Run_User_Defined_Folder = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Sim__Run_User_Defined_Folder)
    
                #str_Key_Colname_Stats_Category_Code = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category_Code
                #str_Col_Name_Stats_Category_Code = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Colname_Stats_Category_Code)
                str_Key_Colname_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category
                str_Col_Name_Stats_Category = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Colname_Stats_Category)
                #str_Key_Colname_float_Ne2_Burrows_r_Sqrd_LDNe = globalsSS.Colnames_Ne2_Aggregation.static_Str_Colname_float_Total_Ne2_r_Sqrd_LDNe
                #str_Col_Name_float_Total_Ne2_r_Sqrd_LDNe = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Colname_float_Ne2_Burrows_r_Sqrd_LDNe)
    
            pass
    
            ''' Get values from df_1 '''
            str_Mating_Count_Replicate_Total = str(int_Mating_Count_Replicate_Total)
            int_Pop_Size__N = df_1[str_Col_Name_AgeNe__Sim_Pop_Size].iloc[0]
            str_Pop_Size__N = str(int_Pop_Size__N)
    #         str_Adult_Pop_Size__N = str(int_AgeNe__Adult_Pop_Size__Nx_Adults__N)
    #         str_Adult_Pop_Size__Nc = str(int_AgeNe__Adult_Pop_Size__Nx_Adults__Nc)
            str_Replicates = str(df_1[str_Col_Name_AgeNe__Sim_Replicates].iloc[0])
            str_Loci = str(df_1[str_Col_Name_AgeNe__Loci].iloc[0])
            str_Sim__Run_User_Defined_Folder = str(df_1[str_Col_Name_Sim__Run_User_Defined_Folder].iloc[0])
    
            str_Fig_Title = str('Sampling strategy: Estimated LDNe for sample size-locus number combinations')
    
            ''' Title spacing '''
            matplotlib__pyplot.subplots_adjust(top=0.87)
            ''' Font details '''          
            int_Plot_SupTitle_Size = 18
            if str_Figure_Colour_Scheme == globalsSS.Figure_Colour_Schemes.static_str_Figure_Colour_Scheme__Dark_Blue:
                str_Font_Colour = 'white'
            else:
                str_Font_Colour = 'blue'
    
    
            matplotlib__pyplot.suptitle(str_Fig_Title, fontsize=int_Plot_SupTitle_Size, color=str_Font_Colour, figure=pyplot_Fig)

            #DEBUG_ON
            #matplotlib__pyplot.show()
            #DEBUG_OFF    
        pass
            
        ''' Font details '''          
#         int_Plot_SupTitle_Size = 16
#         str_Font_Colour = 'blue'

        '''
        ~~~~~~~~~~~~~~~
        Label - PlotTitle
        ~~~~~~~~~~~~~~~
        '''   
        bool_Add_PlotTitle = True
        if bool_Add_PlotTitle:
            ''' Get colnames in order to get data from df_1 '''
            with SSResults(self.obj_SSParams) as obj_Results:
                str_Key_AgeNe__Sim_Pop_Size = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Pop_Size
                str_Col_Name_AgeNe__Sim_Pop_Size = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Sim_Pop_Size)
    #             str_Key_AgeNe__Nc_Adult_Pop_Size = globalsSS.Colnames_AgeNe_Results.static_str_Colname_Nx_Nc_Adults
    #             str_Col_Name_AgeNe__Nc_Adult_Pop_Size = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Nc_Adult_Pop_Size)
                str_Key_AgeNe__Sim_Replicates = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Sim_Replicates
                str_Col_Name_AgeNe__Sim_Replicates = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Sim_Replicates)
                str_Key_AgeNe__Loci = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Loci
                str_Col_Name_AgeNe__Loci = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Loci)
                str_Key_Sim__Run_User_Defined_Folder = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Run_User_Defined_Folder
                str_Col_Name_Sim__Run_User_Defined_Folder = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Sim__Run_User_Defined_Folder)
    
                #str_Key_Colname_Stats_Category_Code = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category_Code
                #str_Col_Name_Stats_Category_Code = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Colname_Stats_Category_Code)
                str_Key_Colname_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category
                str_Col_Name_Stats_Category = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Colname_Stats_Category)
                #str_Key_Colname_float_Ne2_Burrows_r_Sqrd_LDNe = globalsSS.Colnames_Ne2_Aggregation.static_Str_Colname_float_Total_Ne2_r_Sqrd_LDNe
                #str_Col_Name_float_Total_Ne2_r_Sqrd_LDNe = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Colname_float_Ne2_Burrows_r_Sqrd_LDNe)

                str_Mating_Count_Replicate_Total = str(int_Mating_Count_Replicate_Total)
                int_Pop_Size__N = df_1[str_Col_Name_AgeNe__Sim_Pop_Size].iloc[0]
                str_Pop_Size__N = str(int_Pop_Size__N)
                #str_Adult_Pop_Size__N = str(int_AgeNe__Adult_Pop_Size__Nx_Adults__N)
                #str_Adult_Pop_Size__Nc = str(int_AgeNe__Adult_Pop_Size__Nx_Adults__Nc)
                str_Replicates = str(df_1[str_Col_Name_AgeNe__Sim_Replicates].iloc[0])
                str_Loci = str(df_1[str_Col_Name_AgeNe__Loci].iloc[0])
                str_Sim__Run_User_Defined_Folder = str(df_1[str_Col_Name_Sim__Run_User_Defined_Folder].iloc[0])
                str_Plot_Title = str(
                                     'Mating: ' + str_Mating_Count_Replicate_Total + ', '
                                    + 'N:' + str_Pop_Size__N + ', '
                                    #+ 'Nc: ' + str_Adult_Pop_Size__Nc + ', '
                                    + 'Loci: ' + str_Loci + ', '
                                    + 'Reps: ' + str_Replicates
                                    + '\n'
                                    + 'Run: ' + str_Sim__Run_User_Defined_Folder)
        
                ''' Font details '''          
                int_Plot_Title_Size = 16
                if str_Figure_Colour_Scheme == globalsSS.Figure_Colour_Schemes.static_str_Figure_Colour_Scheme__Dark_Blue:
                    str_Font_Colour = 'grey'
                else:
                    str_Font_Colour = 'blue'
                        
                matplotlib__pyplot.title(str_Plot_Title, fontsize=int_Plot_Title_Size, color=str_Font_Colour, figure=pyplot_Fig)
                
                #DEBUG_ON
                #matplotlib__pyplot.show()
                #DEBUG_OFF        
            pass
        
        ''' Font details '''          
        int_PLot_Y_Label_Size = 16
        if str_Figure_Colour_Scheme == globalsSS.Figure_Colour_Schemes.static_str_Figure_Colour_Scheme__Dark_Blue:
            str_Font_Colour = 'white'
        else:
            str_Font_Colour = 'blue'
       
        '''
        ~~~~~~~~~~~~~~~
        Label - Axis Labels
        ~~~~~~~~~~~~~~~
        ''' 
        bool_Add_Axis_Labels = True
        if bool_Add_Axis_Labels:       
            '''
            ~~~~~~~~~~~~~~~
            Label - X-Axis Labels
            ~~~~~~~~~~~~~~~
            '''
            bool_Add_X_Axis_Labels = True
            if bool_Add_X_Axis_Labels:                                                            
                matplotlib__pyplot.xlabel('Summary metrics', fontsize=int_PLot_Y_Label_Size, color=str_Font_Colour, figure=pyplot_Fig)
                
                #DEBUG_ON
                #matplotlib__pyplot.show()
                #DEBUG_OFF
    
                '''
                ~~~~~~~~~~~~~~~~~~~~~~
                Format X-axis labels
                ~~~~~~~~~~~~~~~~~~~~~~
                '''

                dict_Plot_X_Values_And_Labels_Sorted = OrderedDict(sorted(dict_Plot_X_Values_And_Labels.items()))
                list_X_Axis_Primary_Label = [str_Label for x,(str_Label, value_Y_Axis) in dict_Plot_X_Values_And_Labels_Sorted.items()]
                dict_Plot_X_Values_And_Labels_Sorted = OrderedDict(sorted(dict_Plot_X_Values_And_Labels__NON_Harmonic_Mean_LDNe.items()))
                list_X_Axis_Primary_Label = list_X_Axis_Primary_Label + [str_Label for x,(str_Label, value_Y_Axis, value_Y_Axis_Lwr_CI, value_Y_Axis_Upr_CI) in dict_Plot_X_Values_And_Labels_Sorted.items()]
                
                #list_Major_Ticks_X = []
                list_Horiz_Align = ['right', 'center', 'left']
                int_Label_Rotation = 45
                list_Major_Ticks_X = [''] + list_X_Axis_Primary_Label #Need to add a label at the start. Dont know why
                ax1.set_xticklabels(list_Major_Ticks_X, rotation=int_Label_Rotation, ha=list_Horiz_Align[1])

                #DEBUG_ON
                #matplotlib__pyplot.show()
                #DEBUG_OFF
            pass

            '''
            ~~~~~~~~~~~~~~~
            Label - Y-Axis Labels
            ~~~~~~~~~~~~~~~
            '''
            bool_Add_X_Axis_Labels = True
            if bool_Add_X_Axis_Labels:
                        
                matplotlib__pyplot.ylabel('Summary metric value', fontsize=int_PLot_Y_Label_Size, color=str_Font_Colour, figure=pyplot_Fig)
        

                #DEBUG_ON
                #matplotlib__pyplot.show()
                #DEBUG_OFF
            pass                  
        pass          
        '''
        ~~~~~~~~~~~~~~~~~~
        Label - Sim Unique Identifier details
        ~~~~~~~~~~~~~~~~~~
        '''
        bool_Add_Sim_Unique_Run_ID_Labels = True
        if bool_Add_Sim_Unique_Run_ID_Labels:    
            ''' Get colnames in order to get data from df_1 '''
            with SSResults(self.obj_SSParams) as obj_Results:
                str_Key_Sim__Run_User_Defined_Folder = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Run_User_Defined_Folder
                str_Col_Name_Sim__Run_User_Defined_Folder = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Sim__Run_User_Defined_Folder)
                str_Key_Sim__Unique_Run_ID = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Unique_Run_ID
                str_Col_Name_Sim__Unique_Run_ID = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Sim__Unique_Run_ID)
    
            pass
    
            
    
            str_Sim__Run_User_Defined_Folder = str(df_1[str_Col_Name_Sim__Run_User_Defined_Folder].iloc[0])
    
            str_RUDF_Text = str(str_Sim__Run_User_Defined_Folder)
    
            ''' Font details '''          
            int_Font_Size = 6
            str_Font_Colour = 'darkgrey'
            
            ''' Add figure text '''
            #matplotlib__pyplot.figtext(.75,.91,str_RUDF_Text, fontsize=int_Font_Size, color=str_Font_Colour, figure=pyplot_Fig)
            matplotlib__pyplot.figtext(.70,.005,str_RUDF_Text, fontsize=int_Font_Size, color=str_Font_Colour, figure=pyplot_Fig)
    
            ''' Get values from df_1 '''
            str_Sim__Unique_Run_ID = str(df_1[str_Col_Name_Sim__Unique_Run_ID].iloc[0])
            
            str_UID_Text = str(str_Sim__Unique_Run_ID)
    
            ''' Font details '''          
            int_Font_Size = 6
            str_Font_Colour = 'darkgrey'
            
            ''' Add figure text '''
            #matplotlib__pyplot.figtext(.75,.99,str_UID_Text, fontsize=int_Font_Size, color=str_Font_Colour, figure=pyplot_Fig)
            matplotlib__pyplot.figtext(.70,.015,str_UID_Text, fontsize=int_Font_Size, color=str_Font_Colour, figure=pyplot_Fig)
            
            #DEBUG_ON
            #matplotlib__pyplot.show()
            #DEBUG_OFF
        pass   
        '''
        ~~~~~~~~~~~~~~~~~~
        Axis details
        ~~~~~~~~~~~~~~~~~~
        '''

        if str_Figure_Colour_Scheme == globalsSS.Figure_Colour_Schemes.static_str_Figure_Colour_Scheme__Dark_Blue:
            int_Tick_Label_Size = 16
            str_X_Axis_Tick_Labels_Colour = 'white'
            str_Y_Axis_Tick_Labels_Colour = 'white'
            str_X_Axis_Tick_Major_Colour = 'white'
            str_X_Axis_Tick_Minor_Colour = 'grey'
            str_Y_Axis_Tick_Major_Colour = 'white'
            str_Y_Axis_Tick_Minor_Colour = 'grey'
        pass
    
        if str_Figure_Colour_Scheme == globalsSS.Figure_Colour_Schemes.static_str_Figure_Colour_Scheme__Dark_Blue:
            ax1.tick_params(axis='x', colors=str_X_Axis_Tick_Labels_Colour)
            ax1.tick_params(axis='y', colors=str_Y_Axis_Tick_Labels_Colour)
    
            # We change the fontsize of minor ticks label 
            ax1.tick_params(axis='x', which='major', labelsize=int_Tick_Label_Size, color=str_X_Axis_Tick_Major_Colour)
            ax1.tick_params(axis='x', which='minor', labelsize=int_Tick_Label_Size, color=str_X_Axis_Tick_Minor_Colour)
            ax1.tick_params(axis='y', which='major', labelsize=int_Tick_Label_Size, color=str_Y_Axis_Tick_Major_Colour)
            ax1.tick_params(axis='y', which='minor', labelsize=int_Tick_Label_Size, color=str_Y_Axis_Tick_Minor_Colour) 
        pass 
    
        ''' Axis tick pointing direction '''
        ax1.tick_params(axis='x', direction='out')
        ax1.tick_params(axis='y', direction='out')
        
        ''' Specify axis ticks to be plotted '''
        ax1.xaxis.tick_bottom() 
        ax1.yaxis.tick_left() 
             
#         for ax, color in zip([ax1], ['white']):
#             matplotlib__pyplot.setp(ax.spines.values(), color=color)
#             matplotlib__pyplot.setp([ax.get_xticklines(), ax1.get_yticklines()], color=color)        
#         
#         ax1.axhline(linewidth=4, color="w") # inc. width of x-axis and color it
#         ax1.axvline(linewidth=4, color="w") # inc. width of y-axis and color it

        if str_Figure_Colour_Scheme == globalsSS.Figure_Colour_Schemes.static_str_Figure_Colour_Scheme__Dark_Blue:
            str_Colour = 'white'

        else:
            str_Colour = 'black'
        pass
        for axis in ['top','bottom','left','right']:
            ax1.spines[axis].set_linewidth(4)
            ax1.spines[axis].set_color(str_Colour)
 
        ax1.spines['top'].set_visible(False)
        ax1.spines['right'].set_visible(False)           

        '''
        ~~~~~~~~~~~~~~~~~~
        Legend 
        ~~~~~~~~~~~~~~~~~~
        '''
        bool_Add_Legend = False
        if bool_Add_Legend:
            list_pyplot_Lines = []
            list_str_Experiment_Text = []
            
            dict_pyplot_Legend_Lines= None
            
            for key_str_Experiment, value_pyplot_Line in dict_pyplot_Legend_Lines.items():
                list_pyplot_Lines.append(value_pyplot_Line)
                list_str_Experiment_Text.append(key_str_Experiment)
            pass
    
            float_Bbox_X_Pos = 0.80
            float_Bbox_Y_Pos = 0.35    
            pyplot_Fig_Legend = pyplot_Fig.legend(list_pyplot_Lines
                                                  ,list_str_Experiment_Text
                                                  ,bbox_to_anchor=(float_Bbox_X_Pos, float_Bbox_Y_Pos)
                                                  ,frameon = 1)
            

        
            pyplot_Fig_Legend_Frame = pyplot_Fig_Legend.get_frame()
            
            pyplot_Fig_Legend_Frame.set_color('white')
            ''' Legend frame background '''
            #pyplot_Fig_Legend_Frame.set_facecolor('green')
            ''' Legend frame border '''
            #pyplot_Fig_Legend_Frame.set_edgecolor('red')
            
            ''' Turn off frame outline '''
            pyplot_Fig_Legend_Frame.set_linewidth(0)
            
            # set the alpha value of the legend: it will be translucent
            pyplot_Fig_Legend_Frame.set_alpha(0.5)                                                    
        
            #DEBUG_ON
            #matplotlib__pyplot.show()
            #DEBUG_OFF    
        pass
        #ax1.grid(True, figure=pyplot_Fig)

        bool_Format_Ticks = False
        if bool_Format_Ticks:
            nparray_Major_Ticks_X = ax1.xaxis.get_majorticklocs()      
            if len(nparray_Major_Ticks_X) > 1: 
                float_Major_Ticks_X_First = nparray_Major_Ticks_X[0]
                ''' Not sure why but use option 1 for 0 lower bound x-axis and option 2 for categorical x-axis '''
                #float_Major_Ticks_X_Last = nparray_Major_Ticks_X[-1] #Option 1
                float_Major_Ticks_X_Last = nparray_Major_Ticks_X[-1]+1 #Option 2
                float_Major_Ticks_X_Interval = 1
                nparray_Major_Ticks_X = numpy.arange(float_Major_Ticks_X_First, float_Major_Ticks_X_Last, float_Major_Ticks_X_Interval)                                              
                ax1.set_xticks(nparray_Major_Ticks_X) 

            pass
        
            nparray_Minor_Ticks_X = ax1.xaxis.get_minorticklocs()
            
            if len(nparray_Minor_Ticks_X) > 1:     
                float_Minor_Ticks_X_First = nparray_Minor_Ticks_X[0]
                float_Minor_Ticks_X_Last = nparray_Minor_Ticks_X[-1]
                float_Minor_Ticks_X_Interval = 1
                nparray_Minor_Ticks_X = numpy.arange(float_Minor_Ticks_X_First, float_Minor_Ticks_X_Last, float_Minor_Ticks_X_Interval)                                              
                ax1.set_xticks(nparray_Minor_Ticks_X, minor=True)
            
            nparray_Major_Ticks_Y = ax1.yaxis.get_majorticklocs()      
            if len(nparray_Major_Ticks_Y) > 1: 
                float_Major_Ticks_Y_First = nparray_Major_Ticks_Y[0]
                float_Major_Ticks_Y_Last = nparray_Major_Ticks_Y[-1]
                float_Major_Ticks_Y_Interval = 50
                nparray_Major_Ticks_Y = numpy.arange(float_Major_Ticks_Y_First, float_Major_Ticks_Y_Last, float_Major_Ticks_Y_Interval)                                              
                ax1.set_yticks(nparray_Major_Ticks_Y)  
                
            nparray_Minor_Ticks_Y = ax1.yaxis.get_minorticklocs()      
            if len(nparray_Minor_Ticks_Y) > 1: 
                float_Minor_Ticks_Y_First = nparray_Minor_Ticks_Y[0]
                float_Minor_Ticks_Y_Last = nparray_Minor_Ticks_Y[-1]
                float_Minor_Ticks_Y_Interval = 1
                nparray_Minor_Ticks_Y = numpy.arange(float_Minor_Ticks_Y_First, float_Minor_Ticks_Y_Last, float_Minor_Ticks_Y_Interval)                                              
                ax1.set_yticks(nparray_Minor_Ticks_Y, minor=True)                                  
            
                                                                  
            ax1.grid(which='both')                                                   
        pass

        '''
        ~~~~~~~~~~~~~~~~~~
        Annotate points
        ~~~~~~~~~~~~~~~~~~
        '''
        bool_Annotate_Points = True
        if bool_Annotate_Points:
    
            ''' Annotate Primary Y-Axis points '''
            dict_Plot_X_Values_And_Labels_Sorted = OrderedDict(sorted(dict_Plot_X_Values_And_Labels.items()))
            list_X_Axis_Primary = [x for x in dict_Plot_X_Values_And_Labels_Sorted.keys()]
            list_Y_Axis_Primary = [value_Y_Axis for x,(str_Label, value_Y_Axis) in dict_Plot_X_Values_And_Labels_Sorted.items()]
            for a, b in zip(list_X_Axis_Primary, list_Y_Axis_Primary):    
                
                str_Annotation_colour = 'white'
                str_Annotation = '{:,}'.format(b).replace(',',' ')
                ax1.annotate(str_Annotation, fontsize=12, fontweight='bold', xy=(a,b), xytext=(0, -15), ha='center', textcoords='offset points', color=str_Annotation_colour)
            pass
        
            ''' Annotate Primary Y-Axis points '''
            dict_Plot_X_Values_And_Labels_Sorted = OrderedDict(sorted(dict_Plot_X_Values_And_Labels__NON_Harmonic_Mean_LDNe.items()))
            list_X_Axis_Primary = [x for x in dict_Plot_X_Values_And_Labels_Sorted.keys()]
            list_Y_Axis_Primary = [int(round(value_Y_Axis,0)) for x,(str_Label, value_Y_Axis, value_Y_Axis_Lwr_CI, value_Y_Axis_Upr_CI) in dict_Plot_X_Values_And_Labels_Sorted.items()]
            list_Y_Axis_Primary_Lwr_CI = [int(round(value_Y_Axis_Lwr_CI,0)) for x,(str_Label, value_Y_Axis, value_Y_Axis_Lwr_CI, value_Y_Axis_Upr_CI) in dict_Plot_X_Values_And_Labels_Sorted.items()]
            list_Y_Axis_Primary_Upr_CI = [int(round(value_Y_Axis_Upr_CI,0)) for x,(str_Label, value_Y_Axis, value_Y_Axis_Lwr_CI, value_Y_Axis_Upr_CI) in dict_Plot_X_Values_And_Labels_Sorted.items()]
            
            for a, b, c, d in zip(list_X_Axis_Primary, list_Y_Axis_Primary, list_Y_Axis_Primary_Lwr_CI, list_Y_Axis_Primary_Upr_CI):                                                # <--

                str_Annotation_colour = 'black'
                #str_Annotation = '{:,}'.format(b).replace(',',' ') + '\n (' + '{:,}'.format(c).replace(',',' ') + ', ' + '{:,}'.format(c).replace(',',' ') + ')'
                str_Annotation = 'U: ' + '{:,}'.format(d).replace(',',' ') 
                str_Annotation = str_Annotation + '\n' + 'C: ' + '{:,}'.format(b).replace(',',' ')
                str_Annotation = str_Annotation + '\n' + 'U: ' + '{:,}'.format(c).replace(',',' ')
                ax1.annotate(str_Annotation, fontsize=12, fontweight='bold', xy=(a,b), xytext=(0, 20), ha='center', textcoords='offset points', color=str_Annotation_colour)
            pass 
        pass
            
        #DEBUG_ON
        ''' Required to change background of INTERACTIVE WINDOW only'''
        if str_Figure_Colour_Scheme == globalsSS.Figure_Colour_Schemes.static_str_Figure_Colour_Scheme__Dark_Blue:
            pyplot_Fig_Patch = pyplot_Fig.patch
            pyplot_Fig_Patch.set_facecolor('darkblue') # works with plt.show().  
        pass
        #matplotlib__pyplot.show()
        #DEBUG_OFF
        
                                
        return pyplot_Fig
        
    '''
    -------------------------------------------------------------
    Plot EXPERIMENT POST SIM & AGENE_DEMOGRAPHIC SUMMARY Per Replicate EOR SUMMARISED Results <--- OLD
    -------------------------------------------------------------
    '''   
    def func__Plot_EXPERIMENT_AgeNe_Sim_Demographic_Population_Summary__Get_Data_OLD(self, str_Search_Path):

        boolSuccess = False
       
        '''
        -------------------------------
        Specify Final Output File
        -------------------------------
        '''
        ''' Output plot '''
        str_Excel_Input_Colname_Prefix = globalsSS.Excel_Results_File_Details.static_Excel_Colname_Prefix__AgeNe_Sim_Summarise_ALL_EOR__Summary_Results
        str_Excel_Input_FileName =  globalsSS.Excel_Results_File_Details.static_Excel_FileName__AgeNe_Sim_Summarise_ALL_EOR__Summary_Results
        
#         str_Plot_Output_File_1 = self.obj_SSParams.strOutputLocation_CumulativeRun_Path + '\\' + self.obj_SSParams.strUniqueRunID + '_' + str_Excel_Input_FileName + '_' + str_Excel_Input_Colname_Prefix + '.png'
#         str_Plot_Output_File_2 = self.obj_SSParams.strOutputLocation_CumulativeRun_Path + '\\' + self.obj_SSParams.strUniqueRunID + '_' + str_Excel_Input_FileName + '_' + str_Excel_Input_Colname_Prefix + '.pdf'
        str_Plot_Output_File_1 = str_Search_Path + '\\' + self.obj_SSParams.strUniqueRunID + '_' + str_Excel_Input_FileName + '_' + str_Excel_Input_Colname_Prefix + '.png'
        str_Plot_Output_File_2 = str_Search_Path + '\\' + self.obj_SSParams.strUniqueRunID + '_' + str_Excel_Input_FileName + '_' + str_Excel_Input_Colname_Prefix + '.pdf'

        '''
        -------------------------------
        Specify Excel Input file
        -------------------------------
        '''        
        str_Input_FileName = '*' + str_Excel_Input_FileName + '*.xlsx'
        str_File_Search_Pattern = str_Input_FileName
        
        '''
        -------------------------------
        Import Excel Data to dataframee
        -------------------------------
        '''
        '''
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~
        Get & Process Input SHEET
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~
        '''
        str_Input_Excel_Sheet_Name = globalsSS.Excel_Results_File_Details.static_Excel_Colname_Prefix__AgeNe_Sim_Summarise_ALL_EOR__Summary_Results

        self.obj_Log_Default.info('Dataframing results for: ' + str_Input_FileName + ' and for SHEET: ' + str_Input_Excel_Sheet_Name) 

        bool_File_1_Located = False
        with FileHandler() as obj_FileHandler:
            bool_File_1_Located, list_Path_And_Files = obj_FileHandler.func_Locate_Files(str_Search_Path, str_File_Search_Pattern)
       
        if bool_File_1_Located:
            
            '''Process Results'''
            list_DF_1s = []            
            for str_Path_And_File in list_Path_And_Files:
                
                '''Get the data from the excel files with the specified sheet'''
                xl = pandas.ExcelFile(str_Path_And_File)
                df_1 = xl.parse(str_Input_Excel_Sheet_Name)
                list_DF_1s.append(df_1)
                
            pass

            ''' concatinate the dfs '''
            df_Aggregate = pandas.DataFrame()
            for df_New in list_DF_1s:
                '''log the results'''
                #str_Df = df_New.to_string()
                #self.obj_Log_Debug.debug('Results dataframe NEW: %s' % str_Df)
                
                #Concat DFs - Tried df.append() but it wont work
                df_Aggregate = pandas.concat([df_Aggregate,df_New], ignore_index=True)
                
                #str_Df = df_Aggregate.to_string()
                #self.obj_Log_Debug.debug('Results dataframe AGGREGATE: %s' % str_Df)

            pass

            #DEBUG_ON
            #str_Df = df_Aggregate.to_string()
            #self.obj_Log_Debug.debug('Results dataframe AGGREGATE 1: %s' % str_Df)
            #DEBUG_OFF
            
            df1 = df_Aggregate 
        else:
            self.obj_Log_Default.error('File specified could not be located; str_Search_Path = ' + str_Search_Path + '; strFileSearchPattern = ' + str_File_Search_Pattern)
        pass
    
        '''
        -------------------------------
        Get More Data
        -------------------------------
        '''
        '''
        -------------------------------
        Specify Excel Input file 2
        -------------------------------
        '''        
        #str_Excel_Input_Colname_Prefix = globalsSS.Excel_Results_File_Details.static_Excel_Colname_Prefix__EXPERIMENT_Parent_Offspring_Ne_1__Summary_Results
        str_Excel_Input_FileName =  globalsSS.Excel_Results_File_Details.static_Excel_FileName__Ne2_LDNe__Summary_EOR_Results
 
        str_Input_FileName = '*' + str_Excel_Input_FileName + '*.xlsx'
        str_File_Search_Pattern = str_Input_FileName
        
        '''
        -------------------------------
        Import Excel Data to dataframee
        -------------------------------
        '''
        '''
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~
        Get & Process Input SHEET
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~
        '''
        str_Input_Excel_Sheet_Name = globalsSS.Excel_Results_File_Details.static_Excel_SheetName__Ne2_LDNe__Summary_EOR_Results

        self.obj_Log_Default.info('Dataframing results for: ' + str_Input_FileName + ' and for SHEET: ' + str_Input_Excel_Sheet_Name) 

        bool_File_2_Located = False
        with FileHandler() as obj_FileHandler:
            bool_File_2_Located, list_Path_And_Files = obj_FileHandler.func_Locate_Files(str_Search_Path, str_File_Search_Pattern)
       
        if bool_File_2_Located:
            
            '''Process Results'''
            list_DF_2s = []            
            for str_Path_And_File in list_Path_And_Files:
                
                '''Get the data from the excel files with the specified sheet'''
                xl = pandas.ExcelFile(str_Path_And_File)
                df_2 = xl.parse(str_Input_Excel_Sheet_Name)
                list_DF_2s.append(df_2)
                
            pass

            ''' concatinate the dfs '''
            df_Aggregate = pandas.DataFrame()
            for df_New in list_DF_2s:
                '''log the results'''
                #str_Df = df_New.to_string()
                #self.obj_Log_Debug.debug('Results dataframe NEW: %s' % str_Df)
                
                #Concat DFs - Tried df.append() but it wont work
                df_Aggregate = pandas.concat([df_Aggregate,df_New], ignore_index=True)
                
                #str_Df = df_Aggregate.to_string()
                #self.obj_Log_Debug.debug('Results dataframe AGGREGATE: %s' % str_Df)

            pass

            #DEBUG_ON
            #str_Df = df_Aggregate.to_string()
            #self.obj_Log_Debug.debug('Results dataframe AGGREGATE 1: %s' % str_Df)
            #DEBUG_OFF
            
            df2 = df_Aggregate 
        else:
            self.obj_Log_Default.error('File specified could not be located; str_Search_Path = ' + str_Search_Path + '; strFileSearchPattern = ' + str_File_Search_Pattern)
        pass


        '''
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~
        Transform the data
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~
        '''  
        if bool_File_1_Located and bool_File_2_Located:
            
            ''' Send the relevent DFs  '''
            list_DFs = [df1, df2]
     
            list_DFs = self.func__Plot_EXPERIMENT_AgeNe_Sim_Demographic_Population_Summary__Transform_And_Process(str_Excel_Input_FileName, str_Excel_Input_Colname_Prefix, list_DFs)
            
        pass
    
                    
        return boolSuccess


    def func__Plot_EXPERIMENT_AgeNe_Sim_Demographic_Population_Summary__Transform_And_Process_OLD(self, str_Excel_Input_FileName, str_Excel_Input_Colname_Prefix, list_DFs):
        
        self.obj_Log_Default.info('Transforming data')

        '''
        -----------------------------
        Specify DFs
        -----------------------------
        '''
        df_1 = list_DFs[0]
        df_2 = list_DFs[1]
        df_3 = list_DFs[2]
           
        with SSResults(self.obj_SSParams) as obj_Results:
            str_Group_Key_Mating_Count_Replicate_Total = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Mating_Count_Replicate_Total
            str_Col_Name_Mating_Count_Replicate_Total_DF1 = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Group_Key_Mating_Count_Replicate_Total)
            str_Col_Name_Mating_Count_Replicate_Total_DF2 = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Group_Key_Mating_Count_Replicate_Total)
        pass

        ''' Get all the UNIQUE Mating_Count_Replicate_Total values '''
        #nparray_Mating_Count_Replicate_Total = numpy.unique(df_1[str_Col_Name_Mating_Count_Replicate_Total_DF1])
        nparray_Mating_Count_Replicate_Total = numpy.unique(df_2[str_Col_Name_Mating_Count_Replicate_Total_DF2])

        ''' Get Y-Axis Max '''
        with SSResults(self.obj_SSParams) as obj_Results:
            str_Key_AgeNe__Ne_Demo = globalsSS.Colnames_AgeNe_Results.static_str_Colname_NeDemo
            str_Col_Name_AgeNe__Ne_Demo = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Ne_Demo)
            str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe = globalsSS.Colnames_Ne2_Aggregation.static_Str_Colname_float_Total_Ne2_r_Sqrd_LDNe
            str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe)
            df_Temp = pandas.DataFrame()
            df_Temp_1 = pandas.DataFrame()
            df_Temp_2 = pandas.DataFrame()
            df_Temp_1["Max"] = df_1[[str_Col_Name_AgeNe__Ne_Demo]].max(axis=1)
#             df_Temp_2["Max"] = df_2[[str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe]].max(axis=1)
#             df_Temp = pandas.concat([df_Temp_1,df_Temp_2], ignore_index=True)
            df_Temp = df_Temp_1
            int_Y_Axis_Max = df_Temp["Max"].max(axis=0)
            int_Y_Axis_Max = int(math.ceil(int_Y_Axis_Max / 500)) * 500
            del df_Temp_1     
            del df_Temp_2     
            del df_Temp     
        pass 
                
        for int_Mating_Count_Replicate_Total in nparray_Mating_Count_Replicate_Total:

            '''
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~
            Transform
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~
            '''  
            self.obj_Log_Default.info('Transforming data for int_Mating_Count_Replicate_Total :' + str(int_Mating_Count_Replicate_Total))
                      
            ''' Subset the DF to get the correct value '''
            df_1_Subset = df_1[(df_1[str_Col_Name_Mating_Count_Replicate_Total_DF1]==int_Mating_Count_Replicate_Total)]
            
            #DEBUG_ON
            #str_Df = df_1_Subset.to_string()
            #self.obj_Log_Debug.debug('Results dataframe df 1: %s' % str_Df)
            #raw_input('pausing')
            #DEBUG_OFF    
            
            df_2_Subset = df_2[(df_2[str_Col_Name_Mating_Count_Replicate_Total_DF2]==int_Mating_Count_Replicate_Total)]
            
            #DEBUG_ON
            #str_Df = df_2_Subset.to_string()
            #self.obj_Log_Debug.debug('Results dataframe df 2: %s' % str_Df)
            #raw_input('pausing')
            #DEBUG_OFF            

            list_DFs = [df_1_Subset, df_2_Subset, df_3] 
            
            '''
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~
            Plot
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~
            '''    
            
            ''' Send the relevent DFs to the plotter '''
            #list_DFs = [df1, df2]
            
            bool_Interactive_Display = False
            ''' Specify the number of figure copies and their specs '''
            dict_Fig_Copies = {
                                1:{'ColourScheme':'Default', 'Transparent':False, 'Interactive_Display':bool_Interactive_Display, 'Save_PNG': True, 'Save_PDF': False}
                               #,2:{'ColourScheme':'Dark_Blue', 'Transparent':True, 'Interactive_Display':bool_Interactive_Display,'Save_PNG': True, 'Save_PDF': False}
                               }
            
            pyplot_Fig_1 = None
            for key_Dict_Fig_Copy_Params, value_Dict_Fig_Copy_Params in dict_Fig_Copies.iteritems():
                
                pyplot_Fig_1 = self.func__Plot_EXPERIMENT_AgeNe_Sim_Demographic_Population_Summary__Plot(list_DFs, int_Mating_Count_Replicate_Total, int_Y_Axis_Max, value_Dict_Fig_Copy_Params, pyplot_Fig_1)
                
                '''
                ~~~~~~~~~~~~~~~~~~~~~~~~~~~
                Save results
                ~~~~~~~~~~~~~~~~~~~~~~~~~~~
                '''    
                str_Plot_Output_Path = self.obj_SSParams.strOutputLocation_CumulativeRun_Path + '\\EXP2_Plots\\'
                ''' Create path if it doesnt exist '''
                with FileHandler() as obj_File_Op:
                    obj_File_Op.method_Create_Path(str_Plot_Output_Path)
                pass                
                str_Plot_Output_FileName = self.obj_SSParams.strUniqueRunID + '_' + str_Excel_Input_FileName + '_' + str_Excel_Input_Colname_Prefix + '_' + str(int_Mating_Count_Replicate_Total)
                str_Plot_Output_Path_And_FileName = str_Plot_Output_Path + str_Plot_Output_FileName
                if value_Dict_Fig_Copy_Params['Save_PNG'] == True:
                    str_Plot_Output_Path_And_FileName_PNG = str_Plot_Output_Path_And_FileName + '_' + str(key_Dict_Fig_Copy_Params) + '.png'
                    bool_Transparent = value_Dict_Fig_Copy_Params['Transparent']
                    pyplot_Fig_1.savefig(str_Plot_Output_Path_And_FileName_PNG, bbox_inches='tight', dpi=400, transparent=bool_Transparent)
                pass
                if value_Dict_Fig_Copy_Params['Save_PDF'] == True:
                    str_Plot_Output_Path_And_FileName_PDF = str_Plot_Output_Path_And_FileName + '_' + str(key_Dict_Fig_Copy_Params) + '.pdf'
                    pyplot_Fig_1.savefig(str_Plot_Output_Path_And_FileName_PDF, bbox_inches='tight')
                pass
        
                '''
                ~~~~~~~~~~~~~~~~~~~~~~~~~~~
                Display results
                ~~~~~~~~~~~~~~~~~~~~~~~~~~~
                '''
                if value_Dict_Fig_Copy_Params['Interactive_Display'] == True:           
                    matplotlib__pyplot.show()
                pass
            pass
            ''' Close the plot '''
            matplotlib__pyplot.close(pyplot_Fig_1) 
        pass
                  
        pass        
        
        
        return list_DFs


    def func__Plot_EXPERIMENT_AgeNe_Sim_Demographic_Population_Summary__Plot_OLD(self, list_DFs, int_Mating_Count_Replicate_Total, int_Y_Axis_Max, dict_Fig_Copy, pyplot_Fig_1):
        
        self.obj_Log_Default.info('Creating figure')

        str_Stat_Category_Code_Full = object_SSConfigSamplingStrategy.static_str_Value__Sampling_Strategy_Run_LDNe_Sampling_Plan_Code_FUL
        str_Stat_Category_Code_Full_Mature = object_SSConfigSamplingStrategy.static_str_Value__Sampling_Strategy_Run_LDNe_Sampling_Plan_Code_FMT
        str_Stat_Category_Code_Full_Juvenile = object_SSConfigSamplingStrategy.static_str_Value__Sampling_Strategy_Run_LDNe_Sampling_Plan_Code_FJV
        str_Stat_Category_Code_Full_Embryo = object_SSConfigSamplingStrategy.static_str_Value__Sampling_Strategy_Run_LDNe_Sampling_Plan_Code_FEM
        
        bool_Plot_Theme__Default = False
        bool_Plot_Theme__Dark_Blue_1 = False
        
        if dict_Fig_Copy['ColourScheme'] == 'Dark_Blue':
            bool_Plot_Theme__Dark_Blue_1 = True
        else:
            bool_Plot_Theme__Default = True
        pass
    
#         if bool_Plot_Theme__Dark_Blue_1:
#             bool_Plot_Theme__Default = False
#         else:
#             bool_Plot_Theme__Default = True
#         pass
            
        int_Plot_Line_Width = 4
        '''
        -----------------------------
        Specify DFs
        -----------------------------
        '''
        df_1 = list_DFs[0]
        df_2 = list_DFs[1]
        
        
        '''
        -----------------------------
        Specify X-Axis
        -----------------------------
        '''
        with SSResults(self.obj_SSParams) as obj_Results:
            str_Key_AgeNe__Age = globalsSS.Colnames_AgeNe_Results.static_str_Colname_Age
            str_Col_Name_AgeNe__Age = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Age)
        pass
        str_X_Axis_df_1_Colname = str_Col_Name_AgeNe__Age
        list_Primary_X_Axis = df_1[str_X_Axis_df_1_Colname].tolist()

        '''
        -----------------------------
        Specify Y-Axis Max
        -----------------------------
        '''
        with SSResults(self.obj_SSParams) as obj_Results:
            str_Key_AgeNe__Nx_All = globalsSS.Colnames_AgeNe_Results.static_str_Colname_Nx_All
            str_Col_Name_AgeNe__Nx_All = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Nx_All)
        pass
  
        ''' Get Y-Axis Max '''
        with SSResults(self.obj_SSParams) as obj_Results:
#             str_Key_AgeNe__Ne_Demo = globalsSS.Colnames_AgeNe_Results.static_str_Colname_NeDemo
#             str_Col_Name_AgeNe__Ne_Demo = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Ne_Demo)
#             str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe = globalsSS.Colnames_Ne2_Aggregation.static_Str_Colname_float_Total_Ne2_r_Sqrd_LDNe
#             str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe)
            df_Temp = pandas.DataFrame()
            df_Temp_1 = pandas.DataFrame()
            df_Temp_2 = pandas.DataFrame()
            df_Temp_1["Max"] = df_1[[str_Col_Name_AgeNe__Nx_All]].max(axis=1)
#             df_Temp_2["Max"] = df_2[[str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe]].max(axis=1)
#             df_Temp = pandas.concat([df_Temp_1,df_Temp_2], ignore_index=True)
            df_Temp = df_Temp_1
            int_Y_Axis_Max = df_Temp["Max"].max(axis=0)
            int_Y_Axis_Max = int(math.ceil(int_Y_Axis_Max / 500)) * 510
            del df_Temp_1     
            del df_Temp_2     
            del df_Temp     
        pass         
            
        '''
        -----------------------------
        Define figure
        -----------------------------
        '''
        bool_make_Inset_plot = False
        if bool_make_Inset_plot:
            '''
            -----------------------------
            Add Plot as inset subplot
            -----------------------------
            '''            
            pyplot_Fig = pyplot_Fig_1 
            left, bottom, width, height = [0.45, 0.45, 0.45, 0.45]
            ax1 = pyplot_Fig.add_axes([left, bottom, width, height])
        else:
            '''
            -----------------------------
            Create new figure
            -----------------------------
            '''                   
            # default scale is 1 in your original case, scales with other cases:
            int_X_Axis_Length = len(df_1[str_X_Axis_df_1_Colname])
            int_Width_Scale = int_X_Axis_Length/10 
            int_Width_Control = 6  #6 - About perfect for PowerPoint
            int_Height_Control = 8 #8 - About perfect for PowerPoint
            figsize = (int_Width_Control*int_Width_Scale,int_Height_Control) # fig size in inches (width,height)
            pyplot_Fig = matplotlib__pyplot.figure(figsize = figsize)       
            
            ax1 = pyplot_Fig.add_subplot(111)        
        pass

        '''
        -----------------------------
        Plot Line - AgeNe N - ALL Adults 
        -----------------------------
        '''
#         '''
#         Font properties for subsequent text
#         '''
#         
#         with SSResults(self.obj_SSParams) as obj_Results:
#             str_Key_AgeNe__Adult_Pop_Size__Nx_N_Adults = globalsSS.Colnames_AgeNe_Results.static_str_Colname_Nx_N_Adults
#             str_Col_Name_AgeNe__Adult_Pop_Size__Nx_N_Adults = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Adult_Pop_Size__Nx_N_Adults)
# 
#         pass
#         str_Y_Axis_df_1_Colname = str_Col_Name_AgeNe__Adult_Pop_Size__Nx_N_Adults 
# 
#         ''' if a horizontal plot line - Get the value for plotting and display '''
#         int_AgeNe__Adult_Pop_Size__Nx_Adults__N = int(df_1[str_Y_Axis_df_1_Colname].iloc[0])
        
        dict_Colnames = OrderedDict()
            
        bool_Plot_Key_Metrics = True
        if bool_Plot_Key_Metrics:
            
            with SSResults(self.obj_SSParams) as obj_Results:
                ''' Stat Category Code '''
                str_Key_str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category
                str_Colname__str_Stats_Category = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_str_Stats_Category)
                ''' Stat Category Code '''     
                str_Key_str_Stats_Category_Code = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category_Code
                str_Colname__str_Stats_Category_Code = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_str_Stats_Category_Code)
                ''' AgeNe Nx - Pop size (total survivors at age = 1) '''             
                str_Key_AgeNe__Pop_Size__N = globalsSS.Colnames_AgeNe_Results.static_str_Colname_Nx_All
                str_Colname_AgeNe__Pop_Size__N = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Pop_Size__N)
                ''' AgeNe Nc - Reproductively Avaialble Adults '''
                str_Key_AgeNe__Adult_Pop_Size__Nc_Adults = globalsSS.Colnames_AgeNe_Results.static_str_Colname_Nx_Nc_Adults
                str_Colname_AgeNe__Adult_Pop_Size__Nc_Adults = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Adult_Pop_Size__Nc_Adults)
                ''' AgeNe Ne Demographic '''
                str_Key_AgeNe__Ne_Demo = globalsSS.Colnames_AgeNe_Results.static_str_Colname_NeDemo
                str_Colname_AgeNe__Ne_Demo = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Ne_Demo)
                ''' AgeNe Nb Demographic '''
                str_Key_AgeNe__Nb_Demo = globalsSS.Colnames_AgeNe_Results.static_str_Colname_NbDemo
                str_Colname_AgeNe__Nb_Demo = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Nb_Demo)
    #             '''Exp1 Potential Parents '''
    #             str_Key_Exp1__Potential_Parents_PP = globalsSS.Colnames_Parent_Offspring_Stats_METHOD_2.static_Str_Colname_Potential_Parents_PP
    #             str_Colname_Exp1__Potential_Parents_PP = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__Potential_Parents_PP)
                ''' LDNe PCrit '''
                str_Key_Ne2_floatPCrit = globalsSS.Colnames_Ne2_Output.static_Str_Colname_Ne2_floatPCrit
                str_Colname__Ne2_floatPCrit = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Ne2_floatPCrit)
                ''' LDNe Mean Point Estimate (non-harmonic mean)'''
                ''' Present mean Ne as primary axis as this number incorporates the uncertainty of the LDNe method which is what researcher are trying to avoid with a good sampling strategy '''
                str_Key_Colname_Ne2_floatLDNe = globalsSS.Colnames_Ne2_Output.static_Str_Colname_Ne2_floatLDNe
                str_Colname__Ne2_floatLDNe = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Colname_Ne2_floatLDNe)
                ''' LDNe Mean r2 Point Est (Harmonic mean LDNe) '''
                ''' Present harmonic mean Ne (= mean rSquared Ne) as secondary Y-axis as this is not the number researchers are aiming to obtain '''    
                str_Key_float_Total_Ne2_r_Sqrd_LDNe = globalsSS.Colnames_Ne2_Aggregation.static_Str_Colname_float_Total_Ne2_r_Sqrd_LDNe
                str_Colname__float_Total_Ne2_r_Sqrd_LDNe = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_float_Total_Ne2_r_Sqrd_LDNe)                
                ''' LDNe Mean error bars (non-harmonic mean) '''
                ''' LDNe Mean error bar Lwr CI'''
                str_Key_Colname_Ne2_floatLDNeJackknife_Lwr_CI = globalsSS.Colnames_Ne2_Output.static_Str_Colname_Ne2_floatLDNeJackknife_Lwr_CI
                str_Colname__Ne2_floatLDNeJackknife_Lwr_CI = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Colname_Ne2_floatLDNeJackknife_Lwr_CI)
                ''' LDNe Mean error bar Upr CI'''
                str_Key_Colname_Ne2_floatLDNeJackknife_Upr_CI = globalsSS.Colnames_Ne2_Output.static_Str_Colname_Ne2_floatLDNeJackknife_Upr_CI
                str_Colname__Ne2_floatLDNeJackknife_Upr_CI = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Colname_Ne2_floatLDNeJackknife_Upr_CI)
            pass
        
            '''
            ~~~~~~~~~~~~~~~~~
            Plot Value Set - AgeNe Demographics Metrics
            ~~~~~~~~~~~~~~~~~
            '''
            df_Key_Values = OrderedDict()
            dict_Plot_X_Values_And_Labels = OrderedDict()
            int_X_Axis_Value_Order = 0
            ''' AgeNe Nx - Pop size (total survivors at age = 1) '''
            str_df_Colname = str_Colname_AgeNe__Pop_Size__N
            str_Dict_Key = 'int_AgeNe__Pop_Size__N'
            df_Key_Values[str_Dict_Key] = int(df_1[str_df_Colname].iloc[0])
            int_X_Axis_Value_Order += 1
            str_X_Axis_Label = 'N'
            value_Y_Axis = df_Key_Values[str_Dict_Key]
            dict_Plot_X_Values_And_Labels[int_X_Axis_Value_Order] = (str_X_Axis_Label, value_Y_Axis)
            
            ''' AgeNe Nc - Reproductively Avaialble Adults '''
            str_df_Colname = str_Colname_AgeNe__Adult_Pop_Size__Nc_Adults
            str_Dict_Key = 'int_AgeNe__Adult_Pop_Size__Nc_Adults'
            df_Key_Values[str_Dict_Key] = int(df_1[str_df_Colname].iloc[0])
            int_X_Axis_Value_Order += 1
            str_X_Axis_Label = 'Nc'
            value_Y_Axis = df_Key_Values[str_Dict_Key]
            dict_Plot_X_Values_And_Labels[int_X_Axis_Value_Order] = (str_X_Axis_Label, value_Y_Axis)
            
            ''' AgeNe Ne Demographic '''
            str_df_Colname = str_Colname_AgeNe__Ne_Demo
            str_Dict_Key = 'int_AgeNe__Ne_Demo'
            df_Key_Values[str_Dict_Key] = int(df_1[str_df_Colname].iloc[0])
            int_X_Axis_Value_Order += 1
            str_X_Axis_Label = 'AgeNe'
            value_Y_Axis = df_Key_Values[str_Dict_Key]
            dict_Plot_X_Values_And_Labels[int_X_Axis_Value_Order] = (str_X_Axis_Label, value_Y_Axis)
            
            ''' AgeNe Nb Demographic '''
            str_df_Colname = str_Colname_AgeNe__Nb_Demo
            str_Dict_Key = 'int_AgeNe__Nb_Demo'
            df_Key_Values[str_Dict_Key] = int(df_1[str_df_Colname].iloc[0])
            int_X_Axis_Value_Order += 1
            str_X_Axis_Label = 'AgeNb'
            value_Y_Axis = df_Key_Values[str_Dict_Key]
            dict_Plot_X_Values_And_Labels[int_X_Axis_Value_Order] = (str_X_Axis_Label, value_Y_Axis)

            '''
            ~~~~~~~~~~~~~~~~~
            Plot Value Set - Harmonic Mean LDNe
            ~~~~~~~~~~~~~~~~~
            '''
            bool_Plot_Harmonic_Mean_LDNe = False
            if bool_Plot_Harmonic_Mean_LDNe:
                float_PCrit_Match = 0.05
                ''' LDNe Mean r2 Point Est (Harmonic mean LDNe) '''
                ''' Present harmonic mean Ne (= mean rSquared Ne) as secondary Y-axis as this is not the number researchers are aiming to obtain '''    
                str_df_Colname = str_Colname__float_Total_Ne2_r_Sqrd_LDNe
                str_Dict_Key = str_Key_float_Total_Ne2_r_Sqrd_LDNe + '_'
                ''' Category Code = FUL '''            
                ''' Subset the DF to get the correct value '''
                str_Stats_Category_Code = str_Stat_Category_Code_Full
                df_2_Subset = df_2[(df_2[str_Colname__str_Stats_Category]==str_Stats_Category_Code)]
                df_2_Subset = df_2_Subset[(df_2[str_Colname__Ne2_floatPCrit]==float_PCrit_Match)]
                df_Key_Values[str_Dict_Key + str_Stats_Category_Code] = df_2_Subset[str_df_Colname].iloc[0]
                int_X_Axis_Value_Order += 1
                str_X_Axis_Label = 'HMean LDNe' + ' ' + str_Stats_Category_Code
                value_Y_Axis = df_Key_Values[str_Dict_Key + str_Stats_Category_Code]
                dict_Plot_X_Values_And_Labels[int_X_Axis_Value_Order] = (str_X_Axis_Label, value_Y_Axis)            
                ''' Category Code = FMT '''
                ''' Subset the DF to get the correct value '''
                str_Stats_Category_Code = str_Stat_Category_Code_Full_Mature
                df_2_Subset = df_2[(df_2[str_Colname__str_Stats_Category]==str_Stats_Category_Code)]
                df_2_Subset = df_2_Subset[(df_2[str_Colname__Ne2_floatPCrit]==float_PCrit_Match)]
                df_Key_Values[str_Dict_Key + str_Stats_Category_Code] = df_2_Subset[str_df_Colname].iloc[0]
                int_X_Axis_Value_Order += 1
                str_X_Axis_Label = 'HMean LDNe' + ' ' + str_Stats_Category_Code
                value_Y_Axis = df_Key_Values[str_Dict_Key + str_Stats_Category_Code]
                dict_Plot_X_Values_And_Labels[int_X_Axis_Value_Order] = (str_X_Axis_Label, value_Y_Axis)            
                ''' Category Code = FMT '''
                ''' Subset the DF to get the correct value '''
                str_Stats_Category_Code = str_Stat_Category_Code_Full_Juvenile
                df_2_Subset = df_2[(df_2[str_Colname__str_Stats_Category]==str_Stats_Category_Code)]
                df_2_Subset = df_2_Subset[(df_2[str_Colname__Ne2_floatPCrit]==float_PCrit_Match)]
                df_Key_Values[str_Dict_Key + str_Stats_Category_Code] = df_2_Subset[str_df_Colname].iloc[0]
                int_X_Axis_Value_Order += 1
                str_X_Axis_Label = 'HMean LDNe' + ' ' + str_Stats_Category_Code
                value_Y_Axis = df_Key_Values[str_Dict_Key + str_Stats_Category_Code]
                dict_Plot_X_Values_And_Labels[int_X_Axis_Value_Order] = (str_X_Axis_Label, value_Y_Axis)            
                ''' Category Code = FMT '''
                ''' Subset the DF to get the correct value '''
                str_Stats_Category_Code = str_Stat_Category_Code_Full_Embryo
                df_2_Subset = df_2[(df_2[str_Colname__str_Stats_Category]==str_Stats_Category_Code)]
                df_2_Subset = df_2_Subset[(df_2[str_Colname__Ne2_floatPCrit]==float_PCrit_Match)]
                df_Key_Values[str_Dict_Key + str_Stats_Category_Code] = df_2_Subset[str_df_Colname].iloc[0]
                int_X_Axis_Value_Order += 1
                str_X_Axis_Label = 'HMean LDNe' + ' ' + str_Stats_Category_Code
                value_Y_Axis = df_Key_Values[str_Dict_Key + str_Stats_Category_Code]
                dict_Plot_X_Values_And_Labels[int_X_Axis_Value_Order] = (str_X_Axis_Label, value_Y_Axis)
            pass
            
            '''
            ~~~~~~~~~~~~~~~~~
            Plot Value Set  - NON-Harmonic Mean LDNe with Jackknife Confidence Intervals
            ~~~~~~~~~~~~~~~~~
            '''     
            bool_Plot_NON_Harmonic_Mean_LDNe = True
            if bool_Plot_NON_Harmonic_Mean_LDNe:
                dict_Plot_X_Values_And_Labels__NON_Harmonic_Mean_LDNe = OrderedDict()
                
                float_PCrit_Match = 0.05
                '''
                ~~~~~~~~~~~~~~~~~~
                LDNe Mean Point Estimate (non-harmonic mean)
                ~~~~~~~~~~~~~~~~~~
                '''
                ''' Present mean Ne as primary axis as this number incorporates the uncertainty of the LDNe method which is what researcher are trying to avoid with a good sampling strategy '''

                ''' Category Code = FUL '''
                ''' Subset the DF to get the correct value '''
                str_Stats_Category_Code = str_Stat_Category_Code_Full
                df_2_Subset = df_2[(df_2[str_Colname__str_Stats_Category_Code]==str_Stats_Category_Code)]
                df_2_Subset = df_2_Subset[(df_2[str_Colname__Ne2_floatPCrit]==float_PCrit_Match)]
                str_df_Colname = str_Colname__Ne2_floatLDNe
                str_Dict_Key = str_Key_Colname_Ne2_floatLDNe + '_'        
                df_Key_Values[str_Dict_Key + str_Stats_Category_Code] = df_2_Subset[str_df_Colname].iloc[0]
                int_X_Axis_Value_Order += 1
                str_X_Axis_Label = 'Mean LDNe' + ' ' + str_Stats_Category_Code
                value_Y_Axis = df_Key_Values[str_Dict_Key + str_Stats_Category_Code]
                ''' NON-Harmonic Mean LDNe Jackknife Lwr CI ''' 
                str_df_Colname = str_Colname__Ne2_floatLDNeJackknife_Lwr_CI
                str_Dict_Key = str_Key_Colname_Ne2_floatLDNeJackknife_Lwr_CI + '_'
                df_Key_Values[str_Dict_Key + str_Stats_Category_Code] = df_2_Subset[str_df_Colname].iloc[0]
                #int_X_Axis_Value_Order += 1
                #str_X_Axis_Label = 'Mean LDNe Lwr JK CI' + ' ' + str_Stats_Category_Code
                value_Y_Axis_Lwr_CI = df_Key_Values[str_Dict_Key + str_Stats_Category_Code]
                ''' NON-Harmonic Mean LDNe Jackknife Upr CI ''' 
                str_df_Colname = str_Colname__Ne2_floatLDNeJackknife_Upr_CI
                str_Dict_Key = str_Key_Colname_Ne2_floatLDNeJackknife_Upr_CI + '_'
                df_Key_Values[str_Dict_Key + str_Stats_Category_Code] = df_2_Subset[str_df_Colname].iloc[0]
                #int_X_Axis_Value_Order += 1
                #str_X_Axis_Label = 'Mean LDNe Upr JK CI' + ' ' + str_Stats_Category_Code
                value_Y_Axis_Upr_CI = df_Key_Values[str_Dict_Key + str_Stats_Category_Code]
                dict_Plot_X_Values_And_Labels__NON_Harmonic_Mean_LDNe[int_X_Axis_Value_Order] = (str_X_Axis_Label, value_Y_Axis, value_Y_Axis_Lwr_CI, value_Y_Axis_Upr_CI)
                
                ''' Category Code = FMT '''
                ''' Subset the DF to get the correct value '''
                str_Stats_Category_Code = str_Stat_Category_Code_Full_Mature
                df_2_Subset = df_2[(df_2[str_Colname__str_Stats_Category_Code]==str_Stats_Category_Code)]
                df_2_Subset = df_2_Subset[(df_2[str_Colname__Ne2_floatPCrit]==float_PCrit_Match)]
                str_df_Colname = str_Colname__Ne2_floatLDNe
                str_Dict_Key = str_Key_Colname_Ne2_floatLDNe + '_' 
                df_Key_Values[str_Dict_Key + str_Stats_Category_Code] = df_2_Subset[str_df_Colname].iloc[0]
                int_X_Axis_Value_Order += 1
                str_X_Axis_Label = 'Mean LDNe' + ' ' + str_Stats_Category_Code
                value_Y_Axis = df_Key_Values[str_Dict_Key + str_Stats_Category_Code]
                ''' NON-Harmonic Mean LDNe Jackknife Lwr CI ''' 
                str_df_Colname = str_Colname__Ne2_floatLDNeJackknife_Lwr_CI
                str_Dict_Key = str_Key_Colname_Ne2_floatLDNeJackknife_Lwr_CI + '_'
                df_Key_Values[str_Dict_Key + str_Stats_Category_Code] = df_2_Subset[str_df_Colname].iloc[0]
                #int_X_Axis_Value_Order += 1
                #str_X_Axis_Label = 'Mean LDNe Lwr JK CI' + ' ' + str_Stats_Category_Code
                value_Y_Axis_Lwr_CI = df_Key_Values[str_Dict_Key + str_Stats_Category_Code]
                ''' NON-Harmonic Mean LDNe Jackknife Upr CI ''' 
                str_df_Colname = str_Colname__Ne2_floatLDNeJackknife_Upr_CI
                str_Dict_Key = str_Key_Colname_Ne2_floatLDNeJackknife_Upr_CI + '_'
                df_Key_Values[str_Dict_Key + str_Stats_Category_Code] = df_2_Subset[str_df_Colname].iloc[0]
                #int_X_Axis_Value_Order += 1
                #str_X_Axis_Label = 'Mean LDNe Upr JK CI' + ' ' + str_Stats_Category_Code
                value_Y_Axis_Upr_CI = df_Key_Values[str_Dict_Key + str_Stats_Category_Code]
                dict_Plot_X_Values_And_Labels__NON_Harmonic_Mean_LDNe[int_X_Axis_Value_Order] = (str_X_Axis_Label, value_Y_Axis, value_Y_Axis_Lwr_CI, value_Y_Axis_Upr_CI)
                ''' Category Code = FJV '''           
                ''' Subset the DF to get the correct value '''
                str_Stats_Category_Code = str_Stat_Category_Code_Full_Juvenile
                df_2_Subset = df_2[(df_2[str_Colname__str_Stats_Category_Code]==str_Stats_Category_Code)]
                df_2_Subset = df_2_Subset[(df_2[str_Colname__Ne2_floatPCrit]==float_PCrit_Match)]
                str_df_Colname = str_Colname__Ne2_floatLDNe
                str_Dict_Key = str_Key_Colname_Ne2_floatLDNe + '_' 
                df_Key_Values[str_Dict_Key + str_Stats_Category_Code] = df_2_Subset[str_df_Colname].iloc[0]
                int_X_Axis_Value_Order += 1
                str_X_Axis_Label = 'Mean LDNe' + ' ' + str_Stats_Category_Code
                value_Y_Axis = df_Key_Values[str_Dict_Key + str_Stats_Category_Code]
                ''' NON-Harmonic Mean LDNe Jackknife Lwr CI ''' 
                str_df_Colname = str_Colname__Ne2_floatLDNeJackknife_Lwr_CI
                str_Dict_Key = str_Key_Colname_Ne2_floatLDNeJackknife_Lwr_CI + '_'
                df_Key_Values[str_Dict_Key + str_Stats_Category_Code] = df_2_Subset[str_df_Colname].iloc[0]
                #int_X_Axis_Value_Order += 1
                #str_X_Axis_Label = 'Mean LDNe Lwr JK CI' + ' ' + str_Stats_Category_Code
                value_Y_Axis_Lwr_CI = df_Key_Values[str_Dict_Key + str_Stats_Category_Code]
                ''' NON-Harmonic Mean LDNe Jackknife Upr CI ''' 
                str_df_Colname = str_Colname__Ne2_floatLDNeJackknife_Upr_CI
                str_Dict_Key = str_Key_Colname_Ne2_floatLDNeJackknife_Upr_CI + '_'
                df_Key_Values[str_Dict_Key + str_Stats_Category_Code] = df_2_Subset[str_df_Colname].iloc[0]
                #int_X_Axis_Value_Order += 1
                #str_X_Axis_Label = 'Mean LDNe Upr JK CI' + ' ' + str_Stats_Category_Code
                value_Y_Axis_Upr_CI = df_Key_Values[str_Dict_Key + str_Stats_Category_Code]
                dict_Plot_X_Values_And_Labels__NON_Harmonic_Mean_LDNe[int_X_Axis_Value_Order] = (str_X_Axis_Label, value_Y_Axis, value_Y_Axis_Lwr_CI, value_Y_Axis_Upr_CI)
                ''' Category Code = FEM '''
                ''' Subset the DF to get the correct value '''
                str_Stats_Category_Code = str_Stat_Category_Code_Full_Embryo
                df_2_Subset = df_2[(df_2[str_Colname__str_Stats_Category_Code]==str_Stats_Category_Code)]
                df_2_Subset = df_2_Subset[(df_2[str_Colname__Ne2_floatPCrit]==float_PCrit_Match)]
                str_df_Colname = str_Colname__Ne2_floatLDNe
                str_Dict_Key = str_Key_Colname_Ne2_floatLDNe + '_' 
                df_Key_Values[str_Dict_Key + str_Stats_Category_Code] = df_2_Subset[str_df_Colname].iloc[0]
                int_X_Axis_Value_Order += 1
                str_X_Axis_Label = 'Mean LDNe' + ' ' + str_Stats_Category_Code
                value_Y_Axis = df_Key_Values[str_Dict_Key + str_Stats_Category_Code]
                ''' NON-Harmonic Mean LDNe Jackknife Lwr CI ''' 
                str_df_Colname = str_Colname__Ne2_floatLDNeJackknife_Lwr_CI
                str_Dict_Key = str_Key_Colname_Ne2_floatLDNeJackknife_Lwr_CI + '_'
                df_Key_Values[str_Dict_Key + str_Stats_Category_Code] = df_2_Subset[str_df_Colname].iloc[0]
                #int_X_Axis_Value_Order += 1
                #str_X_Axis_Label = 'Mean LDNe Lwr JK CI' + ' ' + str_Stats_Category_Code
                value_Y_Axis_Lwr_CI = df_Key_Values[str_Dict_Key + str_Stats_Category_Code]
                ''' NON-Harmonic Mean LDNe Jackknife Upr CI ''' 
                str_df_Colname = str_Colname__Ne2_floatLDNeJackknife_Upr_CI
                str_Dict_Key = str_Key_Colname_Ne2_floatLDNeJackknife_Upr_CI + '_'
                df_Key_Values[str_Dict_Key + str_Stats_Category_Code] = df_2_Subset[str_df_Colname].iloc[0]
                #int_X_Axis_Value_Order += 1
                #str_X_Axis_Label = 'Mean LDNe Upr JK CI' + ' ' + str_Stats_Category_Code
                value_Y_Axis_Upr_CI = df_Key_Values[str_Dict_Key + str_Stats_Category_Code]
                dict_Plot_X_Values_And_Labels__NON_Harmonic_Mean_LDNe[int_X_Axis_Value_Order] = (str_X_Axis_Label, value_Y_Axis, value_Y_Axis_Lwr_CI, value_Y_Axis_Upr_CI)

            pass
        
            if bool_Plot_Key_Metrics:                
                
                ''' Get the X Axis Values '''
                
                #dict_Plot_X_Values_And_Labels_Sorted = OrderedDict(sorted(dict_Plot_X_Values_And_Labels.keys(), key=lambda x: x))
                dict_Plot_X_Values_And_Labels_Sorted = OrderedDict(sorted(dict_Plot_X_Values_And_Labels.items()))
                list_X_Values = [int_X_Value_Order for int_X_Value_Order in dict_Plot_X_Values_And_Labels_Sorted.keys()]
                list_X_Value_Labels = [int_X_Value_Label for (int_X_Value_Order,(int_X_Value_Label, value_Y_Axis)) in dict_Plot_X_Values_And_Labels_Sorted.items()]
                #width = 0.35
                #int_X_Values_Count = len(list_X_Values)
                ''' Get the Y Axis Values '''
                list_Y_Values = [value_Y_Axis for (int_X_Value_Order,(int_X_Value_Label, value_Y_Axis)) in dict_Plot_X_Values_And_Labels_Sorted.items()]
        
                ''' Produce the plot points'''
                #pyplot_Line_4, = ax1.plot(list_X_Values, list_Y_Values, linestyle='.', marker='o', linewidth=int_Plot_Line_Width, figure=pyplot_Fig)
                pyplot_Line_4 = ax1.bar(list_X_Values, list_Y_Values, align='center', figure=pyplot_Fig)
                
                #DEBUG_ON
                #matplotlib__pyplot.show()
                #DEBUG_OFF            
            pass

            if bool_Plot_NON_Harmonic_Mean_LDNe: 
                               
                dict_Plot_X_Values_And_Labels_Sorted = OrderedDict(sorted(dict_Plot_X_Values_And_Labels__NON_Harmonic_Mean_LDNe.items()))
                
                if not bool_Plot_Key_Metrics:
                    list_X_Values=[]
                    list_X_Value_Labels = []
                pass
                list_X_Values_LDNe = []
                #list_X_Value_Labels_LDNe = []
                list_Y_Values = []
                list_Y_Values_Lwr_CI = []
                list_Y_Values_Upr_CI = []
                
                for (int_X_Value_Order, (int_X_Value_Label, value_Y_Axis, value_Y_Axis_Lwr_CI, value_Y_Axis_Upr_CI)) in dict_Plot_X_Values_And_Labels_Sorted.items():                    
                #for key, int_X_Value_Label, value_Y_Axis, value_Y_Axis_Lwr_CI, value_Y_Axis_Upr_CI in dict_Plot_X_Values_And_Labels_Sorted.items():
                    list_X_Values.append(int_X_Value_Order)
                    list_X_Value_Labels.append(int_X_Value_Label)
                    list_X_Values_LDNe.append(int_X_Value_Order)
                    #list_X_Value_Labels_LDNe.append(int_X_Value_Label)                    
                    list_Y_Values.append(value_Y_Axis)
                    list_Y_Values_Lwr_CI.append(value_Y_Axis - value_Y_Axis_Lwr_CI)
                    list_Y_Values_Upr_CI.append(value_Y_Axis_Upr_CI - value_Y_Axis)
                pass

                str_Plot_Primary_Line_Color = 'grey'
                int_Capsize = 10   #<-- If you change these you will have to change the formating of the Caps in the formatting section to match.
                int_Capthick = 2  #<-- If you change these you will have to change the formating of the Caps in the formatting section to match.
                int_Linethick = 5
                int_Err_Bar_Colour = 'black' #'Tomato'
                dict_Error_kw={'ecolor':int_Err_Bar_Colour  # error-bars colour
                               ,'linewidth':int_Linethick   # error-bar width
                               ,'capthick':int_Capthick}    # error-bar cap thickness  
                            
                #list_X_Values = [int_X_Value_Order for int_X_Value_Order in dict_Plot_X_Values_And_Labels_Sorted.keys()]
                #list_X_Value_Labels = [int_X_Value_Label for (int_X_Value_Label, value_Y_Axis, value_Y_Axis_Lwr_CI, value_Y_Axis_Upr_CI) in dict_Plot_X_Values_And_Labels_Sorted.items()]
                
                #list_Y_Values = [int_Y_Value_Label for (int_X_Value_Label, value_Y_Axis, value_Y_Axis_Lwr_CI, value_Y_Axis_Upr_CI) in dict_Plot_X_Values_And_Labels_Sorted.items()]
                
                list_Error_Bars_CIs = [numpy.array(list_Y_Values_Lwr_CI),numpy.array(list_Y_Values_Upr_CI)]
                #list_Error_Bars_CIs = [numpy.array([30,10,0]),numpy.array([150,130,0])]
                #pyplot_Line_4 = ax1.errorbar(list_X_Values_LDNe, list_Y_Values, linestyle='.', marker='o', yerr=list_Error_Bars_CIs, figure=pyplot_Fig)
                pyplot_Line_4 = ax1.bar(list_X_Values_LDNe
                                        ,list_Y_Values
                                        ,yerr=list_Error_Bars_CIs
                                        #, makeredgewidth=int_Capthick
                                        , capsize=int_Capsize
                                        , error_kw=dict_Error_kw
                                        , color=str_Plot_Primary_Line_Color
                                        , align='center'
                                        , figure=pyplot_Fig)

         
#                 list_Horiz_Align = ['right', 'center', 'left']
#                 int_Label_Rotation = 45
#                 ax1.set_xticks(list_X_Values)
#                 ax1.set_xticklabels(list_X_Value_Labels, rotation=int_Label_Rotation, ha=list_Horiz_Align[1])
#                  
                ax1.set_ylim([0,int_Y_Axis_Max])
                
                #DEBUG_ON
                #matplotlib__pyplot.show()
                #DEBUG_OFF

            pass

        '''
        -----------------------------
        Format Plot
        -----------------------------
        '''
        #pyplot_Line_1 = dict_pyplot_Legend_Lines.values()[0][0]
        '''
        Font properties for subsequent text
        '''
        pyplot_Fig_FontProperties__Base = matplotlib__fontmanager.FontProperties(size=16)

        '''
        ~~~~~~~~~~~~~~~~~~
        Colours - Axis & Tick
        ~~~~~~~~~~~~~~~~~~
        '''
        str_Figure_Colour_Scheme = ''
        if str_Figure_Colour_Scheme == globalsSS.Figure_Colour_Schemes.static_str_Figure_Colour_Scheme__Dark_Blue:
            str_Colour = 'darkblue'

        else:
            str_Colour = 'white'
        pass        
        #ax1 = pyplot_Fig.add_subplot(111, axisbg=str_Colour)
        #ax1 = pyplot_Fig.add_subplot(111)
        
        '''
        ~~~~~~~~~~~~~~~~~~~~~~
        Set axis limits
        ~~~~~~~~~~~~~~~~~~~~~~
        '''
        bool_Change_Axis_Limits = False
        if bool_Change_Axis_Limits:
            with SSResults(self.obj_SSParams) as obj_Results:
                str_Key_Colname_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category
                str_Col_Name_Stats_Category = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Colname_Stats_Category)
            pass
    
            list_Major_Ticks_X = list(df_1[str_Col_Name_Stats_Category])        
            ''' Add spacing at beginning and end of x-axis '''                                          
            ax1.set_xlim(-0.30, len(list_Major_Ticks_X)+1)
            #ax1.set_xlim((0, 10))
           
            #DEBUG_ON
            #matplotlib__pyplot.show()
            #DEBUG_OFF 
        pass


        '''
        ~~~~~~~~~~~~~~~~~~
        Grid and ticks details
        ~~~~~~~~~~~~~~~~~~
        '''
        bool_Add_Grid = True
        if bool_Add_Grid:
            matplotlib__pyplot.grid(True, figure=pyplot_Fig)

            #DEBUG_ON
            #matplotlib__pyplot.show()
            #DEBUG_OFF 

            '''
            ~~~~~~~~~~~~~~~~~~
            Format Grid
            ~~~~~~~~~~~~~~~~~~
            '''            
            # and a corresponding grid                                                       
            #ax1.grid(which='both')
            ax1.xaxis.grid(False)
            ax1.yaxis.grid(True)        

            # or if you want differnet settings for the grids:                               
            #ax1.grid(which='minor', alpha=0.2)                                                
            #ax1.grid(which='major', alpha=0.5)  

            #DEBUG_ON
            #matplotlib__pyplot.show()
            #DEBUG_OFF                          
        pass        
                
        
        '''
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        Label details
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        '''
        '''
        ~~~~~~~~~~~~~~~
        Label - SubTitle
        ~~~~~~~~~~~~~~~
        '''   
        bool_Add_SubTitle = False
        if bool_Add_SubTitle:
            ''' Get colnames in order to get data from df_1 '''
            with SSResults(self.obj_SSParams) as obj_Results:
                str_Key_AgeNe__Sim_Pop_Size = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Pop_Size
                str_Col_Name_AgeNe__Sim_Pop_Size = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Sim_Pop_Size)
    #             str_Key_AgeNe__Nc_Adult_Pop_Size = globalsSS.Colnames_AgeNe_Results.static_str_Colname_Nx_Nc_Adults
    #             str_Col_Name_AgeNe__Nc_Adult_Pop_Size = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Nc_Adult_Pop_Size)
                str_Key_AgeNe__Sim_Replicates = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Sim_Replicates
                str_Col_Name_AgeNe__Sim_Replicates = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Sim_Replicates)
                str_Key_AgeNe__Loci = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Loci
                str_Col_Name_AgeNe__Loci = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Loci)
                str_Key_Sim__Run_User_Defined_Folder = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Run_User_Defined_Folder
                str_Col_Name_Sim__Run_User_Defined_Folder = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Sim__Run_User_Defined_Folder)
    
                #str_Key_Colname_Stats_Category_Code = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category_Code
                #str_Col_Name_Stats_Category_Code = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Colname_Stats_Category_Code)
                str_Key_Colname_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category
                str_Col_Name_Stats_Category = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Colname_Stats_Category)
                #str_Key_Colname_float_Ne2_Burrows_r_Sqrd_LDNe = globalsSS.Colnames_Ne2_Aggregation.static_Str_Colname_float_Total_Ne2_r_Sqrd_LDNe
                #str_Col_Name_float_Total_Ne2_r_Sqrd_LDNe = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Colname_float_Ne2_Burrows_r_Sqrd_LDNe)
    
            pass
    
            ''' Get values from df_1 '''
            str_Mating_Count_Replicate_Total = str(int_Mating_Count_Replicate_Total)
            int_Pop_Size__N = df_1[str_Col_Name_AgeNe__Sim_Pop_Size].iloc[0]
            str_Pop_Size__N = str(int_Pop_Size__N)
    #         str_Adult_Pop_Size__N = str(int_AgeNe__Adult_Pop_Size__Nx_Adults__N)
    #         str_Adult_Pop_Size__Nc = str(int_AgeNe__Adult_Pop_Size__Nx_Adults__Nc)
            str_Replicates = str(df_1[str_Col_Name_AgeNe__Sim_Replicates].iloc[0])
            str_Loci = str(df_1[str_Col_Name_AgeNe__Loci].iloc[0])
            str_Sim__Run_User_Defined_Folder = str(df_1[str_Col_Name_Sim__Run_User_Defined_Folder].iloc[0])
    
            str_Fig_Title = str('Sampling strategy: Estimated LDNe for sample size-locus number combinations')
    
            ''' Title spacing '''
            matplotlib__pyplot.subplots_adjust(top=0.87)
            ''' Font details '''          
            int_Plot_SupTitle_Size = 18
            if str_Figure_Colour_Scheme == globalsSS.Figure_Colour_Schemes.static_str_Figure_Colour_Scheme__Dark_Blue:
                str_Font_Colour = 'white'
            else:
                str_Font_Colour = 'blue'
    
    
            matplotlib__pyplot.suptitle(str_Fig_Title, fontsize=int_Plot_SupTitle_Size, color=str_Font_Colour, figure=pyplot_Fig)

            #DEBUG_ON
            #matplotlib__pyplot.show()
            #DEBUG_OFF    
        pass
            
        ''' Font details '''          
#         int_Plot_SupTitle_Size = 16
#         str_Font_Colour = 'blue'

        '''
        ~~~~~~~~~~~~~~~
        Label - PlotTitle
        ~~~~~~~~~~~~~~~
        '''   
        bool_Add_PlotTitle = True
        if bool_Add_PlotTitle:
            ''' Get colnames in order to get data from df_1 '''
            with SSResults(self.obj_SSParams) as obj_Results:
                str_Key_AgeNe__Sim_Pop_Size = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Pop_Size
                str_Col_Name_AgeNe__Sim_Pop_Size = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Sim_Pop_Size)
    #             str_Key_AgeNe__Nc_Adult_Pop_Size = globalsSS.Colnames_AgeNe_Results.static_str_Colname_Nx_Nc_Adults
    #             str_Col_Name_AgeNe__Nc_Adult_Pop_Size = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Nc_Adult_Pop_Size)
                str_Key_AgeNe__Sim_Replicates = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Sim_Replicates
                str_Col_Name_AgeNe__Sim_Replicates = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Sim_Replicates)
                str_Key_AgeNe__Loci = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Loci
                str_Col_Name_AgeNe__Loci = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Loci)
                str_Key_Sim__Run_User_Defined_Folder = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Run_User_Defined_Folder
                str_Col_Name_Sim__Run_User_Defined_Folder = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Sim__Run_User_Defined_Folder)
    
                #str_Key_Colname_Stats_Category_Code = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category_Code
                #str_Col_Name_Stats_Category_Code = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Colname_Stats_Category_Code)
                str_Key_Colname_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category
                str_Col_Name_Stats_Category = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Colname_Stats_Category)
                #str_Key_Colname_float_Ne2_Burrows_r_Sqrd_LDNe = globalsSS.Colnames_Ne2_Aggregation.static_Str_Colname_float_Total_Ne2_r_Sqrd_LDNe
                #str_Col_Name_float_Total_Ne2_r_Sqrd_LDNe = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Colname_float_Ne2_Burrows_r_Sqrd_LDNe)

                str_Mating_Count_Replicate_Total = str(int_Mating_Count_Replicate_Total)
                int_Pop_Size__N = df_1[str_Col_Name_AgeNe__Sim_Pop_Size].iloc[0]
                str_Pop_Size__N = str(int_Pop_Size__N)
                #str_Adult_Pop_Size__N = str(int_AgeNe__Adult_Pop_Size__Nx_Adults__N)
                #str_Adult_Pop_Size__Nc = str(int_AgeNe__Adult_Pop_Size__Nx_Adults__Nc)
                str_Replicates = str(df_1[str_Col_Name_AgeNe__Sim_Replicates].iloc[0])
                str_Loci = str(df_1[str_Col_Name_AgeNe__Loci].iloc[0])
                str_Sim__Run_User_Defined_Folder = str(df_1[str_Col_Name_Sim__Run_User_Defined_Folder].iloc[0])
                str_Plot_Title = str(
                                     'Mating: ' + str_Mating_Count_Replicate_Total + ', '
                                    + 'N:' + str_Pop_Size__N + ', '
                                    #+ 'Nc: ' + str_Adult_Pop_Size__Nc + ', '
                                    + 'Loci: ' + str_Loci + ', '
                                    + 'Reps: ' + str_Replicates
                                    + '\n'
                                    + 'Run: ' + str_Sim__Run_User_Defined_Folder)
        
                ''' Font details '''          
                int_Plot_Title_Size = 16
                if str_Figure_Colour_Scheme == globalsSS.Figure_Colour_Schemes.static_str_Figure_Colour_Scheme__Dark_Blue:
                    str_Font_Colour = 'grey'
                else:
                    str_Font_Colour = 'blue'
                        
                matplotlib__pyplot.title(str_Plot_Title, fontsize=int_Plot_Title_Size, color=str_Font_Colour, figure=pyplot_Fig)
                
                #DEBUG_ON
                #matplotlib__pyplot.show()
                #DEBUG_OFF        
            pass
        
        ''' Font details '''          
        int_PLot_Y_Label_Size = 16
        if str_Figure_Colour_Scheme == globalsSS.Figure_Colour_Schemes.static_str_Figure_Colour_Scheme__Dark_Blue:
            str_Font_Colour = 'white'
        else:
            str_Font_Colour = 'blue'
       
        '''
        ~~~~~~~~~~~~~~~
        Label - Axis Labels
        ~~~~~~~~~~~~~~~
        ''' 
        bool_Add_Axis_Labels = True
        if bool_Add_Axis_Labels:       
            '''
            ~~~~~~~~~~~~~~~
            Label - X-Axis Labels
            ~~~~~~~~~~~~~~~
            '''
            bool_Add_X_Axis_Labels = True
            if bool_Add_X_Axis_Labels:                                                            
                matplotlib__pyplot.xlabel('Summary metrics', fontsize=int_PLot_Y_Label_Size, color=str_Font_Colour, figure=pyplot_Fig)
                
                #DEBUG_ON
                #matplotlib__pyplot.show()
                #DEBUG_OFF
    
                '''
                ~~~~~~~~~~~~~~~~~~~~~~
                Format X-axis labels
                ~~~~~~~~~~~~~~~~~~~~~~
                '''

                dict_Plot_X_Values_And_Labels_Sorted = OrderedDict(sorted(dict_Plot_X_Values_And_Labels.items()))
                list_X_Axis_Primary_Label = [str_Label for x,(str_Label, value_Y_Axis) in dict_Plot_X_Values_And_Labels_Sorted.items()]
                dict_Plot_X_Values_And_Labels_Sorted = OrderedDict(sorted(dict_Plot_X_Values_And_Labels__NON_Harmonic_Mean_LDNe.items()))
                list_X_Axis_Primary_Label = list_X_Axis_Primary_Label + [str_Label for x,(str_Label, value_Y_Axis, value_Y_Axis_Lwr_CI, value_Y_Axis_Upr_CI) in dict_Plot_X_Values_And_Labels_Sorted.items()]
                
                #list_Major_Ticks_X = []
                list_Horiz_Align = ['right', 'center', 'left']
                int_Label_Rotation = 45
                list_Major_Ticks_X = [''] + list_X_Axis_Primary_Label #Need to add a label at the start. Dont know why
                ax1.set_xticklabels(list_Major_Ticks_X, rotation=int_Label_Rotation, ha=list_Horiz_Align[1])

                #DEBUG_ON
                #matplotlib__pyplot.show()
                #DEBUG_OFF
            pass

            '''
            ~~~~~~~~~~~~~~~
            Label - Y-Axis Labels
            ~~~~~~~~~~~~~~~
            '''
            bool_Add_X_Axis_Labels = True
            if bool_Add_X_Axis_Labels:
                        
                matplotlib__pyplot.ylabel('Summary metric value', fontsize=int_PLot_Y_Label_Size, color=str_Font_Colour, figure=pyplot_Fig)
        

                #DEBUG_ON
                #matplotlib__pyplot.show()
                #DEBUG_OFF
            pass                  
        pass          
        '''
        ~~~~~~~~~~~~~~~~~~
        Label - Sim Unique Identifier details
        ~~~~~~~~~~~~~~~~~~
        '''
        bool_Add_Sim_Unique_Run_ID_Labels = True
        if bool_Add_Sim_Unique_Run_ID_Labels:    
            ''' Get colnames in order to get data from df_1 '''
            with SSResults(self.obj_SSParams) as obj_Results:
                str_Key_Sim__Run_User_Defined_Folder = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Run_User_Defined_Folder
                str_Col_Name_Sim__Run_User_Defined_Folder = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Sim__Run_User_Defined_Folder)
                str_Key_Sim__Unique_Run_ID = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Unique_Run_ID
                str_Col_Name_Sim__Unique_Run_ID = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Sim__Unique_Run_ID)
    
            pass
    
            
    
            str_Sim__Run_User_Defined_Folder = str(df_1[str_Col_Name_Sim__Run_User_Defined_Folder].iloc[0])
    
            str_RUDF_Text = str(str_Sim__Run_User_Defined_Folder)
    
            ''' Font details '''          
            int_Font_Size = 6
            str_Font_Colour = 'darkgrey'
            
            ''' Add figure text '''
            #matplotlib__pyplot.figtext(.75,.91,str_RUDF_Text, fontsize=int_Font_Size, color=str_Font_Colour, figure=pyplot_Fig)
            matplotlib__pyplot.figtext(.70,.005,str_RUDF_Text, fontsize=int_Font_Size, color=str_Font_Colour, figure=pyplot_Fig)
    
            ''' Get values from df_1 '''
            str_Sim__Unique_Run_ID = str(df_1[str_Col_Name_Sim__Unique_Run_ID].iloc[0])
            
            str_UID_Text = str(str_Sim__Unique_Run_ID)
    
            ''' Font details '''          
            int_Font_Size = 6
            str_Font_Colour = 'darkgrey'
            
            ''' Add figure text '''
            #matplotlib__pyplot.figtext(.75,.99,str_UID_Text, fontsize=int_Font_Size, color=str_Font_Colour, figure=pyplot_Fig)
            matplotlib__pyplot.figtext(.70,.015,str_UID_Text, fontsize=int_Font_Size, color=str_Font_Colour, figure=pyplot_Fig)
            
            #DEBUG_ON
            #matplotlib__pyplot.show()
            #DEBUG_OFF
        pass   
        '''
        ~~~~~~~~~~~~~~~~~~
        Axis details
        ~~~~~~~~~~~~~~~~~~
        '''

        if str_Figure_Colour_Scheme == globalsSS.Figure_Colour_Schemes.static_str_Figure_Colour_Scheme__Dark_Blue:
            int_Tick_Label_Size = 16
            str_X_Axis_Tick_Labels_Colour = 'white'
            str_Y_Axis_Tick_Labels_Colour = 'white'
            str_X_Axis_Tick_Major_Colour = 'white'
            str_X_Axis_Tick_Minor_Colour = 'grey'
            str_Y_Axis_Tick_Major_Colour = 'white'
            str_Y_Axis_Tick_Minor_Colour = 'grey'
        pass
    
        if str_Figure_Colour_Scheme == globalsSS.Figure_Colour_Schemes.static_str_Figure_Colour_Scheme__Dark_Blue:
            ax1.tick_params(axis='x', colors=str_X_Axis_Tick_Labels_Colour)
            ax1.tick_params(axis='y', colors=str_Y_Axis_Tick_Labels_Colour)
    
            # We change the fontsize of minor ticks label 
            ax1.tick_params(axis='x', which='major', labelsize=int_Tick_Label_Size, color=str_X_Axis_Tick_Major_Colour)
            ax1.tick_params(axis='x', which='minor', labelsize=int_Tick_Label_Size, color=str_X_Axis_Tick_Minor_Colour)
            ax1.tick_params(axis='y', which='major', labelsize=int_Tick_Label_Size, color=str_Y_Axis_Tick_Major_Colour)
            ax1.tick_params(axis='y', which='minor', labelsize=int_Tick_Label_Size, color=str_Y_Axis_Tick_Minor_Colour) 
        pass 
    
        ''' Axis tick pointing direction '''
        ax1.tick_params(axis='x', direction='out')
        ax1.tick_params(axis='y', direction='out')
        
        ''' Specify axis ticks to be plotted '''
        ax1.xaxis.tick_bottom() 
        ax1.yaxis.tick_left() 
             
#         for ax, color in zip([ax1], ['white']):
#             matplotlib__pyplot.setp(ax.spines.values(), color=color)
#             matplotlib__pyplot.setp([ax.get_xticklines(), ax1.get_yticklines()], color=color)        
#         
#         ax1.axhline(linewidth=4, color="w") # inc. width of x-axis and color it
#         ax1.axvline(linewidth=4, color="w") # inc. width of y-axis and color it

        if str_Figure_Colour_Scheme == globalsSS.Figure_Colour_Schemes.static_str_Figure_Colour_Scheme__Dark_Blue:
            str_Colour = 'white'

        else:
            str_Colour = 'black'
        pass
        for axis in ['top','bottom','left','right']:
            ax1.spines[axis].set_linewidth(4)
            ax1.spines[axis].set_color(str_Colour)
 
        ax1.spines['top'].set_visible(False)
        ax1.spines['right'].set_visible(False)           

        '''
        ~~~~~~~~~~~~~~~~~~
        Legend 
        ~~~~~~~~~~~~~~~~~~
        '''
        bool_Add_Legend = False
        if bool_Add_Legend:
            list_pyplot_Lines = []
            list_str_Experiment_Text = []
            
            dict_pyplot_Legend_Lines= None
            
            for key_str_Experiment, value_pyplot_Line in dict_pyplot_Legend_Lines.items():
                list_pyplot_Lines.append(value_pyplot_Line)
                list_str_Experiment_Text.append(key_str_Experiment)
            pass
    
            float_Bbox_X_Pos = 0.80
            float_Bbox_Y_Pos = 0.35    
            pyplot_Fig_Legend = pyplot_Fig.legend(list_pyplot_Lines
                                                  ,list_str_Experiment_Text
                                                  ,bbox_to_anchor=(float_Bbox_X_Pos, float_Bbox_Y_Pos)
                                                  ,frameon = 1)
            

        
            pyplot_Fig_Legend_Frame = pyplot_Fig_Legend.get_frame()
            
            pyplot_Fig_Legend_Frame.set_color('white')
            ''' Legend frame background '''
            #pyplot_Fig_Legend_Frame.set_facecolor('green')
            ''' Legend frame border '''
            #pyplot_Fig_Legend_Frame.set_edgecolor('red')
            
            ''' Turn off frame outline '''
            pyplot_Fig_Legend_Frame.set_linewidth(0)
            
            # set the alpha value of the legend: it will be translucent
            pyplot_Fig_Legend_Frame.set_alpha(0.5)                                                    
        
            #DEBUG_ON
            #matplotlib__pyplot.show()
            #DEBUG_OFF    
        pass
        #ax1.grid(True, figure=pyplot_Fig)

        bool_Format_Ticks = False
        if bool_Format_Ticks:
            nparray_Major_Ticks_X = ax1.xaxis.get_majorticklocs()      
            if len(nparray_Major_Ticks_X) > 1: 
                float_Major_Ticks_X_First = nparray_Major_Ticks_X[0]
                ''' Not sure why but use option 1 for 0 lower bound x-axis and option 2 for categorical x-axis '''
                #float_Major_Ticks_X_Last = nparray_Major_Ticks_X[-1] #Option 1
                float_Major_Ticks_X_Last = nparray_Major_Ticks_X[-1]+1 #Option 2
                float_Major_Ticks_X_Interval = 1
                nparray_Major_Ticks_X = numpy.arange(float_Major_Ticks_X_First, float_Major_Ticks_X_Last, float_Major_Ticks_X_Interval)                                              
                ax1.set_xticks(nparray_Major_Ticks_X) 

            pass
        
            nparray_Minor_Ticks_X = ax1.xaxis.get_minorticklocs()
            
            if len(nparray_Minor_Ticks_X) > 1:     
                float_Minor_Ticks_X_First = nparray_Minor_Ticks_X[0]
                float_Minor_Ticks_X_Last = nparray_Minor_Ticks_X[-1]
                float_Minor_Ticks_X_Interval = 1
                nparray_Minor_Ticks_X = numpy.arange(float_Minor_Ticks_X_First, float_Minor_Ticks_X_Last, float_Minor_Ticks_X_Interval)                                              
                ax1.set_xticks(nparray_Minor_Ticks_X, minor=True)
            
            nparray_Major_Ticks_Y = ax1.yaxis.get_majorticklocs()      
            if len(nparray_Major_Ticks_Y) > 1: 
                float_Major_Ticks_Y_First = nparray_Major_Ticks_Y[0]
                float_Major_Ticks_Y_Last = nparray_Major_Ticks_Y[-1]
                float_Major_Ticks_Y_Interval = 50
                nparray_Major_Ticks_Y = numpy.arange(float_Major_Ticks_Y_First, float_Major_Ticks_Y_Last, float_Major_Ticks_Y_Interval)                                              
                ax1.set_yticks(nparray_Major_Ticks_Y)  
                
            nparray_Minor_Ticks_Y = ax1.yaxis.get_minorticklocs()      
            if len(nparray_Minor_Ticks_Y) > 1: 
                float_Minor_Ticks_Y_First = nparray_Minor_Ticks_Y[0]
                float_Minor_Ticks_Y_Last = nparray_Minor_Ticks_Y[-1]
                float_Minor_Ticks_Y_Interval = 1
                nparray_Minor_Ticks_Y = numpy.arange(float_Minor_Ticks_Y_First, float_Minor_Ticks_Y_Last, float_Minor_Ticks_Y_Interval)                                              
                ax1.set_yticks(nparray_Minor_Ticks_Y, minor=True)                                  
            
                                                                  
            ax1.grid(which='both')                                                   
        pass

        '''
        ~~~~~~~~~~~~~~~~~~
        Annotate points
        ~~~~~~~~~~~~~~~~~~
        '''
        bool_Annotate_Points = True
        if bool_Annotate_Points:
    
            ''' Annotate Primary Y-Axis points '''
            dict_Plot_X_Values_And_Labels_Sorted = OrderedDict(sorted(dict_Plot_X_Values_And_Labels.items()))
            list_X_Axis_Primary = [x for x in dict_Plot_X_Values_And_Labels_Sorted.keys()]
            list_Y_Axis_Primary = [value_Y_Axis for x,(str_Label, value_Y_Axis) in dict_Plot_X_Values_And_Labels_Sorted.items()]
            for a, b in zip(list_X_Axis_Primary, list_Y_Axis_Primary):    
                
                str_Annotation_colour = 'white'
                str_Annotation = '{:,}'.format(b).replace(',',' ')
                ax1.annotate(str_Annotation, fontsize=12, fontweight='bold', xy=(a,b), xytext=(0, -15), ha='center', textcoords='offset points', color=str_Annotation_colour)
            pass
        
            ''' Annotate Primary Y-Axis points '''
            dict_Plot_X_Values_And_Labels_Sorted = OrderedDict(sorted(dict_Plot_X_Values_And_Labels__NON_Harmonic_Mean_LDNe.items()))
            list_X_Axis_Primary = [x for x in dict_Plot_X_Values_And_Labels_Sorted.keys()]
            list_Y_Axis_Primary = [int(round(value_Y_Axis,0)) for x,(str_Label, value_Y_Axis, value_Y_Axis_Lwr_CI, value_Y_Axis_Upr_CI) in dict_Plot_X_Values_And_Labels_Sorted.items()]
            list_Y_Axis_Primary_Lwr_CI = [int(round(value_Y_Axis_Lwr_CI,0)) for x,(str_Label, value_Y_Axis, value_Y_Axis_Lwr_CI, value_Y_Axis_Upr_CI) in dict_Plot_X_Values_And_Labels_Sorted.items()]
            list_Y_Axis_Primary_Upr_CI = [int(round(value_Y_Axis_Upr_CI,0)) for x,(str_Label, value_Y_Axis, value_Y_Axis_Lwr_CI, value_Y_Axis_Upr_CI) in dict_Plot_X_Values_And_Labels_Sorted.items()]
            
            for a, b, c, d in zip(list_X_Axis_Primary, list_Y_Axis_Primary, list_Y_Axis_Primary_Lwr_CI, list_Y_Axis_Primary_Upr_CI):                                                # <--

                str_Annotation_colour = 'black'
                #str_Annotation = '{:,}'.format(b).replace(',',' ') + '\n (' + '{:,}'.format(c).replace(',',' ') + ', ' + '{:,}'.format(c).replace(',',' ') + ')'
                str_Annotation = 'U: ' + '{:,}'.format(d).replace(',',' ') 
                str_Annotation = str_Annotation + '\n' + 'C: ' + '{:,}'.format(b).replace(',',' ')
                str_Annotation = str_Annotation + '\n' + 'U: ' + '{:,}'.format(c).replace(',',' ')
                ax1.annotate(str_Annotation, fontsize=12, fontweight='bold', xy=(a,b), xytext=(0, 20), ha='center', textcoords='offset points', color=str_Annotation_colour)
            pass 
                
        #DEBUG_ON
        ''' Required to change background of INTERACTIVE WINDOW only'''
        if str_Figure_Colour_Scheme == globalsSS.Figure_Colour_Schemes.static_str_Figure_Colour_Scheme__Dark_Blue:
            pyplot_Fig_Patch = pyplot_Fig.patch
            pyplot_Fig_Patch.set_facecolor('darkblue') # works with plt.show().  
        pass
        #matplotlib__pyplot.show()
        #DEBUG_OFF
        
                                
        return pyplot_Fig
        
    '''
    -------------------------------------------------------------
    Plot EXPERIMENT_Parent_Offspring_Ne_2 POST SIM & AgeNe Sim Per Replicate EOR SUMMARISED Results
    -------------------------------------------------------------
    '''   
    def func__Plot_EXPERIMENT_Parent_Offspring_Ne_2_PS_And_AgeNe_Sim_Demographic_Population_Profile__Get_Data(self, str_Search_Path):

        boolSuccess = False
       
        '''
        -------------------------------
        Specify Final Output File
        -------------------------------
        '''
        ''' Output plot '''
        str_Excel_Input_Colname_Prefix = globalsSS.Excel_Results_File_Details.static_Excel_Colname_Prefix__AgeNe_Sim_Summarise_ALL_PF__Summary_Results
        str_Excel_Input_FileName =  globalsSS.Excel_Results_File_Details.static_Excel_FileName__AgeNe_Sim_Summarise_ALL_PF__Summary_Results
        
#         str_Plot_Output_File_1 = self.obj_SSParams.strOutputLocation_CumulativeRun_Path + '\\' + self.obj_SSParams.strUniqueRunID + '_' + str_Excel_Input_FileName + '_' + str_Excel_Input_Colname_Prefix + '.png'
#         str_Plot_Output_File_2 = self.obj_SSParams.strOutputLocation_CumulativeRun_Path + '\\' + self.obj_SSParams.strUniqueRunID + '_' + str_Excel_Input_FileName + '_' + str_Excel_Input_Colname_Prefix + '.pdf'
        str_Plot_Output_File_1 = str_Search_Path + '\\' + self.obj_SSParams.strUniqueRunID + '_' + str_Excel_Input_FileName + '_' + str_Excel_Input_Colname_Prefix + '.png'
        str_Plot_Output_File_2 = str_Search_Path + '\\' + self.obj_SSParams.strUniqueRunID + '_' + str_Excel_Input_FileName + '_' + str_Excel_Input_Colname_Prefix + '.pdf'

        '''
        -------------------------------
        Specify Excel Input file
        -------------------------------
        '''        
        str_Input_FileName = '*' + str_Excel_Input_FileName + '*.xlsx'
        str_File_Search_Pattern = str_Input_FileName
        
        '''
        -------------------------------
        Import Excel Data to dataframee
        -------------------------------
        '''
        '''
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~
        Get & Process Input SHEET
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~
        '''
        str_Input_Excel_Sheet_Name = globalsSS.Excel_Results_File_Details.static_Excel_Colname_Prefix__AgeNe_Sim_Summarise_ALL_PF__Summary_Results

        self.obj_Log_Default.info('Dataframing results for: ' + str_Input_FileName + ' and for SHEET: ' + str_Input_Excel_Sheet_Name) 

        bool_File_1_Located = False
        with FileHandler() as obj_FileHandler:
            bool_File_1_Located, list_Path_And_Files = obj_FileHandler.func_Locate_Files(str_Search_Path, str_File_Search_Pattern)
       
        if bool_File_1_Located:
            
            '''Process Results'''
            list_DF_1s = []            
            for str_Path_And_File in list_Path_And_Files:
                
                '''Get the data from the excel files with the specified sheet'''
                xl = pandas.ExcelFile(str_Path_And_File)
                df_1 = xl.parse(str_Input_Excel_Sheet_Name)
                list_DF_1s.append(df_1)
                
            pass

            ''' concatinate the dfs '''
            df_Aggregate = pandas.DataFrame()
            for df_New in list_DF_1s:
                '''log the results'''
                #str_Df = df_New.to_string()
                #self.obj_Log_Debug.debug('Results dataframe NEW: %s' % str_Df)
                
                #Concat DFs - Tried df.append() but it wont work
                df_Aggregate = pandas.concat([df_Aggregate,df_New], ignore_index=True)
                
                #str_Df = df_Aggregate.to_string()
                #self.obj_Log_Debug.debug('Results dataframe AGGREGATE: %s' % str_Df)

            pass

            #DEBUG_ON
            #str_Df = df_Aggregate.to_string()
            #self.obj_Log_Debug.debug('Results dataframe AGGREGATE 1: %s' % str_Df)
            #DEBUG_OFF
            
            df1 = df_Aggregate 
        else:
            self.obj_Log_Default.error('File specified could not be located; str_Search_Path = ' + str_Search_Path + '; strFileSearchPattern = ' + str_File_Search_Pattern)
        pass
    
        '''
        -------------------------------
        Get More Data
        -------------------------------
        '''
        '''
        -------------------------------
        Specify Excel Input file 2
        -------------------------------
        '''        
        #str_Excel_Input_Colname_Prefix = globalsSS.Excel_Results_File_Details.static_Excel_Colname_Prefix__EXPERIMENT_Parent_Offspring_Ne_1__Summary_Results
        str_Excel_Input_FileName =  globalsSS.Excel_Results_File_Details.static_Excel_FileName__Ne2_LDNe__Summary_EOR_Results
 
        str_Input_FileName = '*' + str_Excel_Input_FileName + '*.xlsx'
        str_File_Search_Pattern = str_Input_FileName
        
        '''
        -------------------------------
        Import Excel Data to dataframee
        -------------------------------
        '''
        '''
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~
        Get & Process Input SHEET
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~
        '''
        str_Input_Excel_Sheet_Name = globalsSS.Excel_Results_File_Details.static_Excel_SheetName__Ne2_LDNe__Summary_EOR_Results

        self.obj_Log_Default.info('Dataframing results for: ' + str_Input_FileName + ' and for SHEET: ' + str_Input_Excel_Sheet_Name) 

        bool_File_2_Located = False
        with FileHandler() as obj_FileHandler:
            bool_File_2_Located, list_Path_And_Files = obj_FileHandler.func_Locate_Files(str_Search_Path, str_File_Search_Pattern)
       
        if bool_File_2_Located:
            
            '''Process Results'''
            list_DF_2s = []            
            for str_Path_And_File in list_Path_And_Files:
                
                '''Get the data from the excel files with the specified sheet'''
                xl = pandas.ExcelFile(str_Path_And_File)
                df_2 = xl.parse(str_Input_Excel_Sheet_Name)
                list_DF_2s.append(df_2)
                
            pass

            ''' concatinate the dfs '''
            df_Aggregate = pandas.DataFrame()
            for df_New in list_DF_2s:
                '''log the results'''
                #str_Df = df_New.to_string()
                #self.obj_Log_Debug.debug('Results dataframe NEW: %s' % str_Df)
                
                #Concat DFs - Tried df.append() but it wont work
                df_Aggregate = pandas.concat([df_Aggregate,df_New], ignore_index=True)
                
                #str_Df = df_Aggregate.to_string()
                #self.obj_Log_Debug.debug('Results dataframe AGGREGATE: %s' % str_Df)

            pass

            #DEBUG_ON
            #str_Df = df_Aggregate.to_string()
            #self.obj_Log_Debug.debug('Results dataframe AGGREGATE 1: %s' % str_Df)
            #DEBUG_OFF
            
            df2 = df_Aggregate 
        else:
            self.obj_Log_Default.error('File specified could not be located; str_Search_Path = ' + str_Search_Path + '; strFileSearchPattern = ' + str_File_Search_Pattern)
        pass


        '''
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~
        Transform the data
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~
        '''  
        if bool_File_1_Located and bool_File_2_Located:
            
            ''' Send the relevent DFs  '''
            list_DFs = [df1, df2]
     
            list_DFs = self.func__Plot_EXPERIMENT_Parent_Offspring_Ne_2_PS_And_AgeNe_Sim_Demographic_Population_Profile__Transform_And_Process(str_Excel_Input_FileName, str_Excel_Input_Colname_Prefix, list_DFs)
            
        pass
    
                    
        return boolSuccess


    def func__Plot_EXPERIMENT_Parent_Offspring_Ne_2_PS_And_AgeNe_Sim_Demographic_Population_Profile__Transform_And_Process(self, str_Excel_Input_FileName, str_Excel_Input_Colname_Prefix, list_DFs):
        
        self.obj_Log_Default.info('Transforming data')

        '''
        -----------------------------
        Specify DFs
        -----------------------------
        '''
        df_1 = list_DFs[0]
        df_2 = list_DFs[1]
           
        with SSResults(self.obj_SSParams) as obj_Results:
            str_Group_Key_Mating_Count_Replicate_Total = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Mating_Count_Replicate_Total
            str_Col_Name_Mating_Count_Replicate_Total_DF1 = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Group_Key_Mating_Count_Replicate_Total)
            str_Col_Name_Mating_Count_Replicate_Total_DF2 = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Group_Key_Mating_Count_Replicate_Total)
        pass

        ''' Get all the UNIQUE Mating_Count_Replicate_Total values '''
        #nparray_Mating_Count_Replicate_Total = numpy.unique(df_1[str_Col_Name_Mating_Count_Replicate_Total_DF1])
        nparray_Mating_Count_Replicate_Total = numpy.unique(df_2[str_Col_Name_Mating_Count_Replicate_Total_DF2])

        ''' Get Y-Axis Max '''
        with SSResults(self.obj_SSParams) as obj_Results:
            str_Key_AgeNe__Ne_Demo = globalsSS.Colnames_AgeNe_Results.static_str_Colname_NeDemo
            str_Col_Name_AgeNe__Ne_Demo = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Ne_Demo)
            str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe = globalsSS.Colnames_Ne2_Aggregation.static_Str_Colname_float_Total_Ne2_r_Sqrd_LDNe
            str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe)
            df_Temp = pandas.DataFrame()
            df_Temp_1 = pandas.DataFrame()
            df_Temp_2 = pandas.DataFrame()
            df_Temp_1["Max"] = df_1[[str_Col_Name_AgeNe__Ne_Demo]].max(axis=1)
#             df_Temp_2["Max"] = df_2[[str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe]].max(axis=1)
#             df_Temp = pandas.concat([df_Temp_1,df_Temp_2], ignore_index=True)
            df_Temp = df_Temp_1
            int_Y_Axis_Max = df_Temp["Max"].max(axis=0)
            int_Y_Axis_Max = int(math.ceil(int_Y_Axis_Max / 500)) * 500
            del df_Temp_1     
            del df_Temp_2     
            del df_Temp     
        pass 
                
        for int_Mating_Count_Replicate_Total in nparray_Mating_Count_Replicate_Total:

            '''
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~
            Transform
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~
            '''  
            self.obj_Log_Default.info('Transforming data for int_Mating_Count_Replicate_Total :' + str(int_Mating_Count_Replicate_Total))
                      
            ''' Subset the DF to get the correct value '''
            df_1_Subset = df_1[(df_1[str_Col_Name_Mating_Count_Replicate_Total_DF1]==int_Mating_Count_Replicate_Total)]
            
            #DEBUG_ON
            #str_Df = df_1_Subset.to_string()
            #self.obj_Log_Debug.debug('Results dataframe df 1: %s' % str_Df)
            #raw_input('pausing')
            #DEBUG_OFF    
            
            df_2_Subset = df_2[(df_2[str_Col_Name_Mating_Count_Replicate_Total_DF2]==int_Mating_Count_Replicate_Total)]
            
            #DEBUG_ON
            #str_Df = df_2_Subset.to_string()
            #self.obj_Log_Debug.debug('Results dataframe df 2: %s' % str_Df)
            #raw_input('pausing')
            #DEBUG_OFF            

            list_DFs = [df_1_Subset, df_2_Subset] 
            
            '''
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~
            Plot
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~
            '''    
            
            ''' Send the relevent DFs to the plotter '''
            #list_DFs = [df1, df2]
            
            bool_Interactive_Display = False
            ''' Specify the number of figure copies and their specs '''
            dict_Fig_Copies = {
                                1:{'ColourScheme':'Default', 'Transparent':False, 'Interactive_Display':bool_Interactive_Display, 'Save_PNG': True, 'Save_PDF': False}
                               #,2:{'ColourScheme':'Dark_Blue', 'Transparent':True, 'Interactive_Display':bool_Interactive_Display,'Save_PNG': True, 'Save_PDF': False}
                               }
            
            for key_Dict_Fig_Copy_Params, value_Dict_Fig_Copy_Params in dict_Fig_Copies.iteritems():
                ''' Plot the figure '''
                if self.obj_SSParams.str_Species_Code == 'CAPL_V1':
                    #pyplot_Fig_1 = self.func__Plot_CAPL_EXPERIMENT_Parent_Offspring_Ne_2_PS_And_AgeNe_Sim_Demographic_Population_Profile__Plot(list_DFs, int_Mating_Count_Replicate_Total, int_Y_Axis_Max, value_Dict_Fig_Copy_Params
                    pyplot_Fig_1 = self.func__Plot_CAOB_EXPERIMENT_Parent_Offspring_Ne_2_PS_And_AgeNe_Sim_Demographic_Population_Profile__Plot(list_DFs, int_Mating_Count_Replicate_Total, int_Y_Axis_Max, value_Dict_Fig_Copy_Params)           
                elif self.obj_SSParams.str_Species_Code == 'CAOB_V1':
                    pyplot_Fig_1 = self.func__Plot_CAOB_EXPERIMENT_Parent_Offspring_Ne_2_PS_And_AgeNe_Sim_Demographic_Population_Profile__Plot(list_DFs, int_Mating_Count_Replicate_Total, int_Y_Axis_Max, value_Dict_Fig_Copy_Params)
                else:
                    pyplot_Fig_1 = self.func__Plot_ALL_EXPERIMENT_Parent_Offspring_Ne_2_PS_And_AgeNe_Sim_Demographic_Population_Profile__Plot(list_DFs, int_Mating_Count_Replicate_Total, int_Y_Axis_Max, value_Dict_Fig_Copy_Params)
                pass
                '''
                ~~~~~~~~~~~~~~~~~~~~~~~~~~~
                Save results
                ~~~~~~~~~~~~~~~~~~~~~~~~~~~
                '''    
                str_Plot_Output_Path = self.obj_SSParams.strOutputLocation_CumulativeRun_Path + '\\EXP2_Plots\\'
                ''' Create path if it doesnt exist '''
                with FileHandler() as obj_File_Op:
                    obj_File_Op.method_Create_Path(str_Plot_Output_Path)
                pass                
                str_Plot_Output_FileName = self.obj_SSParams.strUniqueRunID + '_' + str_Excel_Input_FileName + '_' + str_Excel_Input_Colname_Prefix + '_' + str(int_Mating_Count_Replicate_Total)
                str_Plot_Output_Path_And_FileName = str_Plot_Output_Path + str_Plot_Output_FileName
                if value_Dict_Fig_Copy_Params['Save_PNG'] == True:
                    str_Plot_Output_Path_And_FileName_PNG = str_Plot_Output_Path_And_FileName + '_' + str(key_Dict_Fig_Copy_Params) + '.png'
                    bool_Transparent = value_Dict_Fig_Copy_Params['Transparent']
                    pyplot_Fig_1.savefig(str_Plot_Output_Path_And_FileName_PNG, bbox_inches='tight', dpi=400, transparent=bool_Transparent)
                pass
                if value_Dict_Fig_Copy_Params['Save_PDF'] == True:
                    str_Plot_Output_Path_And_FileName_PDF = str_Plot_Output_Path_And_FileName + '_' + str(key_Dict_Fig_Copy_Params) + '.pdf'
                    pyplot_Fig_1.savefig(str_Plot_Output_Path_And_FileName_PDF, bbox_inches='tight')
                pass
        
                '''
                ~~~~~~~~~~~~~~~~~~~~~~~~~~~
                Display results
                ~~~~~~~~~~~~~~~~~~~~~~~~~~~
                '''
                if value_Dict_Fig_Copy_Params['Interactive_Display'] == True:           
                    matplotlib__pyplot.show()
                pass
            pass
            ''' Close the plot '''
            matplotlib__pyplot.close(pyplot_Fig_1) 
        pass
                  
        pass        
        
        
        return list_DFs

    
    def func__Plot_CAPL_EXPERIMENT_Parent_Offspring_Ne_2_PS_And_AgeNe_Sim_Demographic_Population_Profile__Plot(self, list_DFs, int_Mating_Count_Replicate_Total, int_Y_Axis_Max, dict_Fig_Copy):
        
        self.obj_Log_Default.info('Creating figure')
        
        bool_Plot_Theme__Default = False
        bool_Plot_Theme__Dark_Blue_1 = False
        
        if dict_Fig_Copy['ColourScheme'] == 'Dark_Blue':
            bool_Plot_Theme__Dark_Blue_1 = True
        else:
            bool_Plot_Theme__Default = True
        pass
    
#         if bool_Plot_Theme__Dark_Blue_1:
#             bool_Plot_Theme__Default = False
#         else:
#             bool_Plot_Theme__Default = True
#         pass
            
        int_Plot_Line_Width = 4
        '''
        -----------------------------
        Specify DFs
        -----------------------------
        '''
        df_1 = list_DFs[0]
        df_2 = list_DFs[1]
        
        
        '''
        -----------------------------
        Specify X-Axis
        -----------------------------
        '''
        with SSResults(self.obj_SSParams) as obj_Results:
            str_Key_AgeNe__Age = globalsSS.Colnames_AgeNe_Results.static_str_Colname_Age
            str_Col_Name_AgeNe__Age = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Age)
        pass
        str_X_Axis_df_1_Colname = str_Col_Name_AgeNe__Age

        '''
        -----------------------------
        Create figure
        -----------------------------
        '''
        # default scale is 1 in your original case, scales with other cases:
        int_X_Axis_Length = len(df_1[str_X_Axis_df_1_Colname])
        int_Width_Scale = int_X_Axis_Length/10 
        int_Width_Control = 6  #6 - About perfect for PowerPoint
        int_Height_Control = 8 #8 - About perfect for PowerPoint
        figsize = (int_Width_Control*int_Width_Scale,int_Height_Control) # fig size in inches (width,height)
        pyplot_Fig = matplotlib__pyplot.figure(figsize = figsize)       
        
        #pyplot_Fig = matplotlib__pyplot.figure()
        
        '''
        -----------------------------
        Plot Line - Nx - Survivors per age cohort
        -----------------------------
        ''' 
        with SSResults(self.obj_SSParams) as obj_Results:
            str_Key_AgeNe__Nx = globalsSS.Colnames_AgeNe_Results.static_str_Colname_Nx
            str_Col_Name_AgeNe__Nx = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Nx)
        pass
        str_Y_Axis_df_1_Colname = str_Col_Name_AgeNe__Nx 
        
        str_Plot_Line_Color = 'blue'
        pyplot_Line_1, = matplotlib__pyplot.plot(df_1[str_X_Axis_df_1_Colname], df_1[str_Y_Axis_df_1_Colname], color=str_Plot_Line_Color, linewidth=int_Plot_Line_Width, figure=pyplot_Fig)

        '''
        -----------------------------
        Plot Line - Bx - Offspring per age cohort
        -----------------------------
        '''         
        with SSResults(self.obj_SSParams) as obj_Results:
            str_Key_AgeNe__Bx = globalsSS.Colnames_AgeNe_Results.static_str_Colname_Bx
            str_Col_Name_AgeNe__Bx = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Bx)
        pass
        str_Y_Axis_df_1_Colname = str_Col_Name_AgeNe__Bx 
        
        if bool_Plot_Theme__Dark_Blue_1:
            str_Plot_Line_Color = 'white'
        else:
            str_Plot_Line_Color = 'grey'
        pass
        pyplot_Line_2, = matplotlib__pyplot.plot(df_1[str_X_Axis_df_1_Colname], df_1[str_Y_Axis_df_1_Colname], color=str_Plot_Line_Color, linewidth=int_Plot_Line_Width, figure=pyplot_Fig)

        '''
        -----------------------------
        Plot Line - Dx - Deaths per age cohort
        -----------------------------
        '''         
        with SSResults(self.obj_SSParams) as obj_Results:
            str_Key_AgeNe__Dx = globalsSS.Colnames_AgeNe_Results.static_str_Colname_Dx
            str_Col_Name_AgeNe__Dx = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Dx)
        pass
        str_Y_Axis_df_1_Colname = str_Col_Name_AgeNe__Dx 
        
        str_Plot_Line_Color = 'red'
        pyplot_Line_3, = matplotlib__pyplot.plot(df_1[str_X_Axis_df_1_Colname], df_1[str_Y_Axis_df_1_Colname], color=str_Plot_Line_Color, linewidth=int_Plot_Line_Width, figure=pyplot_Fig)

        '''
        -----------------------------
        Plot Line - AgeNe N - ALL Adults 
        -----------------------------
        '''
        '''
        Font properties for subsequent text
        '''
        pyplot_Fig_FontProperties__Base = matplotlib__fontmanager.FontProperties(size=16)
                 
        with SSResults(self.obj_SSParams) as obj_Results:
            str_Key_AgeNe__Adult_Pop_Size__Nx_N_Adults = globalsSS.Colnames_AgeNe_Results.static_str_Colname_Nx_N_Adults
            str_Col_Name_AgeNe__Adult_Pop_Size__Nx_N_Adults = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Adult_Pop_Size__Nx_N_Adults)

        pass
        str_Y_Axis_df_1_Colname = str_Col_Name_AgeNe__Adult_Pop_Size__Nx_N_Adults 

#         pyplot_Line_4, = matplotlib__pyplot.plot(df_1[str_X_Axis_df_1_Colname], df_1[str_Y_Axis_df_1_Colname], linestyle='--', linewidth=2, figure=pyplot_Fig)
#         
#         ''' Get the value for display '''
#         int_AgeNe__Adult_Pop_Size__Nx_Adults__Nc = df_1[str_Y_Axis_df_1_Colname].iloc[0]
# 
#         ''' Add the description to the end of the line '''
#         str_Line_Ending_Text = 'AgeNe Nc (' + str(int(int_AgeNe__Adult_Pop_Size__Nx_Adults__Nc)) + ')'                             
#         matplotlib__pyplot.text(df_1[str_X_Axis_df_1_Colname].iloc[-1], df_1[str_Y_Axis_df_1_Colname].iloc[-1], str_Line_Ending_Text)

        ''' if a horizontal plot line - Get the value for plotting and display '''
        int_AgeNe__Adult_Pop_Size__Nx_Adults__N = int(df_1[str_Y_Axis_df_1_Colname].iloc[0])
        y_Value = int_AgeNe__Adult_Pop_Size__Nx_Adults__N
        
        ''' if a horizontal plot line - Get the X and Y values to actually plot ''' 
        list_X_Values = df_1[str_X_Axis_df_1_Colname].tolist()
        int_X_Values_Count = len(list_X_Values)
        int_X_Values_To_Remove = int(int_X_Values_Count*0.8) #Remove a % of the X-Axis values
        list_X_Values = list_X_Values[:-1*int_X_Values_To_Remove] #Cut the list down to size
        list_Y_Values = [y_Value for x in list_X_Values] #Create the Y-Values list

        ''' Produce the plot line '''
        pyplot_Line_4, = matplotlib__pyplot.plot(list_X_Values, list_Y_Values, linestyle='-', linewidth=int_Plot_Line_Width, figure=pyplot_Fig)
        
        ''' Add the description to the end of the line '''
        x_Pos = len(list_X_Values) + 0.25
        y_Pos = y_Value
        str_Line_Ending_Text = 'AgeNe N Adults (' + str(int(y_Value)) + ')'        
        
        if bool_Plot_Theme__Dark_Blue_1:
            str_Font_Colour = 'white'
            pyplot_Fig_FontProperties = pyplot_Fig_FontProperties__Base.copy()
        pass
        
        if bool_Plot_Theme__Default:                             
            matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text)
        else:
            matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text, color=str_Font_Colour, fontproperties=pyplot_Fig_FontProperties)
        pass
    
        '''
        -----------------------------
        Plot Line - AgeNe Nc - Fertile Adults 
        -----------------------------
        '''
        '''
        Font properties for subsequent text
        '''
        pyplot_Fig_FontProperties__Base = matplotlib__fontmanager.FontProperties(size=16)
                 
        with SSResults(self.obj_SSParams) as obj_Results:
            str_Key_AgeNe__Adult_Pop_Size__Nx_Nc_Adults = globalsSS.Colnames_AgeNe_Results.static_str_Colname_Nx_Nc_Adults
            str_Col_Name_AgeNe__Adult_Pop_Size__Nx_Nc_Adults = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Adult_Pop_Size__Nx_Nc_Adults)

        pass
        str_Y_Axis_df_1_Colname = str_Col_Name_AgeNe__Adult_Pop_Size__Nx_Nc_Adults 

#         pyplot_Line_4, = matplotlib__pyplot.plot(df_1[str_X_Axis_df_1_Colname], df_1[str_Y_Axis_df_1_Colname], linestyle='--', linewidth=2, figure=pyplot_Fig)
#         
#         ''' Get the value for display '''
#         int_AgeNe__Adult_Pop_Size__Nx_Adults__Nc = df_1[str_Y_Axis_df_1_Colname].iloc[0]
# 
#         ''' Add the description to the end of the line '''
#         str_Line_Ending_Text = 'AgeNe Nc (' + str(int(int_AgeNe__Adult_Pop_Size__Nx_Adults__Nc)) + ')'                             
#         matplotlib__pyplot.text(df_1[str_X_Axis_df_1_Colname].iloc[-1], df_1[str_Y_Axis_df_1_Colname].iloc[-1], str_Line_Ending_Text)

        ''' if a horizontal plot line - Get the value for plotting and display '''
        int_AgeNe__Adult_Pop_Size__Nx_Adults__Nc = int(df_1[str_Y_Axis_df_1_Colname].iloc[0])
        y_Value = int_AgeNe__Adult_Pop_Size__Nx_Adults__Nc
        
        ''' if a horizontal plot line - Get the X and Y values to actually plot ''' 
        list_X_Values = df_1[str_X_Axis_df_1_Colname].tolist()
        int_X_Values_Count = len(list_X_Values)
        int_X_Values_To_Remove = int(int_X_Values_Count*0.8) #Remove a % of the X-Axis values
        list_X_Values = list_X_Values[:-1*int_X_Values_To_Remove] #Cut the list down to size
        list_Y_Values = [y_Value for x in list_X_Values] #Create the Y-Values list

        ''' Produce the plot line '''
        pyplot_Line_4, = matplotlib__pyplot.plot(list_X_Values, list_Y_Values, linestyle='-', linewidth=int_Plot_Line_Width, figure=pyplot_Fig)
        
        ''' Add the description to the end of the line '''
        x_Pos = len(list_X_Values) + 0.25
        y_Pos = y_Value
        str_Line_Ending_Text = 'AgeNe Nc (' + str(int(y_Value)) + ')'        
        
        if bool_Plot_Theme__Dark_Blue_1:
            str_Font_Colour = 'white'
            pyplot_Fig_FontProperties = pyplot_Fig_FontProperties__Base.copy()
        pass
        
        if bool_Plot_Theme__Default:                             
            matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text)
        else:
            matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text, color=str_Font_Colour, fontproperties=pyplot_Fig_FontProperties)
        pass
    
        '''
        -----------------------------
        Plot Line - AgeNe Ne Demographic
        -----------------------------
        '''         
        with SSResults(self.obj_SSParams) as obj_Results:
            str_Key_AgeNe__Ne_Demo = globalsSS.Colnames_AgeNe_Results.static_str_Colname_NeDemo
            str_Col_Name_AgeNe__Ne_Demo = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Ne_Demo)
        pass
        str_Y_Axis_df_1_Colname = str_Col_Name_AgeNe__Ne_Demo 

#         pyplot_Line_5, = matplotlib__pyplot.plot(df_1[str_X_Axis_df_1_Colname], df_1[str_Y_Axis_df_1_Colname], linestyle='--', linewidth=2, figure=pyplot_Fig)
#         
#         ''' Get the value for display '''
#         float_NeDemo = df_1[str_Y_Axis_df_1_Colname].iloc[0]
# 
#         ''' Add the description to the end of the line '''
#         str_Line_Ending_Text = 'AgeNe Ne Demo (' + str(int(float_NeDemo)) + ')'                             
#         matplotlib__pyplot.text(df_1[str_X_Axis_df_1_Colname].iloc[-1], df_1[str_Y_Axis_df_1_Colname].iloc[-1], str_Line_Ending_Text)

        ''' if a horizontal plot line - Get the value for plotting and display '''
        float_NeDemo = df_1[str_Y_Axis_df_1_Colname].iloc[0]
        y_Value = Decimal(float_NeDemo)
        
        ''' if a horizontal plot line - Get the X and Y values to actually plot ''' 
        list_X_Values = df_1[str_X_Axis_df_1_Colname].tolist()
        int_X_Values_Count = len(list_X_Values)
        int_X_Values_To_Remove = int(int_X_Values_Count*0.2) #Remove 20% of the X-Axis values
        list_X_Values = list_X_Values[:-1*int_X_Values_To_Remove] #Cut the list down to size
        list_Y_Values = [y_Value for x in list_X_Values] #Create the Y-Values list

        ''' Produce the plot line '''
        pyplot_Line_5, = matplotlib__pyplot.plot(list_X_Values, list_Y_Values, linestyle='-.', linewidth=int_Plot_Line_Width, figure=pyplot_Fig)
        
        ''' Add the description to the end of the line '''
        x_Pos = len(list_X_Values) + 0.25
        y_Pos = y_Value
        str_Line_Ending_Text = 'AgeNe Ne Demo (' + str(int(round(y_Value))) + ')'                             

        if bool_Plot_Theme__Dark_Blue_1:
            str_Font_Colour = 'white'
            pyplot_Fig_FontProperties = pyplot_Fig_FontProperties__Base.copy()
        pass
        
        if bool_Plot_Theme__Default:                             
            matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text)
        else:
            matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text, color=str_Font_Colour, fontproperties=pyplot_Fig_FontProperties)
 
        '''
        -----------------------------
        Plot Line - AgeNe Nb Demographic
        -----------------------------
        '''         
        with SSResults(self.obj_SSParams) as obj_Results:
            str_Key_AgeNe__Nb_Demo = globalsSS.Colnames_AgeNe_Results.static_str_Colname_NbDemo
            str_Col_Name_AgeNe__Nb_Demo = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Nb_Demo)
        pass
        str_Y_Axis_df_1_Colname = str_Col_Name_AgeNe__Nb_Demo 
        
        ''' if a horizontal plot line - Get the value for plotting and display '''
        float_NbDemo = df_1[str_Y_Axis_df_1_Colname].iloc[0]
        y_Value = Decimal(float_NbDemo)
        
        ''' if a horizontal plot line - Get the X and Y values to actually plot ''' 
        list_X_Values = df_1[str_X_Axis_df_1_Colname].tolist()
        int_X_Values_Count = len(list_X_Values)
        int_X_Values_To_Remove = int(int_X_Values_Count*0.2) #Remove 20% of the X-Axis values
        list_X_Values = list_X_Values[:-1*int_X_Values_To_Remove] #Cut the list down to size
        list_Y_Values = [y_Value for x in list_X_Values] #Create the Y-Values list

        ''' Produce the plot line '''
        pyplot_Line_6, = matplotlib__pyplot.plot(list_X_Values, list_Y_Values, linestyle='-.', linewidth=int_Plot_Line_Width, figure=pyplot_Fig)
        
        ''' Add the description to the end of the line '''
        x_Pos = len(list_X_Values) + 0.25
        y_Pos = y_Value
        str_Line_Ending_Text = 'AgeNe Nb Demo (' + str(int(round(y_Value))) + ')'                             

        if bool_Plot_Theme__Dark_Blue_1:
            str_Font_Colour = 'white'
            pyplot_Fig_FontProperties = pyplot_Fig_FontProperties__Base.copy()
        pass
        
        if bool_Plot_Theme__Default:                             
            matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text)
        else:
            matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text, color=str_Font_Colour, fontproperties=pyplot_Fig_FontProperties)
 
        '''
        -----------------------------
        Plot Line - Exp1 Potential Parents
        -----------------------------
        '''         
        with SSResults(self.obj_SSParams) as obj_Results:
            #str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category
            str_Key_Exp1__str_Stats_Category_Code = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category_Code
            str_Col_Name_Exp1__Exp1__str_Stats_Category = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__str_Stats_Category_Code)

            str_Key_Exp1__Potential_Parents_PP = globalsSS.Colnames_Parent_Offspring_Stats_METHOD_2.static_Str_Colname_Potential_Parents_PP
            str_Col_Name_Exp1__Potential_Parents_PP = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__Potential_Parents_PP)

        pass
        str_Y_Axis_df_1_Colname = str_Col_Name_Exp1__Potential_Parents_PP 
            
        ''' Subset the DF to get the correct value '''
        #str_Stats_Category = 'FUL'
        #df_2_Subset = df_2[(df_2[str_Col_Name_Exp1__Exp1__str_Stats_Category]==str_Stats_Category)]
        #float_PCrit = 0
        #df_2_Subset = df_2_Subset[(df_2[str_Col_Name_Exp1__Ne2_floatPCrit]==float_PCrit)]

        ''' if a horizontal plot line - Get the value for plotting and display '''        
        float_Exp1__Potential_Parents_PP = float(df_2[str_Y_Axis_df_1_Colname].iloc[0])
        y_Value = Decimal(float_Exp1__Potential_Parents_PP)
        
        ''' if a horizontal plot line - Get the X and Y values to actually plot ''' 
        list_X_Values = df_1[str_X_Axis_df_1_Colname].tolist()
        int_X_Values_Count = len(list_X_Values)
        int_X_Values_To_Remove = int(int_X_Values_Count*0.50) #Remove 20% of the X-Axis values
        list_X_Values = list_X_Values[:-1*int_X_Values_To_Remove] #Cut the list down to size
        list_Y_Values = [y_Value for x in list_X_Values] #Create the Y-Values list

        ''' Produce the plot line '''
        pyplot_Line_7, = matplotlib__pyplot.plot(list_X_Values, list_Y_Values, linestyle='-.', linewidth=int_Plot_Line_Width, figure=pyplot_Fig)
        
        ''' Add the description to the end of the line '''
        x_Pos = len(list_X_Values) + 0.25
        y_Pos = y_Value
        str_Line_Ending_Text = 'Exp1 NcPP ' + str(int(round(y_Value))) + ')'                             

        if bool_Plot_Theme__Dark_Blue_1:
            str_Font_Colour = 'white'
            pyplot_Fig_FontProperties = pyplot_Fig_FontProperties__Base.copy()
        pass
        
        if bool_Plot_Theme__Default:                             
            matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text)
        else:
            matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text, color=str_Font_Colour, fontproperties=pyplot_Fig_FontProperties)
        pass
        '''
        -----------------------------
        Plot Line - LDNe Full PCrit 0
        -----------------------------
        '''
        bool_FUL_PC0 = True
        if bool_FUL_PC0:   
            with SSResults(self.obj_SSParams) as obj_Results:
                #str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category
                str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category_Code
                str_Col_Name_Exp1__Exp1__str_Stats_Category = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__str_Stats_Category)
    
                str_Key_Exp1__Ne2_floatPCrit = globalsSS.Colnames_Ne2_Output.static_Str_Colname_Ne2_floatPCrit
                str_Col_Name_Exp1__Ne2_floatPCrit = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__Ne2_floatPCrit)
    
                str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe = globalsSS.Colnames_Ne2_Aggregation.static_Str_Colname_float_Total_Ne2_r_Sqrd_LDNe
                str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe)
            pass
            str_Y_Axis_df_1_Colname = str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe 
    
            ''' Subset the DF to get the correct value '''
            str_Stats_Category = 'FUL'
            df_2_Subset = df_2[(df_2[str_Col_Name_Exp1__Exp1__str_Stats_Category]==str_Stats_Category)]
            float_PCrit = 0
            df_2_Subset = df_2_Subset[(df_2[str_Col_Name_Exp1__Ne2_floatPCrit]==float_PCrit)]
    
            ''' if a horizontal plot line - Get the value for plotting and display '''        
            float_Total_Ne2_r_Sqrd_LDNe = df_2_Subset[str_Y_Axis_df_1_Colname].iloc[0]
            y_Value = Decimal(float_Total_Ne2_r_Sqrd_LDNe)
            
            if y_Value > 0 and y_Value < int_Y_Axis_Max:
                ''' if a horizontal plot line - Get the X and Y values to actually plot ''' 
                list_X_Values = df_1[str_X_Axis_df_1_Colname].tolist()
                int_X_Values_Count = len(list_X_Values)
                int_X_Values_To_Remove = int(int_X_Values_Count*0.1) #Remove 20% of the X-Axis values
                list_X_Values = list_X_Values[:-1*int_X_Values_To_Remove] #Cut the list down to size
                list_Y_Values = [y_Value for x in list_X_Values] #Create the Y-Values list
        
                ''' Produce the plot line '''
                pyplot_Line_8, = matplotlib__pyplot.plot(list_X_Values, list_Y_Values, linestyle='-.', linewidth=int_Plot_Line_Width, figure=pyplot_Fig)
                
                ''' Add the description to the end of the line '''
                x_Pos = len(list_X_Values) + 0.25
                y_Pos = y_Value
                str_Line_Ending_Text = 'LDNe ' + str_Stats_Category + ' (PC ' + str(float_PCrit) + '; ' + str(int(round(y_Value))) + ')'                             
        
                if bool_Plot_Theme__Dark_Blue_1:
                    str_Font_Colour = 'white'
                    pyplot_Fig_FontProperties = pyplot_Fig_FontProperties__Base.copy()
                pass
                
                if bool_Plot_Theme__Default:                             
                    matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text)
                else:
                    matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text, color=str_Font_Colour, fontproperties=pyplot_Fig_FontProperties)
                pass
            pass
        pass
        '''
        -----------------------------
        Plot Line - LDNe Full PCrit 0.05
        -----------------------------
        '''
        bool_FUL_PC0_05 = True
        if bool_FUL_PC0_05:      
            with SSResults(self.obj_SSParams) as obj_Results:
                #str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category
                str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category_Code
                str_Col_Name_Exp1__Exp1__str_Stats_Category = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__str_Stats_Category)
    
                str_Key_Exp1__Ne2_floatPCrit = globalsSS.Colnames_Ne2_Output.static_Str_Colname_Ne2_floatPCrit
                str_Col_Name_Exp1__Ne2_floatPCrit = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__Ne2_floatPCrit)
    
                str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe = globalsSS.Colnames_Ne2_Aggregation.static_Str_Colname_float_Total_Ne2_r_Sqrd_LDNe
                str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe)
            pass
            str_Y_Axis_df_1_Colname = str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe 
    
            ''' Subset the DF to get the correct value '''
            str_Stats_Category = 'FUL'
            df_2_Subset = df_2[(df_2[str_Col_Name_Exp1__Exp1__str_Stats_Category]==str_Stats_Category)]
            float_PCrit_Match = 0.05
            float_PCrit = 0.05
            df_2_Subset = df_2_Subset[(df_2[str_Col_Name_Exp1__Ne2_floatPCrit]==float_PCrit_Match)]
    
            ''' if a horizontal plot line - Get the value for plotting and display '''        
            float_Total_Ne2_r_Sqrd_LDNe = df_2_Subset[str_Y_Axis_df_1_Colname].iloc[0]
            y_Value = Decimal(float_Total_Ne2_r_Sqrd_LDNe)
            
            if y_Value > 0 and y_Value < int_Y_Axis_Max:
                ''' if a horizontal plot line - Get the X and Y values to actually plot ''' 
                list_X_Values = df_1[str_X_Axis_df_1_Colname].tolist()
                int_X_Values_Count = len(list_X_Values)
                int_X_Values_To_Remove = int(int_X_Values_Count*0.1) #Remove 20% of the X-Axis values
                list_X_Values = list_X_Values[:-1*int_X_Values_To_Remove] #Cut the list down to size
                list_Y_Values = [y_Value for x in list_X_Values] #Create the Y-Values list
        
                ''' Produce the plot line '''
                pyplot_Line_8, = matplotlib__pyplot.plot(list_X_Values, list_Y_Values, linestyle='-.', linewidth=int_Plot_Line_Width, figure=pyplot_Fig)
                
                ''' Add the description to the end of the line '''
                x_Pos = len(list_X_Values) + 0.25
                y_Pos = y_Value
                str_Line_Ending_Text = 'LDNe ' + str_Stats_Category + ' (PC ' + str(float_PCrit) + '; ' + str(int(round(y_Value))) + ')'                             
        
                if bool_Plot_Theme__Dark_Blue_1:
                    str_Font_Colour = 'white'
                    pyplot_Fig_FontProperties = pyplot_Fig_FontProperties__Base.copy()
                pass
                
                if bool_Plot_Theme__Default:                             
                    matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text)
                else:
                    matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text, color=str_Font_Colour, fontproperties=pyplot_Fig_FontProperties)
                pass
            pass
        pass
        '''
        -----------------------------
        Plot Line - LDNe Large Mature PCrit 0
        -----------------------------
        '''
        bool_LMT_PC0 = False
        if bool_LMT_PC0:               
            with SSResults(self.obj_SSParams) as obj_Results:
                #str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category
                str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category_Code
                str_Col_Name_Exp1__Exp1__str_Stats_Category = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__str_Stats_Category)
    
                str_Key_Exp1__Ne2_floatPCrit = globalsSS.Colnames_Ne2_Output.static_Str_Colname_Ne2_floatPCrit
                str_Col_Name_Exp1__Ne2_floatPCrit = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__Ne2_floatPCrit)
    
                str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe = globalsSS.Colnames_Ne2_Aggregation.static_Str_Colname_float_Total_Ne2_r_Sqrd_LDNe
                str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe)
            pass
            str_Y_Axis_df_1_Colname = str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe 
    
            ''' Subset the DF to get the correct value '''
            str_Stats_Category = 'LMT'
            df_2_Subset = df_2[(df_2[str_Col_Name_Exp1__Exp1__str_Stats_Category]==str_Stats_Category)]
            float_PCrit = 0
            df_2_Subset = df_2_Subset[(df_2[str_Col_Name_Exp1__Ne2_floatPCrit]==float_PCrit)]
    
            ''' if a horizontal plot line - Get the value for plotting and display '''        
            float_Total_Ne2_r_Sqrd_LDNe = df_2_Subset[str_Y_Axis_df_1_Colname].iloc[0]
            float_Total_Ne2_r_Sqrd_LDNe_LM = df_2_Subset[str_Y_Axis_df_1_Colname].iloc[0]
            y_Value = Decimal(float_Total_Ne2_r_Sqrd_LDNe)
            
            if y_Value > 0 and y_Value < int_Y_Axis_Max:
                ''' if a horizontal plot line - Get the X and Y values to actually plot ''' 
                list_X_Values = df_1[str_X_Axis_df_1_Colname].tolist()
                int_X_Values_Count = len(list_X_Values)
                int_X_Values_To_Remove = int(int_X_Values_Count*0.5) #Remove 20% of the X-Axis values
                list_X_Values = list_X_Values[:-1*int_X_Values_To_Remove] #Cut the list down to size
                list_Y_Values = [y_Value for x in list_X_Values] #Create the Y-Values list
        
                ''' Produce the plot line '''
                pyplot_Line_9, = matplotlib__pyplot.plot(list_X_Values, list_Y_Values, linestyle='-.', linewidth=int_Plot_Line_Width, figure=pyplot_Fig)
                
                ''' Add the description to the end of the line '''
                x_Pos = len(list_X_Values) + 0.25
                y_Pos = y_Value
                str_Line_Ending_Text = 'LDNe ' + str_Stats_Category + ' (PC ' + str(float_PCrit) + '; ' + str(int(round(y_Value))) + ')'                             
        
                if bool_Plot_Theme__Dark_Blue_1:
                    str_Font_Colour = 'white'
                    pyplot_Fig_FontProperties = pyplot_Fig_FontProperties__Base.copy()
                pass
                
                if bool_Plot_Theme__Default:                             
                    matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text)
                else:
                    matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text, color=str_Font_Colour, fontproperties=pyplot_Fig_FontProperties)
                pass
            pass
        pass
        '''
        -----------------------------
        Plot Line - LDNe Large Mature PCrit 0.05
        -----------------------------
        '''
        bool_LMT_PC0_05 = True
        if bool_LMT_PC0_05:               
            with SSResults(self.obj_SSParams) as obj_Results:
                #str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category
                str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category_Code
                str_Col_Name_Exp1__Exp1__str_Stats_Category = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__str_Stats_Category)
    
                str_Key_Exp1__Ne2_floatPCrit = globalsSS.Colnames_Ne2_Output.static_Str_Colname_Ne2_floatPCrit
                str_Col_Name_Exp1__Ne2_floatPCrit = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__Ne2_floatPCrit)
    
                str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe = globalsSS.Colnames_Ne2_Aggregation.static_Str_Colname_float_Total_Ne2_r_Sqrd_LDNe
                str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe)
            pass
            str_Y_Axis_df_1_Colname = str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe 
    
            ''' Subset the DF to get the correct value '''
            str_Stats_Category = 'LMT'
            df_2_Subset = df_2[(df_2[str_Col_Name_Exp1__Exp1__str_Stats_Category]==str_Stats_Category)]
            float_PCrit_Match = 0.05
            float_PCrit = 0.05
            df_2_Subset = df_2_Subset[(df_2[str_Col_Name_Exp1__Ne2_floatPCrit]==float_PCrit_Match)]
    
            ''' if a horizontal plot line - Get the value for plotting and display '''        
            float_Total_Ne2_r_Sqrd_LDNe = df_2_Subset[str_Y_Axis_df_1_Colname].iloc[0]
            float_Total_Ne2_r_Sqrd_LDNe_LM = df_2_Subset[str_Y_Axis_df_1_Colname].iloc[0]
            y_Value = Decimal(float_Total_Ne2_r_Sqrd_LDNe)
            
            if y_Value > 0 and y_Value < int_Y_Axis_Max:
                ''' if a horizontal plot line - Get the X and Y values to actually plot ''' 
                list_X_Values = df_1[str_X_Axis_df_1_Colname].tolist()
                int_X_Values_Count = len(list_X_Values)
                int_X_Values_To_Remove = int(int_X_Values_Count*0.5) #Remove 20% of the X-Axis values
                list_X_Values = list_X_Values[:-1*int_X_Values_To_Remove] #Cut the list down to size
                list_Y_Values = [y_Value for x in list_X_Values] #Create the Y-Values list
        
                ''' Produce the plot line '''
                pyplot_Line_9, = matplotlib__pyplot.plot(list_X_Values, list_Y_Values, linestyle='-.', linewidth=int_Plot_Line_Width, figure=pyplot_Fig)
                
                ''' Add the description to the end of the line '''
                x_Pos = len(list_X_Values) + 0.25
                y_Pos = y_Value
                str_Line_Ending_Text = 'LDNe ' + str_Stats_Category + ' (PC ' + str(float_PCrit) + '; ' + str(int(round(y_Value))) + ')'                             
        
                if bool_Plot_Theme__Dark_Blue_1:
                    str_Font_Colour = 'white'
                    pyplot_Fig_FontProperties = pyplot_Fig_FontProperties__Base.copy()
                pass
                
                if bool_Plot_Theme__Default:                             
                    matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text)
                else:
                    matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text, color=str_Font_Colour, fontproperties=pyplot_Fig_FontProperties)
                pass
            pass
        pass
        '''
        -----------------------------
        Plot Line - LDNe Large Embryo PCrit 0
        -----------------------------
        '''  
        bool_LEM_PC0 = False
        if bool_LEM_PC0:             
            with SSResults(self.obj_SSParams) as obj_Results:
                #str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category
                str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category_Code
                str_Col_Name_Exp1__Exp1__str_Stats_Category = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__str_Stats_Category)
    
                str_Key_Exp1__Ne2_floatPCrit = globalsSS.Colnames_Ne2_Output.static_Str_Colname_Ne2_floatPCrit
                str_Col_Name_Exp1__Ne2_floatPCrit = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__Ne2_floatPCrit)
    
                str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe = globalsSS.Colnames_Ne2_Aggregation.static_Str_Colname_float_Total_Ne2_r_Sqrd_LDNe
                str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe)
            pass
            str_Y_Axis_df_1_Colname = str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe 
    
            ''' Subset the DF to get the correct value '''
            str_Stats_Category = 'LEM'
            df_2_Subset = df_2[(df_2[str_Col_Name_Exp1__Exp1__str_Stats_Category]==str_Stats_Category)]
            float_PCrit = 0
            df_2_Subset = df_2_Subset[(df_2[str_Col_Name_Exp1__Ne2_floatPCrit]==float_PCrit)]
    
            ''' if a horizontal plot line - Get the value for plotting and display '''
            float_Total_Ne2_r_Sqrd_LDNe = df_2_Subset[str_Y_Axis_df_1_Colname].iloc[0]
            y_Value = Decimal(float_Total_Ne2_r_Sqrd_LDNe)
            
            if y_Value > 0 and y_Value < int_Y_Axis_Max:
                ''' if a horizontal plot line - Get the X and Y values to actually plot ''' 
                list_X_Values = df_1[str_X_Axis_df_1_Colname].tolist()
                int_X_Values_Count = len(list_X_Values)
                int_X_Values_To_Remove = int(int_X_Values_Count*0.9) #Remove 20% of the X-Axis values
                list_X_Values = list_X_Values[:-1*int_X_Values_To_Remove] #Cut the list down to size
                list_Y_Values = [y_Value for x in list_X_Values] #Create the Y-Values list
        
                ''' Produce the plot line '''
                pyplot_Line_10, = matplotlib__pyplot.plot(list_X_Values, list_Y_Values, linestyle='-.', linewidth=int_Plot_Line_Width, figure=pyplot_Fig)
                
                ''' Add the description to the end of the line '''
                x_Pos = len(list_X_Values) + 0.25
                y_Pos = y_Value
                str_Line_Ending_Text = 'LDNe ' + str_Stats_Category + ' (PC ' + str(float_PCrit) + '; ' + str(int(round(y_Value))) + ')'                             
        
                if bool_Plot_Theme__Dark_Blue_1:
                    str_Font_Colour = 'white'
                    pyplot_Fig_FontProperties = pyplot_Fig_FontProperties__Base.copy()
                pass
                
                if bool_Plot_Theme__Default:                             
                    matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text)
                else:
                    matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text, color=str_Font_Colour, fontproperties=pyplot_Fig_FontProperties)
                pass
            pass
        pass
        '''
        -----------------------------
        Plot Line - LDNe Large Embryo PCrit 0.05
        -----------------------------
        '''  
        bool_LEM_PC0_05 = True
        if bool_LEM_PC0_05:             
            with SSResults(self.obj_SSParams) as obj_Results:
                #str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category
                str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category_Code
                str_Col_Name_Exp1__Exp1__str_Stats_Category = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__str_Stats_Category)
    
                str_Key_Exp1__Ne2_floatPCrit = globalsSS.Colnames_Ne2_Output.static_Str_Colname_Ne2_floatPCrit
                str_Col_Name_Exp1__Ne2_floatPCrit = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__Ne2_floatPCrit)
    
                str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe = globalsSS.Colnames_Ne2_Aggregation.static_Str_Colname_float_Total_Ne2_r_Sqrd_LDNe
                str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe)
            pass
            str_Y_Axis_df_1_Colname = str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe 
    
            ''' Subset the DF to get the correct value '''
            str_Stats_Category = 'LEM'
            df_2_Subset = df_2[(df_2[str_Col_Name_Exp1__Exp1__str_Stats_Category]==str_Stats_Category)]
            float_PCrit_Match = 0.05
            float_PCrit = 0.05
            df_2_Subset = df_2_Subset[(df_2[str_Col_Name_Exp1__Ne2_floatPCrit]==float_PCrit_Match)]
    
            ''' if a horizontal plot line - Get the value for plotting and display '''
            float_Total_Ne2_r_Sqrd_LDNe = df_2_Subset[str_Y_Axis_df_1_Colname].iloc[0]
            y_Value = Decimal(float_Total_Ne2_r_Sqrd_LDNe)
            
            if y_Value > 0 and y_Value < int_Y_Axis_Max:
                ''' if a horizontal plot line - Get the X and Y values to actually plot ''' 
                list_X_Values = df_1[str_X_Axis_df_1_Colname].tolist()
                int_X_Values_Count = len(list_X_Values)
                int_X_Values_To_Remove = int(int_X_Values_Count*0.9) #Remove 20% of the X-Axis values
                list_X_Values = list_X_Values[:-1*int_X_Values_To_Remove] #Cut the list down to size
                list_Y_Values = [y_Value for x in list_X_Values] #Create the Y-Values list
        
                ''' Produce the plot line '''
                pyplot_Line_10, = matplotlib__pyplot.plot(list_X_Values, list_Y_Values, linestyle='-.', linewidth=int_Plot_Line_Width, figure=pyplot_Fig)
                
                ''' Add the description to the end of the line '''
                x_Pos = len(list_X_Values) + 0.25
                y_Pos = y_Value
                str_Line_Ending_Text = 'LDNe ' + str_Stats_Category + ' (PC ' + str(float_PCrit) + '; ' + str(int(round(y_Value))) + ')'                             
        
                if bool_Plot_Theme__Dark_Blue_1:
                    str_Font_Colour = 'white'
                    pyplot_Fig_FontProperties = pyplot_Fig_FontProperties__Base.copy()
                pass
                
                if bool_Plot_Theme__Default:                             
                    matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text)
                else:
                    matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text, color=str_Font_Colour, fontproperties=pyplot_Fig_FontProperties)
                pass
            pass
        pass
        '''
        -----------------------------
        Plot Line - LDNe Small Mature PCrit 0
        -----------------------------
        '''
        bool_SMT_PC0 = False
        if bool_SMT_PC0:        
            with SSResults(self.obj_SSParams) as obj_Results:
                #str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category
                str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category_Code
                str_Col_Name_Exp1__Exp1__str_Stats_Category = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__str_Stats_Category)
    
                str_Key_Exp1__Ne2_floatPCrit = globalsSS.Colnames_Ne2_Output.static_Str_Colname_Ne2_floatPCrit
                str_Col_Name_Exp1__Ne2_floatPCrit = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__Ne2_floatPCrit)
    
                str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe = globalsSS.Colnames_Ne2_Aggregation.static_Str_Colname_float_Total_Ne2_r_Sqrd_LDNe
                str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe)
            pass
            str_Y_Axis_df_1_Colname = str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe 
    
            ''' Subset the DF to get the correct value '''
            str_Stats_Category = 'SMT'
            df_2_Subset = df_2[(df_2[str_Col_Name_Exp1__Exp1__str_Stats_Category]==str_Stats_Category)]
            float_PCrit = 0
            df_2_Subset = df_2_Subset[(df_2[str_Col_Name_Exp1__Ne2_floatPCrit]==float_PCrit)]
    
            ''' if a horizontal plot line - Get the value for plotting and display '''        
            float_Total_Ne2_r_Sqrd_LDNe = df_2_Subset[str_Y_Axis_df_1_Colname].iloc[0]
            float_Total_Ne2_r_Sqrd_LDNe_LM = df_2_Subset[str_Y_Axis_df_1_Colname].iloc[0]
            y_Value = Decimal(float_Total_Ne2_r_Sqrd_LDNe)
            
            if y_Value > 0 and y_Value < int_Y_Axis_Max:
                ''' if a horizontal plot line - Get the X and Y values to actually plot ''' 
                list_X_Values = df_1[str_X_Axis_df_1_Colname].tolist()
                int_X_Values_Count = len(list_X_Values)
                int_X_Values_To_Remove = int(int_X_Values_Count*0.5) #Remove 20% of the X-Axis values
                list_X_Values = list_X_Values[:-1*int_X_Values_To_Remove] #Cut the list down to size
                list_Y_Values = [y_Value for x in list_X_Values] #Create the Y-Values list
        
                ''' Produce the plot line '''
                pyplot_Line_9, = matplotlib__pyplot.plot(list_X_Values, list_Y_Values, linestyle='-.', linewidth=int_Plot_Line_Width, figure=pyplot_Fig)
                
                ''' Add the description to the end of the line '''
                x_Pos = len(list_X_Values) + 0.25
                y_Pos = y_Value
                str_Line_Ending_Text = 'LDNe ' + str_Stats_Category + ' (PC ' + str(float_PCrit) + '; ' + str(int(round(y_Value))) + ')'                             
        
                if bool_Plot_Theme__Dark_Blue_1:
                    str_Font_Colour = 'white'
                    pyplot_Fig_FontProperties = pyplot_Fig_FontProperties__Base.copy()
                pass
                
                if bool_Plot_Theme__Default:                             
                    matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text)
                else:
                    matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text, color=str_Font_Colour, fontproperties=pyplot_Fig_FontProperties)
                pass
            pass
        pass
        '''
        -----------------------------
        Plot Line - LDNe Small Embryo PCrit 0
        -----------------------------
        ''' 
        bool_SEM_PC0 = False
        if bool_SEM_PC0:        

            with SSResults(self.obj_SSParams) as obj_Results:
                #str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category
                str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category_Code
                str_Col_Name_Exp1__Exp1__str_Stats_Category = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__str_Stats_Category)
    
                str_Key_Exp1__Ne2_floatPCrit = globalsSS.Colnames_Ne2_Output.static_Str_Colname_Ne2_floatPCrit
                str_Col_Name_Exp1__Ne2_floatPCrit = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__Ne2_floatPCrit)
    
                str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe = globalsSS.Colnames_Ne2_Aggregation.static_Str_Colname_float_Total_Ne2_r_Sqrd_LDNe
                str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe)
            pass
            str_Y_Axis_df_1_Colname = str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe 
    
            ''' Subset the DF to get the correct value '''
            str_Stats_Category = 'SEM'
            df_2_Subset = df_2[(df_2[str_Col_Name_Exp1__Exp1__str_Stats_Category]==str_Stats_Category)]
            float_PCrit = 0
            df_2_Subset = df_2_Subset[(df_2[str_Col_Name_Exp1__Ne2_floatPCrit]==float_PCrit)]
    
            ''' if a horizontal plot line - Get the value for plotting and display '''
            float_Total_Ne2_r_Sqrd_LDNe = df_2_Subset[str_Y_Axis_df_1_Colname].iloc[0]
            y_Value = Decimal(float_Total_Ne2_r_Sqrd_LDNe)
            
            if y_Value > 0 and y_Value < int_Y_Axis_Max:
                ''' if a horizontal plot line - Get the X and Y values to actually plot ''' 
                list_X_Values = df_1[str_X_Axis_df_1_Colname].tolist()
                int_X_Values_Count = len(list_X_Values)
                int_X_Values_To_Remove = int(int_X_Values_Count*0.9) #Remove 20% of the X-Axis values
                list_X_Values = list_X_Values[:-1*int_X_Values_To_Remove] #Cut the list down to size
                list_Y_Values = [y_Value for x in list_X_Values] #Create the Y-Values list
        
                ''' Produce the plot line '''
                pyplot_Line_10, = matplotlib__pyplot.plot(list_X_Values, list_Y_Values, linestyle='-.', linewidth=int_Plot_Line_Width, figure=pyplot_Fig)
                
                ''' Add the description to the end of the line '''
                x_Pos = len(list_X_Values) + 0.25
                y_Pos = y_Value
                str_Line_Ending_Text = 'LDNe ' + str_Stats_Category + ' (PC ' + str(float_PCrit) + '; ' + str(int(round(y_Value))) + ')'                             
        
                if bool_Plot_Theme__Dark_Blue_1:
                    str_Font_Colour = 'white'
                    pyplot_Fig_FontProperties = pyplot_Fig_FontProperties__Base.copy()
                pass
                
                if bool_Plot_Theme__Default:                             
                    matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text)
                else:
                    matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text, color=str_Font_Colour, fontproperties=pyplot_Fig_FontProperties)
                pass
            pass
        pass
    

        '''
        -----------------------------
        Plot Line - LDNe Fishing Catch Proportions - Pcrit 0
        -----------------------------
        ''' 
        bool_CCP_PC0 = False
        if bool_CCP_PC0:        
            str_Stats_Category = 'CCP'
            
            with SSResults(self.obj_SSParams) as obj_Results:
                #str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category
                str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category_Code
                str_Col_Name_Exp1__Exp1__str_Stats_Category = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__str_Stats_Category)
    
                str_Key_Exp1__Ne2_floatPCrit = globalsSS.Colnames_Ne2_Output.static_Str_Colname_Ne2_floatPCrit
                str_Col_Name_Exp1__Ne2_floatPCrit = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__Ne2_floatPCrit)
    
                str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe = globalsSS.Colnames_Ne2_Aggregation.static_Str_Colname_float_Total_Ne2_r_Sqrd_LDNe
                str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe)
            pass
            str_Y_Axis_df_1_Colname = str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe 
    
            ''' Subset the DF to get the correct value '''
            
            df_2_Subset = df_2[(df_2[str_Col_Name_Exp1__Exp1__str_Stats_Category]==str_Stats_Category)]
            float_PCrit = 0
            df_2_Subset = df_2_Subset[(df_2[str_Col_Name_Exp1__Ne2_floatPCrit]==float_PCrit)]
    
            ''' if a horizontal plot line - Get the value for plotting and display '''
            float_Total_Ne2_r_Sqrd_LDNe = df_2_Subset[str_Y_Axis_df_1_Colname].iloc[0]
            y_Value = Decimal(float_Total_Ne2_r_Sqrd_LDNe)
            
            if y_Value > 0 and y_Value < int_Y_Axis_Max:
                ''' if a horizontal plot line - Get the X and Y values to actually plot ''' 
                list_X_Values = df_1[str_X_Axis_df_1_Colname].tolist()
                int_X_Values_Count = len(list_X_Values)
                int_X_Values_To_Remove = int(int_X_Values_Count*0.9) #Remove 20% of the X-Axis values
                list_X_Values = list_X_Values[:-1*int_X_Values_To_Remove] #Cut the list down to size
                list_Y_Values = [y_Value for x in list_X_Values] #Create the Y-Values list
        
                ''' Produce the plot line '''
                pyplot_Line_10, = matplotlib__pyplot.plot(list_X_Values, list_Y_Values, linestyle='-.', linewidth=int_Plot_Line_Width, figure=pyplot_Fig)
                
                ''' Add the description to the end of the line '''
                x_Pos = len(list_X_Values) + 0.25
                y_Pos = y_Value
                str_Line_Ending_Text = 'LDNe ' + str_Stats_Category + ' (PC ' + str(float_PCrit) + '; ' + str(int(round(y_Value))) + ')'                             
        
                if bool_Plot_Theme__Dark_Blue_1:
                    str_Font_Colour = 'white'
                    pyplot_Fig_FontProperties = pyplot_Fig_FontProperties__Base.copy()
                pass
                
                if bool_Plot_Theme__Default:                             
                    matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text)
                else:
                    matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text, color=str_Font_Colour, fontproperties=pyplot_Fig_FontProperties)
                pass
            pass
        pass
        '''
        -----------------------------
        Plot Line - LDNe Fishing Catch Absolute Numbers - Pcrit 0
        -----------------------------
        ''' 
        bool_CCA_PC0 = False
        if bool_CCA_PC0:        
            str_Stats_Category = 'CCA'
            
            with SSResults(self.obj_SSParams) as obj_Results:
                #str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category
                str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category_Code
                str_Col_Name_Exp1__Exp1__str_Stats_Category = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__str_Stats_Category)
    
                str_Key_Exp1__Ne2_floatPCrit = globalsSS.Colnames_Ne2_Output.static_Str_Colname_Ne2_floatPCrit
                str_Col_Name_Exp1__Ne2_floatPCrit = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__Ne2_floatPCrit)
    
                str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe = globalsSS.Colnames_Ne2_Aggregation.static_Str_Colname_float_Total_Ne2_r_Sqrd_LDNe
                str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe)
            pass
            str_Y_Axis_df_1_Colname = str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe 
    
            ''' Subset the DF to get the correct value '''
            
            df_2_Subset = df_2[(df_2[str_Col_Name_Exp1__Exp1__str_Stats_Category]==str_Stats_Category)]
            float_PCrit = 0
            df_2_Subset = df_2_Subset[(df_2[str_Col_Name_Exp1__Ne2_floatPCrit]==float_PCrit)]
    
            ''' if a horizontal plot line - Get the value for plotting and display '''
            float_Total_Ne2_r_Sqrd_LDNe = df_2_Subset[str_Y_Axis_df_1_Colname].iloc[0]
            y_Value = Decimal(float_Total_Ne2_r_Sqrd_LDNe)
            
            if y_Value > 0 and y_Value < int_Y_Axis_Max:
                ''' if a horizontal plot line - Get the X and Y values to actually plot ''' 
                list_X_Values = df_1[str_X_Axis_df_1_Colname].tolist()
                int_X_Values_Count = len(list_X_Values)
                int_X_Values_To_Remove = int(int_X_Values_Count*0.9) #Remove 20% of the X-Axis values
                list_X_Values = list_X_Values[:-1*int_X_Values_To_Remove] #Cut the list down to size
                list_Y_Values = [y_Value for x in list_X_Values] #Create the Y-Values list
        
                ''' Produce the plot line '''
                pyplot_Line_10, = matplotlib__pyplot.plot(list_X_Values, list_Y_Values, linestyle='-.', linewidth=int_Plot_Line_Width, figure=pyplot_Fig)
                
                ''' Add the description to the end of the line '''
                x_Pos = len(list_X_Values) + 0.25
                y_Pos = y_Value
                str_Line_Ending_Text = 'LDNe ' + str_Stats_Category + ' (PC ' + str(float_PCrit) + '; ' + str(int(round(y_Value))) + ')'                             
        
                if bool_Plot_Theme__Dark_Blue_1:
                    str_Font_Colour = 'white'
                    pyplot_Fig_FontProperties = pyplot_Fig_FontProperties__Base.copy()
                pass
                
                if bool_Plot_Theme__Default:                             
                    matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text)
                else:
                    matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text, color=str_Font_Colour, fontproperties=pyplot_Fig_FontProperties)
                pass
            pass
        pass
        '''
        -----------------------------
        Plot Line - LDNe Fishing Catch SCALED Absolute Numbers - Pcrit 0.05
        -----------------------------
        ''' 
        bool_CAS_PC0_05 = True
        if bool_CAS_PC0_05:        
            str_Stats_Category = 'CAS'
            
            with SSResults(self.obj_SSParams) as obj_Results:
                #str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category
                str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category_Code
                str_Col_Name_Exp1__Exp1__str_Stats_Category = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__str_Stats_Category)
    
                str_Key_Exp1__Ne2_floatPCrit = globalsSS.Colnames_Ne2_Output.static_Str_Colname_Ne2_floatPCrit
                str_Col_Name_Exp1__Ne2_floatPCrit = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__Ne2_floatPCrit)
    
                str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe = globalsSS.Colnames_Ne2_Aggregation.static_Str_Colname_float_Total_Ne2_r_Sqrd_LDNe
                str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe)
            pass
            str_Y_Axis_df_1_Colname = str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe 
    
            ''' Subset the DF to get the correct value '''
            
            df_2_Subset = df_2[(df_2[str_Col_Name_Exp1__Exp1__str_Stats_Category]==str_Stats_Category)]
            float_PCrit_Match = 0.05
            float_PCrit = 0.05
            df_2_Subset = df_2_Subset[(df_2[str_Col_Name_Exp1__Ne2_floatPCrit]==float_PCrit_Match)]
    
            ''' if a horizontal plot line - Get the value for plotting and display '''
            float_Total_Ne2_r_Sqrd_LDNe = df_2_Subset[str_Y_Axis_df_1_Colname].iloc[0]
            y_Value = Decimal(float_Total_Ne2_r_Sqrd_LDNe)
            
            if y_Value > 0 and y_Value < int_Y_Axis_Max:
                ''' if a horizontal plot line - Get the X and Y values to actually plot ''' 
                list_X_Values = df_1[str_X_Axis_df_1_Colname].tolist()
                int_X_Values_Count = len(list_X_Values)
                int_X_Values_To_Remove = int(int_X_Values_Count*0.9) #Remove 20% of the X-Axis values
                list_X_Values = list_X_Values[:-1*int_X_Values_To_Remove] #Cut the list down to size
                list_Y_Values = [y_Value for x in list_X_Values] #Create the Y-Values list
        
                ''' Produce the plot line '''
                pyplot_Line_10, = matplotlib__pyplot.plot(list_X_Values, list_Y_Values, linestyle='-.', linewidth=int_Plot_Line_Width, figure=pyplot_Fig)
                
                ''' Add the description to the end of the line '''
                x_Pos = len(list_X_Values) + 0.25
                y_Pos = y_Value
                str_Line_Ending_Text = 'LDNe ' + str_Stats_Category + ' (PC ' + str(float_PCrit) + '; ' + str(int(round(y_Value))) + ')'                             
        
                if bool_Plot_Theme__Dark_Blue_1:
                    str_Font_Colour = 'white'
                    pyplot_Fig_FontProperties = pyplot_Fig_FontProperties__Base.copy()
                pass
                
                if bool_Plot_Theme__Default:                             
                    matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text)
                else:
                    matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text, color=str_Font_Colour, fontproperties=pyplot_Fig_FontProperties)
                pass
            pass
        pass
        '''
        -----------------------------
        Format Plot
        -----------------------------
        '''


        '''
        ~~~~~~~~~~~~~~~~~~
        Grid and ticks details
        ~~~~~~~~~~~~~~~~~~
        '''
        matplotlib__pyplot.grid(True, figure=pyplot_Fig)
        

        
        '''
        ~~~~~~~~~~~~~~~~~~
        Legend details
        ~~~~~~~~~~~~~~~~~~
        '''
        float_Bbox_X_Pos = 0.80
        float_Bbox_Y_Pos = 0.35
        pyplot_Fig_Legend = pyplot_Fig.legend([
                           pyplot_Line_1
                           , pyplot_Line_2
                           , pyplot_Line_3
#                            , pyplot_Line_4
#                            , pyplot_Line_5
#                            , pyplot_Line_6
#                            , pyplot_Line_7
                           ]
                          ,[
                            'Nx - Survivors per year'
                            ,'Bx - Offspring per year'
                            ,'Dx - Deaths per year'
#                             ,'Adults - Nc (' + str(int(str_Adult_Pop_Size__Nc)) + ')'
#                             ,'Ne Demo (' + str(int(float_NeDemo)) + ')'
#                             ,'Nb Demo (' + str(int(float_NbDemo)) + ')'
#                             ,'LDNe Full (PC ' + str(float_PCrit) + '; ' + str(int(float_Total_Ne2_r_Sqrd_LDNe)) + ')'
                            ]
                          ,bbox_to_anchor=(float_Bbox_X_Pos, float_Bbox_Y_Pos)
                          ,frameon = 1)
        
        
        '''
        ~~~~~~~~~~~~~~~~~~
        Label details
        ~~~~~~~~~~~~~~~~~~
        '''
        ''' Get colnames in order to get data from df_1 '''
        with SSResults(self.obj_SSParams) as obj_Results:
            str_Key_AgeNe__Sim_Pop_Size = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Pop_Size
            str_Col_Name_AgeNe__Sim_Pop_Size = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Sim_Pop_Size)
#             str_Key_AgeNe__Nc_Adult_Pop_Size = globalsSS.Colnames_AgeNe_Results.static_str_Colname_Nx_Nc_Adults
#             str_Col_Name_AgeNe__Nc_Adult_Pop_Size = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Nc_Adult_Pop_Size)
            str_Key_AgeNe__Sim_Replicates = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Sim_Replicates
            str_Col_Name_AgeNe__Sim_Replicates = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Sim_Replicates)
            str_Key_AgeNe__Loci = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Loci
            str_Col_Name_AgeNe__Loci = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Loci)
            str_Key_Sim__Run_User_Defined_Folder = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Run_User_Defined_Folder
            str_Col_Name_Sim__Run_User_Defined_Folder = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Sim__Run_User_Defined_Folder)
        pass

        ''' Get values from df_1 '''
        str_Mating_Count_Replicate_Total = str(int_Mating_Count_Replicate_Total)
        int_Pop_Size__N = df_1[str_Col_Name_AgeNe__Sim_Pop_Size].iloc[0]
        str_Pop_Size__N = str(int_Pop_Size__N)
        str_Adult_Pop_Size__N = str(int_AgeNe__Adult_Pop_Size__Nx_Adults__N)
        str_Adult_Pop_Size__Nc = str(int_AgeNe__Adult_Pop_Size__Nx_Adults__Nc)
        str_Replicates = str(df_1[str_Col_Name_AgeNe__Sim_Replicates].iloc[0])
        str_Loci = str(df_1[str_Col_Name_AgeNe__Loci].iloc[0])
        str_Sim__Run_User_Defined_Folder = str(df_1[str_Col_Name_Sim__Run_User_Defined_Folder].iloc[0])

        str_Fig_Title = str('Population Demographic Profile by Mating, AgeNe Ne & Nb Demo vs LDNe from Embryo & Mature Cohorts')

        ''' Title spacing '''
        matplotlib__pyplot.subplots_adjust(top=0.87)
        ''' Font details '''          
        int_Plot_SupTitle_Size = 18
        if bool_Plot_Theme__Dark_Blue_1:
            str_Font_Colour = 'white'
        else:
            str_Font_Colour = 'blue'


        matplotlib__pyplot.suptitle(str_Fig_Title, fontsize=int_Plot_SupTitle_Size, color=str_Font_Colour, figure=pyplot_Fig)

        ''' Font details '''          
#         int_Plot_SupTitle_Size = 16
#         str_Font_Colour = 'blue'
                
        str_Plot_Title = str(
                             'Mating: ' + str_Mating_Count_Replicate_Total + ', '
                            + 'N :' + str_Pop_Size__N + ', '
                            #+ 'Nc: ' + str_Adult_Pop_Size__Nc + ', '
                            + 'Loci: ' + str_Loci + ', '
                            + 'Reps: ' + str_Replicates
                            + '\n'
                            + 'Run: ' + str_Sim__Run_User_Defined_Folder)

        ''' Font details '''          
        int_Plot_Title_Size = 16
        if bool_Plot_Theme__Dark_Blue_1:
            str_Font_Colour = 'grey'
        else:
            str_Font_Colour = 'blue'
                
        matplotlib__pyplot.title(str_Plot_Title, fontsize=int_Plot_Title_Size, color=str_Font_Colour, figure=pyplot_Fig)

        ''' Font details '''          
        int_PLot_Y_Label_Size = 16
        if bool_Plot_Theme__Dark_Blue_1:
            str_Font_Colour = 'white'
        else:
            str_Font_Colour = 'blue'
                                        
        matplotlib__pyplot.xlabel('Age Cohort (years)', fontsize=int_PLot_Y_Label_Size, color=str_Font_Colour, figure=pyplot_Fig)
        matplotlib__pyplot.ylabel('Individuals', fontsize=int_PLot_Y_Label_Size, color=str_Font_Colour, figure=pyplot_Fig)
        
        
        '''
        ~~~~~~~~~~~~~~~~~~
        Label Unique Identifier details
        ~~~~~~~~~~~~~~~~~~
        '''
        ''' Get colnames in order to get data from df_1 '''
        with SSResults(self.obj_SSParams) as obj_Results:
            str_Key_Sim__Run_User_Defined_Folder = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Run_User_Defined_Folder
            str_Col_Name_Sim__Run_User_Defined_Folder = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Sim__Run_User_Defined_Folder)
            str_Key_Sim__Unique_Run_ID = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Unique_Run_ID
            str_Col_Name_Sim__Unique_Run_ID = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Sim__Unique_Run_ID)

        pass

        
        ''' Get values from df_1 '''
        str_Sim__Unique_Run_ID = str(df_1[str_Col_Name_Sim__Unique_Run_ID].iloc[0])
        
        str_UID_Text = str(str_Sim__Unique_Run_ID)

        ''' Font details '''          
        int_Font_Size = 6
        str_Font_Colour = 'darkgrey'
        
        ''' Add figure text '''
        #matplotlib__pyplot.figtext(.75,.99,str_UID_Text, fontsize=int_Font_Size, color=str_Font_Colour, figure=pyplot_Fig)
        matplotlib__pyplot.figtext(.70,.005,str_UID_Text, fontsize=int_Font_Size, color=str_Font_Colour, figure=pyplot_Fig)

        str_Sim__Run_User_Defined_Folder = str(df_1[str_Col_Name_Sim__Run_User_Defined_Folder].iloc[0])

        str_RUDF_Text = str(str_Sim__Run_User_Defined_Folder)

        ''' Font details '''          
        int_Font_Size = 6
        str_Font_Colour = 'darkgrey'
        
        ''' Add figure text '''
        #matplotlib__pyplot.figtext(.75,.91,str_RUDF_Text, fontsize=int_Font_Size, color=str_Font_Colour, figure=pyplot_Fig)
        matplotlib__pyplot.figtext(.70,.015,str_RUDF_Text, fontsize=int_Font_Size, color=str_Font_Colour, figure=pyplot_Fig)

        '''
        ~~~~~~~~~~~~~~~~~~
        Axis details
        ~~~~~~~~~~~~~~~~~~
        '''
#         [xmin, xmax, ymin, ymax] = matplotlib__pyplot.axis()
#         matplotlib__pyplot.xlim(1, xmax)
        
        #int_Y_Axis_Max = int_Pop_Size__N / 2
        
        #dec_Total_Ne2_r_Sqrd_LDNe_LM = Decimal(float_Total_Ne2_r_Sqrd_LDNe_LM)
        #int_Y_Axis_Max = int(math.ceil(dec_Total_Ne2_r_Sqrd_LDNe_LM / 1000)) * 1000
        
        #int_Y_Axis_Max = int(math.ceil(int_Pop_Size__N * 0.1 * 2.1 / 500)) * 500
#         df_Temp = pandas.DataFrame()
#         df_Temp["Max"] = df_2[[str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe]].max(axis=1)
#         int_Y_Axis_Max = df_Temp["Max"].max(axis=0)
#         int_Y_Axis_Max = int(math.ceil(int_Y_Axis_Max / 500)) * 500
        
        ''' int_Y_Axis_Max passed into function '''
        matplotlib__pyplot.ylim(0, int_Y_Axis_Max)
        
        '''
        ~~~~~~~~~~~~~~~~~~
        Colours - Axis & Tick
        ~~~~~~~~~~~~~~~~~~
        '''

        if bool_Plot_Theme__Dark_Blue_1:
            str_Colour = 'darkblue'

        else:
            str_Colour = 'white'
        pass        
        #ax1 = pyplot_Fig.add_subplot(111, axisbg=str_Colour)
        ax1 = pyplot_Fig.add_subplot(111)
        
#         ax.plot(range(10))
#         ax.set_xlabel('X-axis')
#         ax.set_ylabel('Y-axis')
        
#         ax.spines['bottom'].set_color('red')
#         ax.spines['top'].set_color('red')
#         ax.xaxis.label.set_color('red')
        if bool_Plot_Theme__Dark_Blue_1:
            int_Tick_Label_Size = 16
            str_X_Axis_Tick_Labels_Colour = 'white'
            str_Y_Axis_Tick_Labels_Colour = 'white'
            str_X_Axis_Tick_Major_Colour = 'white'
            str_X_Axis_Tick_Minor_Colour = 'grey'
            str_Y_Axis_Tick_Major_Colour = 'white'
            str_Y_Axis_Tick_Minor_Colour = 'grey'
        pass
    
        if bool_Plot_Theme__Default == False:
            ax1.tick_params(axis='x', colors=str_X_Axis_Tick_Labels_Colour)
            ax1.tick_params(axis='y', colors=str_Y_Axis_Tick_Labels_Colour)
    
            # We change the fontsize of minor ticks label 
            ax1.tick_params(axis='x', which='major', labelsize=int_Tick_Label_Size, color=str_X_Axis_Tick_Major_Colour)
            ax1.tick_params(axis='x', which='minor', labelsize=int_Tick_Label_Size, color=str_X_Axis_Tick_Minor_Colour)
            ax1.tick_params(axis='y', which='major', labelsize=int_Tick_Label_Size, color=str_Y_Axis_Tick_Major_Colour)
            ax1.tick_params(axis='y', which='minor', labelsize=int_Tick_Label_Size, color=str_Y_Axis_Tick_Minor_Colour) 
        pass 
    
        ''' Axis tick pointing direction '''
        ax1.tick_params(axis='x', direction='out')
        ax1.tick_params(axis='y', direction='out')
        
        ''' Specify axis ticks to be plotted '''
        ax1.xaxis.tick_bottom() 
        ax1.yaxis.tick_left() 
             
#         for ax, color in zip([ax1], ['white']):
#             matplotlib__pyplot.setp(ax.spines.values(), color=color)
#             matplotlib__pyplot.setp([ax.get_xticklines(), ax1.get_yticklines()], color=color)        
#         
#         ax1.axhline(linewidth=4, color="w") # inc. width of x-axis and color it
#         ax1.axvline(linewidth=4, color="w") # inc. width of y-axis and color it

        if bool_Plot_Theme__Dark_Blue_1:
            str_Colour = 'white'

        else:
            str_Colour = 'black'
        pass
        for axis in ['top','bottom','left','right']:
            ax1.spines[axis].set_linewidth(4)
            ax1.spines[axis].set_color(str_Colour)
 
        ax1.spines['top'].set_visible(False)
        ax1.spines['right'].set_visible(False)           

        ''' Legend '''
        
        
        pyplot_Fig_Legend_Frame = pyplot_Fig_Legend.get_frame()
        
        pyplot_Fig_Legend_Frame.set_color('white')
        ''' Legend frame background '''
        #pyplot_Fig_Legend_Frame.set_facecolor('green')
        ''' Legend frame border '''
        #pyplot_Fig_Legend_Frame.set_edgecolor('red')
        
        ''' Turn off frame outline '''
        pyplot_Fig_Legend_Frame.set_linewidth(0)
        
        # set the alpha value of the legend: it will be translucent
        pyplot_Fig_Legend_Frame.set_alpha(0.5)                                                    
        

        #ax1.grid(True, figure=pyplot_Fig)

        bool_Format_Ticks = False
        if bool_Format_Ticks:
            nparray_Major_Ticks_X = ax1.xaxis.get_majorticklocs()      
            if len(nparray_Major_Ticks_X) > 1: 
                float_Major_Ticks_X_First = nparray_Major_Ticks_X[0]
                float_Major_Ticks_X_Last = nparray_Major_Ticks_X[-1]
                float_Major_Ticks_X_Interval = 5
                nparray_Major_Ticks_X = numpy.arange(float_Major_Ticks_X_First, float_Major_Ticks_X_Last, float_Major_Ticks_X_Interval)                                              
                ax1.set_xticks(nparray_Major_Ticks_X) 
            nparray_Minor_Ticks_X = ax1.xaxis.get_minorticklocs()
            if len(nparray_Minor_Ticks_X) > 1:     
                float_Minor_Ticks_X_First = nparray_Minor_Ticks_X[0]
                float_Minor_Ticks_X_Last = nparray_Minor_Ticks_X[-1]
                float_Minor_Ticks_X_Interval = 1
                nparray_Minor_Ticks_X = numpy.arange(float_Minor_Ticks_X_First, float_Minor_Ticks_X_Last, float_Minor_Ticks_X_Interval)                                              
                ax1.set_xticks(nparray_Minor_Ticks_X, minor=True)
            
            nparray_Major_Ticks_Y = ax1.yaxis.get_majorticklocs()      
            if len(nparray_Major_Ticks_Y) > 1: 
                float_Major_Ticks_Y_First = nparray_Major_Ticks_Y[0]
                float_Major_Ticks_Y_Last = nparray_Major_Ticks_Y[-1]
                float_Major_Ticks_Y_Interval = 50
                nparray_Major_Ticks_Y = numpy.arange(float_Major_Ticks_Y_First, float_Major_Ticks_Y_Last, float_Major_Ticks_Y_Interval)                                              
                ax1.set_yticks(nparray_Major_Ticks_Y)  
                
            nparray_Minor_Ticks_Y = ax1.yaxis.get_minorticklocs()      
            if len(nparray_Minor_Ticks_Y) > 1: 
                float_Minor_Ticks_Y_First = nparray_Minor_Ticks_Y[0]
                float_Minor_Ticks_Y_Last = nparray_Minor_Ticks_Y[-1]
                float_Minor_Ticks_Y_Interval = 1
                nparray_Minor_Ticks_Y = numpy.arange(float_Minor_Ticks_Y_First, float_Minor_Ticks_Y_Last, float_Minor_Ticks_Y_Interval)                                              
                ax1.set_yticks(nparray_Minor_Ticks_Y, minor=True)                                  
            
                                                                  
            ax1.grid(which='both')                                                   
        pass
                                                  
        
        # and a corresponding grid                                                       
        
        ax1.grid(which='both')                                                            
        
        # or if you want differnet settings for the grids:                               
        ax1.grid(which='minor', alpha=0.2)                                                
        ax1.grid(which='major', alpha=0.5)   
        
              
        #DEBUG_ON
        ''' Required to change background of INTERACTIVE WINDOW only'''
        if bool_Plot_Theme__Dark_Blue_1:
            pyplot_Fig_Patch = pyplot_Fig.patch
            pyplot_Fig_Patch.set_facecolor('darkblue') # works with plt.show().  
        pass
        #matplotlib__pyplot.show()
        #DEBUG_OFF
        
                                
        return pyplot_Fig


    def func__Plot_CAOB_EXPERIMENT_Parent_Offspring_Ne_2_PS_And_AgeNe_Sim_Demographic_Population_Profile__Plot(self, list_DFs, int_Mating_Count_Replicate_Total, int_Y_Axis_Max, dict_Fig_Copy):
        
        self.obj_Log_Default.info('Creating figure')
        
        bool_Plot_Theme__Default = False
        bool_Plot_Theme__Dark_Blue_1 = False
        
        if dict_Fig_Copy['ColourScheme'] == 'Dark_Blue':
            bool_Plot_Theme__Dark_Blue_1 = True
        else:
            bool_Plot_Theme__Default = True
        pass
    
#         if bool_Plot_Theme__Dark_Blue_1:
#             bool_Plot_Theme__Default = False
#         else:
#             bool_Plot_Theme__Default = True
#         pass
            
        int_Plot_Line_Width = 4
        '''
        -----------------------------
        Specify DFs
        -----------------------------
        '''
        df_1 = list_DFs[0]
        df_2 = list_DFs[1]
        
        
        '''
        -----------------------------
        Specify X-Axis
        -----------------------------
        '''
        with SSResults(self.obj_SSParams) as obj_Results:
            str_Key_AgeNe__Age = globalsSS.Colnames_AgeNe_Results.static_str_Colname_Age
            str_Col_Name_AgeNe__Age = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Age)
        pass
        str_X_Axis_df_1_Colname = str_Col_Name_AgeNe__Age

        '''
        -----------------------------
        Create figure
        -----------------------------
        '''
        # default scale is 1 in your original case, scales with other cases:
        int_X_Axis_Length = len(df_1[str_X_Axis_df_1_Colname])
        int_Width_Scale = int_X_Axis_Length/10 
        int_Width_Control = 6  #6 - About perfect for PowerPoint
        int_Height_Control = 8 #8 - About perfect for PowerPoint
        figsize = (int_Width_Control*int_Width_Scale,int_Height_Control) # fig size in inches (width,height)
        pyplot_Fig = matplotlib__pyplot.figure(figsize = figsize)       
        
        #pyplot_Fig = matplotlib__pyplot.figure()
        
        '''
        -----------------------------
        Plot Line - Nx - Survivors per age cohort
        -----------------------------
        ''' 
        with SSResults(self.obj_SSParams) as obj_Results:
            str_Key_AgeNe__Nx = globalsSS.Colnames_AgeNe_Results.static_str_Colname_Nx
            str_Col_Name_AgeNe__Nx = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Nx)
        pass
        str_Y_Axis_df_1_Colname = str_Col_Name_AgeNe__Nx 
        
        str_Plot_Line_Color = 'blue'
        pyplot_Line_1, = matplotlib__pyplot.plot(df_1[str_X_Axis_df_1_Colname], df_1[str_Y_Axis_df_1_Colname], color=str_Plot_Line_Color, linewidth=int_Plot_Line_Width, figure=pyplot_Fig)

        '''
        -----------------------------
        Plot Line - Bx - Offspring per age cohort
        -----------------------------
        '''         
        with SSResults(self.obj_SSParams) as obj_Results:
            str_Key_AgeNe__Bx = globalsSS.Colnames_AgeNe_Results.static_str_Colname_Bx
            str_Col_Name_AgeNe__Bx = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Bx)
        pass
        str_Y_Axis_df_1_Colname = str_Col_Name_AgeNe__Bx 
        
        if bool_Plot_Theme__Dark_Blue_1:
            str_Plot_Line_Color = 'white'
        else:
            str_Plot_Line_Color = 'grey'
        pass
        pyplot_Line_2, = matplotlib__pyplot.plot(df_1[str_X_Axis_df_1_Colname], df_1[str_Y_Axis_df_1_Colname], color=str_Plot_Line_Color, linewidth=int_Plot_Line_Width, figure=pyplot_Fig)

        '''
        -----------------------------
        Plot Line - Dx - Deaths per age cohort
        -----------------------------
        '''         
        with SSResults(self.obj_SSParams) as obj_Results:
            str_Key_AgeNe__Dx = globalsSS.Colnames_AgeNe_Results.static_str_Colname_Dx
            str_Col_Name_AgeNe__Dx = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Dx)
        pass
        str_Y_Axis_df_1_Colname = str_Col_Name_AgeNe__Dx 
        
        str_Plot_Line_Color = 'red'
        pyplot_Line_3, = matplotlib__pyplot.plot(df_1[str_X_Axis_df_1_Colname], df_1[str_Y_Axis_df_1_Colname], color=str_Plot_Line_Color, linewidth=int_Plot_Line_Width, figure=pyplot_Fig)

        '''
        -----------------------------
        Plot Line - AgeNe N - ALL Adults 
        -----------------------------
        '''
        '''
        Font properties for subsequent text
        '''
        pyplot_Fig_FontProperties__Base = matplotlib__fontmanager.FontProperties(size=16)
                 
        with SSResults(self.obj_SSParams) as obj_Results:
            str_Key_AgeNe__Adult_Pop_Size__Nx_N_Adults = globalsSS.Colnames_AgeNe_Results.static_str_Colname_Nx_N_Adults
            str_Col_Name_AgeNe__Adult_Pop_Size__Nx_N_Adults = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Adult_Pop_Size__Nx_N_Adults)

        pass
        str_Y_Axis_df_1_Colname = str_Col_Name_AgeNe__Adult_Pop_Size__Nx_N_Adults 

#         pyplot_Line_4, = matplotlib__pyplot.plot(df_1[str_X_Axis_df_1_Colname], df_1[str_Y_Axis_df_1_Colname], linestyle='--', linewidth=2, figure=pyplot_Fig)
#         
#         ''' Get the value for display '''
#         int_AgeNe__Adult_Pop_Size__Nx_Adults__Nc = df_1[str_Y_Axis_df_1_Colname].iloc[0]
# 
#         ''' Add the description to the end of the line '''
#         str_Line_Ending_Text = 'AgeNe Nc (' + str(int(int_AgeNe__Adult_Pop_Size__Nx_Adults__Nc)) + ')'                             
#         matplotlib__pyplot.text(df_1[str_X_Axis_df_1_Colname].iloc[-1], df_1[str_Y_Axis_df_1_Colname].iloc[-1], str_Line_Ending_Text)

        ''' if a horizontal plot line - Get the value for plotting and display '''
        int_AgeNe__Adult_Pop_Size__Nx_Adults__N = int(df_1[str_Y_Axis_df_1_Colname].iloc[0])
        y_Value = int_AgeNe__Adult_Pop_Size__Nx_Adults__N
        
        ''' if a horizontal plot line - Get the X and Y values to actually plot ''' 
        list_X_Values = df_1[str_X_Axis_df_1_Colname].tolist()
        int_X_Values_Count = len(list_X_Values)
        int_X_Values_To_Remove = int(int_X_Values_Count*0.8) #Remove a % of the X-Axis values
        list_X_Values = list_X_Values[:-1*int_X_Values_To_Remove] #Cut the list down to size
        list_Y_Values = [y_Value for x in list_X_Values] #Create the Y-Values list

        ''' Produce the plot line '''
        pyplot_Line_4, = matplotlib__pyplot.plot(list_X_Values, list_Y_Values, linestyle='-', linewidth=int_Plot_Line_Width, figure=pyplot_Fig)
        
        ''' Add the description to the end of the line '''
        x_Pos = len(list_X_Values) + 0.25
        y_Pos = y_Value
        str_Line_Ending_Text = 'AgeNe N Adults (' + str(int(y_Value)) + ')'        
        
        if bool_Plot_Theme__Dark_Blue_1:
            str_Font_Colour = 'white'
            pyplot_Fig_FontProperties = pyplot_Fig_FontProperties__Base.copy()
        pass
        
        if bool_Plot_Theme__Default:                             
            matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text)
        else:
            matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text, color=str_Font_Colour, fontproperties=pyplot_Fig_FontProperties)
        pass
    
        '''
        -----------------------------
        Plot Line - AgeNe Nc - Fertile Adults 
        -----------------------------
        '''
        '''
        Font properties for subsequent text
        '''
        pyplot_Fig_FontProperties__Base = matplotlib__fontmanager.FontProperties(size=16)
                 
        with SSResults(self.obj_SSParams) as obj_Results:
            str_Key_AgeNe__Adult_Pop_Size__Nx_Nc_Adults = globalsSS.Colnames_AgeNe_Results.static_str_Colname_Nx_Nc_Adults
            str_Col_Name_AgeNe__Adult_Pop_Size__Nx_Nc_Adults = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Adult_Pop_Size__Nx_Nc_Adults)

        pass
        str_Y_Axis_df_1_Colname = str_Col_Name_AgeNe__Adult_Pop_Size__Nx_Nc_Adults 

#         pyplot_Line_4, = matplotlib__pyplot.plot(df_1[str_X_Axis_df_1_Colname], df_1[str_Y_Axis_df_1_Colname], linestyle='--', linewidth=2, figure=pyplot_Fig)
#         
#         ''' Get the value for display '''
#         int_AgeNe__Adult_Pop_Size__Nx_Adults__Nc = df_1[str_Y_Axis_df_1_Colname].iloc[0]
# 
#         ''' Add the description to the end of the line '''
#         str_Line_Ending_Text = 'AgeNe Nc (' + str(int(int_AgeNe__Adult_Pop_Size__Nx_Adults__Nc)) + ')'                             
#         matplotlib__pyplot.text(df_1[str_X_Axis_df_1_Colname].iloc[-1], df_1[str_Y_Axis_df_1_Colname].iloc[-1], str_Line_Ending_Text)

        ''' if a horizontal plot line - Get the value for plotting and display '''
        int_AgeNe__Adult_Pop_Size__Nx_Adults__Nc = int(df_1[str_Y_Axis_df_1_Colname].iloc[0])
        y_Value = int_AgeNe__Adult_Pop_Size__Nx_Adults__Nc
        
        ''' if a horizontal plot line - Get the X and Y values to actually plot ''' 
        list_X_Values = df_1[str_X_Axis_df_1_Colname].tolist()
        int_X_Values_Count = len(list_X_Values)
        int_X_Values_To_Remove = int(int_X_Values_Count*0.8) #Remove a % of the X-Axis values
        list_X_Values = list_X_Values[:-1*int_X_Values_To_Remove] #Cut the list down to size
        list_Y_Values = [y_Value for x in list_X_Values] #Create the Y-Values list

        ''' Produce the plot line '''
        pyplot_Line_4, = matplotlib__pyplot.plot(list_X_Values, list_Y_Values, linestyle='-', linewidth=int_Plot_Line_Width, figure=pyplot_Fig)
        
        ''' Add the description to the end of the line '''
        x_Pos = len(list_X_Values) + 0.25
        y_Pos = y_Value
        str_Line_Ending_Text = 'AgeNe Nc (' + str(int(y_Value)) + ')'        
        
        if bool_Plot_Theme__Dark_Blue_1:
            str_Font_Colour = 'white'
            pyplot_Fig_FontProperties = pyplot_Fig_FontProperties__Base.copy()
        pass
        
        if bool_Plot_Theme__Default:                             
            matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text)
        else:
            matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text, color=str_Font_Colour, fontproperties=pyplot_Fig_FontProperties)
        pass
    
        '''
        -----------------------------
        Plot Line - AgeNe Ne Demographic
        -----------------------------
        '''         
        with SSResults(self.obj_SSParams) as obj_Results:
            str_Key_AgeNe__Ne_Demo = globalsSS.Colnames_AgeNe_Results.static_str_Colname_NeDemo
            str_Col_Name_AgeNe__Ne_Demo = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Ne_Demo)
        pass
        str_Y_Axis_df_1_Colname = str_Col_Name_AgeNe__Ne_Demo 

#         pyplot_Line_5, = matplotlib__pyplot.plot(df_1[str_X_Axis_df_1_Colname], df_1[str_Y_Axis_df_1_Colname], linestyle='--', linewidth=2, figure=pyplot_Fig)
#         
#         ''' Get the value for display '''
#         float_NeDemo = df_1[str_Y_Axis_df_1_Colname].iloc[0]
# 
#         ''' Add the description to the end of the line '''
#         str_Line_Ending_Text = 'AgeNe Ne Demo (' + str(int(float_NeDemo)) + ')'                             
#         matplotlib__pyplot.text(df_1[str_X_Axis_df_1_Colname].iloc[-1], df_1[str_Y_Axis_df_1_Colname].iloc[-1], str_Line_Ending_Text)

        ''' if a horizontal plot line - Get the value for plotting and display '''
        float_NeDemo = df_1[str_Y_Axis_df_1_Colname].iloc[0]
        y_Value = Decimal(float_NeDemo)
        
        ''' if a horizontal plot line - Get the X and Y values to actually plot ''' 
        list_X_Values = df_1[str_X_Axis_df_1_Colname].tolist()
        int_X_Values_Count = len(list_X_Values)
        int_X_Values_To_Remove = int(int_X_Values_Count*0.2) #Remove 20% of the X-Axis values
        list_X_Values = list_X_Values[:-1*int_X_Values_To_Remove] #Cut the list down to size
        list_Y_Values = [y_Value for x in list_X_Values] #Create the Y-Values list

        ''' Produce the plot line '''
        pyplot_Line_5, = matplotlib__pyplot.plot(list_X_Values, list_Y_Values, linestyle='-.', linewidth=int_Plot_Line_Width, figure=pyplot_Fig)
        
        ''' Add the description to the end of the line '''
        x_Pos = len(list_X_Values) + 0.25
        y_Pos = y_Value
        str_Line_Ending_Text = 'AgeNe Ne Demo (' + str(int(round(y_Value))) + ')'                             

        if bool_Plot_Theme__Dark_Blue_1:
            str_Font_Colour = 'white'
            pyplot_Fig_FontProperties = pyplot_Fig_FontProperties__Base.copy()
        pass
        
        if bool_Plot_Theme__Default:                             
            matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text)
        else:
            matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text, color=str_Font_Colour, fontproperties=pyplot_Fig_FontProperties)
 
        '''
        -----------------------------
        Plot Line - AgeNe Nb Demographic
        -----------------------------
        '''         
        with SSResults(self.obj_SSParams) as obj_Results:
            str_Key_AgeNe__Nb_Demo = globalsSS.Colnames_AgeNe_Results.static_str_Colname_NbDemo
            str_Col_Name_AgeNe__Nb_Demo = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Nb_Demo)
        pass
        str_Y_Axis_df_1_Colname = str_Col_Name_AgeNe__Nb_Demo 
        
        ''' if a horizontal plot line - Get the value for plotting and display '''
        float_NbDemo = df_1[str_Y_Axis_df_1_Colname].iloc[0]
        y_Value = Decimal(float_NbDemo)
        
        ''' if a horizontal plot line - Get the X and Y values to actually plot ''' 
        list_X_Values = df_1[str_X_Axis_df_1_Colname].tolist()
        int_X_Values_Count = len(list_X_Values)
        int_X_Values_To_Remove = int(int_X_Values_Count*0.2) #Remove 20% of the X-Axis values
        list_X_Values = list_X_Values[:-1*int_X_Values_To_Remove] #Cut the list down to size
        list_Y_Values = [y_Value for x in list_X_Values] #Create the Y-Values list

        ''' Produce the plot line '''
        pyplot_Line_6, = matplotlib__pyplot.plot(list_X_Values, list_Y_Values, linestyle='-.', linewidth=int_Plot_Line_Width, figure=pyplot_Fig)
        
        ''' Add the description to the end of the line '''
        x_Pos = len(list_X_Values) + 0.25
        y_Pos = y_Value
        str_Line_Ending_Text = 'AgeNe Nb Demo (' + str(int(round(y_Value))) + ')'                             

        if bool_Plot_Theme__Dark_Blue_1:
            str_Font_Colour = 'white'
            pyplot_Fig_FontProperties = pyplot_Fig_FontProperties__Base.copy()
        pass
        
        if bool_Plot_Theme__Default:                             
            matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text)
        else:
            matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text, color=str_Font_Colour, fontproperties=pyplot_Fig_FontProperties)
 
        '''
        -----------------------------
        Plot Line - Exp1 Potential Parents
        -----------------------------
        '''         
        with SSResults(self.obj_SSParams) as obj_Results:
            #str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category
            str_Key_Exp1__str_Stats_Category_Code = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category_Code
            str_Col_Name_Exp1__Exp1__str_Stats_Category = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__str_Stats_Category_Code)

            str_Key_Exp1__Potential_Parents_PP = globalsSS.Colnames_Parent_Offspring_Stats_METHOD_2.static_Str_Colname_Potential_Parents_PP
            str_Col_Name_Exp1__Potential_Parents_PP = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__Potential_Parents_PP)

        pass
        str_Y_Axis_df_1_Colname = str_Col_Name_Exp1__Potential_Parents_PP 
            
        ''' Subset the DF to get the correct value '''
        #str_Stats_Category = 'FUL'
        #df_2_Subset = df_2[(df_2[str_Col_Name_Exp1__Exp1__str_Stats_Category]==str_Stats_Category)]
        #float_PCrit = 0
        #df_2_Subset = df_2_Subset[(df_2[str_Col_Name_Exp1__Ne2_floatPCrit]==float_PCrit)]

        ''' if a horizontal plot line - Get the value for plotting and display '''        
        float_Exp1__Potential_Parents_PP = float(df_2[str_Y_Axis_df_1_Colname].iloc[0])
        y_Value = Decimal(float_Exp1__Potential_Parents_PP)
        
        ''' if a horizontal plot line - Get the X and Y values to actually plot ''' 
        list_X_Values = df_1[str_X_Axis_df_1_Colname].tolist()
        int_X_Values_Count = len(list_X_Values)
        int_X_Values_To_Remove = int(int_X_Values_Count*0.50) #Remove 20% of the X-Axis values
        list_X_Values = list_X_Values[:-1*int_X_Values_To_Remove] #Cut the list down to size
        list_Y_Values = [y_Value for x in list_X_Values] #Create the Y-Values list

        ''' Produce the plot line '''
        pyplot_Line_7, = matplotlib__pyplot.plot(list_X_Values, list_Y_Values, linestyle='-.', linewidth=int_Plot_Line_Width, figure=pyplot_Fig)
        
        ''' Add the description to the end of the line '''
        x_Pos = len(list_X_Values) + 0.25
        y_Pos = y_Value
        str_Line_Ending_Text = 'Exp1 NcPP ' + str(int(round(y_Value))) + ')'                             

        if bool_Plot_Theme__Dark_Blue_1:
            str_Font_Colour = 'white'
            pyplot_Fig_FontProperties = pyplot_Fig_FontProperties__Base.copy()
        pass
        
        if bool_Plot_Theme__Default:                             
            matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text)
        else:
            matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text, color=str_Font_Colour, fontproperties=pyplot_Fig_FontProperties)
        pass
        '''
        -----------------------------
        Plot Line - LDNe Full PCrit 0
        -----------------------------
        '''
        bool_FUL_PC0 = True
        if bool_FUL_PC0:   
            with SSResults(self.obj_SSParams) as obj_Results:
                #str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category
                str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category_Code
                str_Col_Name_Exp1__Exp1__str_Stats_Category = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__str_Stats_Category)
    
                str_Key_Exp1__Ne2_floatPCrit = globalsSS.Colnames_Ne2_Output.static_Str_Colname_Ne2_floatPCrit
                str_Col_Name_Exp1__Ne2_floatPCrit = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__Ne2_floatPCrit)
    
                str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe = globalsSS.Colnames_Ne2_Aggregation.static_Str_Colname_float_Total_Ne2_r_Sqrd_LDNe
                str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe)
            pass
            str_Y_Axis_df_1_Colname = str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe 
    
            ''' Subset the DF to get the correct value '''
            str_Stats_Category = 'FUL'
            df_2_Subset = df_2[(df_2[str_Col_Name_Exp1__Exp1__str_Stats_Category]==str_Stats_Category)]
            float_PCrit = 0
            df_2_Subset = df_2_Subset[(df_2[str_Col_Name_Exp1__Ne2_floatPCrit]==float_PCrit)]
    
            ''' if a horizontal plot line - Get the value for plotting and display '''        
            float_Total_Ne2_r_Sqrd_LDNe = df_2_Subset[str_Y_Axis_df_1_Colname].iloc[0]
            y_Value = Decimal(float_Total_Ne2_r_Sqrd_LDNe)
            
            if y_Value > 0 and y_Value < int_Y_Axis_Max:
                ''' if a horizontal plot line - Get the X and Y values to actually plot ''' 
                list_X_Values = df_1[str_X_Axis_df_1_Colname].tolist()
                int_X_Values_Count = len(list_X_Values)
                int_X_Values_To_Remove = int(int_X_Values_Count*0.1) #Remove 20% of the X-Axis values
                list_X_Values = list_X_Values[:-1*int_X_Values_To_Remove] #Cut the list down to size
                list_Y_Values = [y_Value for x in list_X_Values] #Create the Y-Values list
        
                ''' Produce the plot line '''
                pyplot_Line_8, = matplotlib__pyplot.plot(list_X_Values, list_Y_Values, linestyle='-.', linewidth=int_Plot_Line_Width, figure=pyplot_Fig)
                
                ''' Add the description to the end of the line '''
                x_Pos = len(list_X_Values) + 0.25
                y_Pos = y_Value
                str_Line_Ending_Text = 'LDNe ' + str_Stats_Category + ' (PC ' + str(float_PCrit) + '; ' + str(int(round(y_Value))) + ')'                             
        
                if bool_Plot_Theme__Dark_Blue_1:
                    str_Font_Colour = 'white'
                    pyplot_Fig_FontProperties = pyplot_Fig_FontProperties__Base.copy()
                pass
                
                if bool_Plot_Theme__Default:                             
                    matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text)
                else:
                    matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text, color=str_Font_Colour, fontproperties=pyplot_Fig_FontProperties)
                pass
            pass
        pass
        '''
        -----------------------------
        Plot Line - LDNe Full PCrit 0.05
        -----------------------------
        '''
        bool_FUL_PC0_05 = False
        if bool_FUL_PC0_05:      
            with SSResults(self.obj_SSParams) as obj_Results:
                #str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category
                str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category_Code
                str_Col_Name_Exp1__Exp1__str_Stats_Category = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__str_Stats_Category)
    
                str_Key_Exp1__Ne2_floatPCrit = globalsSS.Colnames_Ne2_Output.static_Str_Colname_Ne2_floatPCrit
                str_Col_Name_Exp1__Ne2_floatPCrit = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__Ne2_floatPCrit)
    
                str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe = globalsSS.Colnames_Ne2_Aggregation.static_Str_Colname_float_Total_Ne2_r_Sqrd_LDNe
                str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe)
            pass
            str_Y_Axis_df_1_Colname = str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe 
    
            ''' Subset the DF to get the correct value '''
            str_Stats_Category = 'FUL'
            df_2_Subset = df_2[(df_2[str_Col_Name_Exp1__Exp1__str_Stats_Category]==str_Stats_Category)]
            float_PCrit_Match = 0.05
            float_PCrit = 0.05
            df_2_Subset = df_2_Subset[(df_2[str_Col_Name_Exp1__Ne2_floatPCrit]==float_PCrit_Match)]
    
            ''' if a horizontal plot line - Get the value for plotting and display '''        
            float_Total_Ne2_r_Sqrd_LDNe = df_2_Subset[str_Y_Axis_df_1_Colname].iloc[0]
            y_Value = Decimal(float_Total_Ne2_r_Sqrd_LDNe)
            
            if y_Value > 0 and y_Value < int_Y_Axis_Max:
                ''' if a horizontal plot line - Get the X and Y values to actually plot ''' 
                list_X_Values = df_1[str_X_Axis_df_1_Colname].tolist()
                int_X_Values_Count = len(list_X_Values)
                int_X_Values_To_Remove = int(int_X_Values_Count*0.1) #Remove 20% of the X-Axis values
                list_X_Values = list_X_Values[:-1*int_X_Values_To_Remove] #Cut the list down to size
                list_Y_Values = [y_Value for x in list_X_Values] #Create the Y-Values list
        
                ''' Produce the plot line '''
                pyplot_Line_8, = matplotlib__pyplot.plot(list_X_Values, list_Y_Values, linestyle='-.', linewidth=int_Plot_Line_Width, figure=pyplot_Fig)
                
                ''' Add the description to the end of the line '''
                x_Pos = len(list_X_Values) + 0.25
                y_Pos = y_Value
                str_Line_Ending_Text = 'LDNe ' + str_Stats_Category + ' (PC ' + str(float_PCrit) + '; ' + str(int(round(y_Value))) + ')'                             
        
                if bool_Plot_Theme__Dark_Blue_1:
                    str_Font_Colour = 'white'
                    pyplot_Fig_FontProperties = pyplot_Fig_FontProperties__Base.copy()
                pass
                
                if bool_Plot_Theme__Default:                             
                    matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text)
                else:
                    matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text, color=str_Font_Colour, fontproperties=pyplot_Fig_FontProperties)
                pass
            pass
        pass
        '''
        -----------------------------
        Plot Line - LDNe Full Mature PCrit 0
        -----------------------------
        '''
        bool_FMT_PC0 = True
        if bool_FMT_PC0:               
            with SSResults(self.obj_SSParams) as obj_Results:
                #str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category
                str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category_Code
                str_Col_Name_Exp1__Exp1__str_Stats_Category = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__str_Stats_Category)
    
                str_Key_Exp1__Ne2_floatPCrit = globalsSS.Colnames_Ne2_Output.static_Str_Colname_Ne2_floatPCrit
                str_Col_Name_Exp1__Ne2_floatPCrit = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__Ne2_floatPCrit)
    
                str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe = globalsSS.Colnames_Ne2_Aggregation.static_Str_Colname_float_Total_Ne2_r_Sqrd_LDNe
                str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe)
            pass
            str_Y_Axis_df_1_Colname = str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe 
    
            ''' Subset the DF to get the correct value '''
            str_Stats_Category = 'FMT'
            df_2_Subset = df_2[(df_2[str_Col_Name_Exp1__Exp1__str_Stats_Category]==str_Stats_Category)]
            float_PCrit = 0
            df_2_Subset = df_2_Subset[(df_2[str_Col_Name_Exp1__Ne2_floatPCrit]==float_PCrit)]
    
            ''' if a horizontal plot line - Get the value for plotting and display '''        
            float_Total_Ne2_r_Sqrd_LDNe = df_2_Subset[str_Y_Axis_df_1_Colname].iloc[0]
            float_Total_Ne2_r_Sqrd_LDNe_LM = df_2_Subset[str_Y_Axis_df_1_Colname].iloc[0]
            y_Value = Decimal(float_Total_Ne2_r_Sqrd_LDNe)
            
            if y_Value > 0 and y_Value < int_Y_Axis_Max:
                ''' if a horizontal plot line - Get the X and Y values to actually plot ''' 
                list_X_Values = df_1[str_X_Axis_df_1_Colname].tolist()
                int_X_Values_Count = len(list_X_Values)
                int_X_Values_To_Remove = int(int_X_Values_Count*0.5) #Remove 20% of the X-Axis values
                list_X_Values = list_X_Values[:-1*int_X_Values_To_Remove] #Cut the list down to size
                list_Y_Values = [y_Value for x in list_X_Values] #Create the Y-Values list
        
                ''' Produce the plot line '''
                pyplot_Line_9, = matplotlib__pyplot.plot(list_X_Values, list_Y_Values, linestyle='-.', linewidth=int_Plot_Line_Width, figure=pyplot_Fig)
                
                ''' Add the description to the end of the line '''
                x_Pos = len(list_X_Values) + 0.25
                y_Pos = y_Value
                str_Line_Ending_Text = 'LDNe ' + str_Stats_Category + ' (PC ' + str(float_PCrit) + '; ' + str(int(round(y_Value))) + ')'                             
        
                if bool_Plot_Theme__Dark_Blue_1:
                    str_Font_Colour = 'white'
                    pyplot_Fig_FontProperties = pyplot_Fig_FontProperties__Base.copy()
                pass
                
                if bool_Plot_Theme__Default:                             
                    matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text)
                else:
                    matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text, color=str_Font_Colour, fontproperties=pyplot_Fig_FontProperties)
                pass
            pass
        pass
        '''
        -----------------------------
        Plot Line - LDNe Full Mature PCrit 0.05
        -----------------------------
        '''
        bool_FMT_PC0_05 = False
        if bool_FMT_PC0_05:               
            with SSResults(self.obj_SSParams) as obj_Results:
                #str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category
                str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category_Code
                str_Col_Name_Exp1__Exp1__str_Stats_Category = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__str_Stats_Category)
    
                str_Key_Exp1__Ne2_floatPCrit = globalsSS.Colnames_Ne2_Output.static_Str_Colname_Ne2_floatPCrit
                str_Col_Name_Exp1__Ne2_floatPCrit = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__Ne2_floatPCrit)
    
                str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe = globalsSS.Colnames_Ne2_Aggregation.static_Str_Colname_float_Total_Ne2_r_Sqrd_LDNe
                str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe)
            pass
            str_Y_Axis_df_1_Colname = str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe 
    
            ''' Subset the DF to get the correct value '''
            str_Stats_Category = 'FMT'
            df_2_Subset = df_2[(df_2[str_Col_Name_Exp1__Exp1__str_Stats_Category]==str_Stats_Category)]
            float_PCrit = 0.05
            df_2_Subset = df_2_Subset[(df_2[str_Col_Name_Exp1__Ne2_floatPCrit]==float_PCrit)]
    
            ''' if a horizontal plot line - Get the value for plotting and display '''        
            float_Total_Ne2_r_Sqrd_LDNe = df_2_Subset[str_Y_Axis_df_1_Colname].iloc[0]
            float_Total_Ne2_r_Sqrd_LDNe_LM = df_2_Subset[str_Y_Axis_df_1_Colname].iloc[0]
            y_Value = Decimal(float_Total_Ne2_r_Sqrd_LDNe)
            
            if y_Value > 0 and y_Value < int_Y_Axis_Max:
                ''' if a horizontal plot line - Get the X and Y values to actually plot ''' 
                list_X_Values = df_1[str_X_Axis_df_1_Colname].tolist()
                int_X_Values_Count = len(list_X_Values)
                int_X_Values_To_Remove = int(int_X_Values_Count*0.5) #Remove 20% of the X-Axis values
                list_X_Values = list_X_Values[:-1*int_X_Values_To_Remove] #Cut the list down to size
                list_Y_Values = [y_Value for x in list_X_Values] #Create the Y-Values list
        
                ''' Produce the plot line '''
                pyplot_Line_9, = matplotlib__pyplot.plot(list_X_Values, list_Y_Values, linestyle='-.', linewidth=int_Plot_Line_Width, figure=pyplot_Fig)
                
                ''' Add the description to the end of the line '''
                x_Pos = len(list_X_Values) + 0.25
                y_Pos = y_Value
                str_Line_Ending_Text = 'LDNe ' + str_Stats_Category + ' (PC ' + str(float_PCrit) + '; ' + str(int(round(y_Value))) + ')'                             
        
                if bool_Plot_Theme__Dark_Blue_1:
                    str_Font_Colour = 'white'
                    pyplot_Fig_FontProperties = pyplot_Fig_FontProperties__Base.copy()
                pass
                
                if bool_Plot_Theme__Default:                             
                    matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text)
                else:
                    matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text, color=str_Font_Colour, fontproperties=pyplot_Fig_FontProperties)
                pass
            pass
        pass
        '''
        -----------------------------
        Plot Line - LDNe Large Mature PCrit 0
        -----------------------------
        '''
        bool_LMT_PC0 = False
        if bool_LMT_PC0:               
            with SSResults(self.obj_SSParams) as obj_Results:
                #str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category
                str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category_Code
                str_Col_Name_Exp1__Exp1__str_Stats_Category = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__str_Stats_Category)
    
                str_Key_Exp1__Ne2_floatPCrit = globalsSS.Colnames_Ne2_Output.static_Str_Colname_Ne2_floatPCrit
                str_Col_Name_Exp1__Ne2_floatPCrit = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__Ne2_floatPCrit)
    
                str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe = globalsSS.Colnames_Ne2_Aggregation.static_Str_Colname_float_Total_Ne2_r_Sqrd_LDNe
                str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe)
            pass
            str_Y_Axis_df_1_Colname = str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe 
    
            ''' Subset the DF to get the correct value '''
            str_Stats_Category = 'LMT'
            df_2_Subset = df_2[(df_2[str_Col_Name_Exp1__Exp1__str_Stats_Category]==str_Stats_Category)]
            float_PCrit = 0
            df_2_Subset = df_2_Subset[(df_2[str_Col_Name_Exp1__Ne2_floatPCrit]==float_PCrit)]
    
            ''' if a horizontal plot line - Get the value for plotting and display '''        
            float_Total_Ne2_r_Sqrd_LDNe = df_2_Subset[str_Y_Axis_df_1_Colname].iloc[0]
            float_Total_Ne2_r_Sqrd_LDNe_LM = df_2_Subset[str_Y_Axis_df_1_Colname].iloc[0]
            y_Value = Decimal(float_Total_Ne2_r_Sqrd_LDNe)
            
            if y_Value > 0 and y_Value < int_Y_Axis_Max:
                ''' if a horizontal plot line - Get the X and Y values to actually plot ''' 
                list_X_Values = df_1[str_X_Axis_df_1_Colname].tolist()
                int_X_Values_Count = len(list_X_Values)
                int_X_Values_To_Remove = int(int_X_Values_Count*0.5) #Remove 20% of the X-Axis values
                list_X_Values = list_X_Values[:-1*int_X_Values_To_Remove] #Cut the list down to size
                list_Y_Values = [y_Value for x in list_X_Values] #Create the Y-Values list
        
                ''' Produce the plot line '''
                pyplot_Line_9, = matplotlib__pyplot.plot(list_X_Values, list_Y_Values, linestyle='-.', linewidth=int_Plot_Line_Width, figure=pyplot_Fig)
                
                ''' Add the description to the end of the line '''
                x_Pos = len(list_X_Values) + 0.25
                y_Pos = y_Value
                str_Line_Ending_Text = 'LDNe ' + str_Stats_Category + ' (PC ' + str(float_PCrit) + '; ' + str(int(round(y_Value))) + ')'                             
        
                if bool_Plot_Theme__Dark_Blue_1:
                    str_Font_Colour = 'white'
                    pyplot_Fig_FontProperties = pyplot_Fig_FontProperties__Base.copy()
                pass
                
                if bool_Plot_Theme__Default:                             
                    matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text)
                else:
                    matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text, color=str_Font_Colour, fontproperties=pyplot_Fig_FontProperties)
                pass
            pass
        pass
        '''
        -----------------------------
        Plot Line - LDNe Large Mature PCrit 0.05
        -----------------------------
        '''
        bool_LMT_PC0_05 = False
        if bool_LMT_PC0_05:               
            with SSResults(self.obj_SSParams) as obj_Results:
                #str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category
                str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category_Code
                str_Col_Name_Exp1__Exp1__str_Stats_Category = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__str_Stats_Category)
    
                str_Key_Exp1__Ne2_floatPCrit = globalsSS.Colnames_Ne2_Output.static_Str_Colname_Ne2_floatPCrit
                str_Col_Name_Exp1__Ne2_floatPCrit = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__Ne2_floatPCrit)
    
                str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe = globalsSS.Colnames_Ne2_Aggregation.static_Str_Colname_float_Total_Ne2_r_Sqrd_LDNe
                str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe)
            pass
            str_Y_Axis_df_1_Colname = str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe 
    
            ''' Subset the DF to get the correct value '''
            str_Stats_Category = 'LMT'
            df_2_Subset = df_2[(df_2[str_Col_Name_Exp1__Exp1__str_Stats_Category]==str_Stats_Category)]
            float_PCrit_Match = 0.05
            float_PCrit = 0.05
            df_2_Subset = df_2_Subset[(df_2[str_Col_Name_Exp1__Ne2_floatPCrit]==float_PCrit_Match)]
    
            ''' if a horizontal plot line - Get the value for plotting and display '''        
            float_Total_Ne2_r_Sqrd_LDNe = df_2_Subset[str_Y_Axis_df_1_Colname].iloc[0]
            float_Total_Ne2_r_Sqrd_LDNe_LM = df_2_Subset[str_Y_Axis_df_1_Colname].iloc[0]
            y_Value = Decimal(float_Total_Ne2_r_Sqrd_LDNe)
            
            if y_Value > 0 and y_Value < int_Y_Axis_Max:
                ''' if a horizontal plot line - Get the X and Y values to actually plot ''' 
                list_X_Values = df_1[str_X_Axis_df_1_Colname].tolist()
                int_X_Values_Count = len(list_X_Values)
                int_X_Values_To_Remove = int(int_X_Values_Count*0.5) #Remove 20% of the X-Axis values
                list_X_Values = list_X_Values[:-1*int_X_Values_To_Remove] #Cut the list down to size
                list_Y_Values = [y_Value for x in list_X_Values] #Create the Y-Values list
        
                ''' Produce the plot line '''
                pyplot_Line_9, = matplotlib__pyplot.plot(list_X_Values, list_Y_Values, linestyle='-.', linewidth=int_Plot_Line_Width, figure=pyplot_Fig)
                
                ''' Add the description to the end of the line '''
                x_Pos = len(list_X_Values) + 0.25
                y_Pos = y_Value
                str_Line_Ending_Text = 'LDNe ' + str_Stats_Category + ' (PC ' + str(float_PCrit) + '; ' + str(int(round(y_Value))) + ')'                             
        
                if bool_Plot_Theme__Dark_Blue_1:
                    str_Font_Colour = 'white'
                    pyplot_Fig_FontProperties = pyplot_Fig_FontProperties__Base.copy()
                pass
                
                if bool_Plot_Theme__Default:                             
                    matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text)
                else:
                    matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text, color=str_Font_Colour, fontproperties=pyplot_Fig_FontProperties)
                pass
            pass
        pass
        '''
        -----------------------------
        Plot Line - LDNe Full Juvenile PCrit 0
        -----------------------------
        '''
        bool_FJV_PC0 = True
        if bool_FJV_PC0:               
            with SSResults(self.obj_SSParams) as obj_Results:
                #str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category
                str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category_Code
                str_Col_Name_Exp1__Exp1__str_Stats_Category = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__str_Stats_Category)
    
                str_Key_Exp1__Ne2_floatPCrit = globalsSS.Colnames_Ne2_Output.static_Str_Colname_Ne2_floatPCrit
                str_Col_Name_Exp1__Ne2_floatPCrit = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__Ne2_floatPCrit)
    
                str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe = globalsSS.Colnames_Ne2_Aggregation.static_Str_Colname_float_Total_Ne2_r_Sqrd_LDNe
                str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe)
            pass
            str_Y_Axis_df_1_Colname = str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe 
    
            ''' Subset the DF to get the correct value '''
            str_Stats_Category = 'FJV'
            df_2_Subset = df_2[(df_2[str_Col_Name_Exp1__Exp1__str_Stats_Category]==str_Stats_Category)]
            float_PCrit = 0
            df_2_Subset = df_2_Subset[(df_2[str_Col_Name_Exp1__Ne2_floatPCrit]==float_PCrit)]
    
            ''' if a horizontal plot line - Get the value for plotting and display '''        
            float_Total_Ne2_r_Sqrd_LDNe = df_2_Subset[str_Y_Axis_df_1_Colname].iloc[0]
            float_Total_Ne2_r_Sqrd_LDNe_LM = df_2_Subset[str_Y_Axis_df_1_Colname].iloc[0]
            y_Value = Decimal(float_Total_Ne2_r_Sqrd_LDNe)
            
            if y_Value > 0 and y_Value < int_Y_Axis_Max:
                ''' if a horizontal plot line - Get the X and Y values to actually plot ''' 
                list_X_Values = df_1[str_X_Axis_df_1_Colname].tolist()
                int_X_Values_Count = len(list_X_Values)
                int_X_Values_To_Remove = int(int_X_Values_Count*0.5) #Remove 20% of the X-Axis values
                list_X_Values = list_X_Values[:-1*int_X_Values_To_Remove] #Cut the list down to size
                list_Y_Values = [y_Value for x in list_X_Values] #Create the Y-Values list
        
                ''' Produce the plot line '''
                pyplot_Line_9, = matplotlib__pyplot.plot(list_X_Values, list_Y_Values, linestyle='-.', linewidth=int_Plot_Line_Width, figure=pyplot_Fig)
                
                ''' Add the description to the end of the line '''
                x_Pos = len(list_X_Values) + 0.25
                y_Pos = y_Value
                str_Line_Ending_Text = 'LDNe ' + str_Stats_Category + ' (PC ' + str(float_PCrit) + '; ' + str(int(round(y_Value))) + ')'                             
        
                if bool_Plot_Theme__Dark_Blue_1:
                    str_Font_Colour = 'white'
                    pyplot_Fig_FontProperties = pyplot_Fig_FontProperties__Base.copy()
                pass
                
                if bool_Plot_Theme__Default:                             
                    matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text)
                else:
                    matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text, color=str_Font_Colour, fontproperties=pyplot_Fig_FontProperties)
                pass
            pass
        pass    
        '''
        -----------------------------
        Plot Line - LDNe Full Juvenile PCrit 0.05
        -----------------------------
        '''
        bool_FJV_PC0_05 = False
        if bool_FJV_PC0_05:               
            with SSResults(self.obj_SSParams) as obj_Results:
                #str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category
                str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category_Code
                str_Col_Name_Exp1__Exp1__str_Stats_Category = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__str_Stats_Category)
    
                str_Key_Exp1__Ne2_floatPCrit = globalsSS.Colnames_Ne2_Output.static_Str_Colname_Ne2_floatPCrit
                str_Col_Name_Exp1__Ne2_floatPCrit = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__Ne2_floatPCrit)
    
                str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe = globalsSS.Colnames_Ne2_Aggregation.static_Str_Colname_float_Total_Ne2_r_Sqrd_LDNe
                str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe)
            pass
            str_Y_Axis_df_1_Colname = str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe 
    
            ''' Subset the DF to get the correct value '''
            str_Stats_Category = 'FJV'
            df_2_Subset = df_2[(df_2[str_Col_Name_Exp1__Exp1__str_Stats_Category]==str_Stats_Category)]
            float_PCrit = 0.05
            df_2_Subset = df_2_Subset[(df_2[str_Col_Name_Exp1__Ne2_floatPCrit]==float_PCrit)]
    
            ''' if a horizontal plot line - Get the value for plotting and display '''        
            float_Total_Ne2_r_Sqrd_LDNe = df_2_Subset[str_Y_Axis_df_1_Colname].iloc[0]
            float_Total_Ne2_r_Sqrd_LDNe_LM = df_2_Subset[str_Y_Axis_df_1_Colname].iloc[0]
            y_Value = Decimal(float_Total_Ne2_r_Sqrd_LDNe)
            
            if y_Value > 0 and y_Value < int_Y_Axis_Max:
                ''' if a horizontal plot line - Get the X and Y values to actually plot ''' 
                list_X_Values = df_1[str_X_Axis_df_1_Colname].tolist()
                int_X_Values_Count = len(list_X_Values)
                int_X_Values_To_Remove = int(int_X_Values_Count*0.5) #Remove 20% of the X-Axis values
                list_X_Values = list_X_Values[:-1*int_X_Values_To_Remove] #Cut the list down to size
                list_Y_Values = [y_Value for x in list_X_Values] #Create the Y-Values list
        
                ''' Produce the plot line '''
                pyplot_Line_9, = matplotlib__pyplot.plot(list_X_Values, list_Y_Values, linestyle='-.', linewidth=int_Plot_Line_Width, figure=pyplot_Fig)
                
                ''' Add the description to the end of the line '''
                x_Pos = len(list_X_Values) + 0.25
                y_Pos = y_Value
                str_Line_Ending_Text = 'LDNe ' + str_Stats_Category + ' (PC ' + str(float_PCrit) + '; ' + str(int(round(y_Value))) + ')'                             
        
                if bool_Plot_Theme__Dark_Blue_1:
                    str_Font_Colour = 'white'
                    pyplot_Fig_FontProperties = pyplot_Fig_FontProperties__Base.copy()
                pass
                
                if bool_Plot_Theme__Default:                             
                    matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text)
                else:
                    matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text, color=str_Font_Colour, fontproperties=pyplot_Fig_FontProperties)
                pass
            pass
        pass    
        '''
        -----------------------------
        Plot Line - LDNe Full Embryo PCrit 0
        -----------------------------
        '''  
        bool_FEM_PC0 = True
        if bool_FEM_PC0:             
            with SSResults(self.obj_SSParams) as obj_Results:
                #str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category
                str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category_Code
                str_Col_Name_Exp1__Exp1__str_Stats_Category = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__str_Stats_Category)
    
                str_Key_Exp1__Ne2_floatPCrit = globalsSS.Colnames_Ne2_Output.static_Str_Colname_Ne2_floatPCrit
                str_Col_Name_Exp1__Ne2_floatPCrit = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__Ne2_floatPCrit)
    
                str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe = globalsSS.Colnames_Ne2_Aggregation.static_Str_Colname_float_Total_Ne2_r_Sqrd_LDNe
                str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe)
            pass
            str_Y_Axis_df_1_Colname = str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe 
    
            ''' Subset the DF to get the correct value '''
            str_Stats_Category = 'FEM'
            df_2_Subset = df_2[(df_2[str_Col_Name_Exp1__Exp1__str_Stats_Category]==str_Stats_Category)]
            float_PCrit = 0
            df_2_Subset = df_2_Subset[(df_2[str_Col_Name_Exp1__Ne2_floatPCrit]==float_PCrit)]
    
            ''' if a horizontal plot line - Get the value for plotting and display '''
            float_Total_Ne2_r_Sqrd_LDNe = df_2_Subset[str_Y_Axis_df_1_Colname].iloc[0]
            y_Value = Decimal(float_Total_Ne2_r_Sqrd_LDNe)
            
            if y_Value > 0 and y_Value < int_Y_Axis_Max:
                ''' if a horizontal plot line - Get the X and Y values to actually plot ''' 
                list_X_Values = df_1[str_X_Axis_df_1_Colname].tolist()
                int_X_Values_Count = len(list_X_Values)
                int_X_Values_To_Remove = int(int_X_Values_Count*0.9) #Remove 20% of the X-Axis values
                list_X_Values = list_X_Values[:-1*int_X_Values_To_Remove] #Cut the list down to size
                list_Y_Values = [y_Value for x in list_X_Values] #Create the Y-Values list
        
                ''' Produce the plot line '''
                pyplot_Line_10, = matplotlib__pyplot.plot(list_X_Values, list_Y_Values, linestyle='-.', linewidth=int_Plot_Line_Width, figure=pyplot_Fig)
                
                ''' Add the description to the end of the line '''
                x_Pos = len(list_X_Values) + 0.25
                y_Pos = y_Value
                str_Line_Ending_Text = 'LDNe ' + str_Stats_Category + ' (PC ' + str(float_PCrit) + '; ' + str(int(round(y_Value))) + ')'                             
        
                if bool_Plot_Theme__Dark_Blue_1:
                    str_Font_Colour = 'white'
                    pyplot_Fig_FontProperties = pyplot_Fig_FontProperties__Base.copy()
                pass
                
                if bool_Plot_Theme__Default:                             
                    matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text)
                else:
                    matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text, color=str_Font_Colour, fontproperties=pyplot_Fig_FontProperties)
                pass
            pass
        pass
        '''
        -----------------------------
        Plot Line - LDNe Full Embryo PCrit 0.05
        -----------------------------
        '''  
        bool_FEM_PC0_05 = False
        if bool_FEM_PC0_05:             
            with SSResults(self.obj_SSParams) as obj_Results:
                #str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category
                str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category_Code
                str_Col_Name_Exp1__Exp1__str_Stats_Category = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__str_Stats_Category)
    
                str_Key_Exp1__Ne2_floatPCrit = globalsSS.Colnames_Ne2_Output.static_Str_Colname_Ne2_floatPCrit
                str_Col_Name_Exp1__Ne2_floatPCrit = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__Ne2_floatPCrit)
    
                str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe = globalsSS.Colnames_Ne2_Aggregation.static_Str_Colname_float_Total_Ne2_r_Sqrd_LDNe
                str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe)
            pass
            str_Y_Axis_df_1_Colname = str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe 
    
            ''' Subset the DF to get the correct value '''
            str_Stats_Category = 'FEM'
            df_2_Subset = df_2[(df_2[str_Col_Name_Exp1__Exp1__str_Stats_Category]==str_Stats_Category)]
            float_PCrit = 0.05
            df_2_Subset = df_2_Subset[(df_2[str_Col_Name_Exp1__Ne2_floatPCrit]==float_PCrit)]
    
            ''' if a horizontal plot line - Get the value for plotting and display '''
            float_Total_Ne2_r_Sqrd_LDNe = df_2_Subset[str_Y_Axis_df_1_Colname].iloc[0]
            y_Value = Decimal(float_Total_Ne2_r_Sqrd_LDNe)
            
            if y_Value > 0 and y_Value < int_Y_Axis_Max:
                ''' if a horizontal plot line - Get the X and Y values to actually plot ''' 
                list_X_Values = df_1[str_X_Axis_df_1_Colname].tolist()
                int_X_Values_Count = len(list_X_Values)
                int_X_Values_To_Remove = int(int_X_Values_Count*0.9) #Remove 20% of the X-Axis values
                list_X_Values = list_X_Values[:-1*int_X_Values_To_Remove] #Cut the list down to size
                list_Y_Values = [y_Value for x in list_X_Values] #Create the Y-Values list
        
                ''' Produce the plot line '''
                pyplot_Line_10, = matplotlib__pyplot.plot(list_X_Values, list_Y_Values, linestyle='-.', linewidth=int_Plot_Line_Width, figure=pyplot_Fig)
                
                ''' Add the description to the end of the line '''
                x_Pos = len(list_X_Values) + 0.25
                y_Pos = y_Value
                str_Line_Ending_Text = 'LDNe ' + str_Stats_Category + ' (PC ' + str(float_PCrit) + '; ' + str(int(round(y_Value))) + ')'                             
        
                if bool_Plot_Theme__Dark_Blue_1:
                    str_Font_Colour = 'white'
                    pyplot_Fig_FontProperties = pyplot_Fig_FontProperties__Base.copy()
                pass
                
                if bool_Plot_Theme__Default:                             
                    matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text)
                else:
                    matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text, color=str_Font_Colour, fontproperties=pyplot_Fig_FontProperties)
                pass
            pass
        pass
        '''
        -----------------------------
        Plot Line - LDNe Large Embryo PCrit 0
        -----------------------------
        '''  
        bool_LEM_PC0 = False
        if bool_LEM_PC0:             
            with SSResults(self.obj_SSParams) as obj_Results:
                #str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category
                str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category_Code
                str_Col_Name_Exp1__Exp1__str_Stats_Category = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__str_Stats_Category)
    
                str_Key_Exp1__Ne2_floatPCrit = globalsSS.Colnames_Ne2_Output.static_Str_Colname_Ne2_floatPCrit
                str_Col_Name_Exp1__Ne2_floatPCrit = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__Ne2_floatPCrit)
    
                str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe = globalsSS.Colnames_Ne2_Aggregation.static_Str_Colname_float_Total_Ne2_r_Sqrd_LDNe
                str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe)
            pass
            str_Y_Axis_df_1_Colname = str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe 
    
            ''' Subset the DF to get the correct value '''
            str_Stats_Category = 'LEM'
            df_2_Subset = df_2[(df_2[str_Col_Name_Exp1__Exp1__str_Stats_Category]==str_Stats_Category)]
            float_PCrit = 0
            df_2_Subset = df_2_Subset[(df_2[str_Col_Name_Exp1__Ne2_floatPCrit]==float_PCrit)]
    
            ''' if a horizontal plot line - Get the value for plotting and display '''
            float_Total_Ne2_r_Sqrd_LDNe = df_2_Subset[str_Y_Axis_df_1_Colname].iloc[0]
            y_Value = Decimal(float_Total_Ne2_r_Sqrd_LDNe)
            
            if y_Value > 0 and y_Value < int_Y_Axis_Max:
                ''' if a horizontal plot line - Get the X and Y values to actually plot ''' 
                list_X_Values = df_1[str_X_Axis_df_1_Colname].tolist()
                int_X_Values_Count = len(list_X_Values)
                int_X_Values_To_Remove = int(int_X_Values_Count*0.9) #Remove 20% of the X-Axis values
                list_X_Values = list_X_Values[:-1*int_X_Values_To_Remove] #Cut the list down to size
                list_Y_Values = [y_Value for x in list_X_Values] #Create the Y-Values list
        
                ''' Produce the plot line '''
                pyplot_Line_10, = matplotlib__pyplot.plot(list_X_Values, list_Y_Values, linestyle='-.', linewidth=int_Plot_Line_Width, figure=pyplot_Fig)
                
                ''' Add the description to the end of the line '''
                x_Pos = len(list_X_Values) + 0.25
                y_Pos = y_Value
                str_Line_Ending_Text = 'LDNe ' + str_Stats_Category + ' (PC ' + str(float_PCrit) + '; ' + str(int(round(y_Value))) + ')'                             
        
                if bool_Plot_Theme__Dark_Blue_1:
                    str_Font_Colour = 'white'
                    pyplot_Fig_FontProperties = pyplot_Fig_FontProperties__Base.copy()
                pass
                
                if bool_Plot_Theme__Default:                             
                    matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text)
                else:
                    matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text, color=str_Font_Colour, fontproperties=pyplot_Fig_FontProperties)
                pass
            pass
        pass
        '''
        -----------------------------
        Plot Line - LDNe Large Embryo PCrit 0.05
        -----------------------------
        '''  
        bool_LEM_PC0_05 = False
        if bool_LEM_PC0_05:             
            with SSResults(self.obj_SSParams) as obj_Results:
                #str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category
                str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category_Code
                str_Col_Name_Exp1__Exp1__str_Stats_Category = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__str_Stats_Category)
    
                str_Key_Exp1__Ne2_floatPCrit = globalsSS.Colnames_Ne2_Output.static_Str_Colname_Ne2_floatPCrit
                str_Col_Name_Exp1__Ne2_floatPCrit = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__Ne2_floatPCrit)
    
                str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe = globalsSS.Colnames_Ne2_Aggregation.static_Str_Colname_float_Total_Ne2_r_Sqrd_LDNe
                str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe)
            pass
            str_Y_Axis_df_1_Colname = str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe 
    
            ''' Subset the DF to get the correct value '''
            str_Stats_Category = 'LEM'
            df_2_Subset = df_2[(df_2[str_Col_Name_Exp1__Exp1__str_Stats_Category]==str_Stats_Category)]
            float_PCrit_Match = 0.05
            float_PCrit = 0.05
            df_2_Subset = df_2_Subset[(df_2[str_Col_Name_Exp1__Ne2_floatPCrit]==float_PCrit_Match)]
    
            ''' if a horizontal plot line - Get the value for plotting and display '''
            float_Total_Ne2_r_Sqrd_LDNe = df_2_Subset[str_Y_Axis_df_1_Colname].iloc[0]
            y_Value = Decimal(float_Total_Ne2_r_Sqrd_LDNe)
            
            if y_Value > 0 and y_Value < int_Y_Axis_Max:
                ''' if a horizontal plot line - Get the X and Y values to actually plot ''' 
                list_X_Values = df_1[str_X_Axis_df_1_Colname].tolist()
                int_X_Values_Count = len(list_X_Values)
                int_X_Values_To_Remove = int(int_X_Values_Count*0.9) #Remove 20% of the X-Axis values
                list_X_Values = list_X_Values[:-1*int_X_Values_To_Remove] #Cut the list down to size
                list_Y_Values = [y_Value for x in list_X_Values] #Create the Y-Values list
        
                ''' Produce the plot line '''
                pyplot_Line_10, = matplotlib__pyplot.plot(list_X_Values, list_Y_Values, linestyle='-.', linewidth=int_Plot_Line_Width, figure=pyplot_Fig)
                
                ''' Add the description to the end of the line '''
                x_Pos = len(list_X_Values) + 0.25
                y_Pos = y_Value
                str_Line_Ending_Text = 'LDNe ' + str_Stats_Category + ' (PC ' + str(float_PCrit) + '; ' + str(int(round(y_Value))) + ')'                             
        
                if bool_Plot_Theme__Dark_Blue_1:
                    str_Font_Colour = 'white'
                    pyplot_Fig_FontProperties = pyplot_Fig_FontProperties__Base.copy()
                pass
                
                if bool_Plot_Theme__Default:                             
                    matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text)
                else:
                    matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text, color=str_Font_Colour, fontproperties=pyplot_Fig_FontProperties)
                pass
            pass
        pass
        '''
        -----------------------------
        Plot Line - LDNe Small Mature PCrit 0
        -----------------------------
        '''
        bool_SMT_PC0 = False
        if bool_SMT_PC0:        
            with SSResults(self.obj_SSParams) as obj_Results:
                #str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category
                str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category_Code
                str_Col_Name_Exp1__Exp1__str_Stats_Category = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__str_Stats_Category)
    
                str_Key_Exp1__Ne2_floatPCrit = globalsSS.Colnames_Ne2_Output.static_Str_Colname_Ne2_floatPCrit
                str_Col_Name_Exp1__Ne2_floatPCrit = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__Ne2_floatPCrit)
    
                str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe = globalsSS.Colnames_Ne2_Aggregation.static_Str_Colname_float_Total_Ne2_r_Sqrd_LDNe
                str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe)
            pass
            str_Y_Axis_df_1_Colname = str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe 
    
            ''' Subset the DF to get the correct value '''
            str_Stats_Category = 'SMT'
            df_2_Subset = df_2[(df_2[str_Col_Name_Exp1__Exp1__str_Stats_Category]==str_Stats_Category)]
            float_PCrit = 0
            df_2_Subset = df_2_Subset[(df_2[str_Col_Name_Exp1__Ne2_floatPCrit]==float_PCrit)]
    
            ''' if a horizontal plot line - Get the value for plotting and display '''        
            float_Total_Ne2_r_Sqrd_LDNe = df_2_Subset[str_Y_Axis_df_1_Colname].iloc[0]
            float_Total_Ne2_r_Sqrd_LDNe_LM = df_2_Subset[str_Y_Axis_df_1_Colname].iloc[0]
            y_Value = Decimal(float_Total_Ne2_r_Sqrd_LDNe)
            
            if y_Value > 0 and y_Value < int_Y_Axis_Max:
                ''' if a horizontal plot line - Get the X and Y values to actually plot ''' 
                list_X_Values = df_1[str_X_Axis_df_1_Colname].tolist()
                int_X_Values_Count = len(list_X_Values)
                int_X_Values_To_Remove = int(int_X_Values_Count*0.5) #Remove 20% of the X-Axis values
                list_X_Values = list_X_Values[:-1*int_X_Values_To_Remove] #Cut the list down to size
                list_Y_Values = [y_Value for x in list_X_Values] #Create the Y-Values list
        
                ''' Produce the plot line '''
                pyplot_Line_9, = matplotlib__pyplot.plot(list_X_Values, list_Y_Values, linestyle='-.', linewidth=int_Plot_Line_Width, figure=pyplot_Fig)
                
                ''' Add the description to the end of the line '''
                x_Pos = len(list_X_Values) + 0.25
                y_Pos = y_Value
                str_Line_Ending_Text = 'LDNe ' + str_Stats_Category + ' (PC ' + str(float_PCrit) + '; ' + str(int(round(y_Value))) + ')'                             
        
                if bool_Plot_Theme__Dark_Blue_1:
                    str_Font_Colour = 'white'
                    pyplot_Fig_FontProperties = pyplot_Fig_FontProperties__Base.copy()
                pass
                
                if bool_Plot_Theme__Default:                             
                    matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text)
                else:
                    matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text, color=str_Font_Colour, fontproperties=pyplot_Fig_FontProperties)
                pass
            pass
        pass
        '''
        -----------------------------
        Plot Line - LDNe Small Embryo PCrit 0
        -----------------------------
        ''' 
        bool_SEM_PC0 = False
        if bool_SEM_PC0:        

            with SSResults(self.obj_SSParams) as obj_Results:
                #str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category
                str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category_Code
                str_Col_Name_Exp1__Exp1__str_Stats_Category = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__str_Stats_Category)
    
                str_Key_Exp1__Ne2_floatPCrit = globalsSS.Colnames_Ne2_Output.static_Str_Colname_Ne2_floatPCrit
                str_Col_Name_Exp1__Ne2_floatPCrit = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__Ne2_floatPCrit)
    
                str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe = globalsSS.Colnames_Ne2_Aggregation.static_Str_Colname_float_Total_Ne2_r_Sqrd_LDNe
                str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe)
            pass
            str_Y_Axis_df_1_Colname = str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe 
    
            ''' Subset the DF to get the correct value '''
            str_Stats_Category = 'SEM'
            df_2_Subset = df_2[(df_2[str_Col_Name_Exp1__Exp1__str_Stats_Category]==str_Stats_Category)]
            float_PCrit = 0
            df_2_Subset = df_2_Subset[(df_2[str_Col_Name_Exp1__Ne2_floatPCrit]==float_PCrit)]
    
            ''' if a horizontal plot line - Get the value for plotting and display '''
            float_Total_Ne2_r_Sqrd_LDNe = df_2_Subset[str_Y_Axis_df_1_Colname].iloc[0]
            y_Value = Decimal(float_Total_Ne2_r_Sqrd_LDNe)
            
            if y_Value > 0 and y_Value < int_Y_Axis_Max:
                ''' if a horizontal plot line - Get the X and Y values to actually plot ''' 
                list_X_Values = df_1[str_X_Axis_df_1_Colname].tolist()
                int_X_Values_Count = len(list_X_Values)
                int_X_Values_To_Remove = int(int_X_Values_Count*0.9) #Remove 20% of the X-Axis values
                list_X_Values = list_X_Values[:-1*int_X_Values_To_Remove] #Cut the list down to size
                list_Y_Values = [y_Value for x in list_X_Values] #Create the Y-Values list
        
                ''' Produce the plot line '''
                pyplot_Line_10, = matplotlib__pyplot.plot(list_X_Values, list_Y_Values, linestyle='-.', linewidth=int_Plot_Line_Width, figure=pyplot_Fig)
                
                ''' Add the description to the end of the line '''
                x_Pos = len(list_X_Values) + 0.25
                y_Pos = y_Value
                str_Line_Ending_Text = 'LDNe ' + str_Stats_Category + ' (PC ' + str(float_PCrit) + '; ' + str(int(round(y_Value))) + ')'                             
        
                if bool_Plot_Theme__Dark_Blue_1:
                    str_Font_Colour = 'white'
                    pyplot_Fig_FontProperties = pyplot_Fig_FontProperties__Base.copy()
                pass
                
                if bool_Plot_Theme__Default:                             
                    matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text)
                else:
                    matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text, color=str_Font_Colour, fontproperties=pyplot_Fig_FontProperties)
                pass
            pass
        pass
    

        '''
        -----------------------------
        Plot Line - LDNe Fishing Catch Proportions - Pcrit 0
        -----------------------------
        ''' 
        bool_CCP_PC0 = False
        if bool_CCP_PC0:        
            str_Stats_Category = 'CCP'
            
            with SSResults(self.obj_SSParams) as obj_Results:
                #str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category
                str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category_Code
                str_Col_Name_Exp1__Exp1__str_Stats_Category = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__str_Stats_Category)
    
                str_Key_Exp1__Ne2_floatPCrit = globalsSS.Colnames_Ne2_Output.static_Str_Colname_Ne2_floatPCrit
                str_Col_Name_Exp1__Ne2_floatPCrit = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__Ne2_floatPCrit)
    
                str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe = globalsSS.Colnames_Ne2_Aggregation.static_Str_Colname_float_Total_Ne2_r_Sqrd_LDNe
                str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe)
            pass
            str_Y_Axis_df_1_Colname = str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe 
    
            ''' Subset the DF to get the correct value '''
            
            df_2_Subset = df_2[(df_2[str_Col_Name_Exp1__Exp1__str_Stats_Category]==str_Stats_Category)]
            float_PCrit = 0
            df_2_Subset = df_2_Subset[(df_2[str_Col_Name_Exp1__Ne2_floatPCrit]==float_PCrit)]
    
            ''' if a horizontal plot line - Get the value for plotting and display '''
            float_Total_Ne2_r_Sqrd_LDNe = df_2_Subset[str_Y_Axis_df_1_Colname].iloc[0]
            y_Value = Decimal(float_Total_Ne2_r_Sqrd_LDNe)
            
            if y_Value > 0 and y_Value < int_Y_Axis_Max:
                ''' if a horizontal plot line - Get the X and Y values to actually plot ''' 
                list_X_Values = df_1[str_X_Axis_df_1_Colname].tolist()
                int_X_Values_Count = len(list_X_Values)
                int_X_Values_To_Remove = int(int_X_Values_Count*0.9) #Remove 20% of the X-Axis values
                list_X_Values = list_X_Values[:-1*int_X_Values_To_Remove] #Cut the list down to size
                list_Y_Values = [y_Value for x in list_X_Values] #Create the Y-Values list
        
                ''' Produce the plot line '''
                pyplot_Line_10, = matplotlib__pyplot.plot(list_X_Values, list_Y_Values, linestyle='-.', linewidth=int_Plot_Line_Width, figure=pyplot_Fig)
                
                ''' Add the description to the end of the line '''
                x_Pos = len(list_X_Values) + 0.25
                y_Pos = y_Value
                str_Line_Ending_Text = 'LDNe ' + str_Stats_Category + ' (PC ' + str(float_PCrit) + '; ' + str(int(round(y_Value))) + ')'                             
        
                if bool_Plot_Theme__Dark_Blue_1:
                    str_Font_Colour = 'white'
                    pyplot_Fig_FontProperties = pyplot_Fig_FontProperties__Base.copy()
                pass
                
                if bool_Plot_Theme__Default:                             
                    matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text)
                else:
                    matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text, color=str_Font_Colour, fontproperties=pyplot_Fig_FontProperties)
                pass
            pass
        pass
        '''
        -----------------------------
        Plot Line - LDNe Fishing Catch Absolute Numbers - Pcrit 0
        -----------------------------
        ''' 
        bool_CCA_PC0 = False
        if bool_CCA_PC0:        
            str_Stats_Category = 'CCA'
            
            with SSResults(self.obj_SSParams) as obj_Results:
                #str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category
                str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category_Code
                str_Col_Name_Exp1__Exp1__str_Stats_Category = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__str_Stats_Category)
    
                str_Key_Exp1__Ne2_floatPCrit = globalsSS.Colnames_Ne2_Output.static_Str_Colname_Ne2_floatPCrit
                str_Col_Name_Exp1__Ne2_floatPCrit = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__Ne2_floatPCrit)
    
                str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe = globalsSS.Colnames_Ne2_Aggregation.static_Str_Colname_float_Total_Ne2_r_Sqrd_LDNe
                str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe)
            pass
            str_Y_Axis_df_1_Colname = str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe 
    
            ''' Subset the DF to get the correct value '''
            
            df_2_Subset = df_2[(df_2[str_Col_Name_Exp1__Exp1__str_Stats_Category]==str_Stats_Category)]
            float_PCrit = 0
            df_2_Subset = df_2_Subset[(df_2[str_Col_Name_Exp1__Ne2_floatPCrit]==float_PCrit)]
    
            ''' if a horizontal plot line - Get the value for plotting and display '''
            float_Total_Ne2_r_Sqrd_LDNe = df_2_Subset[str_Y_Axis_df_1_Colname].iloc[0]
            y_Value = Decimal(float_Total_Ne2_r_Sqrd_LDNe)
            
            if y_Value > 0 and y_Value < int_Y_Axis_Max:
                ''' if a horizontal plot line - Get the X and Y values to actually plot ''' 
                list_X_Values = df_1[str_X_Axis_df_1_Colname].tolist()
                int_X_Values_Count = len(list_X_Values)
                int_X_Values_To_Remove = int(int_X_Values_Count*0.9) #Remove 20% of the X-Axis values
                list_X_Values = list_X_Values[:-1*int_X_Values_To_Remove] #Cut the list down to size
                list_Y_Values = [y_Value for x in list_X_Values] #Create the Y-Values list
        
                ''' Produce the plot line '''
                pyplot_Line_10, = matplotlib__pyplot.plot(list_X_Values, list_Y_Values, linestyle='-.', linewidth=int_Plot_Line_Width, figure=pyplot_Fig)
                
                ''' Add the description to the end of the line '''
                x_Pos = len(list_X_Values) + 0.25
                y_Pos = y_Value
                str_Line_Ending_Text = 'LDNe ' + str_Stats_Category + ' (PC ' + str(float_PCrit) + '; ' + str(int(round(y_Value))) + ')'                             
        
                if bool_Plot_Theme__Dark_Blue_1:
                    str_Font_Colour = 'white'
                    pyplot_Fig_FontProperties = pyplot_Fig_FontProperties__Base.copy()
                pass
                
                if bool_Plot_Theme__Default:                             
                    matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text)
                else:
                    matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text, color=str_Font_Colour, fontproperties=pyplot_Fig_FontProperties)
                pass
            pass
        pass
        '''
        -----------------------------
        Plot Line - LDNe Fishing Catch SCALED Absolute Numbers - Pcrit 0
        -----------------------------
        ''' 
        bool_CAS_PC0_0 = False
        if bool_CAS_PC0_0:        
            str_Stats_Category = 'CAS'
            
            with SSResults(self.obj_SSParams) as obj_Results:
                #str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category
                str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category_Code
                str_Col_Name_Exp1__Exp1__str_Stats_Category = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__str_Stats_Category)
    
                str_Key_Exp1__Ne2_floatPCrit = globalsSS.Colnames_Ne2_Output.static_Str_Colname_Ne2_floatPCrit
                str_Col_Name_Exp1__Ne2_floatPCrit = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__Ne2_floatPCrit)
    
                str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe = globalsSS.Colnames_Ne2_Aggregation.static_Str_Colname_float_Total_Ne2_r_Sqrd_LDNe
                str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe)
            pass
            str_Y_Axis_df_1_Colname = str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe 
    
            ''' Subset the DF to get the correct value '''
            
            df_2_Subset = df_2[(df_2[str_Col_Name_Exp1__Exp1__str_Stats_Category]==str_Stats_Category)]
            float_PCrit_Match = 0
            float_PCrit = 0
            df_2_Subset = df_2_Subset[(df_2[str_Col_Name_Exp1__Ne2_floatPCrit]==float_PCrit_Match)]
    
            ''' if a horizontal plot line - Get the value for plotting and display '''
            float_Total_Ne2_r_Sqrd_LDNe = df_2_Subset[str_Y_Axis_df_1_Colname].iloc[0]
            y_Value = Decimal(float_Total_Ne2_r_Sqrd_LDNe)
            
            if y_Value > 0 and y_Value < int_Y_Axis_Max:
                ''' if a horizontal plot line - Get the X and Y values to actually plot ''' 
                list_X_Values = df_1[str_X_Axis_df_1_Colname].tolist()
                int_X_Values_Count = len(list_X_Values)
                int_X_Values_To_Remove = int(int_X_Values_Count*0.9) #Remove 20% of the X-Axis values
                list_X_Values = list_X_Values[:-1*int_X_Values_To_Remove] #Cut the list down to size
                list_Y_Values = [y_Value for x in list_X_Values] #Create the Y-Values list
        
                ''' Produce the plot line '''
                pyplot_Line_10, = matplotlib__pyplot.plot(list_X_Values, list_Y_Values, linestyle='-.', linewidth=int_Plot_Line_Width, figure=pyplot_Fig)
                
                ''' Add the description to the end of the line '''
                x_Pos = len(list_X_Values) + 0.25
                y_Pos = y_Value
                str_Line_Ending_Text = 'LDNe ' + str_Stats_Category + ' (PC ' + str(float_PCrit) + '; ' + str(int(round(y_Value))) + ')'                             
        
                if bool_Plot_Theme__Dark_Blue_1:
                    str_Font_Colour = 'white'
                    pyplot_Fig_FontProperties = pyplot_Fig_FontProperties__Base.copy()
                pass
                
                if bool_Plot_Theme__Default:                             
                    matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text)
                else:
                    matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text, color=str_Font_Colour, fontproperties=pyplot_Fig_FontProperties)
                pass
            pass
        pass
        '''
        -----------------------------
        Plot Line - LDNe Fishing Catch SCALED Absolute Numbers - Pcrit 0.05
        -----------------------------
        ''' 
        bool_CAS_PC0_05 = True
        if bool_CAS_PC0_05:        
            str_Stats_Category = 'CAS'
            
            with SSResults(self.obj_SSParams) as obj_Results:
                #str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category
                str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category_Code
                str_Col_Name_Exp1__Exp1__str_Stats_Category = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__str_Stats_Category)
    
                str_Key_Exp1__Ne2_floatPCrit = globalsSS.Colnames_Ne2_Output.static_Str_Colname_Ne2_floatPCrit
                str_Col_Name_Exp1__Ne2_floatPCrit = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__Ne2_floatPCrit)
    
                str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe = globalsSS.Colnames_Ne2_Aggregation.static_Str_Colname_float_Total_Ne2_r_Sqrd_LDNe
                str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe)
            pass
            str_Y_Axis_df_1_Colname = str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe 
    
            ''' Subset the DF to get the correct value '''
            
            df_2_Subset = df_2[(df_2[str_Col_Name_Exp1__Exp1__str_Stats_Category]==str_Stats_Category)]
            float_PCrit_Match = 0.05
            float_PCrit = 0.05
            df_2_Subset = df_2_Subset[(df_2[str_Col_Name_Exp1__Ne2_floatPCrit]==float_PCrit_Match)]
    
            ''' if a horizontal plot line - Get the value for plotting and display '''
            float_Total_Ne2_r_Sqrd_LDNe = df_2_Subset[str_Y_Axis_df_1_Colname].iloc[0]
            y_Value = Decimal(float_Total_Ne2_r_Sqrd_LDNe)
            
            if y_Value > 0 and y_Value < int_Y_Axis_Max:
                ''' if a horizontal plot line - Get the X and Y values to actually plot ''' 
                list_X_Values = df_1[str_X_Axis_df_1_Colname].tolist()
                int_X_Values_Count = len(list_X_Values)
                int_X_Values_To_Remove = int(int_X_Values_Count*0.9) #Remove 20% of the X-Axis values
                list_X_Values = list_X_Values[:-1*int_X_Values_To_Remove] #Cut the list down to size
                list_Y_Values = [y_Value for x in list_X_Values] #Create the Y-Values list
        
                ''' Produce the plot line '''
                pyplot_Line_10, = matplotlib__pyplot.plot(list_X_Values, list_Y_Values, linestyle='-.', linewidth=int_Plot_Line_Width, figure=pyplot_Fig)
                
                ''' Add the description to the end of the line '''
                x_Pos = len(list_X_Values) + 0.25
                y_Pos = y_Value
                str_Line_Ending_Text = 'LDNe ' + str_Stats_Category + ' (PC ' + str(float_PCrit) + '; ' + str(int(round(y_Value))) + ')'                             
        
                if bool_Plot_Theme__Dark_Blue_1:
                    str_Font_Colour = 'white'
                    pyplot_Fig_FontProperties = pyplot_Fig_FontProperties__Base.copy()
                pass
                
                if bool_Plot_Theme__Default:                             
                    matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text)
                else:
                    matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text, color=str_Font_Colour, fontproperties=pyplot_Fig_FontProperties)
                pass
            pass
        pass
        '''
        -----------------------------
        Format Plot
        -----------------------------
        '''


        '''
        ~~~~~~~~~~~~~~~~~~
        Grid and ticks details
        ~~~~~~~~~~~~~~~~~~
        '''
        matplotlib__pyplot.grid(True, figure=pyplot_Fig)
        

        
        '''
        ~~~~~~~~~~~~~~~~~~
        Legend details
        ~~~~~~~~~~~~~~~~~~
        '''
        float_Bbox_X_Pos = 0.80
        float_Bbox_Y_Pos = 0.35
        pyplot_Fig_Legend = pyplot_Fig.legend([
                           pyplot_Line_1
                           , pyplot_Line_2
                           , pyplot_Line_3
#                            , pyplot_Line_4
#                            , pyplot_Line_5
#                            , pyplot_Line_6
#                            , pyplot_Line_7
                           ]
                          ,[
                            'Nx - Survivors per year'
                            ,'Bx - Offspring per year'
                            ,'Dx - Deaths per year'
#                             ,'Adults - Nc (' + str(int(str_Adult_Pop_Size__Nc)) + ')'
#                             ,'Ne Demo (' + str(int(float_NeDemo)) + ')'
#                             ,'Nb Demo (' + str(int(float_NbDemo)) + ')'
#                             ,'LDNe Full (PC ' + str(float_PCrit) + '; ' + str(int(float_Total_Ne2_r_Sqrd_LDNe)) + ')'
                            ]
                          ,bbox_to_anchor=(float_Bbox_X_Pos, float_Bbox_Y_Pos)
                          ,frameon = 1)
        
        
        '''
        ~~~~~~~~~~~~~~~~~~
        Label details
        ~~~~~~~~~~~~~~~~~~
        '''
        ''' Get colnames in order to get data from df_1 '''
        with SSResults(self.obj_SSParams) as obj_Results:
            str_Key_AgeNe__Sim_Pop_Size = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Pop_Size
            str_Col_Name_AgeNe__Sim_Pop_Size = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Sim_Pop_Size)
#             str_Key_AgeNe__Nc_Adult_Pop_Size = globalsSS.Colnames_AgeNe_Results.static_str_Colname_Nx_Nc_Adults
#             str_Col_Name_AgeNe__Nc_Adult_Pop_Size = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Nc_Adult_Pop_Size)
            str_Key_AgeNe__Sim_Replicates = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Sim_Replicates
            str_Col_Name_AgeNe__Sim_Replicates = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Sim_Replicates)
            str_Key_AgeNe__Loci = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Loci
            str_Col_Name_AgeNe__Loci = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Loci)
            str_Key_Sim__Run_User_Defined_Folder = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Run_User_Defined_Folder
            str_Col_Name_Sim__Run_User_Defined_Folder = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Sim__Run_User_Defined_Folder)
        pass

        ''' Get values from df_1 '''
        str_Mating_Count_Replicate_Total = str(int_Mating_Count_Replicate_Total)
        int_Pop_Size__N = df_1[str_Col_Name_AgeNe__Sim_Pop_Size].iloc[0]
        str_Pop_Size__N = str(int_Pop_Size__N)
        str_Adult_Pop_Size__N = str(int_AgeNe__Adult_Pop_Size__Nx_Adults__N)
        str_Adult_Pop_Size__Nc = str(int_AgeNe__Adult_Pop_Size__Nx_Adults__Nc)
        str_Replicates = str(df_1[str_Col_Name_AgeNe__Sim_Replicates].iloc[0])
        str_Loci = str(df_1[str_Col_Name_AgeNe__Loci].iloc[0])
        str_Sim__Run_User_Defined_Folder = str(df_1[str_Col_Name_Sim__Run_User_Defined_Folder].iloc[0])

        str_Fig_Title = str('Population Demographic Profile by Mating, AgeNe Ne & Nb Demo vs LDNe from Embryo & Mature Cohorts')

        ''' Title spacing '''
        matplotlib__pyplot.subplots_adjust(top=0.87)
        ''' Font details '''          
        int_Plot_SupTitle_Size = 18
        if bool_Plot_Theme__Dark_Blue_1:
            str_Font_Colour = 'white'
        else:
            str_Font_Colour = 'blue'


        matplotlib__pyplot.suptitle(str_Fig_Title, fontsize=int_Plot_SupTitle_Size, color=str_Font_Colour, figure=pyplot_Fig)

        ''' Font details '''          
#         int_Plot_SupTitle_Size = 16
#         str_Font_Colour = 'blue'
                
        str_Plot_Title = str(
                             'Mating: ' + str_Mating_Count_Replicate_Total + ', '
                            + 'N :' + str_Pop_Size__N + ', '
                            #+ 'Nc: ' + str_Adult_Pop_Size__Nc + ', '
                            + 'Loci: ' + str_Loci + ', '
                            + 'Reps: ' + str_Replicates
                            + '\n'
                            + 'Run: ' + str_Sim__Run_User_Defined_Folder)

        ''' Font details '''          
        int_Plot_Title_Size = 16
        if bool_Plot_Theme__Dark_Blue_1:
            str_Font_Colour = 'grey'
        else:
            str_Font_Colour = 'blue'
                
        matplotlib__pyplot.title(str_Plot_Title, fontsize=int_Plot_Title_Size, color=str_Font_Colour, figure=pyplot_Fig)

        ''' Font details '''          
        int_PLot_Y_Label_Size = 16
        if bool_Plot_Theme__Dark_Blue_1:
            str_Font_Colour = 'white'
        else:
            str_Font_Colour = 'blue'
                                        
        matplotlib__pyplot.xlabel('Age Cohort (years)', fontsize=int_PLot_Y_Label_Size, color=str_Font_Colour, figure=pyplot_Fig)
        matplotlib__pyplot.ylabel('Individuals', fontsize=int_PLot_Y_Label_Size, color=str_Font_Colour, figure=pyplot_Fig)
        
        
        '''
        ~~~~~~~~~~~~~~~~~~
        Label Unique Identifier details
        ~~~~~~~~~~~~~~~~~~
        '''
        ''' Get colnames in order to get data from df_1 '''
        with SSResults(self.obj_SSParams) as obj_Results:
            str_Key_Sim__Run_User_Defined_Folder = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Run_User_Defined_Folder
            str_Col_Name_Sim__Run_User_Defined_Folder = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Sim__Run_User_Defined_Folder)
            str_Key_Sim__Unique_Run_ID = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Unique_Run_ID
            str_Col_Name_Sim__Unique_Run_ID = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Sim__Unique_Run_ID)

        pass

        
        ''' Get values from df_1 '''
        str_Sim__Unique_Run_ID = str(df_1[str_Col_Name_Sim__Unique_Run_ID].iloc[0])
        
        str_UID_Text = str(str_Sim__Unique_Run_ID)

        ''' Font details '''          
        int_Font_Size = 6
        str_Font_Colour = 'darkgrey'
        
        ''' Add figure text '''
        #matplotlib__pyplot.figtext(.75,.99,str_UID_Text, fontsize=int_Font_Size, color=str_Font_Colour, figure=pyplot_Fig)
        matplotlib__pyplot.figtext(.70,.005,str_UID_Text, fontsize=int_Font_Size, color=str_Font_Colour, figure=pyplot_Fig)

        str_Sim__Run_User_Defined_Folder = str(df_1[str_Col_Name_Sim__Run_User_Defined_Folder].iloc[0])

        str_RUDF_Text = str(str_Sim__Run_User_Defined_Folder)

        ''' Font details '''          
        int_Font_Size = 6
        str_Font_Colour = 'darkgrey'
        
        ''' Add figure text '''
        #matplotlib__pyplot.figtext(.75,.91,str_RUDF_Text, fontsize=int_Font_Size, color=str_Font_Colour, figure=pyplot_Fig)
        matplotlib__pyplot.figtext(.70,.015,str_RUDF_Text, fontsize=int_Font_Size, color=str_Font_Colour, figure=pyplot_Fig)

        '''
        ~~~~~~~~~~~~~~~~~~
        Axis details
        ~~~~~~~~~~~~~~~~~~
        '''
#         [xmin, xmax, ymin, ymax] = matplotlib__pyplot.axis()
#         matplotlib__pyplot.xlim(1, xmax)
        
        #int_Y_Axis_Max = int_Pop_Size__N / 2
        
        #dec_Total_Ne2_r_Sqrd_LDNe_LM = Decimal(float_Total_Ne2_r_Sqrd_LDNe_LM)
        #int_Y_Axis_Max = int(math.ceil(dec_Total_Ne2_r_Sqrd_LDNe_LM / 1000)) * 1000
        
        #int_Y_Axis_Max = int(math.ceil(int_Pop_Size__N * 0.1 * 2.1 / 500)) * 500
#         df_Temp = pandas.DataFrame()
#         df_Temp["Max"] = df_2[[str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe]].max(axis=1)
#         int_Y_Axis_Max = df_Temp["Max"].max(axis=0)
#         int_Y_Axis_Max = int(math.ceil(int_Y_Axis_Max / 500)) * 500
        
        ''' int_Y_Axis_Max passed into function '''
        matplotlib__pyplot.ylim(0, int_Y_Axis_Max)
        
        '''
        ~~~~~~~~~~~~~~~~~~
        Colours - Axis & Tick
        ~~~~~~~~~~~~~~~~~~
        '''

        if bool_Plot_Theme__Dark_Blue_1:
            str_Colour = 'darkblue'

        else:
            str_Colour = 'white'
        pass        
        #ax1 = pyplot_Fig.add_subplot(111, axisbg=str_Colour)
        ax1 = pyplot_Fig.add_subplot(111)
        
#         ax.plot(range(10))
#         ax.set_xlabel('X-axis')
#         ax.set_ylabel('Y-axis')
        
#         ax.spines['bottom'].set_color('red')
#         ax.spines['top'].set_color('red')
#         ax.xaxis.label.set_color('red')
        if bool_Plot_Theme__Dark_Blue_1:
            int_Tick_Label_Size = 16
            str_X_Axis_Tick_Labels_Colour = 'white'
            str_Y_Axis_Tick_Labels_Colour = 'white'
            str_X_Axis_Tick_Major_Colour = 'white'
            str_X_Axis_Tick_Minor_Colour = 'grey'
            str_Y_Axis_Tick_Major_Colour = 'white'
            str_Y_Axis_Tick_Minor_Colour = 'grey'
        pass
    
        if bool_Plot_Theme__Default == False:
            ax1.tick_params(axis='x', colors=str_X_Axis_Tick_Labels_Colour)
            ax1.tick_params(axis='y', colors=str_Y_Axis_Tick_Labels_Colour)
    
            # We change the fontsize of minor ticks label 
            ax1.tick_params(axis='x', which='major', labelsize=int_Tick_Label_Size, color=str_X_Axis_Tick_Major_Colour)
            ax1.tick_params(axis='x', which='minor', labelsize=int_Tick_Label_Size, color=str_X_Axis_Tick_Minor_Colour)
            ax1.tick_params(axis='y', which='major', labelsize=int_Tick_Label_Size, color=str_Y_Axis_Tick_Major_Colour)
            ax1.tick_params(axis='y', which='minor', labelsize=int_Tick_Label_Size, color=str_Y_Axis_Tick_Minor_Colour) 
        pass 
    
        ''' Axis tick pointing direction '''
        ax1.tick_params(axis='x', direction='out')
        ax1.tick_params(axis='y', direction='out')
        
        ''' Specify axis ticks to be plotted '''
        ax1.xaxis.tick_bottom() 
        ax1.yaxis.tick_left() 
             
#         for ax, color in zip([ax1], ['white']):
#             matplotlib__pyplot.setp(ax.spines.values(), color=color)
#             matplotlib__pyplot.setp([ax.get_xticklines(), ax1.get_yticklines()], color=color)        
#         
#         ax1.axhline(linewidth=4, color="w") # inc. width of x-axis and color it
#         ax1.axvline(linewidth=4, color="w") # inc. width of y-axis and color it

        if bool_Plot_Theme__Dark_Blue_1:
            str_Colour = 'white'

        else:
            str_Colour = 'black'
        pass
        for axis in ['top','bottom','left','right']:
            ax1.spines[axis].set_linewidth(4)
            ax1.spines[axis].set_color(str_Colour)
 
        ax1.spines['top'].set_visible(False)
        ax1.spines['right'].set_visible(False)           

        ''' Legend '''
        
        
        pyplot_Fig_Legend_Frame = pyplot_Fig_Legend.get_frame()
        
        pyplot_Fig_Legend_Frame.set_color('white')
        ''' Legend frame background '''
        #pyplot_Fig_Legend_Frame.set_facecolor('green')
        ''' Legend frame border '''
        #pyplot_Fig_Legend_Frame.set_edgecolor('red')
        
        ''' Turn off frame outline '''
        pyplot_Fig_Legend_Frame.set_linewidth(0)
        
        # set the alpha value of the legend: it will be translucent
        pyplot_Fig_Legend_Frame.set_alpha(0.5)                                                    
        

        #ax1.grid(True, figure=pyplot_Fig)

        bool_Format_Ticks = False
        if bool_Format_Ticks:
            nparray_Major_Ticks_X = ax1.xaxis.get_majorticklocs()      
            if len(nparray_Major_Ticks_X) > 1: 
                float_Major_Ticks_X_First = nparray_Major_Ticks_X[0]
                float_Major_Ticks_X_Last = nparray_Major_Ticks_X[-1]
                float_Major_Ticks_X_Interval = 5
                nparray_Major_Ticks_X = numpy.arange(float_Major_Ticks_X_First, float_Major_Ticks_X_Last, float_Major_Ticks_X_Interval)                                              
                ax1.set_xticks(nparray_Major_Ticks_X) 
            nparray_Minor_Ticks_X = ax1.xaxis.get_minorticklocs()
            if len(nparray_Minor_Ticks_X) > 1:     
                float_Minor_Ticks_X_First = nparray_Minor_Ticks_X[0]
                float_Minor_Ticks_X_Last = nparray_Minor_Ticks_X[-1]
                float_Minor_Ticks_X_Interval = 1
                nparray_Minor_Ticks_X = numpy.arange(float_Minor_Ticks_X_First, float_Minor_Ticks_X_Last, float_Minor_Ticks_X_Interval)                                              
                ax1.set_xticks(nparray_Minor_Ticks_X, minor=True)
            
            nparray_Major_Ticks_Y = ax1.yaxis.get_majorticklocs()      
            if len(nparray_Major_Ticks_Y) > 1: 
                float_Major_Ticks_Y_First = nparray_Major_Ticks_Y[0]
                float_Major_Ticks_Y_Last = nparray_Major_Ticks_Y[-1]
                float_Major_Ticks_Y_Interval = 50
                nparray_Major_Ticks_Y = numpy.arange(float_Major_Ticks_Y_First, float_Major_Ticks_Y_Last, float_Major_Ticks_Y_Interval)                                              
                ax1.set_yticks(nparray_Major_Ticks_Y)  
                
            nparray_Minor_Ticks_Y = ax1.yaxis.get_minorticklocs()      
            if len(nparray_Minor_Ticks_Y) > 1: 
                float_Minor_Ticks_Y_First = nparray_Minor_Ticks_Y[0]
                float_Minor_Ticks_Y_Last = nparray_Minor_Ticks_Y[-1]
                float_Minor_Ticks_Y_Interval = 1
                nparray_Minor_Ticks_Y = numpy.arange(float_Minor_Ticks_Y_First, float_Minor_Ticks_Y_Last, float_Minor_Ticks_Y_Interval)                                              
                ax1.set_yticks(nparray_Minor_Ticks_Y, minor=True)                                  
            
                                                                  
            ax1.grid(which='both')                                                   
        pass
                                                  
        
        # and a corresponding grid                                                       
        
        ax1.grid(which='both')                                                            
        
        # or if you want differnet settings for the grids:                               
        ax1.grid(which='minor', alpha=0.2)                                                
        ax1.grid(which='major', alpha=0.5)   
        
              
        #DEBUG_ON
        ''' Required to change background of INTERACTIVE WINDOW only'''
        if bool_Plot_Theme__Dark_Blue_1:
            pyplot_Fig_Patch = pyplot_Fig.patch
            pyplot_Fig_Patch.set_facecolor('darkblue') # works with plt.show().  
        pass
        #matplotlib__pyplot.show()
        #DEBUG_OFF
        
                                
        return pyplot_Fig

    def func__Plot_ALL_EXPERIMENT_Parent_Offspring_Ne_2_PS_And_AgeNe_Sim_Demographic_Population_Profile__Plot(self, list_DFs, int_Mating_Count_Replicate_Total, int_Y_Axis_Max, dict_Fig_Copy):
        
        self.obj_Log_Default.info('Creating figure')
        
        bool_Plot_Theme__Default = False
        bool_Plot_Theme__Dark_Blue_1 = False
        
        if dict_Fig_Copy['ColourScheme'] == 'Dark_Blue':
            bool_Plot_Theme__Dark_Blue_1 = True
        else:
            bool_Plot_Theme__Default = True
        pass
    
#         if bool_Plot_Theme__Dark_Blue_1:
#             bool_Plot_Theme__Default = False
#         else:
#             bool_Plot_Theme__Default = True
#         pass
            
        int_Plot_Line_Width = 4
        '''
        -----------------------------
        Specify DFs
        -----------------------------
        '''
        df_1 = list_DFs[0]
        df_2 = list_DFs[1]
        
        
        '''
        -----------------------------
        Specify X-Axis
        -----------------------------
        '''
        with SSResults(self.obj_SSParams) as obj_Results:
            str_Key_AgeNe__Age = globalsSS.Colnames_AgeNe_Results.static_str_Colname_Age
            str_Col_Name_AgeNe__Age = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Age)
        pass
        str_X_Axis_df_1_Colname = str_Col_Name_AgeNe__Age
        list_Primary_X_Axis = df_1[str_X_Axis_df_1_Colname].tolist()

        '''
        -----------------------------
        Specify Y-Axis Max
        -----------------------------
        '''
        with SSResults(self.obj_SSParams) as obj_Results:
            str_Key_AgeNe__Nx = globalsSS.Colnames_AgeNe_Results.static_str_Colname_Nx
            str_Col_Name_AgeNe__Nx = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Nx)
        pass
  
        
        ''' Get Y-Axis Max '''
        with SSResults(self.obj_SSParams) as obj_Results:
#             str_Key_AgeNe__Ne_Demo = globalsSS.Colnames_AgeNe_Results.static_str_Colname_NeDemo
#             str_Col_Name_AgeNe__Ne_Demo = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Ne_Demo)
#             str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe = globalsSS.Colnames_Ne2_Aggregation.static_Str_Colname_float_Total_Ne2_r_Sqrd_LDNe
#             str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe)
            df_Temp = pandas.DataFrame()
            df_Temp_1 = pandas.DataFrame()
            df_Temp_2 = pandas.DataFrame()
            df_Temp_1["Max"] = df_1[[str_Col_Name_AgeNe__Nx]].max(axis=1)
#             df_Temp_2["Max"] = df_2[[str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe]].max(axis=1)
#             df_Temp = pandas.concat([df_Temp_1,df_Temp_2], ignore_index=True)
            df_Temp = df_Temp_1
            int_Y_Axis_Max = df_Temp["Max"].max(axis=0)
            int_Y_Axis_Max = int(math.ceil(int_Y_Axis_Max / 500)) * 1000
            del df_Temp_1     
            del df_Temp_2     
            del df_Temp     
        pass         
            
        '''
        -----------------------------
        Create figure
        -----------------------------
        '''
        # default scale is 1 in your original case, scales with other cases:
        int_X_Axis_Length = len(df_1[str_X_Axis_df_1_Colname])
        int_Width_Scale = int_X_Axis_Length/10 
        int_Width_Control = 6  #6 - About perfect for PowerPoint
        int_Height_Control = 8 #8 - About perfect for PowerPoint
        figsize = (int_Width_Control*int_Width_Scale,int_Height_Control) # fig size in inches (width,height)
        pyplot_Fig = matplotlib__pyplot.figure(figsize = figsize)       
        
        #pyplot_Fig = matplotlib__pyplot.figure()
        ax1 = pyplot_Fig.add_subplot(111)
        
        
        bool_1st_Order = False
        if bool_1st_Order:
            '''
            -----------------------------
            Plot Line - Nx - Survivors per age cohort
            -----------------------------
            ''' 
            with SSResults(self.obj_SSParams) as obj_Results:
                str_Key_AgeNe__Nx = globalsSS.Colnames_AgeNe_Results.static_str_Colname_Nx
                str_Col_Name_AgeNe__Nx = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Nx)
            pass
            str_Y_Axis_df_1_Colname = str_Col_Name_AgeNe__Nx 
            list_Nx = df_1[str_Y_Axis_df_1_Colname].tolist()
            
            str_Plot_Line_Color = 'blue'
            #pyplot_Line_1, = matplotlib__pyplot.plot(df_1[str_X_Axis_df_1_Colname], df_1[str_Y_Axis_df_1_Colname], color=str_Plot_Line_Color, linewidth=int_Plot_Line_Width, figure=pyplot_Fig)
            pyplot_Line_1 = matplotlib__pyplot.bar(df_1[str_X_Axis_df_1_Colname], df_1[str_Y_Axis_df_1_Colname], color=str_Plot_Line_Color, figure=pyplot_Fig)
            #pyplot_Line_1 = matplotlib__pyplot.bar(df_1[str_X_Axis_df_1_Colname], df_1[str_Y_Axis_df_1_Colname])
    
            #DEBUG_ON
            #matplotlib__pyplot.show()
            #DEBUG_OFF
            '''
            -----------------------------
            Plot Line - Bx - Offspring per age cohort
            -----------------------------
            '''         
            with SSResults(self.obj_SSParams) as obj_Results:
                str_Key_AgeNe__Bx = globalsSS.Colnames_AgeNe_Results.static_str_Colname_Bx
                str_Col_Name_AgeNe__Bx = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Bx)
            pass
            str_Y_Axis_df_1_Colname = str_Col_Name_AgeNe__Bx 
            list_Bx = df_1[str_Y_Axis_df_1_Colname].tolist()
            
            if bool_Plot_Theme__Dark_Blue_1:
                str_Plot_Line_Color = 'white'
            else:
                str_Plot_Line_Color = 'grey'
            pass
            #pyplot_Line_2, = matplotlib__pyplot.plot(df_1[str_X_Axis_df_1_Colname], df_1[str_Y_Axis_df_1_Colname], color=str_Plot_Line_Color, linewidth=int_Plot_Line_Width, figure=pyplot_Fig)
            pyplot_Line_2 = matplotlib__pyplot.bar(df_1[str_X_Axis_df_1_Colname], list_Bx, bottom=list_Nx, color=str_Plot_Line_Color, figure=pyplot_Fig)
    
            #DEBUG_ON
            #matplotlib__pyplot.show()
            #DEBUG_OFF
            
            '''
            -----------------------------
            Plot Line - Dx - Deaths per age cohort
            -----------------------------
            '''         
            with SSResults(self.obj_SSParams) as obj_Results:
                str_Key_AgeNe__Dx = globalsSS.Colnames_AgeNe_Results.static_str_Colname_Dx
                str_Col_Name_AgeNe__Dx = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Dx)
            pass
            str_Y_Axis_df_1_Colname = str_Col_Name_AgeNe__Dx 
            list_Dx = df_1[str_Y_Axis_df_1_Colname].tolist()
            
            str_Plot_Line_Color = 'red'
            #pyplot_Line_3, = matplotlib__pyplot.plot(df_1[str_X_Axis_df_1_Colname], df_1[str_Y_Axis_df_1_Colname], color=str_Plot_Line_Color, linewidth=int_Plot_Line_Width, figure=pyplot_Fig)
            pyplot_Line_3 = matplotlib__pyplot.bar(df_1[str_X_Axis_df_1_Colname], list_Dx, bottom=[list_Nx[j] +list_Bx[j] for j in range(len(list_Nx))], color=str_Plot_Line_Color, figure=pyplot_Fig)
            #DEBUG_ON
            matplotlib__pyplot.show()
            #DEBUG_OFF
        pass
        
        bool_2nd_Order = True
        if bool_2nd_Order:
            
            with SSResults(self.obj_SSParams) as obj_Results:
                ''' Nx Y-axis'''
                str_Key_AgeNe__Nx = globalsSS.Colnames_AgeNe_Results.static_str_Colname_Nx
                str_Col_Name_AgeNe__Nx = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Nx)
                str_Y_Axis_df_1_Colname = str_Col_Name_AgeNe__Nx 
                list_Nx = df_1[str_Y_Axis_df_1_Colname].tolist()                
                ''' Bx Y-axis '''
                str_Key_AgeNe__Bx = globalsSS.Colnames_AgeNe_Results.static_str_Colname_Bx
                str_Col_Name_AgeNe__Bx = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Bx)
                str_Y_Axis_df_1_Colname = str_Col_Name_AgeNe__Bx 
                list_Bx = df_1[str_Y_Axis_df_1_Colname].tolist()
                ''' Dx Y-axis '''
                str_Key_AgeNe__Dx = globalsSS.Colnames_AgeNe_Results.static_str_Colname_Dx
                str_Col_Name_AgeNe__Dx = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Dx)
                str_Y_Axis_df_1_Colname = str_Col_Name_AgeNe__Dx 
                list_Dx = df_1[str_Y_Axis_df_1_Colname].tolist()
            pass
            ''' Adjust Nx to achive the correct total after births & deaths '''
            list_Nx_Adjusted = []
            list_Nx_Adjusted = [list_Nx[x] - list_Bx[x] - list_Dx[x] for x in range(len(list_Nx))]
            
            list_Stack_Order = []
            list_Stack_Order.append([list_Dx[j] +list_Bx[j] for j in range(len(list_Nx_Adjusted))])
            list_Stack_Order.append(list_Dx)
            list_Stack_Order.append(list_Nx_Adjusted)
            
            '''
            -----------------------------
            Plot Line - Dx - Deaths per age cohort
            -----------------------------
            '''         
            str_Plot_Line_Color = 'red'
            #pyplot_Line_3, = matplotlib__pyplot.plot(df_1[str_X_Axis_df_1_Colname], df_1[str_Y_Axis_df_1_Colname], color=str_Plot_Line_Color, linewidth=int_Plot_Line_Width, figure=pyplot_Fig)
            pyplot_Line_3 = matplotlib__pyplot.bar(list_Primary_X_Axis, list_Dx, align='center', color=str_Plot_Line_Color, figure=pyplot_Fig)
            #DEBUG_ON
            #matplotlib__pyplot.show()
            #DEBUG_OFF                        
            '''
            -----------------------------
            Plot Line - Bx - Offspring per age cohort
            -----------------------------
            '''         
            if bool_Plot_Theme__Dark_Blue_1:
                str_Plot_Line_Color = 'white'
            else:
                str_Plot_Line_Color = 'grey'
            pass
            #pyplot_Line_2, = matplotlib__pyplot.plot(df_1[str_X_Axis_df_1_Colname], df_1[str_Y_Axis_df_1_Colname], color=str_Plot_Line_Color, linewidth=int_Plot_Line_Width, figure=pyplot_Fig)
            pyplot_Line_2 = matplotlib__pyplot.bar(list_Primary_X_Axis, list_Bx, bottom=list_Stack_Order[1], align='center', color=str_Plot_Line_Color, figure=pyplot_Fig)
            #DEBUG_ON
            #matplotlib__pyplot.show()
            #DEBUG_OFF    
            '''
            -----------------------------
            Plot Line - Nx - Survivors per age cohort
            -----------------------------
            ''' 
            str_Plot_Line_Color = 'blue'
            #pyplot_Line_1, = matplotlib__pyplot.plot(df_1[str_X_Axis_df_1_Colname], df_1[str_Y_Axis_df_1_Colname], color=str_Plot_Line_Color, linewidth=int_Plot_Line_Width, figure=pyplot_Fig)
            pyplot_Line_1 = matplotlib__pyplot.bar(list_Primary_X_Axis, list_Nx_Adjusted, bottom=list_Stack_Order[0], align='center', color=str_Plot_Line_Color, figure=pyplot_Fig)
            #DEBUG_ON
            #matplotlib__pyplot.show()
            #DEBUG_OFF
        pass
    
        '''
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        Add inset subplot
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        '''
        left, bottom, width, height = [0.45, 0.45, 0.45, 0.45]
        ax_inset_1 = pyplot_Fig.add_axes([left, bottom, width, height])
        
        '''
        -----------------------------
        Plot Line - AgeNe N - ALL Adults 
        -----------------------------
        '''
        '''
        Font properties for subsequent text
        '''
        
        with SSResults(self.obj_SSParams) as obj_Results:
            str_Key_AgeNe__Adult_Pop_Size__Nx_N_Adults = globalsSS.Colnames_AgeNe_Results.static_str_Colname_Nx_N_Adults
            str_Col_Name_AgeNe__Adult_Pop_Size__Nx_N_Adults = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Adult_Pop_Size__Nx_N_Adults)

        pass
        str_Y_Axis_df_1_Colname = str_Col_Name_AgeNe__Adult_Pop_Size__Nx_N_Adults 

        ''' if a horizontal plot line - Get the value for plotting and display '''
        int_AgeNe__Adult_Pop_Size__Nx_Adults__N = int(df_1[str_Y_Axis_df_1_Colname].iloc[0])
            
        bool_Plot_N = True 
        if bool_Plot_N:                
            
            pyplot_Fig_FontProperties__Base = matplotlib__fontmanager.FontProperties(size=16)
            

            y_Value = int_AgeNe__Adult_Pop_Size__Nx_Adults__N
            
#             ''' if a horizontal plot line - Get the X and Y values to actually plot ''' 
#             list_X_Values = df_1[str_X_Axis_df_1_Colname].tolist()
#             int_X_Values_Count = len(list_X_Values)
#             int_X_Values_To_Remove = int(int_X_Values_Count*0.8) #Remove a % of the X-Axis values
#             list_X_Values = list_X_Values[:-1*int_X_Values_To_Remove] #Cut the list down to size
#             list_Y_Values = [y_Value for x in list_X_Values] #Create the Y-Values list
            ''' if a horizontal plot line - Get the X and Y values to actually plot ''' 
            #numpy_array_X_Values = numpy.arange(2)
            list_X_Values = [1,2, 3, 4]
            list_X_Value_Labels = ['N', 'Nc', 'AgeNe', 'AgeNb']
            width = 0.35
            #int_X_Values_Count = len(list_X_Values)
            list_Y_Values = [5000, 2798, 2721, 2620] #Create the Y-Values list
    
            ''' Produce the plot line '''
            #pyplot_Line_4, = ax_inset_1.plot(list_X_Values, list_Y_Values, linestyle='-', linewidth=int_Plot_Line_Width, figure=pyplot_Fig)
            pyplot_Line_4 = ax_inset_1.bar(list_X_Values, list_Y_Values, align='center', figure=pyplot_Fig)
            list_X_LDNe_Values = [5,6,7]
            list_Y_LDNe_Values = [1050, 215,0]
            list_X_LDNE_Value_Labels = ['LDNeFMT','LDNeFEM']
            list_Error_Bars_CIs = [numpy.array([30,10,0]),numpy.array([150,130,0])]
            pyplot_Line_4 = ax_inset_1.errorbar(list_X_LDNe_Values, list_Y_LDNe_Values, linestyle='-', marker='o', yerr=list_Error_Bars_CIs, figure=pyplot_Fig)
            
            list_Horiz_Align = ['right', 'center', 'left']
            #int_Label_Rotation = 0
            
            ax_inset_1.set_xticks(list_X_Values+list_X_LDNe_Values)
            ax_inset_1.set_xticklabels(list_X_Value_Labels+list_X_LDNE_Value_Labels , ha=list_Horiz_Align[1])            
            #ax_inset_1.set_xticks(list_X_Values, list_X_Value_Labels)
            
            ax_inset_1.set_ylim([0,6000])
            
            #DEBUG_ON
            matplotlib__pyplot.show()
            #DEBUG_OFF
                        
#             ''' Add the description to the end of the line '''
#             x_Pos = len(list_X_Values) + 0.25
#             y_Pos = y_Value
#             str_Line_Ending_Text = 'AgeNe N Adults (' + str(int(y_Value)) + ')'        
#             
#             if bool_Plot_Theme__Dark_Blue_1:
#                 str_Font_Colour = 'white'
#                 pyplot_Fig_FontProperties = pyplot_Fig_FontProperties__Base.copy()
#             pass
#             
#             if bool_Plot_Theme__Default:                             
#                 matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text)
#             else:
#                 matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text, color=str_Font_Colour, fontproperties=pyplot_Fig_FontProperties)
#             pass
        pass
    
        '''
        -----------------------------
        Plot Line - AgeNe Nc - Fertile Adults 
        -----------------------------
        '''
        with SSResults(self.obj_SSParams) as obj_Results:
            str_Key_AgeNe__Adult_Pop_Size__Nx_Nc_Adults = globalsSS.Colnames_AgeNe_Results.static_str_Colname_Nx_Nc_Adults
            str_Col_Name_AgeNe__Adult_Pop_Size__Nx_Nc_Adults = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Adult_Pop_Size__Nx_Nc_Adults)

        pass
        str_Y_Axis_df_1_Colname = str_Col_Name_AgeNe__Adult_Pop_Size__Nx_Nc_Adults 

        ''' if a horizontal plot line - Get the value for plotting and display '''
        int_AgeNe__Adult_Pop_Size__Nx_Adults__Nc = int(df_1[str_Y_Axis_df_1_Colname].iloc[0])
            
        bool_Plot_Nc = False 
        if bool_Plot_Nc:                
            
            '''
            Font properties for subsequent text
            '''
            pyplot_Fig_FontProperties__Base = matplotlib__fontmanager.FontProperties(size=16)
                     

            y_Value = int_AgeNe__Adult_Pop_Size__Nx_Adults__Nc
            
            ''' if a horizontal plot line - Get the X and Y values to actually plot ''' 
            list_X_Values = df_1[str_X_Axis_df_1_Colname].tolist()
            int_X_Values_Count = len(list_X_Values)
            int_X_Values_To_Remove = int(int_X_Values_Count*0.8) #Remove a % of the X-Axis values
            list_X_Values = list_X_Values[:-1*int_X_Values_To_Remove] #Cut the list down to size
            list_Y_Values = [y_Value for x in list_X_Values] #Create the Y-Values list
    
            ''' Produce the plot line '''
            pyplot_Line_4, = matplotlib__pyplot.plot(list_X_Values, list_Y_Values, linestyle='-', linewidth=int_Plot_Line_Width, figure=pyplot_Fig)
            
            ''' Add the description to the end of the line '''
            x_Pos = len(list_X_Values) + 0.25
            y_Pos = y_Value
            str_Line_Ending_Text = 'AgeNe Nc (' + str(int(y_Value)) + ')'        
            
            if bool_Plot_Theme__Dark_Blue_1:
                str_Font_Colour = 'white'
                pyplot_Fig_FontProperties = pyplot_Fig_FontProperties__Base.copy()
            pass
            
            if bool_Plot_Theme__Default:                             
                matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text)
            else:
                matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text, color=str_Font_Colour, fontproperties=pyplot_Fig_FontProperties)
            pass
        pass
        '''
        -----------------------------
        Plot Line - AgeNe Ne Demographic
        -----------------------------
        '''
        bool_Plot_AgeNe = False 
        if bool_Plot_AgeNe:                
                        
            with SSResults(self.obj_SSParams) as obj_Results:
                str_Key_AgeNe__Ne_Demo = globalsSS.Colnames_AgeNe_Results.static_str_Colname_NeDemo
                str_Col_Name_AgeNe__Ne_Demo = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Ne_Demo)
            pass
            str_Y_Axis_df_1_Colname = str_Col_Name_AgeNe__Ne_Demo 
    
    #         pyplot_Line_5, = matplotlib__pyplot.plot(df_1[str_X_Axis_df_1_Colname], df_1[str_Y_Axis_df_1_Colname], linestyle='--', linewidth=2, figure=pyplot_Fig)
    #         
    #         ''' Get the value for display '''
    #         float_NeDemo = df_1[str_Y_Axis_df_1_Colname].iloc[0]
    # 
    #         ''' Add the description to the end of the line '''
    #         str_Line_Ending_Text = 'AgeNe Ne Demo (' + str(int(float_NeDemo)) + ')'                             
    #         matplotlib__pyplot.text(df_1[str_X_Axis_df_1_Colname].iloc[-1], df_1[str_Y_Axis_df_1_Colname].iloc[-1], str_Line_Ending_Text)
    
            ''' if a horizontal plot line - Get the value for plotting and display '''
            float_NeDemo = df_1[str_Y_Axis_df_1_Colname].iloc[0]
            y_Value = Decimal(float_NeDemo)
            
            ''' if a horizontal plot line - Get the X and Y values to actually plot ''' 
            list_X_Values = df_1[str_X_Axis_df_1_Colname].tolist()
            int_X_Values_Count = len(list_X_Values)
            int_X_Values_To_Remove = int(int_X_Values_Count*0.2) #Remove 20% of the X-Axis values
            list_X_Values = list_X_Values[:-1*int_X_Values_To_Remove] #Cut the list down to size
            list_Y_Values = [y_Value for x in list_X_Values] #Create the Y-Values list
    
            ''' Produce the plot line '''
            pyplot_Line_5, = matplotlib__pyplot.plot(list_X_Values, list_Y_Values, linestyle='-.', linewidth=int_Plot_Line_Width, figure=pyplot_Fig)
            
            ''' Add the description to the end of the line '''
            x_Pos = len(list_X_Values) + 0.25
            y_Pos = y_Value
            str_Line_Ending_Text = 'AgeNe Ne Demo (' + str(int(round(y_Value))) + ')'                             
    
            if bool_Plot_Theme__Dark_Blue_1:
                str_Font_Colour = 'white'
                pyplot_Fig_FontProperties = pyplot_Fig_FontProperties__Base.copy()
            pass
            
            if bool_Plot_Theme__Default:                             
                matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text)
            else:
                matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text, color=str_Font_Colour, fontproperties=pyplot_Fig_FontProperties)
            pass
        pass
    
        '''
        -----------------------------
        Plot Line - AgeNe Nb Demographic
        -----------------------------
        '''         
        bool_Plot_AgeNb = False 
        if bool_Plot_AgeNb:                
            
            with SSResults(self.obj_SSParams) as obj_Results:
                str_Key_AgeNe__Nb_Demo = globalsSS.Colnames_AgeNe_Results.static_str_Colname_NbDemo
                str_Col_Name_AgeNe__Nb_Demo = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Nb_Demo)
            pass
            str_Y_Axis_df_1_Colname = str_Col_Name_AgeNe__Nb_Demo 
            
            ''' if a horizontal plot line - Get the value for plotting and display '''
            float_NbDemo = df_1[str_Y_Axis_df_1_Colname].iloc[0]
            y_Value = Decimal(float_NbDemo)
            
            ''' if a horizontal plot line - Get the X and Y values to actually plot ''' 
            list_X_Values = df_1[str_X_Axis_df_1_Colname].tolist()
            int_X_Values_Count = len(list_X_Values)
            int_X_Values_To_Remove = int(int_X_Values_Count*0.2) #Remove 20% of the X-Axis values
            list_X_Values = list_X_Values[:-1*int_X_Values_To_Remove] #Cut the list down to size
            list_Y_Values = [y_Value for x in list_X_Values] #Create the Y-Values list
    
            ''' Produce the plot line '''
            pyplot_Line_6, = matplotlib__pyplot.plot(list_X_Values, list_Y_Values, linestyle='-.', linewidth=int_Plot_Line_Width, figure=pyplot_Fig)
            
            ''' Add the description to the end of the line '''
            x_Pos = len(list_X_Values) + 0.25
            y_Pos = y_Value
            str_Line_Ending_Text = 'AgeNe Nb Demo (' + str(int(round(y_Value))) + ')'                             
    
            if bool_Plot_Theme__Dark_Blue_1:
                str_Font_Colour = 'white'
                pyplot_Fig_FontProperties = pyplot_Fig_FontProperties__Base.copy()
            pass
            
            if bool_Plot_Theme__Default:                             
                matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text)
            else:
                matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text, color=str_Font_Colour, fontproperties=pyplot_Fig_FontProperties)
            pass
        pass
        '''
        -----------------------------
        Plot Line - Exp1 Potential Parents
        -----------------------------
        '''      
        bool_Plot_N_PP = False 
        if bool_Plot_N_PP:                
                  
            with SSResults(self.obj_SSParams) as obj_Results:
                #str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category
                str_Key_Exp1__str_Stats_Category_Code = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category_Code
                str_Col_Name_Exp1__Exp1__str_Stats_Category = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__str_Stats_Category_Code)
    
                str_Key_Exp1__Potential_Parents_PP = globalsSS.Colnames_Parent_Offspring_Stats_METHOD_2.static_Str_Colname_Potential_Parents_PP
                str_Col_Name_Exp1__Potential_Parents_PP = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__Potential_Parents_PP)
    
            pass
            str_Y_Axis_df_1_Colname = str_Col_Name_Exp1__Potential_Parents_PP 
                
            ''' Subset the DF to get the correct value '''
            #str_Stats_Category = 'FUL'
            #df_2_Subset = df_2[(df_2[str_Col_Name_Exp1__Exp1__str_Stats_Category]==str_Stats_Category)]
            #float_PCrit = 0
            #df_2_Subset = df_2_Subset[(df_2[str_Col_Name_Exp1__Ne2_floatPCrit]==float_PCrit)]
    
            ''' if a horizontal plot line - Get the value for plotting and display '''        
            float_Exp1__Potential_Parents_PP = float(df_2[str_Y_Axis_df_1_Colname].iloc[0])
            y_Value = Decimal(float_Exp1__Potential_Parents_PP)
            
            ''' if a horizontal plot line - Get the X and Y values to actually plot ''' 
            list_X_Values = df_1[str_X_Axis_df_1_Colname].tolist()
            int_X_Values_Count = len(list_X_Values)
            int_X_Values_To_Remove = int(int_X_Values_Count*0.50) #Remove 20% of the X-Axis values
            list_X_Values = list_X_Values[:-1*int_X_Values_To_Remove] #Cut the list down to size
            list_Y_Values = [y_Value for x in list_X_Values] #Create the Y-Values list
    
            ''' Produce the plot line '''
            pyplot_Line_7, = matplotlib__pyplot.plot(list_X_Values, list_Y_Values, linestyle='-.', linewidth=int_Plot_Line_Width, figure=pyplot_Fig)
            
            ''' Add the description to the end of the line '''
            x_Pos = len(list_X_Values) + 0.25
            y_Pos = y_Value
            str_Line_Ending_Text = 'Exp1 NcPP ' + str(int(round(y_Value))) + ')'                             
    
            if bool_Plot_Theme__Dark_Blue_1:
                str_Font_Colour = 'white'
                pyplot_Fig_FontProperties = pyplot_Fig_FontProperties__Base.copy()
            pass
            
            if bool_Plot_Theme__Default:                             
                matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text)
            else:
                matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text, color=str_Font_Colour, fontproperties=pyplot_Fig_FontProperties)
            pass
        pass
        '''
        -----------------------------
        Plot Line - LDNe Full PCrit 0
        -----------------------------
        '''
        bool_FUL_PC0 = False
        if bool_FUL_PC0:   
            with SSResults(self.obj_SSParams) as obj_Results:
                #str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category
                str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category_Code
                str_Col_Name_Exp1__Exp1__str_Stats_Category = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__str_Stats_Category)
    
                str_Key_Exp1__Ne2_floatPCrit = globalsSS.Colnames_Ne2_Output.static_Str_Colname_Ne2_floatPCrit
                str_Col_Name_Exp1__Ne2_floatPCrit = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__Ne2_floatPCrit)
    
                str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe = globalsSS.Colnames_Ne2_Aggregation.static_Str_Colname_float_Total_Ne2_r_Sqrd_LDNe
                str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe)
            pass
            str_Y_Axis_df_1_Colname = str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe 
    
            ''' Subset the DF to get the correct value '''
            str_Stats_Category = 'FUL'
            df_2_Subset = df_2[(df_2[str_Col_Name_Exp1__Exp1__str_Stats_Category]==str_Stats_Category)]
            float_PCrit = 0
            df_2_Subset = df_2_Subset[(df_2[str_Col_Name_Exp1__Ne2_floatPCrit]==float_PCrit)]
    
            ''' if a horizontal plot line - Get the value for plotting and display '''        
            float_Total_Ne2_r_Sqrd_LDNe = df_2_Subset[str_Y_Axis_df_1_Colname].iloc[0]
            y_Value = Decimal(float_Total_Ne2_r_Sqrd_LDNe)
            
            if y_Value > 0 and y_Value < int_Y_Axis_Max:
                ''' if a horizontal plot line - Get the X and Y values to actually plot ''' 
                list_X_Values = df_1[str_X_Axis_df_1_Colname].tolist()
                int_X_Values_Count = len(list_X_Values)
                int_X_Values_To_Remove = int(int_X_Values_Count*0.1) #Remove 20% of the X-Axis values
                list_X_Values = list_X_Values[:-1*int_X_Values_To_Remove] #Cut the list down to size
                list_Y_Values = [y_Value for x in list_X_Values] #Create the Y-Values list
        
                ''' Produce the plot line '''
                pyplot_Line_8, = matplotlib__pyplot.plot(list_X_Values, list_Y_Values, linestyle='-.', linewidth=int_Plot_Line_Width, figure=pyplot_Fig)
                
                ''' Add the description to the end of the line '''
                x_Pos = len(list_X_Values) + 0.25
                y_Pos = y_Value
                str_Line_Ending_Text = 'LDNe ' + str_Stats_Category + ' (PC ' + str(float_PCrit) + '; ' + str(int(round(y_Value))) + ')'                             
        
                if bool_Plot_Theme__Dark_Blue_1:
                    str_Font_Colour = 'white'
                    pyplot_Fig_FontProperties = pyplot_Fig_FontProperties__Base.copy()
                pass
                
                if bool_Plot_Theme__Default:                             
                    matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text)
                else:
                    matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text, color=str_Font_Colour, fontproperties=pyplot_Fig_FontProperties)
                pass
            pass
        pass
        '''
        -----------------------------
        Plot Line - LDNe Full PCrit 0.05
        -----------------------------
        '''
        bool_FUL_PC0_05 = False
        if bool_FUL_PC0_05:      
            with SSResults(self.obj_SSParams) as obj_Results:
                #str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category
                str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category_Code
                str_Col_Name_Exp1__Exp1__str_Stats_Category = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__str_Stats_Category)
    
                str_Key_Exp1__Ne2_floatPCrit = globalsSS.Colnames_Ne2_Output.static_Str_Colname_Ne2_floatPCrit
                str_Col_Name_Exp1__Ne2_floatPCrit = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__Ne2_floatPCrit)
    
                str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe = globalsSS.Colnames_Ne2_Aggregation.static_Str_Colname_float_Total_Ne2_r_Sqrd_LDNe
                str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe)
            pass
            str_Y_Axis_df_1_Colname = str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe 
    
            ''' Subset the DF to get the correct value '''
            str_Stats_Category = 'FUL'
            df_2_Subset = df_2[(df_2[str_Col_Name_Exp1__Exp1__str_Stats_Category]==str_Stats_Category)]
            float_PCrit_Match = 0.05
            float_PCrit = 0.05
            df_2_Subset = df_2_Subset[(df_2[str_Col_Name_Exp1__Ne2_floatPCrit]==float_PCrit_Match)]
    
            ''' if a horizontal plot line - Get the value for plotting and display '''        
            float_Total_Ne2_r_Sqrd_LDNe = df_2_Subset[str_Y_Axis_df_1_Colname].iloc[0]
            y_Value = Decimal(float_Total_Ne2_r_Sqrd_LDNe)
            
            if y_Value > 0 and y_Value < int_Y_Axis_Max:
                ''' if a horizontal plot line - Get the X and Y values to actually plot ''' 
                list_X_Values = df_1[str_X_Axis_df_1_Colname].tolist()
                int_X_Values_Count = len(list_X_Values)
                int_X_Values_To_Remove = int(int_X_Values_Count*0.1) #Remove 20% of the X-Axis values
                list_X_Values = list_X_Values[:-1*int_X_Values_To_Remove] #Cut the list down to size
                list_Y_Values = [y_Value for x in list_X_Values] #Create the Y-Values list
        
                ''' Produce the plot line '''
                pyplot_Line_8, = matplotlib__pyplot.plot(list_X_Values, list_Y_Values, linestyle='-.', linewidth=int_Plot_Line_Width, figure=pyplot_Fig)
                
                ''' Add the description to the end of the line '''
                x_Pos = len(list_X_Values) + 0.25
                y_Pos = y_Value
                str_Line_Ending_Text = 'LDNe ' + str_Stats_Category + ' (PC ' + str(float_PCrit) + '; ' + str(int(round(y_Value))) + ')'                             
        
                if bool_Plot_Theme__Dark_Blue_1:
                    str_Font_Colour = 'white'
                    pyplot_Fig_FontProperties = pyplot_Fig_FontProperties__Base.copy()
                pass
                
                if bool_Plot_Theme__Default:                             
                    matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text)
                else:
                    matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text, color=str_Font_Colour, fontproperties=pyplot_Fig_FontProperties)
                pass
            pass
        pass
        '''
        -----------------------------
        Plot Line - LDNe Full Mature PCrit 0
        -----------------------------
        '''
        bool_FMT_PC0 = False
        if bool_FMT_PC0:               
            with SSResults(self.obj_SSParams) as obj_Results:
                #str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category
                str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category_Code
                str_Col_Name_Exp1__Exp1__str_Stats_Category = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__str_Stats_Category)
    
                str_Key_Exp1__Ne2_floatPCrit = globalsSS.Colnames_Ne2_Output.static_Str_Colname_Ne2_floatPCrit
                str_Col_Name_Exp1__Ne2_floatPCrit = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__Ne2_floatPCrit)
    
                str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe = globalsSS.Colnames_Ne2_Aggregation.static_Str_Colname_float_Total_Ne2_r_Sqrd_LDNe
                str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe)
            pass
            str_Y_Axis_df_1_Colname = str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe 
    
            ''' Subset the DF to get the correct value '''
            str_Stats_Category = 'FMT'
            df_2_Subset = df_2[(df_2[str_Col_Name_Exp1__Exp1__str_Stats_Category]==str_Stats_Category)]
            float_PCrit = 0
            df_2_Subset = df_2_Subset[(df_2[str_Col_Name_Exp1__Ne2_floatPCrit]==float_PCrit)]
    
            ''' if a horizontal plot line - Get the value for plotting and display '''        
            float_Total_Ne2_r_Sqrd_LDNe = df_2_Subset[str_Y_Axis_df_1_Colname].iloc[0]
            float_Total_Ne2_r_Sqrd_LDNe_LM = df_2_Subset[str_Y_Axis_df_1_Colname].iloc[0]
            y_Value = Decimal(float_Total_Ne2_r_Sqrd_LDNe)
            
            if y_Value > 0 and y_Value < int_Y_Axis_Max:
                ''' if a horizontal plot line - Get the X and Y values to actually plot ''' 
                list_X_Values = df_1[str_X_Axis_df_1_Colname].tolist()
                int_X_Values_Count = len(list_X_Values)
                int_X_Values_To_Remove = int(int_X_Values_Count*0.5) #Remove 20% of the X-Axis values
                list_X_Values = list_X_Values[:-1*int_X_Values_To_Remove] #Cut the list down to size
                list_Y_Values = [y_Value for x in list_X_Values] #Create the Y-Values list
        
                ''' Produce the plot line '''
                pyplot_Line_9, = matplotlib__pyplot.plot(list_X_Values, list_Y_Values, linestyle='-.', linewidth=int_Plot_Line_Width, figure=pyplot_Fig)
                
                ''' Add the description to the end of the line '''
                x_Pos = len(list_X_Values) + 0.25
                y_Pos = y_Value
                str_Line_Ending_Text = 'LDNe ' + str_Stats_Category + ' (PC ' + str(float_PCrit) + '; ' + str(int(round(y_Value))) + ')'                             
        
                if bool_Plot_Theme__Dark_Blue_1:
                    str_Font_Colour = 'white'
                    pyplot_Fig_FontProperties = pyplot_Fig_FontProperties__Base.copy()
                pass
                
                if bool_Plot_Theme__Default:                             
                    matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text)
                else:
                    matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text, color=str_Font_Colour, fontproperties=pyplot_Fig_FontProperties)
                pass
            pass
        pass
        '''
        -----------------------------
        Plot Line - LDNe Full Mature PCrit 0.05
        -----------------------------
        '''
        bool_FMT_PC0_05 = False
        if bool_FMT_PC0_05:               
            with SSResults(self.obj_SSParams) as obj_Results:
                #str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category
                str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category_Code
                str_Col_Name_Exp1__Exp1__str_Stats_Category = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__str_Stats_Category)
    
                str_Key_Exp1__Ne2_floatPCrit = globalsSS.Colnames_Ne2_Output.static_Str_Colname_Ne2_floatPCrit
                str_Col_Name_Exp1__Ne2_floatPCrit = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__Ne2_floatPCrit)
    
                str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe = globalsSS.Colnames_Ne2_Aggregation.static_Str_Colname_float_Total_Ne2_r_Sqrd_LDNe
                str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe)
            pass
            str_Y_Axis_df_1_Colname = str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe 
    
            ''' Subset the DF to get the correct value '''
            str_Stats_Category = 'FMT'
            df_2_Subset = df_2[(df_2[str_Col_Name_Exp1__Exp1__str_Stats_Category]==str_Stats_Category)]
            float_PCrit = 0.05
            df_2_Subset = df_2_Subset[(df_2[str_Col_Name_Exp1__Ne2_floatPCrit]==float_PCrit)]
    
            ''' if a horizontal plot line - Get the value for plotting and display '''        
            float_Total_Ne2_r_Sqrd_LDNe = df_2_Subset[str_Y_Axis_df_1_Colname].iloc[0]
            float_Total_Ne2_r_Sqrd_LDNe_LM = df_2_Subset[str_Y_Axis_df_1_Colname].iloc[0]
            y_Value = Decimal(float_Total_Ne2_r_Sqrd_LDNe)
            
            if y_Value > 0 and y_Value < int_Y_Axis_Max:
                ''' if a horizontal plot line - Get the X and Y values to actually plot ''' 
                list_X_Values = df_1[str_X_Axis_df_1_Colname].tolist()
                int_X_Values_Count = len(list_X_Values)
                int_X_Values_To_Remove = int(int_X_Values_Count*0.5) #Remove 20% of the X-Axis values
                list_X_Values = list_X_Values[:-1*int_X_Values_To_Remove] #Cut the list down to size
                list_Y_Values = [y_Value for x in list_X_Values] #Create the Y-Values list
        
                ''' Produce the plot line '''
                pyplot_Line_9, = matplotlib__pyplot.plot(list_X_Values, list_Y_Values, linestyle='-.', linewidth=int_Plot_Line_Width, figure=pyplot_Fig)
                
                ''' Add the description to the end of the line '''
                x_Pos = len(list_X_Values) + 0.25
                y_Pos = y_Value
                str_Line_Ending_Text = 'LDNe ' + str_Stats_Category + ' (PC ' + str(float_PCrit) + '; ' + str(int(round(y_Value))) + ')'                             
        
                if bool_Plot_Theme__Dark_Blue_1:
                    str_Font_Colour = 'white'
                    pyplot_Fig_FontProperties = pyplot_Fig_FontProperties__Base.copy()
                pass
                
                if bool_Plot_Theme__Default:                             
                    matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text)
                else:
                    matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text, color=str_Font_Colour, fontproperties=pyplot_Fig_FontProperties)
                pass
            pass
        pass
        '''
        -----------------------------
        Plot Line - LDNe Large Mature PCrit 0
        -----------------------------
        '''
        bool_LMT_PC0 = False
        if bool_LMT_PC0:               
            with SSResults(self.obj_SSParams) as obj_Results:
                #str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category
                str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category_Code
                str_Col_Name_Exp1__Exp1__str_Stats_Category = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__str_Stats_Category)
    
                str_Key_Exp1__Ne2_floatPCrit = globalsSS.Colnames_Ne2_Output.static_Str_Colname_Ne2_floatPCrit
                str_Col_Name_Exp1__Ne2_floatPCrit = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__Ne2_floatPCrit)
    
                str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe = globalsSS.Colnames_Ne2_Aggregation.static_Str_Colname_float_Total_Ne2_r_Sqrd_LDNe
                str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe)
            pass
            str_Y_Axis_df_1_Colname = str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe 
    
            ''' Subset the DF to get the correct value '''
            str_Stats_Category = 'LMT'
            df_2_Subset = df_2[(df_2[str_Col_Name_Exp1__Exp1__str_Stats_Category]==str_Stats_Category)]
            float_PCrit = 0
            df_2_Subset = df_2_Subset[(df_2[str_Col_Name_Exp1__Ne2_floatPCrit]==float_PCrit)]
    
            ''' if a horizontal plot line - Get the value for plotting and display '''        
            float_Total_Ne2_r_Sqrd_LDNe = df_2_Subset[str_Y_Axis_df_1_Colname].iloc[0]
            float_Total_Ne2_r_Sqrd_LDNe_LM = df_2_Subset[str_Y_Axis_df_1_Colname].iloc[0]
            y_Value = Decimal(float_Total_Ne2_r_Sqrd_LDNe)
            
            if y_Value > 0 and y_Value < int_Y_Axis_Max:
                ''' if a horizontal plot line - Get the X and Y values to actually plot ''' 
                list_X_Values = df_1[str_X_Axis_df_1_Colname].tolist()
                int_X_Values_Count = len(list_X_Values)
                int_X_Values_To_Remove = int(int_X_Values_Count*0.5) #Remove 20% of the X-Axis values
                list_X_Values = list_X_Values[:-1*int_X_Values_To_Remove] #Cut the list down to size
                list_Y_Values = [y_Value for x in list_X_Values] #Create the Y-Values list
        
                ''' Produce the plot line '''
                pyplot_Line_9, = matplotlib__pyplot.plot(list_X_Values, list_Y_Values, linestyle='-.', linewidth=int_Plot_Line_Width, figure=pyplot_Fig)
                
                ''' Add the description to the end of the line '''
                x_Pos = len(list_X_Values) + 0.25
                y_Pos = y_Value
                str_Line_Ending_Text = 'LDNe ' + str_Stats_Category + ' (PC ' + str(float_PCrit) + '; ' + str(int(round(y_Value))) + ')'                             
        
                if bool_Plot_Theme__Dark_Blue_1:
                    str_Font_Colour = 'white'
                    pyplot_Fig_FontProperties = pyplot_Fig_FontProperties__Base.copy()
                pass
                
                if bool_Plot_Theme__Default:                             
                    matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text)
                else:
                    matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text, color=str_Font_Colour, fontproperties=pyplot_Fig_FontProperties)
                pass
            pass
        pass
        '''
        -----------------------------
        Plot Line - LDNe Large Mature PCrit 0.05
        -----------------------------
        '''
        bool_LMT_PC0_05 = False
        if bool_LMT_PC0_05:               
            with SSResults(self.obj_SSParams) as obj_Results:
                #str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category
                str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category_Code
                str_Col_Name_Exp1__Exp1__str_Stats_Category = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__str_Stats_Category)
    
                str_Key_Exp1__Ne2_floatPCrit = globalsSS.Colnames_Ne2_Output.static_Str_Colname_Ne2_floatPCrit
                str_Col_Name_Exp1__Ne2_floatPCrit = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__Ne2_floatPCrit)
    
                str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe = globalsSS.Colnames_Ne2_Aggregation.static_Str_Colname_float_Total_Ne2_r_Sqrd_LDNe
                str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe)
            pass
            str_Y_Axis_df_1_Colname = str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe 
    
            ''' Subset the DF to get the correct value '''
            str_Stats_Category = 'LMT'
            df_2_Subset = df_2[(df_2[str_Col_Name_Exp1__Exp1__str_Stats_Category]==str_Stats_Category)]
            float_PCrit_Match = 0.05
            float_PCrit = 0.05
            df_2_Subset = df_2_Subset[(df_2[str_Col_Name_Exp1__Ne2_floatPCrit]==float_PCrit_Match)]
    
            ''' if a horizontal plot line - Get the value for plotting and display '''        
            float_Total_Ne2_r_Sqrd_LDNe = df_2_Subset[str_Y_Axis_df_1_Colname].iloc[0]
            float_Total_Ne2_r_Sqrd_LDNe_LM = df_2_Subset[str_Y_Axis_df_1_Colname].iloc[0]
            y_Value = Decimal(float_Total_Ne2_r_Sqrd_LDNe)
            
            if y_Value > 0 and y_Value < int_Y_Axis_Max:
                ''' if a horizontal plot line - Get the X and Y values to actually plot ''' 
                list_X_Values = df_1[str_X_Axis_df_1_Colname].tolist()
                int_X_Values_Count = len(list_X_Values)
                int_X_Values_To_Remove = int(int_X_Values_Count*0.5) #Remove 20% of the X-Axis values
                list_X_Values = list_X_Values[:-1*int_X_Values_To_Remove] #Cut the list down to size
                list_Y_Values = [y_Value for x in list_X_Values] #Create the Y-Values list
        
                ''' Produce the plot line '''
                pyplot_Line_9, = matplotlib__pyplot.plot(list_X_Values, list_Y_Values, linestyle='-.', linewidth=int_Plot_Line_Width, figure=pyplot_Fig)
                
                ''' Add the description to the end of the line '''
                x_Pos = len(list_X_Values) + 0.25
                y_Pos = y_Value
                str_Line_Ending_Text = 'LDNe ' + str_Stats_Category + ' (PC ' + str(float_PCrit) + '; ' + str(int(round(y_Value))) + ')'                             
        
                if bool_Plot_Theme__Dark_Blue_1:
                    str_Font_Colour = 'white'
                    pyplot_Fig_FontProperties = pyplot_Fig_FontProperties__Base.copy()
                pass
                
                if bool_Plot_Theme__Default:                             
                    matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text)
                else:
                    matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text, color=str_Font_Colour, fontproperties=pyplot_Fig_FontProperties)
                pass
            pass
        pass
        '''
        -----------------------------
        Plot Line - LDNe Full Juvenile PCrit 0
        -----------------------------
        '''
        bool_FJV_PC0 = False
        if bool_FJV_PC0:               
            with SSResults(self.obj_SSParams) as obj_Results:
                #str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category
                str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category_Code
                str_Col_Name_Exp1__Exp1__str_Stats_Category = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__str_Stats_Category)
    
                str_Key_Exp1__Ne2_floatPCrit = globalsSS.Colnames_Ne2_Output.static_Str_Colname_Ne2_floatPCrit
                str_Col_Name_Exp1__Ne2_floatPCrit = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__Ne2_floatPCrit)
    
                str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe = globalsSS.Colnames_Ne2_Aggregation.static_Str_Colname_float_Total_Ne2_r_Sqrd_LDNe
                str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe)
            pass
            str_Y_Axis_df_1_Colname = str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe 
    
            ''' Subset the DF to get the correct value '''
            str_Stats_Category = 'FJV'
            df_2_Subset = df_2[(df_2[str_Col_Name_Exp1__Exp1__str_Stats_Category]==str_Stats_Category)]
            float_PCrit = 0
            df_2_Subset = df_2_Subset[(df_2[str_Col_Name_Exp1__Ne2_floatPCrit]==float_PCrit)]
    
            ''' if a horizontal plot line - Get the value for plotting and display '''        
            float_Total_Ne2_r_Sqrd_LDNe = df_2_Subset[str_Y_Axis_df_1_Colname].iloc[0]
            float_Total_Ne2_r_Sqrd_LDNe_LM = df_2_Subset[str_Y_Axis_df_1_Colname].iloc[0]
            y_Value = Decimal(float_Total_Ne2_r_Sqrd_LDNe)
            
            if y_Value > 0 and y_Value < int_Y_Axis_Max:
                ''' if a horizontal plot line - Get the X and Y values to actually plot ''' 
                list_X_Values = df_1[str_X_Axis_df_1_Colname].tolist()
                int_X_Values_Count = len(list_X_Values)
                int_X_Values_To_Remove = int(int_X_Values_Count*0.5) #Remove 20% of the X-Axis values
                list_X_Values = list_X_Values[:-1*int_X_Values_To_Remove] #Cut the list down to size
                list_Y_Values = [y_Value for x in list_X_Values] #Create the Y-Values list
        
                ''' Produce the plot line '''
                pyplot_Line_9, = matplotlib__pyplot.plot(list_X_Values, list_Y_Values, linestyle='-.', linewidth=int_Plot_Line_Width, figure=pyplot_Fig)
                
                ''' Add the description to the end of the line '''
                x_Pos = len(list_X_Values) + 0.25
                y_Pos = y_Value
                str_Line_Ending_Text = 'LDNe ' + str_Stats_Category + ' (PC ' + str(float_PCrit) + '; ' + str(int(round(y_Value))) + ')'                             
        
                if bool_Plot_Theme__Dark_Blue_1:
                    str_Font_Colour = 'white'
                    pyplot_Fig_FontProperties = pyplot_Fig_FontProperties__Base.copy()
                pass
                
                if bool_Plot_Theme__Default:                             
                    matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text)
                else:
                    matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text, color=str_Font_Colour, fontproperties=pyplot_Fig_FontProperties)
                pass
            pass
        pass    
        '''
        -----------------------------
        Plot Line - LDNe Full Juvenile PCrit 0.05
        -----------------------------
        '''
        bool_FJV_PC0_05 = False
        if bool_FJV_PC0_05:               
            with SSResults(self.obj_SSParams) as obj_Results:
                #str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category
                str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category_Code
                str_Col_Name_Exp1__Exp1__str_Stats_Category = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__str_Stats_Category)
    
                str_Key_Exp1__Ne2_floatPCrit = globalsSS.Colnames_Ne2_Output.static_Str_Colname_Ne2_floatPCrit
                str_Col_Name_Exp1__Ne2_floatPCrit = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__Ne2_floatPCrit)
    
                str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe = globalsSS.Colnames_Ne2_Aggregation.static_Str_Colname_float_Total_Ne2_r_Sqrd_LDNe
                str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe)
            pass
            str_Y_Axis_df_1_Colname = str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe 
    
            ''' Subset the DF to get the correct value '''
            str_Stats_Category = 'FJV'
            df_2_Subset = df_2[(df_2[str_Col_Name_Exp1__Exp1__str_Stats_Category]==str_Stats_Category)]
            float_PCrit = 0.05
            df_2_Subset = df_2_Subset[(df_2[str_Col_Name_Exp1__Ne2_floatPCrit]==float_PCrit)]
    
            ''' if a horizontal plot line - Get the value for plotting and display '''        
            float_Total_Ne2_r_Sqrd_LDNe = df_2_Subset[str_Y_Axis_df_1_Colname].iloc[0]
            float_Total_Ne2_r_Sqrd_LDNe_LM = df_2_Subset[str_Y_Axis_df_1_Colname].iloc[0]
            y_Value = Decimal(float_Total_Ne2_r_Sqrd_LDNe)
            
            if y_Value > 0 and y_Value < int_Y_Axis_Max:
                ''' if a horizontal plot line - Get the X and Y values to actually plot ''' 
                list_X_Values = df_1[str_X_Axis_df_1_Colname].tolist()
                int_X_Values_Count = len(list_X_Values)
                int_X_Values_To_Remove = int(int_X_Values_Count*0.5) #Remove 20% of the X-Axis values
                list_X_Values = list_X_Values[:-1*int_X_Values_To_Remove] #Cut the list down to size
                list_Y_Values = [y_Value for x in list_X_Values] #Create the Y-Values list
        
                ''' Produce the plot line '''
                pyplot_Line_9, = matplotlib__pyplot.plot(list_X_Values, list_Y_Values, linestyle='-.', linewidth=int_Plot_Line_Width, figure=pyplot_Fig)
                
                ''' Add the description to the end of the line '''
                x_Pos = len(list_X_Values) + 0.25
                y_Pos = y_Value
                str_Line_Ending_Text = 'LDNe ' + str_Stats_Category + ' (PC ' + str(float_PCrit) + '; ' + str(int(round(y_Value))) + ')'                             
        
                if bool_Plot_Theme__Dark_Blue_1:
                    str_Font_Colour = 'white'
                    pyplot_Fig_FontProperties = pyplot_Fig_FontProperties__Base.copy()
                pass
                
                if bool_Plot_Theme__Default:                             
                    matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text)
                else:
                    matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text, color=str_Font_Colour, fontproperties=pyplot_Fig_FontProperties)
                pass
            pass
        pass    
        '''
        -----------------------------
        Plot Line - LDNe Full Embryo PCrit 0
        -----------------------------
        '''  
        bool_FEM_PC0 = False
        if bool_FEM_PC0:             
            with SSResults(self.obj_SSParams) as obj_Results:
                #str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category
                str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category_Code
                str_Col_Name_Exp1__Exp1__str_Stats_Category = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__str_Stats_Category)
    
                str_Key_Exp1__Ne2_floatPCrit = globalsSS.Colnames_Ne2_Output.static_Str_Colname_Ne2_floatPCrit
                str_Col_Name_Exp1__Ne2_floatPCrit = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__Ne2_floatPCrit)
    
                str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe = globalsSS.Colnames_Ne2_Aggregation.static_Str_Colname_float_Total_Ne2_r_Sqrd_LDNe
                str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe)
            pass
            str_Y_Axis_df_1_Colname = str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe 
    
            ''' Subset the DF to get the correct value '''
            str_Stats_Category = 'FEM'
            df_2_Subset = df_2[(df_2[str_Col_Name_Exp1__Exp1__str_Stats_Category]==str_Stats_Category)]
            float_PCrit = 0
            df_2_Subset = df_2_Subset[(df_2[str_Col_Name_Exp1__Ne2_floatPCrit]==float_PCrit)]
    
            ''' if a horizontal plot line - Get the value for plotting and display '''
            float_Total_Ne2_r_Sqrd_LDNe = df_2_Subset[str_Y_Axis_df_1_Colname].iloc[0]
            y_Value = Decimal(float_Total_Ne2_r_Sqrd_LDNe)
            
            if y_Value > 0 and y_Value < int_Y_Axis_Max:
                ''' if a horizontal plot line - Get the X and Y values to actually plot ''' 
                list_X_Values = df_1[str_X_Axis_df_1_Colname].tolist()
                int_X_Values_Count = len(list_X_Values)
                int_X_Values_To_Remove = int(int_X_Values_Count*0.9) #Remove 20% of the X-Axis values
                list_X_Values = list_X_Values[:-1*int_X_Values_To_Remove] #Cut the list down to size
                list_Y_Values = [y_Value for x in list_X_Values] #Create the Y-Values list
        
                ''' Produce the plot line '''
                pyplot_Line_10, = matplotlib__pyplot.plot(list_X_Values, list_Y_Values, linestyle='-.', linewidth=int_Plot_Line_Width, figure=pyplot_Fig)
                
                ''' Add the description to the end of the line '''
                x_Pos = len(list_X_Values) + 0.25
                y_Pos = y_Value
                str_Line_Ending_Text = 'LDNe ' + str_Stats_Category + ' (PC ' + str(float_PCrit) + '; ' + str(int(round(y_Value))) + ')'                             
        
                if bool_Plot_Theme__Dark_Blue_1:
                    str_Font_Colour = 'white'
                    pyplot_Fig_FontProperties = pyplot_Fig_FontProperties__Base.copy()
                pass
                
                if bool_Plot_Theme__Default:                             
                    matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text)
                else:
                    matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text, color=str_Font_Colour, fontproperties=pyplot_Fig_FontProperties)
                pass
            pass
        pass
        '''
        -----------------------------
        Plot Line - LDNe Full Embryo PCrit 0.05
        -----------------------------
        '''  
        bool_FEM_PC0_05 = False
        if bool_FEM_PC0_05:             
            with SSResults(self.obj_SSParams) as obj_Results:
                #str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category
                str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category_Code
                str_Col_Name_Exp1__Exp1__str_Stats_Category = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__str_Stats_Category)
    
                str_Key_Exp1__Ne2_floatPCrit = globalsSS.Colnames_Ne2_Output.static_Str_Colname_Ne2_floatPCrit
                str_Col_Name_Exp1__Ne2_floatPCrit = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__Ne2_floatPCrit)
    
                str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe = globalsSS.Colnames_Ne2_Aggregation.static_Str_Colname_float_Total_Ne2_r_Sqrd_LDNe
                str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe)
            pass
            str_Y_Axis_df_1_Colname = str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe 
    
            ''' Subset the DF to get the correct value '''
            str_Stats_Category = 'FEM'
            df_2_Subset = df_2[(df_2[str_Col_Name_Exp1__Exp1__str_Stats_Category]==str_Stats_Category)]
            float_PCrit = 0.05
            df_2_Subset = df_2_Subset[(df_2[str_Col_Name_Exp1__Ne2_floatPCrit]==float_PCrit)]
    
            ''' if a horizontal plot line - Get the value for plotting and display '''
            float_Total_Ne2_r_Sqrd_LDNe = df_2_Subset[str_Y_Axis_df_1_Colname].iloc[0]
            y_Value = Decimal(float_Total_Ne2_r_Sqrd_LDNe)
            
            if y_Value > 0 and y_Value < int_Y_Axis_Max:
                ''' if a horizontal plot line - Get the X and Y values to actually plot ''' 
                list_X_Values = df_1[str_X_Axis_df_1_Colname].tolist()
                int_X_Values_Count = len(list_X_Values)
                int_X_Values_To_Remove = int(int_X_Values_Count*0.9) #Remove 20% of the X-Axis values
                list_X_Values = list_X_Values[:-1*int_X_Values_To_Remove] #Cut the list down to size
                list_Y_Values = [y_Value for x in list_X_Values] #Create the Y-Values list
        
                ''' Produce the plot line '''
                pyplot_Line_10, = matplotlib__pyplot.plot(list_X_Values, list_Y_Values, linestyle='-.', linewidth=int_Plot_Line_Width, figure=pyplot_Fig)
                
                ''' Add the description to the end of the line '''
                x_Pos = len(list_X_Values) + 0.25
                y_Pos = y_Value
                str_Line_Ending_Text = 'LDNe ' + str_Stats_Category + ' (PC ' + str(float_PCrit) + '; ' + str(int(round(y_Value))) + ')'                             
        
                if bool_Plot_Theme__Dark_Blue_1:
                    str_Font_Colour = 'white'
                    pyplot_Fig_FontProperties = pyplot_Fig_FontProperties__Base.copy()
                pass
                
                if bool_Plot_Theme__Default:                             
                    matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text)
                else:
                    matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text, color=str_Font_Colour, fontproperties=pyplot_Fig_FontProperties)
                pass
            pass
        pass
        '''
        -----------------------------
        Plot Line - LDNe Large Embryo PCrit 0
        -----------------------------
        '''  
        bool_LEM_PC0 = False
        if bool_LEM_PC0:             
            with SSResults(self.obj_SSParams) as obj_Results:
                #str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category
                str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category_Code
                str_Col_Name_Exp1__Exp1__str_Stats_Category = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__str_Stats_Category)
    
                str_Key_Exp1__Ne2_floatPCrit = globalsSS.Colnames_Ne2_Output.static_Str_Colname_Ne2_floatPCrit
                str_Col_Name_Exp1__Ne2_floatPCrit = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__Ne2_floatPCrit)
    
                str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe = globalsSS.Colnames_Ne2_Aggregation.static_Str_Colname_float_Total_Ne2_r_Sqrd_LDNe
                str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe)
            pass
            str_Y_Axis_df_1_Colname = str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe 
    
            ''' Subset the DF to get the correct value '''
            str_Stats_Category = 'LEM'
            df_2_Subset = df_2[(df_2[str_Col_Name_Exp1__Exp1__str_Stats_Category]==str_Stats_Category)]
            float_PCrit = 0
            df_2_Subset = df_2_Subset[(df_2[str_Col_Name_Exp1__Ne2_floatPCrit]==float_PCrit)]
    
            ''' if a horizontal plot line - Get the value for plotting and display '''
            float_Total_Ne2_r_Sqrd_LDNe = df_2_Subset[str_Y_Axis_df_1_Colname].iloc[0]
            y_Value = Decimal(float_Total_Ne2_r_Sqrd_LDNe)
            
            if y_Value > 0 and y_Value < int_Y_Axis_Max:
                ''' if a horizontal plot line - Get the X and Y values to actually plot ''' 
                list_X_Values = df_1[str_X_Axis_df_1_Colname].tolist()
                int_X_Values_Count = len(list_X_Values)
                int_X_Values_To_Remove = int(int_X_Values_Count*0.9) #Remove 20% of the X-Axis values
                list_X_Values = list_X_Values[:-1*int_X_Values_To_Remove] #Cut the list down to size
                list_Y_Values = [y_Value for x in list_X_Values] #Create the Y-Values list
        
                ''' Produce the plot line '''
                pyplot_Line_10, = matplotlib__pyplot.plot(list_X_Values, list_Y_Values, linestyle='-.', linewidth=int_Plot_Line_Width, figure=pyplot_Fig)
                
                ''' Add the description to the end of the line '''
                x_Pos = len(list_X_Values) + 0.25
                y_Pos = y_Value
                str_Line_Ending_Text = 'LDNe ' + str_Stats_Category + ' (PC ' + str(float_PCrit) + '; ' + str(int(round(y_Value))) + ')'                             
        
                if bool_Plot_Theme__Dark_Blue_1:
                    str_Font_Colour = 'white'
                    pyplot_Fig_FontProperties = pyplot_Fig_FontProperties__Base.copy()
                pass
                
                if bool_Plot_Theme__Default:                             
                    matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text)
                else:
                    matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text, color=str_Font_Colour, fontproperties=pyplot_Fig_FontProperties)
                pass
            pass
        pass
        '''
        -----------------------------
        Plot Line - LDNe Large Embryo PCrit 0.05
        -----------------------------
        '''  
        bool_LEM_PC0_05 = False
        if bool_LEM_PC0_05:             
            with SSResults(self.obj_SSParams) as obj_Results:
                #str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category
                str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category_Code
                str_Col_Name_Exp1__Exp1__str_Stats_Category = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__str_Stats_Category)
    
                str_Key_Exp1__Ne2_floatPCrit = globalsSS.Colnames_Ne2_Output.static_Str_Colname_Ne2_floatPCrit
                str_Col_Name_Exp1__Ne2_floatPCrit = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__Ne2_floatPCrit)
    
                str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe = globalsSS.Colnames_Ne2_Aggregation.static_Str_Colname_float_Total_Ne2_r_Sqrd_LDNe
                str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe)
            pass
            str_Y_Axis_df_1_Colname = str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe 
    
            ''' Subset the DF to get the correct value '''
            str_Stats_Category = 'LEM'
            df_2_Subset = df_2[(df_2[str_Col_Name_Exp1__Exp1__str_Stats_Category]==str_Stats_Category)]
            float_PCrit_Match = 0.05
            float_PCrit = 0.05
            df_2_Subset = df_2_Subset[(df_2[str_Col_Name_Exp1__Ne2_floatPCrit]==float_PCrit_Match)]
    
            ''' if a horizontal plot line - Get the value for plotting and display '''
            float_Total_Ne2_r_Sqrd_LDNe = df_2_Subset[str_Y_Axis_df_1_Colname].iloc[0]
            y_Value = Decimal(float_Total_Ne2_r_Sqrd_LDNe)
            
            if y_Value > 0 and y_Value < int_Y_Axis_Max:
                ''' if a horizontal plot line - Get the X and Y values to actually plot ''' 
                list_X_Values = df_1[str_X_Axis_df_1_Colname].tolist()
                int_X_Values_Count = len(list_X_Values)
                int_X_Values_To_Remove = int(int_X_Values_Count*0.9) #Remove 20% of the X-Axis values
                list_X_Values = list_X_Values[:-1*int_X_Values_To_Remove] #Cut the list down to size
                list_Y_Values = [y_Value for x in list_X_Values] #Create the Y-Values list
        
                ''' Produce the plot line '''
                pyplot_Line_10, = matplotlib__pyplot.plot(list_X_Values, list_Y_Values, linestyle='-.', linewidth=int_Plot_Line_Width, figure=pyplot_Fig)
                
                ''' Add the description to the end of the line '''
                x_Pos = len(list_X_Values) + 0.25
                y_Pos = y_Value
                str_Line_Ending_Text = 'LDNe ' + str_Stats_Category + ' (PC ' + str(float_PCrit) + '; ' + str(int(round(y_Value))) + ')'                             
        
                if bool_Plot_Theme__Dark_Blue_1:
                    str_Font_Colour = 'white'
                    pyplot_Fig_FontProperties = pyplot_Fig_FontProperties__Base.copy()
                pass
                
                if bool_Plot_Theme__Default:                             
                    matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text)
                else:
                    matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text, color=str_Font_Colour, fontproperties=pyplot_Fig_FontProperties)
                pass
            pass
        pass
        '''
        -----------------------------
        Plot Line - LDNe Small Mature PCrit 0
        -----------------------------
        '''
        bool_SMT_PC0 = False
        if bool_SMT_PC0:        
            with SSResults(self.obj_SSParams) as obj_Results:
                #str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category
                str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category_Code
                str_Col_Name_Exp1__Exp1__str_Stats_Category = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__str_Stats_Category)
    
                str_Key_Exp1__Ne2_floatPCrit = globalsSS.Colnames_Ne2_Output.static_Str_Colname_Ne2_floatPCrit
                str_Col_Name_Exp1__Ne2_floatPCrit = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__Ne2_floatPCrit)
    
                str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe = globalsSS.Colnames_Ne2_Aggregation.static_Str_Colname_float_Total_Ne2_r_Sqrd_LDNe
                str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe)
            pass
            str_Y_Axis_df_1_Colname = str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe 
    
            ''' Subset the DF to get the correct value '''
            str_Stats_Category = 'SMT'
            df_2_Subset = df_2[(df_2[str_Col_Name_Exp1__Exp1__str_Stats_Category]==str_Stats_Category)]
            float_PCrit = 0
            df_2_Subset = df_2_Subset[(df_2[str_Col_Name_Exp1__Ne2_floatPCrit]==float_PCrit)]
    
            ''' if a horizontal plot line - Get the value for plotting and display '''        
            float_Total_Ne2_r_Sqrd_LDNe = df_2_Subset[str_Y_Axis_df_1_Colname].iloc[0]
            float_Total_Ne2_r_Sqrd_LDNe_LM = df_2_Subset[str_Y_Axis_df_1_Colname].iloc[0]
            y_Value = Decimal(float_Total_Ne2_r_Sqrd_LDNe)
            
            if y_Value > 0 and y_Value < int_Y_Axis_Max:
                ''' if a horizontal plot line - Get the X and Y values to actually plot ''' 
                list_X_Values = df_1[str_X_Axis_df_1_Colname].tolist()
                int_X_Values_Count = len(list_X_Values)
                int_X_Values_To_Remove = int(int_X_Values_Count*0.5) #Remove 20% of the X-Axis values
                list_X_Values = list_X_Values[:-1*int_X_Values_To_Remove] #Cut the list down to size
                list_Y_Values = [y_Value for x in list_X_Values] #Create the Y-Values list
        
                ''' Produce the plot line '''
                pyplot_Line_9, = matplotlib__pyplot.plot(list_X_Values, list_Y_Values, linestyle='-.', linewidth=int_Plot_Line_Width, figure=pyplot_Fig)
                
                ''' Add the description to the end of the line '''
                x_Pos = len(list_X_Values) + 0.25
                y_Pos = y_Value
                str_Line_Ending_Text = 'LDNe ' + str_Stats_Category + ' (PC ' + str(float_PCrit) + '; ' + str(int(round(y_Value))) + ')'                             
        
                if bool_Plot_Theme__Dark_Blue_1:
                    str_Font_Colour = 'white'
                    pyplot_Fig_FontProperties = pyplot_Fig_FontProperties__Base.copy()
                pass
                
                if bool_Plot_Theme__Default:                             
                    matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text)
                else:
                    matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text, color=str_Font_Colour, fontproperties=pyplot_Fig_FontProperties)
                pass
            pass
        pass
        '''
        -----------------------------
        Plot Line - LDNe Small Embryo PCrit 0
        -----------------------------
        ''' 
        bool_SEM_PC0 = False
        if bool_SEM_PC0:        

            with SSResults(self.obj_SSParams) as obj_Results:
                #str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category
                str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category_Code
                str_Col_Name_Exp1__Exp1__str_Stats_Category = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__str_Stats_Category)
    
                str_Key_Exp1__Ne2_floatPCrit = globalsSS.Colnames_Ne2_Output.static_Str_Colname_Ne2_floatPCrit
                str_Col_Name_Exp1__Ne2_floatPCrit = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__Ne2_floatPCrit)
    
                str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe = globalsSS.Colnames_Ne2_Aggregation.static_Str_Colname_float_Total_Ne2_r_Sqrd_LDNe
                str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe)
            pass
            str_Y_Axis_df_1_Colname = str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe 
    
            ''' Subset the DF to get the correct value '''
            str_Stats_Category = 'SEM'
            df_2_Subset = df_2[(df_2[str_Col_Name_Exp1__Exp1__str_Stats_Category]==str_Stats_Category)]
            float_PCrit = 0
            df_2_Subset = df_2_Subset[(df_2[str_Col_Name_Exp1__Ne2_floatPCrit]==float_PCrit)]
    
            ''' if a horizontal plot line - Get the value for plotting and display '''
            float_Total_Ne2_r_Sqrd_LDNe = df_2_Subset[str_Y_Axis_df_1_Colname].iloc[0]
            y_Value = Decimal(float_Total_Ne2_r_Sqrd_LDNe)
            
            if y_Value > 0 and y_Value < int_Y_Axis_Max:
                ''' if a horizontal plot line - Get the X and Y values to actually plot ''' 
                list_X_Values = df_1[str_X_Axis_df_1_Colname].tolist()
                int_X_Values_Count = len(list_X_Values)
                int_X_Values_To_Remove = int(int_X_Values_Count*0.9) #Remove 20% of the X-Axis values
                list_X_Values = list_X_Values[:-1*int_X_Values_To_Remove] #Cut the list down to size
                list_Y_Values = [y_Value for x in list_X_Values] #Create the Y-Values list
        
                ''' Produce the plot line '''
                pyplot_Line_10, = matplotlib__pyplot.plot(list_X_Values, list_Y_Values, linestyle='-.', linewidth=int_Plot_Line_Width, figure=pyplot_Fig)
                
                ''' Add the description to the end of the line '''
                x_Pos = len(list_X_Values) + 0.25
                y_Pos = y_Value
                str_Line_Ending_Text = 'LDNe ' + str_Stats_Category + ' (PC ' + str(float_PCrit) + '; ' + str(int(round(y_Value))) + ')'                             
        
                if bool_Plot_Theme__Dark_Blue_1:
                    str_Font_Colour = 'white'
                    pyplot_Fig_FontProperties = pyplot_Fig_FontProperties__Base.copy()
                pass
                
                if bool_Plot_Theme__Default:                             
                    matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text)
                else:
                    matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text, color=str_Font_Colour, fontproperties=pyplot_Fig_FontProperties)
                pass
            pass
        pass
    

        '''
        -----------------------------
        Plot Line - LDNe Fishing Catch Proportions - Pcrit 0
        -----------------------------
        ''' 
        bool_CCP_PC0 = False
        if bool_CCP_PC0:        
            str_Stats_Category = 'CCP'
            
            with SSResults(self.obj_SSParams) as obj_Results:
                #str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category
                str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category_Code
                str_Col_Name_Exp1__Exp1__str_Stats_Category = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__str_Stats_Category)
    
                str_Key_Exp1__Ne2_floatPCrit = globalsSS.Colnames_Ne2_Output.static_Str_Colname_Ne2_floatPCrit
                str_Col_Name_Exp1__Ne2_floatPCrit = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__Ne2_floatPCrit)
    
                str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe = globalsSS.Colnames_Ne2_Aggregation.static_Str_Colname_float_Total_Ne2_r_Sqrd_LDNe
                str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe)
            pass
            str_Y_Axis_df_1_Colname = str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe 
    
            ''' Subset the DF to get the correct value '''
            
            df_2_Subset = df_2[(df_2[str_Col_Name_Exp1__Exp1__str_Stats_Category]==str_Stats_Category)]
            float_PCrit = 0
            df_2_Subset = df_2_Subset[(df_2[str_Col_Name_Exp1__Ne2_floatPCrit]==float_PCrit)]
    
            ''' if a horizontal plot line - Get the value for plotting and display '''
            float_Total_Ne2_r_Sqrd_LDNe = df_2_Subset[str_Y_Axis_df_1_Colname].iloc[0]
            y_Value = Decimal(float_Total_Ne2_r_Sqrd_LDNe)
            
            if y_Value > 0 and y_Value < int_Y_Axis_Max:
                ''' if a horizontal plot line - Get the X and Y values to actually plot ''' 
                list_X_Values = df_1[str_X_Axis_df_1_Colname].tolist()
                int_X_Values_Count = len(list_X_Values)
                int_X_Values_To_Remove = int(int_X_Values_Count*0.9) #Remove 20% of the X-Axis values
                list_X_Values = list_X_Values[:-1*int_X_Values_To_Remove] #Cut the list down to size
                list_Y_Values = [y_Value for x in list_X_Values] #Create the Y-Values list
        
                ''' Produce the plot line '''
                pyplot_Line_10, = matplotlib__pyplot.plot(list_X_Values, list_Y_Values, linestyle='-.', linewidth=int_Plot_Line_Width, figure=pyplot_Fig)
                
                ''' Add the description to the end of the line '''
                x_Pos = len(list_X_Values) + 0.25
                y_Pos = y_Value
                str_Line_Ending_Text = 'LDNe ' + str_Stats_Category + ' (PC ' + str(float_PCrit) + '; ' + str(int(round(y_Value))) + ')'                             
        
                if bool_Plot_Theme__Dark_Blue_1:
                    str_Font_Colour = 'white'
                    pyplot_Fig_FontProperties = pyplot_Fig_FontProperties__Base.copy()
                pass
                
                if bool_Plot_Theme__Default:                             
                    matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text)
                else:
                    matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text, color=str_Font_Colour, fontproperties=pyplot_Fig_FontProperties)
                pass
            pass
        pass
        '''
        -----------------------------
        Plot Line - LDNe Fishing Catch Absolute Numbers - Pcrit 0
        -----------------------------
        ''' 
        bool_CCA_PC0 = False
        if bool_CCA_PC0:        
            str_Stats_Category = 'CCA'
            
            with SSResults(self.obj_SSParams) as obj_Results:
                #str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category
                str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category_Code
                str_Col_Name_Exp1__Exp1__str_Stats_Category = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__str_Stats_Category)
    
                str_Key_Exp1__Ne2_floatPCrit = globalsSS.Colnames_Ne2_Output.static_Str_Colname_Ne2_floatPCrit
                str_Col_Name_Exp1__Ne2_floatPCrit = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__Ne2_floatPCrit)
    
                str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe = globalsSS.Colnames_Ne2_Aggregation.static_Str_Colname_float_Total_Ne2_r_Sqrd_LDNe
                str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe)
            pass
            str_Y_Axis_df_1_Colname = str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe 
    
            ''' Subset the DF to get the correct value '''
            
            df_2_Subset = df_2[(df_2[str_Col_Name_Exp1__Exp1__str_Stats_Category]==str_Stats_Category)]
            float_PCrit = 0
            df_2_Subset = df_2_Subset[(df_2[str_Col_Name_Exp1__Ne2_floatPCrit]==float_PCrit)]
    
            ''' if a horizontal plot line - Get the value for plotting and display '''
            float_Total_Ne2_r_Sqrd_LDNe = df_2_Subset[str_Y_Axis_df_1_Colname].iloc[0]
            y_Value = Decimal(float_Total_Ne2_r_Sqrd_LDNe)
            
            if y_Value > 0 and y_Value < int_Y_Axis_Max:
                ''' if a horizontal plot line - Get the X and Y values to actually plot ''' 
                list_X_Values = df_1[str_X_Axis_df_1_Colname].tolist()
                int_X_Values_Count = len(list_X_Values)
                int_X_Values_To_Remove = int(int_X_Values_Count*0.9) #Remove 20% of the X-Axis values
                list_X_Values = list_X_Values[:-1*int_X_Values_To_Remove] #Cut the list down to size
                list_Y_Values = [y_Value for x in list_X_Values] #Create the Y-Values list
        
                ''' Produce the plot line '''
                pyplot_Line_10, = matplotlib__pyplot.plot(list_X_Values, list_Y_Values, linestyle='-.', linewidth=int_Plot_Line_Width, figure=pyplot_Fig)
                
                ''' Add the description to the end of the line '''
                x_Pos = len(list_X_Values) + 0.25
                y_Pos = y_Value
                str_Line_Ending_Text = 'LDNe ' + str_Stats_Category + ' (PC ' + str(float_PCrit) + '; ' + str(int(round(y_Value))) + ')'                             
        
                if bool_Plot_Theme__Dark_Blue_1:
                    str_Font_Colour = 'white'
                    pyplot_Fig_FontProperties = pyplot_Fig_FontProperties__Base.copy()
                pass
                
                if bool_Plot_Theme__Default:                             
                    matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text)
                else:
                    matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text, color=str_Font_Colour, fontproperties=pyplot_Fig_FontProperties)
                pass
            pass
        pass
        '''
        -----------------------------
        Plot Line - LDNe Fishing Catch SCALED Absolute Numbers - Pcrit 0
        -----------------------------
        ''' 
        bool_CAS_PC0_0 = False
        if bool_CAS_PC0_0:        
            str_Stats_Category = 'CAS'
            
            with SSResults(self.obj_SSParams) as obj_Results:
                #str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category
                str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category_Code
                str_Col_Name_Exp1__Exp1__str_Stats_Category = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__str_Stats_Category)
    
                str_Key_Exp1__Ne2_floatPCrit = globalsSS.Colnames_Ne2_Output.static_Str_Colname_Ne2_floatPCrit
                str_Col_Name_Exp1__Ne2_floatPCrit = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__Ne2_floatPCrit)
    
                str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe = globalsSS.Colnames_Ne2_Aggregation.static_Str_Colname_float_Total_Ne2_r_Sqrd_LDNe
                str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe)
            pass
            str_Y_Axis_df_1_Colname = str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe 
    
            ''' Subset the DF to get the correct value '''
            
            df_2_Subset = df_2[(df_2[str_Col_Name_Exp1__Exp1__str_Stats_Category]==str_Stats_Category)]
            float_PCrit_Match = 0
            float_PCrit = 0
            df_2_Subset = df_2_Subset[(df_2[str_Col_Name_Exp1__Ne2_floatPCrit]==float_PCrit_Match)]
    
            ''' if a horizontal plot line - Get the value for plotting and display '''
            float_Total_Ne2_r_Sqrd_LDNe = df_2_Subset[str_Y_Axis_df_1_Colname].iloc[0]
            y_Value = Decimal(float_Total_Ne2_r_Sqrd_LDNe)
            
            if y_Value > 0 and y_Value < int_Y_Axis_Max:
                ''' if a horizontal plot line - Get the X and Y values to actually plot ''' 
                list_X_Values = df_1[str_X_Axis_df_1_Colname].tolist()
                int_X_Values_Count = len(list_X_Values)
                int_X_Values_To_Remove = int(int_X_Values_Count*0.9) #Remove 20% of the X-Axis values
                list_X_Values = list_X_Values[:-1*int_X_Values_To_Remove] #Cut the list down to size
                list_Y_Values = [y_Value for x in list_X_Values] #Create the Y-Values list
        
                ''' Produce the plot line '''
                pyplot_Line_10, = matplotlib__pyplot.plot(list_X_Values, list_Y_Values, linestyle='-.', linewidth=int_Plot_Line_Width, figure=pyplot_Fig)
                
                ''' Add the description to the end of the line '''
                x_Pos = len(list_X_Values) + 0.25
                y_Pos = y_Value
                str_Line_Ending_Text = 'LDNe ' + str_Stats_Category + ' (PC ' + str(float_PCrit) + '; ' + str(int(round(y_Value))) + ')'                             
        
                if bool_Plot_Theme__Dark_Blue_1:
                    str_Font_Colour = 'white'
                    pyplot_Fig_FontProperties = pyplot_Fig_FontProperties__Base.copy()
                pass
                
                if bool_Plot_Theme__Default:                             
                    matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text)
                else:
                    matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text, color=str_Font_Colour, fontproperties=pyplot_Fig_FontProperties)
                pass
            pass
        pass
        '''
        -----------------------------
        Plot Line - LDNe Fishing Catch SCALED Absolute Numbers - Pcrit 0.05
        -----------------------------
        ''' 
        bool_CAS_PC0_05 = False
        if bool_CAS_PC0_05:        
            str_Stats_Category = 'CAS'
            
            with SSResults(self.obj_SSParams) as obj_Results:
                #str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category
                str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category_Code
                str_Col_Name_Exp1__Exp1__str_Stats_Category = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__str_Stats_Category)
    
                str_Key_Exp1__Ne2_floatPCrit = globalsSS.Colnames_Ne2_Output.static_Str_Colname_Ne2_floatPCrit
                str_Col_Name_Exp1__Ne2_floatPCrit = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__Ne2_floatPCrit)
    
                str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe = globalsSS.Colnames_Ne2_Aggregation.static_Str_Colname_float_Total_Ne2_r_Sqrd_LDNe
                str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe)
            pass
            str_Y_Axis_df_1_Colname = str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe 
    
            ''' Subset the DF to get the correct value '''
            
            df_2_Subset = df_2[(df_2[str_Col_Name_Exp1__Exp1__str_Stats_Category]==str_Stats_Category)]
            float_PCrit_Match = 0.05
            float_PCrit = 0.05
            df_2_Subset = df_2_Subset[(df_2[str_Col_Name_Exp1__Ne2_floatPCrit]==float_PCrit_Match)]
    
            ''' if a horizontal plot line - Get the value for plotting and display '''
            float_Total_Ne2_r_Sqrd_LDNe = df_2_Subset[str_Y_Axis_df_1_Colname].iloc[0]
            y_Value = Decimal(float_Total_Ne2_r_Sqrd_LDNe)
            
            if y_Value > 0 and y_Value < int_Y_Axis_Max:
                ''' if a horizontal plot line - Get the X and Y values to actually plot ''' 
                list_X_Values = df_1[str_X_Axis_df_1_Colname].tolist()
                int_X_Values_Count = len(list_X_Values)
                int_X_Values_To_Remove = int(int_X_Values_Count*0.9) #Remove 20% of the X-Axis values
                list_X_Values = list_X_Values[:-1*int_X_Values_To_Remove] #Cut the list down to size
                list_Y_Values = [y_Value for x in list_X_Values] #Create the Y-Values list
        
                ''' Produce the plot line '''
                pyplot_Line_10, = matplotlib__pyplot.plot(list_X_Values, list_Y_Values, linestyle='-.', linewidth=int_Plot_Line_Width, figure=pyplot_Fig)
                
                ''' Add the description to the end of the line '''
                x_Pos = len(list_X_Values) + 0.25
                y_Pos = y_Value
                str_Line_Ending_Text = 'LDNe ' + str_Stats_Category + ' (PC ' + str(float_PCrit) + '; ' + str(int(round(y_Value))) + ')'                             
        
                if bool_Plot_Theme__Dark_Blue_1:
                    str_Font_Colour = 'white'
                    pyplot_Fig_FontProperties = pyplot_Fig_FontProperties__Base.copy()
                pass
                
                if bool_Plot_Theme__Default:                             
                    matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text)
                else:
                    matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text, color=str_Font_Colour, fontproperties=pyplot_Fig_FontProperties)
                pass
            pass
        pass
        '''
        -----------------------------
        Format Plot
        -----------------------------
        '''


        '''
        ~~~~~~~~~~~~~~~~~~
        Grid and ticks details
        ~~~~~~~~~~~~~~~~~~
        '''
        matplotlib__pyplot.grid(True, figure=pyplot_Fig)
        

        
        '''
        ~~~~~~~~~~~~~~~~~~
        Legend details
        ~~~~~~~~~~~~~~~~~~
        '''
        float_Bbox_X_Pos = 0.80
        float_Bbox_Y_Pos = 0.35
        pyplot_Fig_Legend = pyplot_Fig.legend([
                           pyplot_Line_1
                           , pyplot_Line_2
                           , pyplot_Line_3
#                            , pyplot_Line_4
#                            , pyplot_Line_5
#                            , pyplot_Line_6
#                            , pyplot_Line_7
                           ]
                          ,[
                            'Nx - Survivors per year'
                            ,'Bx - Offspring per year'
                            ,'Dx - Deaths per year'
#                             ,'Adults - Nc (' + str(int(str_Adult_Pop_Size__Nc)) + ')'
#                             ,'Ne Demo (' + str(int(float_NeDemo)) + ')'
#                             ,'Nb Demo (' + str(int(float_NbDemo)) + ')'
#                             ,'LDNe Full (PC ' + str(float_PCrit) + '; ' + str(int(float_Total_Ne2_r_Sqrd_LDNe)) + ')'
                            ]
                          ,bbox_to_anchor=(float_Bbox_X_Pos, float_Bbox_Y_Pos)
                          ,frameon = 1)
        
        
        '''
        ~~~~~~~~~~~~~~~~~~
        Label details
        ~~~~~~~~~~~~~~~~~~
        '''
        ''' Get colnames in order to get data from df_1 '''
        with SSResults(self.obj_SSParams) as obj_Results:
            str_Key_AgeNe__Sim_Pop_Size = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Pop_Size
            str_Col_Name_AgeNe__Sim_Pop_Size = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Sim_Pop_Size)
#             str_Key_AgeNe__Nc_Adult_Pop_Size = globalsSS.Colnames_AgeNe_Results.static_str_Colname_Nx_Nc_Adults
#             str_Col_Name_AgeNe__Nc_Adult_Pop_Size = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Nc_Adult_Pop_Size)
            str_Key_AgeNe__Sim_Replicates = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Sim_Replicates
            str_Col_Name_AgeNe__Sim_Replicates = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Sim_Replicates)
            str_Key_AgeNe__Loci = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Loci
            str_Col_Name_AgeNe__Loci = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Loci)
            str_Key_Sim__Run_User_Defined_Folder = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Run_User_Defined_Folder
            str_Col_Name_Sim__Run_User_Defined_Folder = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Sim__Run_User_Defined_Folder)
        pass

        ''' Get values from df_1 '''
        str_Mating_Count_Replicate_Total = str(int_Mating_Count_Replicate_Total)
        int_Pop_Size__N = df_1[str_Col_Name_AgeNe__Sim_Pop_Size].iloc[0]
        str_Pop_Size__N = str(int_Pop_Size__N)
        str_Adult_Pop_Size__N = str(int_AgeNe__Adult_Pop_Size__Nx_Adults__N)
        str_Adult_Pop_Size__Nc = str(int_AgeNe__Adult_Pop_Size__Nx_Adults__Nc)
        str_Replicates = str(df_1[str_Col_Name_AgeNe__Sim_Replicates].iloc[0])
        str_Loci = str(df_1[str_Col_Name_AgeNe__Loci].iloc[0])
        str_Sim__Run_User_Defined_Folder = str(df_1[str_Col_Name_Sim__Run_User_Defined_Folder].iloc[0])

        str_Fig_Title = str('Population Demographic Profile by Mating, AgeNe Ne & Nb Demo vs LDNe from Embryo & Mature Cohorts')

        ''' Title spacing '''
        matplotlib__pyplot.subplots_adjust(top=0.87)
        ''' Font details '''          
        int_Plot_SupTitle_Size = 18
        if bool_Plot_Theme__Dark_Blue_1:
            str_Font_Colour = 'white'
        else:
            str_Font_Colour = 'blue'


        matplotlib__pyplot.suptitle(str_Fig_Title, fontsize=int_Plot_SupTitle_Size, color=str_Font_Colour, figure=pyplot_Fig)

        ''' Font details '''          
#         int_Plot_SupTitle_Size = 16
#         str_Font_Colour = 'blue'
                
        str_Plot_Title = str(
                             'Mating: ' + str_Mating_Count_Replicate_Total + ', '
                            + 'N :' + str_Pop_Size__N + ', '
                            #+ 'Nc: ' + str_Adult_Pop_Size__Nc + ', '
                            + 'Loci: ' + str_Loci + ', '
                            + 'Reps: ' + str_Replicates
                            + '\n'
                            + 'Run: ' + str_Sim__Run_User_Defined_Folder)

        ''' Font details '''          
        int_Plot_Title_Size = 16
        if bool_Plot_Theme__Dark_Blue_1:
            str_Font_Colour = 'grey'
        else:
            str_Font_Colour = 'blue'
                
        matplotlib__pyplot.title(str_Plot_Title, fontsize=int_Plot_Title_Size, color=str_Font_Colour, figure=pyplot_Fig)

        ''' Font details '''          
        int_PLot_Y_Label_Size = 16
        if bool_Plot_Theme__Dark_Blue_1:
            str_Font_Colour = 'white'
        else:
            str_Font_Colour = 'blue'
                                        
        matplotlib__pyplot.xlabel('Age Cohort (years)', fontsize=int_PLot_Y_Label_Size, color=str_Font_Colour, figure=pyplot_Fig)
        matplotlib__pyplot.ylabel('Individuals', fontsize=int_PLot_Y_Label_Size, color=str_Font_Colour, figure=pyplot_Fig)
        
        
        '''
        ~~~~~~~~~~~~~~~~~~
        Label Unique Identifier details
        ~~~~~~~~~~~~~~~~~~
        '''
        ''' Get colnames in order to get data from df_1 '''
        with SSResults(self.obj_SSParams) as obj_Results:
            str_Key_Sim__Run_User_Defined_Folder = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Run_User_Defined_Folder
            str_Col_Name_Sim__Run_User_Defined_Folder = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Sim__Run_User_Defined_Folder)
            str_Key_Sim__Unique_Run_ID = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Unique_Run_ID
            str_Col_Name_Sim__Unique_Run_ID = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Sim__Unique_Run_ID)

        pass

        
        ''' Get values from df_1 '''
        str_Sim__Unique_Run_ID = str(df_1[str_Col_Name_Sim__Unique_Run_ID].iloc[0])
        
        str_UID_Text = str(str_Sim__Unique_Run_ID)

        ''' Font details '''          
        int_Font_Size = 6
        str_Font_Colour = 'darkgrey'
        
        ''' Add figure text '''
        #matplotlib__pyplot.figtext(.75,.99,str_UID_Text, fontsize=int_Font_Size, color=str_Font_Colour, figure=pyplot_Fig)
        matplotlib__pyplot.figtext(.70,.005,str_UID_Text, fontsize=int_Font_Size, color=str_Font_Colour, figure=pyplot_Fig)

        str_Sim__Run_User_Defined_Folder = str(df_1[str_Col_Name_Sim__Run_User_Defined_Folder].iloc[0])

        str_RUDF_Text = str(str_Sim__Run_User_Defined_Folder)

        ''' Font details '''          
        int_Font_Size = 6
        str_Font_Colour = 'darkgrey'
        
        ''' Add figure text '''
        #matplotlib__pyplot.figtext(.75,.91,str_RUDF_Text, fontsize=int_Font_Size, color=str_Font_Colour, figure=pyplot_Fig)
        matplotlib__pyplot.figtext(.70,.015,str_RUDF_Text, fontsize=int_Font_Size, color=str_Font_Colour, figure=pyplot_Fig)

        '''
        ~~~~~~~~~~~~~~~~~~
        Axis details
        ~~~~~~~~~~~~~~~~~~
        '''
#         [xmin, xmax, ymin, ymax] = matplotlib__pyplot.axis()
#         matplotlib__pyplot.xlim(1, xmax)
        
        #int_Y_Axis_Max = int_Pop_Size__N / 2
        
        #dec_Total_Ne2_r_Sqrd_LDNe_LM = Decimal(float_Total_Ne2_r_Sqrd_LDNe_LM)
        #int_Y_Axis_Max = int(math.ceil(dec_Total_Ne2_r_Sqrd_LDNe_LM / 1000)) * 1000
        
        #int_Y_Axis_Max = int(math.ceil(int_Pop_Size__N * 0.1 * 2.1 / 500)) * 500
#         df_Temp = pandas.DataFrame()
#         df_Temp["Max"] = df_2[[str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe]].max(axis=1)
#         int_Y_Axis_Max = df_Temp["Max"].max(axis=0)
#         int_Y_Axis_Max = int(math.ceil(int_Y_Axis_Max / 500)) * 500
        
        ''' int_Y_Axis_Max passed into function '''
        matplotlib__pyplot.ylim(0, int_Y_Axis_Max)
        
        '''
        ~~~~~~~~~~~~~~~~~~
        Colours - Axis & Tick
        ~~~~~~~~~~~~~~~~~~
        '''

        if bool_Plot_Theme__Dark_Blue_1:
            str_Colour = 'darkblue'

        else:
            str_Colour = 'white'
        pass        
        #ax1 = pyplot_Fig.add_subplot(111, axisbg=str_Colour)
        #ax1 = pyplot_Fig.add_subplot(111)
        
#         ax.plot(range(10))
#         ax.set_xlabel('X-axis')
#         ax.set_ylabel('Y-axis')
        
#         ax.spines['bottom'].set_color('red')
#         ax.spines['top'].set_color('red')
#         ax.xaxis.label.set_color('red')
        if bool_Plot_Theme__Dark_Blue_1:
            int_Tick_Label_Size = 16
            str_X_Axis_Tick_Labels_Colour = 'white'
            str_Y_Axis_Tick_Labels_Colour = 'white'
            str_X_Axis_Tick_Major_Colour = 'white'
            str_X_Axis_Tick_Minor_Colour = 'grey'
            str_Y_Axis_Tick_Major_Colour = 'white'
            str_Y_Axis_Tick_Minor_Colour = 'grey'
        pass
    
        if bool_Plot_Theme__Default == False:
            ax1.tick_params(axis='x', colors=str_X_Axis_Tick_Labels_Colour)
            ax1.tick_params(axis='y', colors=str_Y_Axis_Tick_Labels_Colour)
    
            # We change the fontsize of minor ticks label 
            ax1.tick_params(axis='x', which='major', labelsize=int_Tick_Label_Size, color=str_X_Axis_Tick_Major_Colour)
            ax1.tick_params(axis='x', which='minor', labelsize=int_Tick_Label_Size, color=str_X_Axis_Tick_Minor_Colour)
            ax1.tick_params(axis='y', which='major', labelsize=int_Tick_Label_Size, color=str_Y_Axis_Tick_Major_Colour)
            ax1.tick_params(axis='y', which='minor', labelsize=int_Tick_Label_Size, color=str_Y_Axis_Tick_Minor_Colour) 
        pass 
    
        ''' Axis tick pointing direction '''
        ax1.tick_params(axis='x', direction='out')
        ax1.tick_params(axis='y', direction='out')
        
        ''' Specify axis ticks to be plotted '''
        ax1.xaxis.tick_bottom() 
        ax1.yaxis.tick_left() 
             
#         for ax, color in zip([ax1], ['white']):
#             matplotlib__pyplot.setp(ax.spines.values(), color=color)
#             matplotlib__pyplot.setp([ax.get_xticklines(), ax1.get_yticklines()], color=color)        
#         
#         ax1.axhline(linewidth=4, color="w") # inc. width of x-axis and color it
#         ax1.axvline(linewidth=4, color="w") # inc. width of y-axis and color it

        if bool_Plot_Theme__Dark_Blue_1:
            str_Colour = 'white'

        else:
            str_Colour = 'black'
        pass
        for axis in ['top','bottom','left','right']:
            ax1.spines[axis].set_linewidth(4)
            ax1.spines[axis].set_color(str_Colour)
 
        ax1.spines['top'].set_visible(False)
        ax1.spines['right'].set_visible(False)           

        ''' Legend '''
        
        
        pyplot_Fig_Legend_Frame = pyplot_Fig_Legend.get_frame()
        
        pyplot_Fig_Legend_Frame.set_color('white')
        ''' Legend frame background '''
        #pyplot_Fig_Legend_Frame.set_facecolor('green')
        ''' Legend frame border '''
        #pyplot_Fig_Legend_Frame.set_edgecolor('red')
        
        ''' Turn off frame outline '''
        pyplot_Fig_Legend_Frame.set_linewidth(0)
        
        # set the alpha value of the legend: it will be translucent
        pyplot_Fig_Legend_Frame.set_alpha(0.5)                                                    
        

        #ax1.grid(True, figure=pyplot_Fig)

        bool_Format_Ticks = False
        if bool_Format_Ticks:
            nparray_Major_Ticks_X = ax1.xaxis.get_majorticklocs()      
            if len(nparray_Major_Ticks_X) > 1: 
                float_Major_Ticks_X_First = nparray_Major_Ticks_X[0]
                float_Major_Ticks_X_Last = nparray_Major_Ticks_X[-1]
                float_Major_Ticks_X_Interval = 5
                nparray_Major_Ticks_X = numpy.arange(float_Major_Ticks_X_First, float_Major_Ticks_X_Last, float_Major_Ticks_X_Interval)                                              
                ax1.set_xticks(nparray_Major_Ticks_X) 
            nparray_Minor_Ticks_X = ax1.xaxis.get_minorticklocs()
            if len(nparray_Minor_Ticks_X) > 1:     
                float_Minor_Ticks_X_First = nparray_Minor_Ticks_X[0]
                float_Minor_Ticks_X_Last = nparray_Minor_Ticks_X[-1]
                float_Minor_Ticks_X_Interval = 1
                nparray_Minor_Ticks_X = numpy.arange(float_Minor_Ticks_X_First, float_Minor_Ticks_X_Last, float_Minor_Ticks_X_Interval)                                              
                ax1.set_xticks(nparray_Minor_Ticks_X, minor=True)
            
            nparray_Major_Ticks_Y = ax1.yaxis.get_majorticklocs()      
            if len(nparray_Major_Ticks_Y) > 1: 
                float_Major_Ticks_Y_First = nparray_Major_Ticks_Y[0]
                float_Major_Ticks_Y_Last = nparray_Major_Ticks_Y[-1]
                float_Major_Ticks_Y_Interval = 50
                nparray_Major_Ticks_Y = numpy.arange(float_Major_Ticks_Y_First, float_Major_Ticks_Y_Last, float_Major_Ticks_Y_Interval)                                              
                ax1.set_yticks(nparray_Major_Ticks_Y)  
                
            nparray_Minor_Ticks_Y = ax1.yaxis.get_minorticklocs()      
            if len(nparray_Minor_Ticks_Y) > 1: 
                float_Minor_Ticks_Y_First = nparray_Minor_Ticks_Y[0]
                float_Minor_Ticks_Y_Last = nparray_Minor_Ticks_Y[-1]
                float_Minor_Ticks_Y_Interval = 1
                nparray_Minor_Ticks_Y = numpy.arange(float_Minor_Ticks_Y_First, float_Minor_Ticks_Y_Last, float_Minor_Ticks_Y_Interval)                                              
                ax1.set_yticks(nparray_Minor_Ticks_Y, minor=True)                                  
            
                                                                  
            ax1.grid(which='both')                                                   
        pass
                                                  
        
        # and a corresponding grid                                                       
        
        ax1.grid(which='both')                                                            
        
        # or if you want differnet settings for the grids:                               
        ax1.grid(which='minor', alpha=0.2)                                                
        ax1.grid(which='major', alpha=0.5)   
        
              
        #DEBUG_ON
        ''' Required to change background of INTERACTIVE WINDOW only'''
        if bool_Plot_Theme__Dark_Blue_1:
            pyplot_Fig_Patch = pyplot_Fig.patch
            pyplot_Fig_Patch.set_facecolor('darkblue') # works with plt.show().  
        pass
        #matplotlib__pyplot.show()
        #DEBUG_OFF
        
                                
        return pyplot_Fig


    def func__Plot_CAOB_EXPERIMENT_Parent_Offspring_Ne_2_PS_And_AgeNe_Sim_Demographic_Population_Profile__Plot_RETIRE(self, list_DFs, int_Mating_Count_Replicate_Total, int_Y_Axis_Max, dict_Fig_Copy):
        
        self.obj_Log_Default.info('Creating figure')
        
        bool_Plot_Theme__Default = False
        bool_Plot_Theme__Dark_Blue_1 = False
        
        if dict_Fig_Copy['ColourScheme'] == 'Dark_Blue':
            bool_Plot_Theme__Dark_Blue_1 = True
        else:
            bool_Plot_Theme__Default = True
        pass
    
#         if bool_Plot_Theme__Dark_Blue_1:
#             bool_Plot_Theme__Default = False
#         else:
#             bool_Plot_Theme__Default = True
#         pass
            
        int_Plot_Line_Width = 4
        '''
        -----------------------------
        Specify DFs
        -----------------------------
        '''
        df_1 = list_DFs[0]
        df_2 = list_DFs[1]
        
        
        '''
        -----------------------------
        Specify X-Axis
        -----------------------------
        '''
        with SSResults(self.obj_SSParams) as obj_Results:
            str_Key_AgeNe__Age = globalsSS.Colnames_AgeNe_Results.static_str_Colname_Age
            str_Col_Name_AgeNe__Age = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Age)
        pass
        str_X_Axis_df_1_Colname = str_Col_Name_AgeNe__Age

        '''
        -----------------------------
        Create figure
        -----------------------------
        '''
        # default scale is 1 in your original case, scales with other cases:
        int_X_Axis_Length = len(df_1[str_X_Axis_df_1_Colname])
        int_Width_Scale = int_X_Axis_Length/10 
        int_Width_Control = 6  #6 - About perfect for PowerPoint
        int_Height_Control = 8 #8 - About perfect for PowerPoint
        figsize = (int_Width_Control*int_Width_Scale,int_Height_Control) # fig size in inches (width,height)
        pyplot_Fig = matplotlib__pyplot.figure(figsize = figsize)       
        
        #pyplot_Fig = matplotlib__pyplot.figure()
        
        '''
        -----------------------------
        Plot Line - Nx - Survivors per age cohort
        -----------------------------
        ''' 
        with SSResults(self.obj_SSParams) as obj_Results:
            str_Key_AgeNe__Nx = globalsSS.Colnames_AgeNe_Results.static_str_Colname_Nx
            str_Col_Name_AgeNe__Nx = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Nx)
        pass
        str_Y_Axis_df_1_Colname = str_Col_Name_AgeNe__Nx 
        
        str_Plot_Line_Color = 'blue'
        pyplot_Line_1, = matplotlib__pyplot.plot(df_1[str_X_Axis_df_1_Colname], df_1[str_Y_Axis_df_1_Colname], color=str_Plot_Line_Color, linewidth=int_Plot_Line_Width, figure=pyplot_Fig)

        '''
        -----------------------------
        Plot Line - Bx - Offspring per age cohort
        -----------------------------
        '''         
        with SSResults(self.obj_SSParams) as obj_Results:
            str_Key_AgeNe__Bx = globalsSS.Colnames_AgeNe_Results.static_str_Colname_Bx
            str_Col_Name_AgeNe__Bx = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Bx)
        pass
        str_Y_Axis_df_1_Colname = str_Col_Name_AgeNe__Bx 
        
        if bool_Plot_Theme__Dark_Blue_1:
            str_Plot_Line_Color = 'white'
        else:
            str_Plot_Line_Color = 'grey'
        pass
        pyplot_Line_2, = matplotlib__pyplot.plot(df_1[str_X_Axis_df_1_Colname], df_1[str_Y_Axis_df_1_Colname], color=str_Plot_Line_Color, linewidth=int_Plot_Line_Width, figure=pyplot_Fig)

        '''
        -----------------------------
        Plot Line - Dx - Deaths per age cohort
        -----------------------------
        '''         
        with SSResults(self.obj_SSParams) as obj_Results:
            str_Key_AgeNe__Dx = globalsSS.Colnames_AgeNe_Results.static_str_Colname_Dx
            str_Col_Name_AgeNe__Dx = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Dx)
        pass
        str_Y_Axis_df_1_Colname = str_Col_Name_AgeNe__Dx 
        
        str_Plot_Line_Color = 'red'
        pyplot_Line_3, = matplotlib__pyplot.plot(df_1[str_X_Axis_df_1_Colname], df_1[str_Y_Axis_df_1_Colname], color=str_Plot_Line_Color, linewidth=int_Plot_Line_Width, figure=pyplot_Fig)

        '''
        -----------------------------
        Plot Line - AgeNe N Adults - ALL Adults 
        -----------------------------
        '''
        '''
        Font properties for subsequent text
        '''
        pyplot_Fig_FontProperties__Base = matplotlib__fontmanager.FontProperties(size=16)
                 
        with SSResults(self.obj_SSParams) as obj_Results:
            str_Key_AgeNe__Adult_Pop_Size__Nx_N_Adults = globalsSS.Colnames_AgeNe_Results.static_str_Colname_Nx_N_Adults
            str_Col_Name_AgeNe__Adult_Pop_Size__Nx_N_Adults = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Adult_Pop_Size__Nx_N_Adults)

        pass
        str_Y_Axis_df_1_Colname = str_Col_Name_AgeNe__Adult_Pop_Size__Nx_N_Adults 

#         pyplot_Line_4, = matplotlib__pyplot.plot(df_1[str_X_Axis_df_1_Colname], df_1[str_Y_Axis_df_1_Colname], linestyle='--', linewidth=2, figure=pyplot_Fig)
#         
#         ''' Get the value for display '''
#         int_AgeNe__Adult_Pop_Size__Nx_Adults__Nc = df_1[str_Y_Axis_df_1_Colname].iloc[0]
# 
#         ''' Add the description to the end of the line '''
#         str_Line_Ending_Text = 'AgeNe Nc (' + str(int(int_AgeNe__Adult_Pop_Size__Nx_Adults__Nc)) + ')'                             
#         matplotlib__pyplot.text(df_1[str_X_Axis_df_1_Colname].iloc[-1], df_1[str_Y_Axis_df_1_Colname].iloc[-1], str_Line_Ending_Text)

        ''' if a horizontal plot line - Get the value for plotting and display '''
        int_AgeNe__Adult_Pop_Size__Nx_Adults__N = int(df_1[str_Y_Axis_df_1_Colname].iloc[0])
        y_Value = int_AgeNe__Adult_Pop_Size__Nx_Adults__N
        
        ''' if a horizontal plot line - Get the X and Y values to actually plot ''' 
        list_X_Values = df_1[str_X_Axis_df_1_Colname].tolist()
        int_X_Values_Count = len(list_X_Values)
        int_X_Values_To_Remove = int(int_X_Values_Count*0.8) #Remove a % of the X-Axis values
        list_X_Values = list_X_Values[:-1*int_X_Values_To_Remove] #Cut the list down to size
        list_Y_Values = [y_Value for x in list_X_Values] #Create the Y-Values list

        ''' Produce the plot line '''
        pyplot_Line_4, = matplotlib__pyplot.plot(list_X_Values, list_Y_Values, linestyle='-', linewidth=int_Plot_Line_Width, figure=pyplot_Fig)
        
        ''' Add the description to the end of the line '''
        x_Pos = len(list_X_Values) + 0.25
        y_Pos = y_Value
        str_Line_Ending_Text = 'AgeNe N Adults (' + str(int(y_Value)) + ')'        
        
        if bool_Plot_Theme__Dark_Blue_1:
            str_Font_Colour = 'white'
            pyplot_Fig_FontProperties = pyplot_Fig_FontProperties__Base.copy()
        pass
        
        if bool_Plot_Theme__Default:                             
            matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text)
        else:
            matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text, color=str_Font_Colour, fontproperties=pyplot_Fig_FontProperties)
        pass
    
        '''
        -----------------------------
        Plot Line - AgeNe Nc - Fertile Adults 
        -----------------------------
        '''
        '''
        Font properties for subsequent text
        '''
        pyplot_Fig_FontProperties__Base = matplotlib__fontmanager.FontProperties(size=16)
                 
        with SSResults(self.obj_SSParams) as obj_Results:
            str_Key_AgeNe__Adult_Pop_Size__Nx_Nc_Adults = globalsSS.Colnames_AgeNe_Results.static_str_Colname_Nx_Nc_Adults
            str_Col_Name_AgeNe__Adult_Pop_Size__Nx_Nc_Adults = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Adult_Pop_Size__Nx_Nc_Adults)

        pass
        str_Y_Axis_df_1_Colname = str_Col_Name_AgeNe__Adult_Pop_Size__Nx_Nc_Adults 

#         pyplot_Line_4, = matplotlib__pyplot.plot(df_1[str_X_Axis_df_1_Colname], df_1[str_Y_Axis_df_1_Colname], linestyle='--', linewidth=2, figure=pyplot_Fig)
#         
#         ''' Get the value for display '''
#         int_AgeNe__Adult_Pop_Size__Nx_Adults__Nc = df_1[str_Y_Axis_df_1_Colname].iloc[0]
# 
#         ''' Add the description to the end of the line '''
#         str_Line_Ending_Text = 'AgeNe Nc (' + str(int(int_AgeNe__Adult_Pop_Size__Nx_Adults__Nc)) + ')'                             
#         matplotlib__pyplot.text(df_1[str_X_Axis_df_1_Colname].iloc[-1], df_1[str_Y_Axis_df_1_Colname].iloc[-1], str_Line_Ending_Text)

        ''' if a horizontal plot line - Get the value for plotting and display '''
        int_AgeNe__Adult_Pop_Size__Nx_Adults__Nc = int(df_1[str_Y_Axis_df_1_Colname].iloc[0])
        y_Value = int_AgeNe__Adult_Pop_Size__Nx_Adults__Nc
        
        ''' if a horizontal plot line - Get the X and Y values to actually plot ''' 
        list_X_Values = df_1[str_X_Axis_df_1_Colname].tolist()
        int_X_Values_Count = len(list_X_Values)
        int_X_Values_To_Remove = int(int_X_Values_Count*0.8) #Remove a % of the X-Axis values
        list_X_Values = list_X_Values[:-1*int_X_Values_To_Remove] #Cut the list down to size
        list_Y_Values = [y_Value for x in list_X_Values] #Create the Y-Values list

        ''' Produce the plot line '''
        pyplot_Line_4, = matplotlib__pyplot.plot(list_X_Values, list_Y_Values, linestyle='-', linewidth=int_Plot_Line_Width, figure=pyplot_Fig)
        
        ''' Add the description to the end of the line '''
        x_Pos = len(list_X_Values) + 0.25
        y_Pos = y_Value
        str_Line_Ending_Text = 'AgeNe Nc (' + str(int(y_Value)) + ')'        
        
        if bool_Plot_Theme__Dark_Blue_1:
            str_Font_Colour = 'white'
            pyplot_Fig_FontProperties = pyplot_Fig_FontProperties__Base.copy()
        pass
        
        if bool_Plot_Theme__Default:                             
            matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text)
        else:
            matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text, color=str_Font_Colour, fontproperties=pyplot_Fig_FontProperties)
        pass
    
        '''
        -----------------------------
        Plot Line - AgeNe Ne Demographic
        -----------------------------
        '''         
        with SSResults(self.obj_SSParams) as obj_Results:
            str_Key_AgeNe__Ne_Demo = globalsSS.Colnames_AgeNe_Results.static_str_Colname_NeDemo
            str_Col_Name_AgeNe__Ne_Demo = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Ne_Demo)
        pass
        str_Y_Axis_df_1_Colname = str_Col_Name_AgeNe__Ne_Demo 

#         pyplot_Line_5, = matplotlib__pyplot.plot(df_1[str_X_Axis_df_1_Colname], df_1[str_Y_Axis_df_1_Colname], linestyle='--', linewidth=2, figure=pyplot_Fig)
#         
#         ''' Get the value for display '''
#         float_NeDemo = df_1[str_Y_Axis_df_1_Colname].iloc[0]
# 
#         ''' Add the description to the end of the line '''
#         str_Line_Ending_Text = 'AgeNe Ne Demo (' + str(int(float_NeDemo)) + ')'                             
#         matplotlib__pyplot.text(df_1[str_X_Axis_df_1_Colname].iloc[-1], df_1[str_Y_Axis_df_1_Colname].iloc[-1], str_Line_Ending_Text)

        ''' if a horizontal plot line - Get the value for plotting and display '''
        float_NeDemo = df_1[str_Y_Axis_df_1_Colname].iloc[0]
        y_Value = Decimal(float_NeDemo)
        
        ''' if a horizontal plot line - Get the X and Y values to actually plot ''' 
        list_X_Values = df_1[str_X_Axis_df_1_Colname].tolist()
        int_X_Values_Count = len(list_X_Values)
        int_X_Values_To_Remove = int(int_X_Values_Count*0.2) #Remove 20% of the X-Axis values
        list_X_Values = list_X_Values[:-1*int_X_Values_To_Remove] #Cut the list down to size
        list_Y_Values = [y_Value for x in list_X_Values] #Create the Y-Values list

        ''' Produce the plot line '''
        pyplot_Line_5, = matplotlib__pyplot.plot(list_X_Values, list_Y_Values, linestyle='-.', linewidth=int_Plot_Line_Width, figure=pyplot_Fig)
        
        ''' Add the description to the end of the line '''
        x_Pos = len(list_X_Values) + 0.25
        y_Pos = y_Value
        str_Line_Ending_Text = 'AgeNe Ne Demo (' + str(int(round(y_Value))) + ')'                             

        if bool_Plot_Theme__Dark_Blue_1:
            str_Font_Colour = 'white'
            pyplot_Fig_FontProperties = pyplot_Fig_FontProperties__Base.copy()
        pass
        
        if bool_Plot_Theme__Default:                             
            matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text)
        else:
            matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text, color=str_Font_Colour, fontproperties=pyplot_Fig_FontProperties)
 
        '''
        -----------------------------
        Plot Line - AgeNe Nb Demographic
        -----------------------------
        '''         
        with SSResults(self.obj_SSParams) as obj_Results:
            str_Key_AgeNe__Nb_Demo = globalsSS.Colnames_AgeNe_Results.static_str_Colname_NbDemo
            str_Col_Name_AgeNe__Nb_Demo = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Nb_Demo)
        pass
        str_Y_Axis_df_1_Colname = str_Col_Name_AgeNe__Nb_Demo 
        
        ''' if a horizontal plot line - Get the value for plotting and display '''
        float_NbDemo = df_1[str_Y_Axis_df_1_Colname].iloc[0]
        y_Value = Decimal(float_NbDemo)
        
        ''' if a horizontal plot line - Get the X and Y values to actually plot ''' 
        list_X_Values = df_1[str_X_Axis_df_1_Colname].tolist()
        int_X_Values_Count = len(list_X_Values)
        int_X_Values_To_Remove = int(int_X_Values_Count*0.2) #Remove 20% of the X-Axis values
        list_X_Values = list_X_Values[:-1*int_X_Values_To_Remove] #Cut the list down to size
        list_Y_Values = [y_Value for x in list_X_Values] #Create the Y-Values list

        ''' Produce the plot line '''
        pyplot_Line_6, = matplotlib__pyplot.plot(list_X_Values, list_Y_Values, linestyle='-.', linewidth=int_Plot_Line_Width, figure=pyplot_Fig)
        
        ''' Add the description to the end of the line '''
        x_Pos = len(list_X_Values) + 0.25
        y_Pos = y_Value
        str_Line_Ending_Text = 'AgeNe Nb Demo (' + str(int(round(y_Value))) + ')'                             

        if bool_Plot_Theme__Dark_Blue_1:
            str_Font_Colour = 'white'
            pyplot_Fig_FontProperties = pyplot_Fig_FontProperties__Base.copy()
        pass
        
        if bool_Plot_Theme__Default:                             
            matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text)
        else:
            matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text, color=str_Font_Colour, fontproperties=pyplot_Fig_FontProperties)
 
        '''
        -----------------------------
        Plot Line - Exp1 Potential Parents
        -----------------------------
        '''         
        with SSResults(self.obj_SSParams) as obj_Results:
            #str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category
            str_Key_Exp1__str_Stats_Category_Code = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category_Code
            str_Col_Name_Exp1__Exp1__str_Stats_Category = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__str_Stats_Category_Code)

            str_Key_Exp1__Potential_Parents_PP = globalsSS.Colnames_Parent_Offspring_Stats_METHOD_2.static_Str_Colname_Potential_Parents_PP
            str_Col_Name_Exp1__Potential_Parents_PP = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__Potential_Parents_PP)

        pass
        str_Y_Axis_df_1_Colname = str_Col_Name_Exp1__Potential_Parents_PP 
            
        ''' Subset the DF to get the correct value '''
        #str_Stats_Category = 'FUL'
        #df_2_Subset = df_2[(df_2[str_Col_Name_Exp1__Exp1__str_Stats_Category]==str_Stats_Category)]
        #float_PCrit = 0
        #df_2_Subset = df_2_Subset[(df_2[str_Col_Name_Exp1__Ne2_floatPCrit]==float_PCrit)]

        ''' if a horizontal plot line - Get the value for plotting and display '''        
        float_Exp1__Potential_Parents_PP = float(df_2[str_Y_Axis_df_1_Colname].iloc[0])
        y_Value = Decimal(float_Exp1__Potential_Parents_PP)
        
        ''' if a horizontal plot line - Get the X and Y values to actually plot ''' 
        list_X_Values = df_1[str_X_Axis_df_1_Colname].tolist()
        int_X_Values_Count = len(list_X_Values)
        int_X_Values_To_Remove = int(int_X_Values_Count*0.50) #Remove 20% of the X-Axis values
        list_X_Values = list_X_Values[:-1*int_X_Values_To_Remove] #Cut the list down to size
        list_Y_Values = [y_Value for x in list_X_Values] #Create the Y-Values list

        ''' Produce the plot line '''
        pyplot_Line_7, = matplotlib__pyplot.plot(list_X_Values, list_Y_Values, linestyle='-.', linewidth=int_Plot_Line_Width, figure=pyplot_Fig)
        
        ''' Add the description to the end of the line '''
        x_Pos = len(list_X_Values) + 0.25
        y_Pos = y_Value
        str_Line_Ending_Text = 'Exp1 NcPP ' + str(int(round(y_Value))) + ')'                             

        if bool_Plot_Theme__Dark_Blue_1:
            str_Font_Colour = 'white'
            pyplot_Fig_FontProperties = pyplot_Fig_FontProperties__Base.copy()
        pass
        
        if bool_Plot_Theme__Default:                             
            matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text)
        else:
            matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text, color=str_Font_Colour, fontproperties=pyplot_Fig_FontProperties)
 
        '''
        -----------------------------
        Plot Line - LDNe Full PCrit 0
        -----------------------------
        '''
        bool_FUL = False
        if bool_FUL:                     
            with SSResults(self.obj_SSParams) as obj_Results:
                #str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category
                str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category_Code
                str_Col_Name_Exp1__Exp1__str_Stats_Category = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__str_Stats_Category)
    
                str_Key_Exp1__Ne2_floatPCrit = globalsSS.Colnames_Ne2_Output.static_Str_Colname_Ne2_floatPCrit
                str_Col_Name_Exp1__Ne2_floatPCrit = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__Ne2_floatPCrit)
    
                str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe = globalsSS.Colnames_Ne2_Aggregation.static_Str_Colname_float_Total_Ne2_r_Sqrd_LDNe
                str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe)
            pass
            str_Y_Axis_df_1_Colname = str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe 
    
            ''' Subset the DF to get the correct value '''
            str_Stats_Category = 'FUL'
            df_2_Subset = df_2[(df_2[str_Col_Name_Exp1__Exp1__str_Stats_Category]==str_Stats_Category)]
            float_PCrit = 0
            df_2_Subset = df_2_Subset[(df_2[str_Col_Name_Exp1__Ne2_floatPCrit]==float_PCrit)]
    
            ''' if a horizontal plot line - Get the value for plotting and display '''        
            float_Total_Ne2_r_Sqrd_LDNe = df_2_Subset[str_Y_Axis_df_1_Colname].iloc[0]
            y_Value = Decimal(float_Total_Ne2_r_Sqrd_LDNe)
            if y_Value > 0 and y_Value < int_Y_Axis_Max:
                
                ''' if a horizontal plot line - Get the X and Y values to actually plot ''' 
                list_X_Values = df_1[str_X_Axis_df_1_Colname].tolist()
                int_X_Values_Count = len(list_X_Values)
                int_X_Values_To_Remove = int(int_X_Values_Count*0.1) #Remove 20% of the X-Axis values
                list_X_Values = list_X_Values[:-1*int_X_Values_To_Remove] #Cut the list down to size
                list_Y_Values = [y_Value for x in list_X_Values] #Create the Y-Values list
        
                ''' Produce the plot line '''
                pyplot_Line_8, = matplotlib__pyplot.plot(list_X_Values, list_Y_Values, linestyle='-.', linewidth=int_Plot_Line_Width, figure=pyplot_Fig)
                
                ''' Add the description to the end of the line '''
                x_Pos = len(list_X_Values) + 0.25
                y_Pos = y_Value
                str_Line_Ending_Text = 'LDNe ' + str_Stats_Category + ' (PC ' + str(float_PCrit) + '; ' + str(int(round(y_Value))) + ')'                             
        
                if bool_Plot_Theme__Dark_Blue_1:
                    str_Font_Colour = 'white'
                    pyplot_Fig_FontProperties = pyplot_Fig_FontProperties__Base.copy()
                pass
                
                if bool_Plot_Theme__Default:                             
                    matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text)
                else:
                    matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text, color=str_Font_Colour, fontproperties=pyplot_Fig_FontProperties)
                pass
            pass
        pass
 
        '''
        -----------------------------
        Plot Line - LDNe Large Mature PCrit 0
        -----------------------------
        '''         
        with SSResults(self.obj_SSParams) as obj_Results:
            #str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category
            str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category_Code
            str_Col_Name_Exp1__Exp1__str_Stats_Category = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__str_Stats_Category)

            str_Key_Exp1__Ne2_floatPCrit = globalsSS.Colnames_Ne2_Output.static_Str_Colname_Ne2_floatPCrit
            str_Col_Name_Exp1__Ne2_floatPCrit = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__Ne2_floatPCrit)

            str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe = globalsSS.Colnames_Ne2_Aggregation.static_Str_Colname_float_Total_Ne2_r_Sqrd_LDNe
            str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe)
        pass
        str_Y_Axis_df_1_Colname = str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe 

        ''' Subset the DF to get the correct value '''
        str_Stats_Category = 'LMT'
        df_2_Subset = df_2[(df_2[str_Col_Name_Exp1__Exp1__str_Stats_Category]==str_Stats_Category)]
        float_PCrit = 0
        df_2_Subset = df_2_Subset[(df_2[str_Col_Name_Exp1__Ne2_floatPCrit]==float_PCrit)]

        ''' if a horizontal plot line - Get the value for plotting and display '''        
        float_Total_Ne2_r_Sqrd_LDNe = df_2_Subset[str_Y_Axis_df_1_Colname].iloc[0]
        float_Total_Ne2_r_Sqrd_LDNe_LM = df_2_Subset[str_Y_Axis_df_1_Colname].iloc[0]
        y_Value = Decimal(float_Total_Ne2_r_Sqrd_LDNe)
        
        if y_Value > 0 and y_Value < int_Y_Axis_Max:        
            ''' if a horizontal plot line - Get the X and Y values to actually plot ''' 
            list_X_Values = df_1[str_X_Axis_df_1_Colname].tolist()
            int_X_Values_Count = len(list_X_Values)
            int_X_Values_To_Remove = int(int_X_Values_Count*0.5) #Remove 20% of the X-Axis values
            list_X_Values = list_X_Values[:-1*int_X_Values_To_Remove] #Cut the list down to size
            list_Y_Values = [y_Value for x in list_X_Values] #Create the Y-Values list
    
            ''' Produce the plot line '''
            pyplot_Line_9, = matplotlib__pyplot.plot(list_X_Values, list_Y_Values, linestyle='-.', linewidth=int_Plot_Line_Width, figure=pyplot_Fig)
            
            ''' Add the description to the end of the line '''
            x_Pos = len(list_X_Values) + 0.25
            y_Pos = y_Value
            str_Line_Ending_Text = 'LDNe ' + str_Stats_Category + ' (PC ' + str(float_PCrit) + '; ' + str(int(round(y_Value))) + ')'                             
    
            if bool_Plot_Theme__Dark_Blue_1:
                str_Font_Colour = 'white'
                pyplot_Fig_FontProperties = pyplot_Fig_FontProperties__Base.copy()
            pass
            
            if bool_Plot_Theme__Default:                             
                matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text)
            else:
                matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text, color=str_Font_Colour, fontproperties=pyplot_Fig_FontProperties)
            pass
        pass
    
        '''
        -----------------------------
        Plot Line - LDNe Large Embryo PCrit 0
        -----------------------------
        '''         
        with SSResults(self.obj_SSParams) as obj_Results:
            #str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category
            str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category_Code
            str_Col_Name_Exp1__Exp1__str_Stats_Category = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__str_Stats_Category)

            str_Key_Exp1__Ne2_floatPCrit = globalsSS.Colnames_Ne2_Output.static_Str_Colname_Ne2_floatPCrit
            str_Col_Name_Exp1__Ne2_floatPCrit = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__Ne2_floatPCrit)

            str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe = globalsSS.Colnames_Ne2_Aggregation.static_Str_Colname_float_Total_Ne2_r_Sqrd_LDNe
            str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe)
        pass
        str_Y_Axis_df_1_Colname = str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe 

        ''' Subset the DF to get the correct value '''
        str_Stats_Category = 'LEM'
        df_2_Subset = df_2[(df_2[str_Col_Name_Exp1__Exp1__str_Stats_Category]==str_Stats_Category)]
        float_PCrit = 0
        df_2_Subset = df_2_Subset[(df_2[str_Col_Name_Exp1__Ne2_floatPCrit]==float_PCrit)]

        ''' if a horizontal plot line - Get the value for plotting and display '''
        float_Total_Ne2_r_Sqrd_LDNe = df_2_Subset[str_Y_Axis_df_1_Colname].iloc[0]
        y_Value = Decimal(float_Total_Ne2_r_Sqrd_LDNe)
        
        if y_Value > 0 and y_Value < int_Y_Axis_Max:
            ''' if a horizontal plot line - Get the X and Y values to actually plot ''' 
            list_X_Values = df_1[str_X_Axis_df_1_Colname].tolist()
            int_X_Values_Count = len(list_X_Values)
            int_X_Values_To_Remove = int(int_X_Values_Count*0.9) #Remove 20% of the X-Axis values
            list_X_Values = list_X_Values[:-1*int_X_Values_To_Remove] #Cut the list down to size
            list_Y_Values = [y_Value for x in list_X_Values] #Create the Y-Values list
    
            ''' Produce the plot line '''
            pyplot_Line_10, = matplotlib__pyplot.plot(list_X_Values, list_Y_Values, linestyle='-.', linewidth=int_Plot_Line_Width, figure=pyplot_Fig)
            
            ''' Add the description to the end of the line '''
            x_Pos = len(list_X_Values) + 0.25
            y_Pos = y_Value
            str_Line_Ending_Text = 'LDNe ' + str_Stats_Category + ' (PC ' + str(float_PCrit) + '; ' + str(int(round(y_Value))) + ')'                             
    
            if bool_Plot_Theme__Dark_Blue_1:
                str_Font_Colour = 'white'
                pyplot_Fig_FontProperties = pyplot_Fig_FontProperties__Base.copy()
            pass
            
            if bool_Plot_Theme__Default:                             
                matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text)
            else:
                matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text, color=str_Font_Colour, fontproperties=pyplot_Fig_FontProperties)
            pass
        pass
        '''
        -----------------------------
        Plot Line - LDNe Small Mature PCrit 0
        -----------------------------
        '''
        bool_SMT = False
        if bool_SMT:        
            with SSResults(self.obj_SSParams) as obj_Results:
                #str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category
                str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category_Code
                str_Col_Name_Exp1__Exp1__str_Stats_Category = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__str_Stats_Category)
    
                str_Key_Exp1__Ne2_floatPCrit = globalsSS.Colnames_Ne2_Output.static_Str_Colname_Ne2_floatPCrit
                str_Col_Name_Exp1__Ne2_floatPCrit = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__Ne2_floatPCrit)
    
                str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe = globalsSS.Colnames_Ne2_Aggregation.static_Str_Colname_float_Total_Ne2_r_Sqrd_LDNe
                str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe)
            pass
            str_Y_Axis_df_1_Colname = str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe 
    
            ''' Subset the DF to get the correct value '''
            str_Stats_Category = 'SMT'
            df_2_Subset = df_2[(df_2[str_Col_Name_Exp1__Exp1__str_Stats_Category]==str_Stats_Category)]
            float_PCrit = 0
            df_2_Subset = df_2_Subset[(df_2[str_Col_Name_Exp1__Ne2_floatPCrit]==float_PCrit)]
    
            ''' if a horizontal plot line - Get the value for plotting and display '''        
            float_Total_Ne2_r_Sqrd_LDNe = df_2_Subset[str_Y_Axis_df_1_Colname].iloc[0]
            float_Total_Ne2_r_Sqrd_LDNe_LM = df_2_Subset[str_Y_Axis_df_1_Colname].iloc[0]
            y_Value = Decimal(float_Total_Ne2_r_Sqrd_LDNe)
            
            if y_Value > 0 and y_Value < int_Y_Axis_Max:
                ''' if a horizontal plot line - Get the X and Y values to actually plot ''' 
                list_X_Values = df_1[str_X_Axis_df_1_Colname].tolist()
                int_X_Values_Count = len(list_X_Values)
                int_X_Values_To_Remove = int(int_X_Values_Count*0.5) #Remove 20% of the X-Axis values
                list_X_Values = list_X_Values[:-1*int_X_Values_To_Remove] #Cut the list down to size
                list_Y_Values = [y_Value for x in list_X_Values] #Create the Y-Values list
        
                ''' Produce the plot line '''
                pyplot_Line_9, = matplotlib__pyplot.plot(list_X_Values, list_Y_Values, linestyle='-.', linewidth=int_Plot_Line_Width, figure=pyplot_Fig)
                
                ''' Add the description to the end of the line '''
                x_Pos = len(list_X_Values) + 0.25
                y_Pos = y_Value
                str_Line_Ending_Text = 'LDNe ' + str_Stats_Category + ' (PC ' + str(float_PCrit) + '; ' + str(int(round(y_Value))) + ')'                             
        
                if bool_Plot_Theme__Dark_Blue_1:
                    str_Font_Colour = 'white'
                    pyplot_Fig_FontProperties = pyplot_Fig_FontProperties__Base.copy()
                pass
                
                if bool_Plot_Theme__Default:                             
                    matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text)
                else:
                    matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text, color=str_Font_Colour, fontproperties=pyplot_Fig_FontProperties)
                pass
            pass
        pass
        '''
        -----------------------------
        Plot Line - LDNe Small Embryo PCrit 0
        -----------------------------
        ''' 
        bool_SEM = False
        if bool_SEM:        

            with SSResults(self.obj_SSParams) as obj_Results:
                #str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category
                str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category_Code
                str_Col_Name_Exp1__Exp1__str_Stats_Category = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__str_Stats_Category)
    
                str_Key_Exp1__Ne2_floatPCrit = globalsSS.Colnames_Ne2_Output.static_Str_Colname_Ne2_floatPCrit
                str_Col_Name_Exp1__Ne2_floatPCrit = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__Ne2_floatPCrit)
    
                str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe = globalsSS.Colnames_Ne2_Aggregation.static_Str_Colname_float_Total_Ne2_r_Sqrd_LDNe
                str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe)
            pass
            str_Y_Axis_df_1_Colname = str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe 
    
            ''' Subset the DF to get the correct value '''
            str_Stats_Category = 'SEM'
            df_2_Subset = df_2[(df_2[str_Col_Name_Exp1__Exp1__str_Stats_Category]==str_Stats_Category)]
            float_PCrit = 0
            df_2_Subset = df_2_Subset[(df_2[str_Col_Name_Exp1__Ne2_floatPCrit]==float_PCrit)]
    
            ''' if a horizontal plot line - Get the value for plotting and display '''
            float_Total_Ne2_r_Sqrd_LDNe = df_2_Subset[str_Y_Axis_df_1_Colname].iloc[0]
            y_Value = Decimal(float_Total_Ne2_r_Sqrd_LDNe)
            
            if y_Value > 0 and y_Value < int_Y_Axis_Max:
                ''' if a horizontal plot line - Get the X and Y values to actually plot ''' 
                list_X_Values = df_1[str_X_Axis_df_1_Colname].tolist()
                int_X_Values_Count = len(list_X_Values)
                int_X_Values_To_Remove = int(int_X_Values_Count*0.9) #Remove 20% of the X-Axis values
                list_X_Values = list_X_Values[:-1*int_X_Values_To_Remove] #Cut the list down to size
                list_Y_Values = [y_Value for x in list_X_Values] #Create the Y-Values list
        
                ''' Produce the plot line '''
                pyplot_Line_10, = matplotlib__pyplot.plot(list_X_Values, list_Y_Values, linestyle='-.', linewidth=int_Plot_Line_Width, figure=pyplot_Fig)
                
                ''' Add the description to the end of the line '''
                x_Pos = len(list_X_Values) + 0.25
                y_Pos = y_Value
                str_Line_Ending_Text = 'LDNe ' + str_Stats_Category + ' (PC ' + str(float_PCrit) + '; ' + str(int(round(y_Value))) + ')'                             
        
                if bool_Plot_Theme__Dark_Blue_1:
                    str_Font_Colour = 'white'
                    pyplot_Fig_FontProperties = pyplot_Fig_FontProperties__Base.copy()
                pass
                
                if bool_Plot_Theme__Default:                             
                    matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text)
                else:
                    matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text, color=str_Font_Colour, fontproperties=pyplot_Fig_FontProperties)
                pass
            pass
        pass
        '''
        -----------------------------
        Plot Line - LDNe Fishing Catch Proportions
        -----------------------------
        ''' 
        bool_CBP = True
        if bool_CBP:        
            str_Stats_Category = 'CBP'
            
            with SSResults(self.obj_SSParams) as obj_Results:
                #str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category
                str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category_Code
                str_Col_Name_Exp1__Exp1__str_Stats_Category = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__str_Stats_Category)
    
                str_Key_Exp1__Ne2_floatPCrit = globalsSS.Colnames_Ne2_Output.static_Str_Colname_Ne2_floatPCrit
                str_Col_Name_Exp1__Ne2_floatPCrit = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__Ne2_floatPCrit)
    
                str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe = globalsSS.Colnames_Ne2_Aggregation.static_Str_Colname_float_Total_Ne2_r_Sqrd_LDNe
                str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe)
            pass
            str_Y_Axis_df_1_Colname = str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe 
    
            ''' Subset the DF to get the correct value '''
            
            df_2_Subset = df_2[(df_2[str_Col_Name_Exp1__Exp1__str_Stats_Category]==str_Stats_Category)]
            float_PCrit = 0
            df_2_Subset = df_2_Subset[(df_2[str_Col_Name_Exp1__Ne2_floatPCrit]==float_PCrit)]
    
            ''' if a horizontal plot line - Get the value for plotting and display '''
            float_Total_Ne2_r_Sqrd_LDNe = df_2_Subset[str_Y_Axis_df_1_Colname].iloc[0]
            y_Value = Decimal(float_Total_Ne2_r_Sqrd_LDNe)
            
            if y_Value > 0 and y_Value < int_Y_Axis_Max:
                ''' if a horizontal plot line - Get the X and Y values to actually plot ''' 
                list_X_Values = df_1[str_X_Axis_df_1_Colname].tolist()
                int_X_Values_Count = len(list_X_Values)
                int_X_Values_To_Remove = int(int_X_Values_Count*0.9) #Remove 20% of the X-Axis values
                list_X_Values = list_X_Values[:-1*int_X_Values_To_Remove] #Cut the list down to size
                list_Y_Values = [y_Value for x in list_X_Values] #Create the Y-Values list
        
                ''' Produce the plot line '''
                pyplot_Line_10, = matplotlib__pyplot.plot(list_X_Values, list_Y_Values, linestyle='-.', linewidth=int_Plot_Line_Width, figure=pyplot_Fig)
                
                ''' Add the description to the end of the line '''
                x_Pos = len(list_X_Values) + 0.25
                y_Pos = y_Value
                str_Line_Ending_Text = 'LDNe ' + str_Stats_Category + ' (PC ' + str(float_PCrit) + '; ' + str(int(round(y_Value))) + ')'                             
        
                if bool_Plot_Theme__Dark_Blue_1:
                    str_Font_Colour = 'white'
                    pyplot_Fig_FontProperties = pyplot_Fig_FontProperties__Base.copy()
                pass
                
                if bool_Plot_Theme__Default:                             
                    matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text)
                else:
                    matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text, color=str_Font_Colour, fontproperties=pyplot_Fig_FontProperties)
                pass
            pass
        pass
        '''
        -----------------------------
        Plot Line - LDNe Fishing Catch Absolute Numbers
        -----------------------------
        ''' 
        bool_CBA = True
        if bool_CBA:        
            str_Stats_Category = 'CBA'
            
            with SSResults(self.obj_SSParams) as obj_Results:
                #str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category
                str_Key_Exp1__str_Stats_Category = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Stats_Category_Code
                str_Col_Name_Exp1__Exp1__str_Stats_Category = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__str_Stats_Category)
    
                str_Key_Exp1__Ne2_floatPCrit = globalsSS.Colnames_Ne2_Output.static_Str_Colname_Ne2_floatPCrit
                str_Col_Name_Exp1__Ne2_floatPCrit = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__Ne2_floatPCrit)
    
                str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe = globalsSS.Colnames_Ne2_Aggregation.static_Str_Colname_float_Total_Ne2_r_Sqrd_LDNe
                str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_2, str_Key_Exp1__float_Total_Ne2_r_Sqrd_LDNe)
            pass
            str_Y_Axis_df_1_Colname = str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe 
    
            ''' Subset the DF to get the correct value '''
            
            df_2_Subset = df_2[(df_2[str_Col_Name_Exp1__Exp1__str_Stats_Category]==str_Stats_Category)]
            float_PCrit = 0
            df_2_Subset = df_2_Subset[(df_2[str_Col_Name_Exp1__Ne2_floatPCrit]==float_PCrit)]
    
            ''' if a horizontal plot line - Get the value for plotting and display '''
            float_Total_Ne2_r_Sqrd_LDNe = df_2_Subset[str_Y_Axis_df_1_Colname].iloc[0]
            y_Value = Decimal(float_Total_Ne2_r_Sqrd_LDNe)
            
            if y_Value > 0 and y_Value < int_Y_Axis_Max:
                ''' if a horizontal plot line - Get the X and Y values to actually plot ''' 
                list_X_Values = df_1[str_X_Axis_df_1_Colname].tolist()
                int_X_Values_Count = len(list_X_Values)
                int_X_Values_To_Remove = int(int_X_Values_Count*0.9) #Remove 20% of the X-Axis values
                list_X_Values = list_X_Values[:-1*int_X_Values_To_Remove] #Cut the list down to size
                list_Y_Values = [y_Value for x in list_X_Values] #Create the Y-Values list
        
                ''' Produce the plot line '''
                pyplot_Line_10, = matplotlib__pyplot.plot(list_X_Values, list_Y_Values, linestyle='-.', linewidth=int_Plot_Line_Width, figure=pyplot_Fig)
                
                ''' Add the description to the end of the line '''
                x_Pos = len(list_X_Values) + 0.25
                y_Pos = y_Value
                str_Line_Ending_Text = 'LDNe ' + str_Stats_Category + ' (PC ' + str(float_PCrit) + '; ' + str(int(round(y_Value))) + ')'                             
        
                if bool_Plot_Theme__Dark_Blue_1:
                    str_Font_Colour = 'white'
                    pyplot_Fig_FontProperties = pyplot_Fig_FontProperties__Base.copy()
                pass
                
                if bool_Plot_Theme__Default:                             
                    matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text)
                else:
                    matplotlib__pyplot.text(x_Pos, y_Pos, str_Line_Ending_Text, color=str_Font_Colour, fontproperties=pyplot_Fig_FontProperties)
                pass
            pass
        pass

        '''
        -----------------------------
        Format Plot
        -----------------------------
        '''


        '''
        ~~~~~~~~~~~~~~~~~~
        Grid and ticks details
        ~~~~~~~~~~~~~~~~~~
        '''
        matplotlib__pyplot.grid(True, figure=pyplot_Fig)
        

        
        '''
        ~~~~~~~~~~~~~~~~~~
        Legend details
        ~~~~~~~~~~~~~~~~~~
        '''
        float_Bbox_X_Pos = 0.80
        float_Bbox_Y_Pos = 0.35
        pyplot_Fig_Legend = pyplot_Fig.legend([
                           pyplot_Line_1
                           , pyplot_Line_2
                           , pyplot_Line_3
#                            , pyplot_Line_4
#                            , pyplot_Line_5
#                            , pyplot_Line_6
#                            , pyplot_Line_7
                           ]
                          ,[
                            'Nx - Survivors per year'
                            ,'Bx - Offspring per year'
                            ,'Dx - Deaths per year'
#                             ,'Adults - Nc (' + str(int(str_Adult_Pop_Size__Nc)) + ')'
#                             ,'Ne Demo (' + str(int(float_NeDemo)) + ')'
#                             ,'Nb Demo (' + str(int(float_NbDemo)) + ')'
#                             ,'LDNe Full (PC ' + str(float_PCrit) + '; ' + str(int(float_Total_Ne2_r_Sqrd_LDNe)) + ')'
                            ]
                          ,bbox_to_anchor=(float_Bbox_X_Pos, float_Bbox_Y_Pos)
                          ,frameon = 1)
        
        
        '''
        ~~~~~~~~~~~~~~~~~~
        Label details
        ~~~~~~~~~~~~~~~~~~
        '''
        ''' Get colnames in order to get data from df_1 '''
        with SSResults(self.obj_SSParams) as obj_Results:
            str_Key_AgeNe__Sim_Pop_Size = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Pop_Size
            str_Col_Name_AgeNe__Sim_Pop_Size = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Sim_Pop_Size)
#             str_Key_AgeNe__Adult_Pop_Size = globalsSS.Colnames_AgeNe_Results.static_str_Colname_Nx_Adults
#             str_Col_Name_AgeNe__Adult_Pop_Size = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Adult_Pop_Size)
            str_Key_AgeNe__Sim_Replicates = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Sim_Replicates
            str_Col_Name_AgeNe__Sim_Replicates = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Sim_Replicates)
            str_Key_AgeNe__Loci = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Loci
            str_Col_Name_AgeNe__Loci = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_AgeNe__Loci)
            str_Key_Sim__Run_User_Defined_Folder = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Run_User_Defined_Folder
            str_Col_Name_Sim__Run_User_Defined_Folder = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Sim__Run_User_Defined_Folder)
        pass

        ''' Get values from df_1 '''
        str_Mating_Count_Replicate_Total = str(int_Mating_Count_Replicate_Total)
        int_Pop_Size__N = df_1[str_Col_Name_AgeNe__Sim_Pop_Size].iloc[0]
        str_Pop_Size__N = str(int_Pop_Size__N)
        str_Adult_Pop_Size__N = str(int_AgeNe__Adult_Pop_Size__Nx_Adults__N)
        str_Adult_Pop_Size__Nc = str(int_AgeNe__Adult_Pop_Size__Nx_Adults__Nc)
        str_Replicates = str(df_1[str_Col_Name_AgeNe__Sim_Replicates].iloc[0])
        str_Loci = str(df_1[str_Col_Name_AgeNe__Loci].iloc[0])
        str_Sim__Run_User_Defined_Folder = str(df_1[str_Col_Name_Sim__Run_User_Defined_Folder].iloc[0])

        str_Fig_Title = str('Population Demographic Profile by Mating, AgeNe Ne & Nb Demo vs LDNe from Embryo & Mature Cohorts')

        ''' Title spacing '''
        matplotlib__pyplot.subplots_adjust(top=0.87)
        ''' Font details '''          
        int_Plot_SupTitle_Size = 18
        if bool_Plot_Theme__Dark_Blue_1:
            str_Font_Colour = 'white'
        else:
            str_Font_Colour = 'blue'


        matplotlib__pyplot.suptitle(str_Fig_Title, fontsize=int_Plot_SupTitle_Size, color=str_Font_Colour, figure=pyplot_Fig)

        ''' Font details '''          
#         int_Plot_SupTitle_Size = 16
#         str_Font_Colour = 'blue'
                
        str_Plot_Title = str(
                             'Mating: ' + str_Mating_Count_Replicate_Total + ', '
                            + 'N :' + str_Pop_Size__N + ', '
                            #+ 'Nc: ' + str_Adult_Pop_Size__Nc + ', '
                            + 'Loci: ' + str_Loci + ', '
                            + 'Reps: ' + str_Replicates
                            + '\n'
                            + 'Run: ' + str_Sim__Run_User_Defined_Folder)

        ''' Font details '''          
        int_Plot_Title_Size = 16
        if bool_Plot_Theme__Dark_Blue_1:
            str_Font_Colour = 'grey'
        else:
            str_Font_Colour = 'blue'
                
        matplotlib__pyplot.title(str_Plot_Title, fontsize=int_Plot_Title_Size, color=str_Font_Colour, figure=pyplot_Fig)

        ''' Font details '''          
        int_PLot_Y_Label_Size = 16
        if bool_Plot_Theme__Dark_Blue_1:
            str_Font_Colour = 'white'
        else:
            str_Font_Colour = 'blue'
                                        
        matplotlib__pyplot.xlabel('Age Cohort (years)', fontsize=int_PLot_Y_Label_Size, color=str_Font_Colour, figure=pyplot_Fig)
        matplotlib__pyplot.ylabel('Individuals', fontsize=int_PLot_Y_Label_Size, color=str_Font_Colour, figure=pyplot_Fig)
        
        
        '''
        ~~~~~~~~~~~~~~~~~~
        Label Unique Identifier details
        ~~~~~~~~~~~~~~~~~~
        '''
        ''' Get colnames in order to get data from df_1 '''
        with SSResults(self.obj_SSParams) as obj_Results:
            str_Key_Sim__Run_User_Defined_Folder = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Run_User_Defined_Folder
            str_Col_Name_Sim__Run_User_Defined_Folder = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Sim__Run_User_Defined_Folder)
            str_Key_Sim__Unique_Run_ID = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Unique_Run_ID
            str_Col_Name_Sim__Unique_Run_ID = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df_1, str_Key_Sim__Unique_Run_ID)

        pass

        
        ''' Get values from df_1 '''
        str_Sim__Unique_Run_ID = str(df_1[str_Col_Name_Sim__Unique_Run_ID].iloc[0])
        
        str_UID_Text = str(str_Sim__Unique_Run_ID)

        ''' Font details '''          
        int_Font_Size = 6
        str_Font_Colour = 'darkgrey'
        
        ''' Add figure text '''
        #matplotlib__pyplot.figtext(.75,.99,str_UID_Text, fontsize=int_Font_Size, color=str_Font_Colour, figure=pyplot_Fig)
        matplotlib__pyplot.figtext(.70,.005,str_UID_Text, fontsize=int_Font_Size, color=str_Font_Colour, figure=pyplot_Fig)

        str_Sim__Run_User_Defined_Folder = str(df_1[str_Col_Name_Sim__Run_User_Defined_Folder].iloc[0])

        str_RUDF_Text = str(str_Sim__Run_User_Defined_Folder)

        ''' Font details '''          
        int_Font_Size = 6
        str_Font_Colour = 'darkgrey'
        
        ''' Add figure text '''
        #matplotlib__pyplot.figtext(.75,.91,str_RUDF_Text, fontsize=int_Font_Size, color=str_Font_Colour, figure=pyplot_Fig)
        matplotlib__pyplot.figtext(.70,.015,str_RUDF_Text, fontsize=int_Font_Size, color=str_Font_Colour, figure=pyplot_Fig)

        '''
        ~~~~~~~~~~~~~~~~~~
        Axis details
        ~~~~~~~~~~~~~~~~~~
        '''
#         [xmin, xmax, ymin, ymax] = matplotlib__pyplot.axis()
#         matplotlib__pyplot.xlim(1, xmax)
        
        #int_Y_Axis_Max = int_Pop_Size__N / 2
        
        #dec_Total_Ne2_r_Sqrd_LDNe_LM = Decimal(float_Total_Ne2_r_Sqrd_LDNe_LM)
        #int_Y_Axis_Max = int(math.ceil(dec_Total_Ne2_r_Sqrd_LDNe_LM / 1000)) * 1000
        
        #int_Y_Axis_Max = int(math.ceil(int_Pop_Size__N * 0.1 * 2.1 / 500)) * 500
#         df_Temp = pandas.DataFrame()
#         df_Temp["Max"] = df_2[[str_Col_Name_Exp1__float_Total_Ne2_r_Sqrd_LDNe]].max(axis=1)
#         int_Y_Axis_Max = df_Temp["Max"].max(axis=0)
#         int_Y_Axis_Max = int(math.ceil(int_Y_Axis_Max / 500)) * 500
        
        ''' int_Y_Axis_Max passed into function '''
        matplotlib__pyplot.ylim(0, int_Y_Axis_Max)
        
        '''
        ~~~~~~~~~~~~~~~~~~
        Colours - Axis & Tick
        ~~~~~~~~~~~~~~~~~~
        '''

        if bool_Plot_Theme__Dark_Blue_1:
            str_Colour = 'darkblue'

        else:
            str_Colour = 'white'
        pass        
        #ax1 = pyplot_Fig.add_subplot(111, axisbg=str_Colour)
        ax1 = pyplot_Fig.add_subplot(111)
        
#         ax.plot(range(10))
#         ax.set_xlabel('X-axis')
#         ax.set_ylabel('Y-axis')
        
#         ax.spines['bottom'].set_color('red')
#         ax.spines['top'].set_color('red')
#         ax.xaxis.label.set_color('red')
        if bool_Plot_Theme__Dark_Blue_1:
            int_Tick_Label_Size = 16
            str_X_Axis_Tick_Labels_Colour = 'white'
            str_Y_Axis_Tick_Labels_Colour = 'white'
            str_X_Axis_Tick_Major_Colour = 'white'
            str_X_Axis_Tick_Minor_Colour = 'grey'
            str_Y_Axis_Tick_Major_Colour = 'white'
            str_Y_Axis_Tick_Minor_Colour = 'grey'
        pass
    
        if bool_Plot_Theme__Default == False:
            ax1.tick_params(axis='x', colors=str_X_Axis_Tick_Labels_Colour)
            ax1.tick_params(axis='y', colors=str_Y_Axis_Tick_Labels_Colour)
    
            # We change the fontsize of minor ticks label 
            ax1.tick_params(axis='x', which='major', labelsize=int_Tick_Label_Size, color=str_X_Axis_Tick_Major_Colour)
            ax1.tick_params(axis='x', which='minor', labelsize=int_Tick_Label_Size, color=str_X_Axis_Tick_Minor_Colour)
            ax1.tick_params(axis='y', which='major', labelsize=int_Tick_Label_Size, color=str_Y_Axis_Tick_Major_Colour)
            ax1.tick_params(axis='y', which='minor', labelsize=int_Tick_Label_Size, color=str_Y_Axis_Tick_Minor_Colour) 
        pass 
    
        ''' Axis tick pointing direction '''
        ax1.tick_params(axis='x', direction='out')
        ax1.tick_params(axis='y', direction='out')
        
        ''' Specify axis ticks to be plotted '''
        ax1.xaxis.tick_bottom() 
        ax1.yaxis.tick_left() 
             
#         for ax, color in zip([ax1], ['white']):
#             matplotlib__pyplot.setp(ax.spines.values(), color=color)
#             matplotlib__pyplot.setp([ax.get_xticklines(), ax1.get_yticklines()], color=color)        
#         
#         ax1.axhline(linewidth=4, color="w") # inc. width of x-axis and color it
#         ax1.axvline(linewidth=4, color="w") # inc. width of y-axis and color it

        if bool_Plot_Theme__Dark_Blue_1:
            str_Colour = 'white'

        else:
            str_Colour = 'black'
        pass
        for axis in ['top','bottom','left','right']:
            ax1.spines[axis].set_linewidth(4)
            ax1.spines[axis].set_color(str_Colour)
 
        ax1.spines['top'].set_visible(False)
        ax1.spines['right'].set_visible(False)           

        ''' Legend '''
        
        
        pyplot_Fig_Legend_Frame = pyplot_Fig_Legend.get_frame()
        
        pyplot_Fig_Legend_Frame.set_color('white')
        ''' Legend frame background '''
        #pyplot_Fig_Legend_Frame.set_facecolor('green')
        ''' Legend frame border '''
        #pyplot_Fig_Legend_Frame.set_edgecolor('red')
        
        ''' Turn off frame outline '''
        pyplot_Fig_Legend_Frame.set_linewidth(0)
        
        # set the alpha value of the legend: it will be translucent
        pyplot_Fig_Legend_Frame.set_alpha(0.5)                                                    
        

        #ax1.grid(True, figure=pyplot_Fig)

        bool_Format_Ticks = False
        if bool_Format_Ticks:
            nparray_Major_Ticks_X = ax1.xaxis.get_majorticklocs()      
            if len(nparray_Major_Ticks_X) > 1: 
                float_Major_Ticks_X_First = nparray_Major_Ticks_X[0]
                float_Major_Ticks_X_Last = nparray_Major_Ticks_X[-1]
                float_Major_Ticks_X_Interval = 5
                nparray_Major_Ticks_X = numpy.arange(float_Major_Ticks_X_First, float_Major_Ticks_X_Last, float_Major_Ticks_X_Interval)                                              
                ax1.set_xticks(nparray_Major_Ticks_X) 
            nparray_Minor_Ticks_X = ax1.xaxis.get_minorticklocs()
            if len(nparray_Minor_Ticks_X) > 1:     
                float_Minor_Ticks_X_First = nparray_Minor_Ticks_X[0]
                float_Minor_Ticks_X_Last = nparray_Minor_Ticks_X[-1]
                float_Minor_Ticks_X_Interval = 1
                nparray_Minor_Ticks_X = numpy.arange(float_Minor_Ticks_X_First, float_Minor_Ticks_X_Last, float_Minor_Ticks_X_Interval)                                              
                ax1.set_xticks(nparray_Minor_Ticks_X, minor=True)
            
            nparray_Major_Ticks_Y = ax1.yaxis.get_majorticklocs()      
            if len(nparray_Major_Ticks_Y) > 1: 
                float_Major_Ticks_Y_First = nparray_Major_Ticks_Y[0]
                float_Major_Ticks_Y_Last = nparray_Major_Ticks_Y[-1]
                float_Major_Ticks_Y_Interval = 50
                nparray_Major_Ticks_Y = numpy.arange(float_Major_Ticks_Y_First, float_Major_Ticks_Y_Last, float_Major_Ticks_Y_Interval)                                              
                ax1.set_yticks(nparray_Major_Ticks_Y)  
                
            nparray_Minor_Ticks_Y = ax1.yaxis.get_minorticklocs()      
            if len(nparray_Minor_Ticks_Y) > 1: 
                float_Minor_Ticks_Y_First = nparray_Minor_Ticks_Y[0]
                float_Minor_Ticks_Y_Last = nparray_Minor_Ticks_Y[-1]
                float_Minor_Ticks_Y_Interval = 1
                nparray_Minor_Ticks_Y = numpy.arange(float_Minor_Ticks_Y_First, float_Minor_Ticks_Y_Last, float_Minor_Ticks_Y_Interval)                                              
                ax1.set_yticks(nparray_Minor_Ticks_Y, minor=True)                                  
            
                                                                  
            ax1.grid(which='both')                                                   
        pass
                                                  
        
        # and a corresponding grid                                                       
        
        ax1.grid(which='both')                                                            
        
        # or if you want differnet settings for the grids:                               
        ax1.grid(which='minor', alpha=0.2)                                                
        ax1.grid(which='major', alpha=0.5)   
        
              
        #DEBUG_ON
        ''' Required to change background of INTERACTIVE WINDOW only'''
        if bool_Plot_Theme__Dark_Blue_1:
            pyplot_Fig_Patch = pyplot_Fig.patch
            pyplot_Fig_Patch.set_facecolor('darkblue') # works with plt.show().  
        pass
        #matplotlib__pyplot.show()
        #DEBUG_OFF
        
                                
        return pyplot_Fig




    '''
    -------------------------------------------------------------
    AgeNe Sim Per Replicate EOR SUMMARISED Results - Plot AgeNe Demographic Population Profile
    -------------------------------------------------------------
    '''   
    def func__Plot_AgeNe_Sim_Demographic_Population_Profile__Get_Data(self, str_Search_Path):

        boolSuccess = False
       
        '''
        -------------------------------
        Specify Final Output File
        -------------------------------
        '''
        ''' Output plot '''
        str_Excel_Input_Colname_Prefix = globalsSS.Excel_Results_File_Details.static_Excel_Colname_Prefix__AgeNe_Sim_Summarise_ALL_EOR__Summary_Results
        str_Excel_Input_FileName =  globalsSS.Excel_Results_File_Details.static_Excel_FileName__AgeNe_Sim_Summarise_ALL_EOR__Summary_Results
        
        '''
        -------------------------------
        Specify Excel Input file
        -------------------------------
        '''        
        str_Input_FileName = '*' + str_Excel_Input_FileName + '*.xlsx'
        str_File_Search_Pattern = str_Input_FileName
        
        '''
        -------------------------------
        Import Excel Data to dataframee
        -------------------------------
        '''
        '''
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~
        Get & Process Input SHEET
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~
        '''
        str_Input_Excel_Sheet_Name = globalsSS.Excel_Results_File_Details.static_Excel_Colname_Prefix__AgeNe_Sim_Summarise_ALL_EOR__Summary_Results

        self.obj_Log_Default.info('Dataframing results for: ' + str_Input_FileName + ' and for SHEET: ' + str_Input_Excel_Sheet_Name) 

        bool_File_1_Located = False
        with FileHandler() as obj_FileHandler:
            bool_File_1_Located, list_Path_And_Files = obj_FileHandler.func_Locate_Files(str_Search_Path, str_File_Search_Pattern)
       
        if bool_File_1_Located:
            
            '''Process Results'''
            list_DF_1s = []            
            for str_Path_And_File in list_Path_And_Files:
                
                '''Get the data from the excel files with the specified sheet'''
                xl = pandas.ExcelFile(str_Path_And_File)
                df_1 = xl.parse(str_Input_Excel_Sheet_Name)
                list_DF_1s.append(df_1)
                
            pass

            ''' concatinate the dfs '''
            df_Aggregate = pandas.DataFrame()
            for df_New in list_DF_1s:
                '''log the results'''
                #str_Df = df_New.to_string()
                #self.obj_Log_Debug.debug('Results dataframe NEW: %s' % str_Df)
                
                #Concat DFs - Tried df.append() but it wont work
                df_Aggregate = pandas.concat([df_Aggregate,df_New], ignore_index=True)
                
                #str_Df = df_Aggregate.to_string()
                #self.obj_Log_Debug.debug('Results dataframe AGGREGATE: %s' % str_Df)

            pass

            #DEBUG_ON
            #str_Df = df_Aggregate.to_string()
            #self.obj_Log_Debug.debug('Results dataframe AGGREGATE 1: %s' % str_Df)
            #DEBUG_OFF
            
            df1 = df_Aggregate 
        else:
            self.obj_Log_Default.error('File specified could not be located; str_Search_Path = ' + str_Search_Path + '; strFileSearchPattern = ' + str_File_Search_Pattern)
        pass


        '''
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~
        Transform & Plot
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~
        '''    
        if bool_File_1_Located:
            '''
            Transform the dataframes & Plot
            '''
            dict_Fig_Copies = {
                                1:{'ColourScheme':'Default',  'Interactive_Display':True, 'Save_PNG': True, 'Save_PDF': True}
                               ,2:{'ColourScheme':'Dark_Blue','Interactive_Display':False,'Save_PNG': True, 'Save_PDF': True}
                               }
            
            for key_Dict_Fig_Copy_Params, value_Dict_Fig_Copy_Params in dict_Fig_Copies.iteritems():
                pyplot_Fig_1 = self.func__Plot_AgeNe_Sim_Demographic_Population_Profile__Process(df1, dict_Fig_Copies)            

                '''
                ~~~~~~~~~~~~~~~~~~~~~~~~~~~
                Save results
                ~~~~~~~~~~~~~~~~~~~~~~~~~~~
                '''    
                if value_Dict_Fig_Copy_Params['Save_PNG'] == True:
                    str_Plot_Output_File = self.obj_SSParams.strOutputLocation_CumulativeRun_Path + '\\' + self.obj_SSParams.strUniqueRunID + '_' + str_Excel_Input_FileName + '_' + str_Excel_Input_Colname_Prefix + '.png'
                    pyplot_Fig_1.savefig(str_Plot_Output_File, bbox_inches='tight', dpi=300)
                pass
                if value_Dict_Fig_Copy_Params['Save_PDF'] == True:
                    str_Plot_Output_File = self.obj_SSParams.strOutputLocation_CumulativeRun_Path + '\\' + self.obj_SSParams.strUniqueRunID + '_' + str_Excel_Input_FileName + '_' + str_Excel_Input_Colname_Prefix + '.pdf'
                    pyplot_Fig_1.savefig(str_Plot_Output_File, bbox_inches='tight')
                pass
        
                '''
                ~~~~~~~~~~~~~~~~~~~~~~~~~~~
                Display results
                ~~~~~~~~~~~~~~~~~~~~~~~~~~~
                '''
                if value_Dict_Fig_Copy_Params['Interactive_Display'] == True:           
                    matplotlib__pyplot.show()
                pass
            pass
        pass

                
        return boolSuccess

    def func__Plot_AgeNe_Sim_Demographic_Population_Profile__Process(self, df, dict_Fig_Copies):
        
        self.obj_Log_Default.info('Creating figure')
        
        '''
        -----------------------------
        Create figure
        -----------------------------
        '''
        pyplot_Fig = matplotlib__pyplot.figure()
        
        ''' Specify X-Axis '''
        with SSResults(self.obj_SSParams) as obj_Results:
            str_Key_AgeNe__Age = globalsSS.Colnames_AgeNe_Results.static_str_Colname_Age
            str_Col_Name_AgeNe__Age = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df, str_Key_AgeNe__Age)
        pass
        str_X_Axis_DF_Colname = str_Col_Name_AgeNe__Age
        
        '''
        -----------------------------
        Plot Line - Nx - Survivors per age cohort
        -----------------------------
        ''' 
        with SSResults(self.obj_SSParams) as obj_Results:
            str_Key_AgeNe__Nx = globalsSS.Colnames_AgeNe_Results.static_str_Colname_Nx
            str_Col_Name_AgeNe__Nx = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df, str_Key_AgeNe__Nx)
        pass
        str_Y_Axis_DF_Colname = str_Col_Name_AgeNe__Nx 
        
        pyplot_Line_1, = matplotlib__pyplot.plot(df[str_X_Axis_DF_Colname], df[str_Y_Axis_DF_Colname], figure=pyplot_Fig)

        '''
        -----------------------------
        Plot Line - Bx - Offspring per age cohort
        -----------------------------
        '''         
        with SSResults(self.obj_SSParams) as obj_Results:
            str_Key_AgeNe__Bx = globalsSS.Colnames_AgeNe_Results.static_str_Colname_Bx
            str_Col_Name_AgeNe__Bx = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df, str_Key_AgeNe__Bx)
        pass
        str_Y_Axis_DF_Colname = str_Col_Name_AgeNe__Bx 
        
        pyplot_Line_2, = matplotlib__pyplot.plot(df[str_X_Axis_DF_Colname], df[str_Y_Axis_DF_Colname], figure=pyplot_Fig)

        '''
        -----------------------------
        Plot Line - Dx - Deaths per age cohort
        -----------------------------
        '''         
        with SSResults(self.obj_SSParams) as obj_Results:
            str_Key_AgeNe__Dx = globalsSS.Colnames_AgeNe_Results.static_str_Colname_Dx
            str_Col_Name_AgeNe__Dx = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df, str_Key_AgeNe__Dx)
        pass
        str_Y_Axis_DF_Colname = str_Col_Name_AgeNe__Dx 
        
        pyplot_Line_3, = matplotlib__pyplot.plot(df[str_X_Axis_DF_Colname], df[str_Y_Axis_DF_Colname], figure=pyplot_Fig)

        '''
        -----------------------------
        Plot Line - AgeNe Ne Demographic
        -----------------------------
        '''         
        with SSResults(self.obj_SSParams) as obj_Results:
            str_Key_AgeNe__Ne_Demo = globalsSS.Colnames_AgeNe_Results.static_str_Colname_NeDemo
            str_Col_Name_AgeNe__Ne_Demo = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df, str_Key_AgeNe__Ne_Demo)
        pass
        str_Y_Axis_DF_Colname = str_Col_Name_AgeNe__Ne_Demo 

        pyplot_Line_4, = matplotlib__pyplot.plot(df[str_X_Axis_DF_Colname], df[str_Y_Axis_DF_Colname], linestyle='--', linewidth=2, figure=pyplot_Fig)
        
        ''' Get the value for the legend '''
        float_NeDemo = df[str_Y_Axis_DF_Colname].iloc[0]

        '''
        -----------------------------
        Plot Line - AgeNe Nb Demographic
        -----------------------------
        '''         
        with SSResults(self.obj_SSParams) as obj_Results:
            str_Key_AgeNe__Nb_Demo = globalsSS.Colnames_AgeNe_Results.static_str_Colname_NbDemo
            str_Col_Name_AgeNe__Nb_Demo = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df, str_Key_AgeNe__Nb_Demo)
        pass
        str_Y_Axis_DF_Colname = str_Col_Name_AgeNe__Nb_Demo 

        pyplot_Line_5, = matplotlib__pyplot.plot(df[str_X_Axis_DF_Colname], df[str_Y_Axis_DF_Colname], linestyle='-.', linewidth=2, figure=pyplot_Fig)
        
        ''' Get the value for the legend '''
        float_NbDemo = df[str_Y_Axis_DF_Colname].iloc[0]
      
        # lines.lineStyles.keys()
        # ['', ' ', 'None', '--', '-.', '-', ':']        
        #matplotlib__pyplot.annotate('Ne Demo', xy=(100, 15), xytext=(100, 18))
#         ,
#             arrowprops=dict(facecolor='black', shrink=0.05),
#             )

        '''
        -----------------------------
        Format Plot
        -----------------------------
        '''
        ''' Font details '''          
        int_Font_Size = 14
        str_Font_Colour = 'blue'
        
        '''
        ~~~~~~~~~~~~~~~~~~
        Label details
        ~~~~~~~~~~~~~~~~~~
        '''
        ''' Get colnames in order to get data from DF '''
        with SSResults(self.obj_SSParams) as obj_Results:
            str_Key_AgeNe__Sim_Pop_Size = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Pop_Size
            str_Col_Name_AgeNe__Sim_Pop_Size = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df, str_Key_AgeNe__Sim_Pop_Size)
            str_Key_AgeNe__N_Adult_Pop_Size = globalsSS.Colnames_AgeNe_Results.static_str_Colname_Nx_N_Adults
            str_Col_Name_AgeNe__N_Adult_Pop_Size = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df, str_Key_AgeNe__N_Adult_Pop_Size)
            str_Key_AgeNe__Nc_Adult_Pop_Size = globalsSS.Colnames_AgeNe_Results.static_str_Colname_Nx_Nc_Adults
            str_Col_Name_AgeNe__Nc_Adult_Pop_Size = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df, str_Key_AgeNe__Nc_Adult_Pop_Size)
            str_Key_AgeNe__Sim_Replicates = globalsSS.Colnames_COMMON_EXPERIMENT.static_Str_Colname_Sim_Replicates
            str_Col_Name_AgeNe__Sim_Replicates = obj_Results.func_Get_Dataframe_Col_Name_From_Sort_Key(df, str_Key_AgeNe__Sim_Replicates)
        pass

        ''' Get values from DF '''
        str_Pop_Size__N = str(df[str_Col_Name_AgeNe__Sim_Pop_Size].iloc[0])
        str_Adult_Pop_Size__N = str(df[str_Col_Name_AgeNe__N_Adult_Pop_Size].iloc[0])
        str_Adult_Pop_Size__Nc = str(df[str_Col_Name_AgeNe__Nc_Adult_Pop_Size].iloc[0])
        str_Replicates = str(df[str_Col_Name_AgeNe__Sim_Replicates].iloc[0])
        
        str_Title = str('AgeNe Population Demographic Profile'
                        + '\n'
                        + '(' 
                        + 'N:' + str_Pop_Size__N + ', '
                        + 'Nc: ' + str_Adult_Pop_Size__Nc + ', '
                        + 'Reps: ' + str_Replicates + ')')
                        
        matplotlib__pyplot.title(str_Title, fontsize=int_Font_Size, color=str_Font_Colour, figure=pyplot_Fig)
        matplotlib__pyplot.xlabel('Age Cohort (years)', fontsize=int_Font_Size, color=str_Font_Colour, figure=pyplot_Fig)
        matplotlib__pyplot.ylabel('Individuals', fontsize=int_Font_Size, color=str_Font_Colour, figure=pyplot_Fig)
        
        '''
        ~~~~~~~~~~~~~~~~~~
        Legend details
        ~~~~~~~~~~~~~~~~~~
        '''
        float_Bbox_X_Pos = 0.90
        float_Bbox_Y_Pos = 0.55
        pyplot_Fig.legend([pyplot_Line_1
                           , pyplot_Line_2
                           , pyplot_Line_3
                           , pyplot_Line_4
                           , pyplot_Line_5]
                          ,['Nx - Survivors per year'
                            ,'Bx - Offspring per year'
                            ,'Dx - Deaths per year'
                            ,'Ne Demo (' + str(int(float_NeDemo)) + ')'
                            ,'Nb Demo (' + str(int(float_NbDemo)) + ')']
                          ,bbox_to_anchor=(float_Bbox_X_Pos, float_Bbox_Y_Pos))
        
        '''
        ~~~~~~~~~~~~~~~~~~
        Grid and ticks details
        ~~~~~~~~~~~~~~~~~~
        '''
        matplotlib__pyplot.grid(True, figure=pyplot_Fig)
        
        '''
        ~~~~~~~~~~~~~~~~~~
        Axis details
        ~~~~~~~~~~~~~~~~~~
        '''
#         [xmin, xmax, ymin, ymax] = matplotlib__pyplot.axis()
#         matplotlib__pyplot.xlim(1, xmax)
        
        #DEBUG_ON
        #matplotlib__pyplot.show()
        #DEBUG_OFF
        
                                
        return pyplot_Fig


    def __exit__(self, type, value, traceback):
         
        pass        